
smart_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010434  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  080105c8  080105c8  000205c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ccc  08010ccc  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08010ccc  08010ccc  00020ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cd4  08010cd4  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cd4  08010cd4  00020cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cd8  08010cd8  00020cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08010cdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013288  20000218  08010ef4  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134a0  08010ef4  000334a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eac2  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004331  00000000  00000000  0004ed0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00053040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00054c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d82  00000000  00000000  000566e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212c2  00000000  00000000  0007d462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8289  00000000  00000000  0009e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001869ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008df4  00000000  00000000  00186a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080105ac 	.word	0x080105ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080105ac 	.word	0x080105ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HD44780_Init+0xec>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HD44780_Init+0xf0>)
 800100a:	2208      	movs	r2, #8
 800100c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HD44780_Init+0xf4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HD44780_Init+0xec>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d907      	bls.n	800102c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HD44780_Init+0xf4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HD44780_Init+0xf4>)
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e006      	b.n	800103a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HD44780_Init+0xf4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HD44780_Init+0xf4>)
 8001038:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800103a:	f000 f985 	bl	8001348 <DelayInit>
  HAL_Delay(50);
 800103e:	2032      	movs	r0, #50	; 0x32
 8001040:	f002 fc86 	bl	8003950 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HD44780_Init+0xf0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f943 	bl	80012d4 <ExpanderWrite>
  HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f002 fc7d 	bl	8003950 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001056:	2030      	movs	r0, #48	; 0x30
 8001058:	f000 f92b 	bl	80012b2 <Write4Bits>
  DelayUS(4500);
 800105c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001060:	f000 f99c 	bl	800139c <DelayUS>

  Write4Bits(0x03 << 4);
 8001064:	2030      	movs	r0, #48	; 0x30
 8001066:	f000 f924 	bl	80012b2 <Write4Bits>
  DelayUS(4500);
 800106a:	f241 1094 	movw	r0, #4500	; 0x1194
 800106e:	f000 f995 	bl	800139c <DelayUS>

  Write4Bits(0x03 << 4);
 8001072:	2030      	movs	r0, #48	; 0x30
 8001074:	f000 f91d 	bl	80012b2 <Write4Bits>
  DelayUS(4500);
 8001078:	f241 1094 	movw	r0, #4500	; 0x1194
 800107c:	f000 f98e 	bl	800139c <DelayUS>

  Write4Bits(0x02 << 4);
 8001080:	2020      	movs	r0, #32
 8001082:	f000 f916 	bl	80012b2 <Write4Bits>
  DelayUS(100);
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f000 f988 	bl	800139c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HD44780_Init+0xf4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8ce 	bl	8001238 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HD44780_Init+0xf8>)
 800109e:	2204      	movs	r2, #4
 80010a0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010a2:	f000 f875 	bl	8001190 <HD44780_Display>
  HD44780_Clear();
 80010a6:	f000 f82b 	bl	8001100 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HD44780_Init+0xfc>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HD44780_Init+0xfc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f8bc 	bl	8001238 <SendCommand>
  DelayUS(4500);
 80010c0:	f241 1094 	movw	r0, #4500	; 0x1194
 80010c4:	f000 f96a 	bl	800139c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010c8:	490b      	ldr	r1, [pc, #44]	; (80010f8 <HD44780_Init+0x100>)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f876 	bl	80011bc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010d0:	490a      	ldr	r1, [pc, #40]	; (80010fc <HD44780_Init+0x104>)
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 f872 	bl	80011bc <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010d8:	f000 f81d 	bl	8001116 <HD44780_Home>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000237 	.word	0x20000237
 80010e8:	20000238 	.word	0x20000238
 80010ec:	20000234 	.word	0x20000234
 80010f0:	20000235 	.word	0x20000235
 80010f4:	20000236 	.word	0x20000236
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008

08001100 <HD44780_Clear>:

void HD44780_Clear()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001104:	2001      	movs	r0, #1
 8001106:	f000 f897 	bl	8001238 <SendCommand>
  DelayUS(2000);
 800110a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800110e:	f000 f945 	bl	800139c <DelayUS>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}

08001116 <HD44780_Home>:

void HD44780_Home()
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800111a:	2002      	movs	r0, #2
 800111c:	f000 f88c 	bl	8001238 <SendCommand>
  DelayUS(2000);
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f000 f93a 	bl	800139c <DelayUS>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HD44780_SetCursor+0x5c>)
 800113e:	f107 0408 	add.w	r4, r7, #8
 8001142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HD44780_SetCursor+0x60>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	429a      	cmp	r2, r3
 8001150:	d303      	bcc.n	800115a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HD44780_SetCursor+0x60>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	3318      	adds	r3, #24
 8001160:	443b      	add	r3, r7
 8001162:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4413      	add	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001174:	b25b      	sxtb	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f85d 	bl	8001238 <SendCommand>
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	080105c8 	.word	0x080105c8
 800118c:	20000237 	.word	0x20000237

08001190 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HD44780_Display+0x28>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HD44780_Display+0x28>)
 80011a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HD44780_Display+0x28>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f843 	bl	8001238 <SendCommand>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000235 	.word	0x20000235

080011bc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f82a 	bl	8001238 <SendCommand>
  for (int i=0; i<8; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e009      	b.n	80011fe <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f82e 	bl	8001254 <SendChar>
  for (int i=0; i<8; i++)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b07      	cmp	r3, #7
 8001202:	ddf2      	ble.n	80011ea <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  while (*c)
 8001216:	e006      	b.n	8001226 <HD44780_PrintStr+0x18>
    SendChar(*c++);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f817 	bl	8001254 <SendChar>
  while (*c)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <HD44780_PrintStr+0xa>
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f812 	bl	8001270 <Send>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f804 	bl	8001270 <Send>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4313      	orrs	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f80b 	bl	80012b2 <Write4Bits>
  Write4Bits((lownib)|mode);
 800129c:	7bba      	ldrb	r2, [r7, #14]
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f804 	bl	80012b2 <Write4Bits>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f808 	bl	80012d4 <ExpanderWrite>
  PulseEnable(value);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f820 	bl	800130c <PulseEnable>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <ExpanderWrite+0x30>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 80012ea:	f107 020f 	add.w	r2, r7, #15
 80012ee:	230a      	movs	r3, #10
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	214e      	movs	r1, #78	; 0x4e
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <ExpanderWrite+0x34>)
 80012f8:	f003 fd52 	bl	8004da0 <HAL_I2C_Master_Transmit>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238
 8001308:	200002e4 	.word	0x200002e4

0800130c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ffd8 	bl	80012d4 <ExpanderWrite>
  DelayUS(20);
 8001324:	2014      	movs	r0, #20
 8001326:	f000 f839 	bl	800139c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f023 0304 	bic.w	r3, r3, #4
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffce 	bl	80012d4 <ExpanderWrite>
  DelayUS(20);
 8001338:	2014      	movs	r0, #20
 800133a:	f000 f82f 	bl	800139c <DelayUS>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <DelayInit>:

static void DelayInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <DelayInit+0x4c>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <DelayInit+0x4c>)
 8001352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001356:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <DelayInit+0x4c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <DelayInit+0x4c>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001362:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <DelayInit+0x50>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <DelayInit+0x50>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <DelayInit+0x50>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <DelayInit+0x50>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <DelayInit+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001382:	bf00      	nop
  __ASM volatile ("NOP");
 8001384:	bf00      	nop
  __ASM volatile ("NOP");
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000edf0 	.word	0xe000edf0
 8001398:	e0001000 	.word	0xe0001000

0800139c <DelayUS>:

static void DelayUS(uint32_t us)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <DelayUS+0x44>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <DelayUS+0x48>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9a      	lsrs	r2, r3, #18
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <DelayUS+0x4c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <DelayUS+0x4c>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]
  } while (cnt < cycles);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f6      	bhi.n	80013be <DelayUS+0x22>
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000034 	.word	0x20000034
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	e0001000 	.word	0xe0001000

080013ec <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//UART_HandleTypeDef UartHandle;
/* Private function prototypes -----------------------------------------------*/
char read_keypad(void)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
    char keys[4][4] = {{'1', '2', '3', 'A'},
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <read_keypad+0x184>)
 80013f4:	1d3c      	adds	r4, r7, #4
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       {'4', '5', '6', 'B'},
                       {'7', '8', '9', 'C'},
                       {'*', '0', '#', 'D'}};

    for (int i = 0; i < 4; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e0ac      	b.n	800155c <read_keypad+0x170>
    {
        // Set one column to LOW and others to HIGH
        HAL_GPIO_WritePin(C1_PORT, C1_PIN, (i == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <read_keypad+0x188>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001418:	f003 fb32 	bl	8004a80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C2_PORT, C2_PIN, (i == 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <read_keypad+0x18c>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b01      	cmp	r3, #1
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	f003 fb25 	bl	8004a80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C3_PORT, C3_PIN, (i == 2) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <read_keypad+0x190>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b02      	cmp	r3, #2
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	f003 fb18 	bl	8004a80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C4_PORT, C4_PIN, (i == 3) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <read_keypad+0x194>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b03      	cmp	r3, #3
 8001458:	bf14      	ite	ne
 800145a:	2301      	movne	r3, #1
 800145c:	2300      	moveq	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001466:	f003 fb0b 	bl	8004a80 <HAL_GPIO_WritePin>
//         printf("Row 1 Pin State: %d\n", HAL_GPIO_ReadPin(R1_PORT, R1_PIN));

        // Check each row
        if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == GPIO_PIN_RESET) {
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <read_keypad+0x198>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	4618      	mov	r0, r3
 8001472:	f003 faed 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d112      	bne.n	80014a2 <read_keypad+0xb6>
            HAL_Delay(20); // Debounce delay
 800147c:	2014      	movs	r0, #20
 800147e:	f002 fa67 	bl	8003950 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == GPIO_PIN_RESET) { // Check again
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <read_keypad+0x198>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fae1 	bl	8004a50 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <read_keypad+0xb6>
                return keys[i][0];
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3318      	adds	r3, #24
 800149a:	443b      	add	r3, r7
 800149c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014a0:	e061      	b.n	8001566 <read_keypad+0x17a>
            }
        }
        if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == GPIO_PIN_RESET) {
 80014a2:	4b39      	ldr	r3, [pc, #228]	; (8001588 <read_keypad+0x19c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fad0 	bl	8004a50 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d113      	bne.n	80014de <read_keypad+0xf2>
            HAL_Delay(20);
 80014b6:	2014      	movs	r0, #20
 80014b8:	f002 fa4a 	bl	8003950 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == GPIO_PIN_RESET) {
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <read_keypad+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fac3 	bl	8004a50 <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d106      	bne.n	80014de <read_keypad+0xf2>
                return keys[i][1];
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	3318      	adds	r3, #24
 80014d6:	443b      	add	r3, r7
 80014d8:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 80014dc:	e043      	b.n	8001566 <read_keypad+0x17a>
            }
        }
        if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <read_keypad+0x1a0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fab2 	bl	8004a50 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <read_keypad+0x12e>
            HAL_Delay(20);
 80014f2:	2014      	movs	r0, #20
 80014f4:	f002 fa2c 	bl	8003950 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <read_keypad+0x1a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001500:	4618      	mov	r0, r3
 8001502:	f003 faa5 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <read_keypad+0x12e>
                return keys[i][2];
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	3318      	adds	r3, #24
 8001512:	443b      	add	r3, r7
 8001514:	f813 3c12 	ldrb.w	r3, [r3, #-18]
 8001518:	e025      	b.n	8001566 <read_keypad+0x17a>
            }
        }
        if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET) {
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <read_keypad+0x1a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fa94 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d113      	bne.n	8001556 <read_keypad+0x16a>
            HAL_Delay(20);
 800152e:	2014      	movs	r0, #20
 8001530:	f002 fa0e 	bl	8003950 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET) {
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <read_keypad+0x1a4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fa87 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <read_keypad+0x16a>
                return keys[i][3];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	3318      	adds	r3, #24
 800154e:	443b      	add	r3, r7
 8001550:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8001554:	e007      	b.n	8001566 <read_keypad+0x17a>
    for (int i = 0; i < 4; i++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b03      	cmp	r3, #3
 8001560:	f77f af4f 	ble.w	8001402 <read_keypad+0x16>
            }
        }
    }

//    printf("Key read: %c\n", key);
    return '\0';
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	080105d8 	.word	0x080105d8
 8001574:	20000020 	.word	0x20000020
 8001578:	20000024 	.word	0x20000024
 800157c:	20000028 	.word	0x20000028
 8001580:	2000002c 	.word	0x2000002c
 8001584:	20000010 	.word	0x20000010
 8001588:	20000014 	.word	0x20000014
 800158c:	20000018 	.word	0x20000018
 8001590:	2000001c 	.word	0x2000001c

08001594 <search_card_list_Global>:

//search card in the linked list stored in the RAM of board
uint8_t search_card_list_Global(uint8_t *target_cardVal)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint8_t card_exist = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  card *current = list_start;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <search_card_list_Global+0x78>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60bb      	str	r3, [r7, #8]
  while(current != NULL){
 80015a6:	e027      	b.n	80015f8 <search_card_list_Global+0x64>
    if(current->data[0] == target_cardVal[0] && current->data[1] == target_cardVal[1] && current->data[2] == target_cardVal[2] && current->data[3] == target_cardVal[3] && current->data[4] == target_cardVal[4]){
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	791a      	ldrb	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d11e      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	795a      	ldrb	r2, [r3, #5]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d117      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	799a      	ldrb	r2, [r3, #6]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3302      	adds	r3, #2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d110      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	79da      	ldrb	r2, [r3, #7]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3303      	adds	r3, #3
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d109      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	7a1a      	ldrb	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d102      	bne.n	80015f2 <search_card_list_Global+0x5e>
      card_exist = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
      break;
 80015f0:	e005      	b.n	80015fe <search_card_list_Global+0x6a>
    }
    current = current->next;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60bb      	str	r3, [r7, #8]
  while(current != NULL){
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1d4      	bne.n	80015a8 <search_card_list_Global+0x14>
  }
  return card_exist;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	200005c8 	.word	0x200005c8

08001610 <rc522_add_card>:

//add a new card into the linked list, and update SD card
void rc522_add_card(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD,LED_Blue_Pin,1);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161c:	485c      	ldr	r0, [pc, #368]	; (8001790 <rc522_add_card+0x180>)
 800161e:	f003 fa2f 	bl	8004a80 <HAL_GPIO_WritePin>
  //reset str before reading
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e007      	b.n	8001638 <rc522_add_card+0x28>
    str[cardVal] = 0;
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <rc522_add_card+0x184>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b04      	cmp	r3, #4
 800163c:	ddf4      	ble.n	8001628 <rc522_add_card+0x18>
  }
  //if a card is read, str[0~4] will not be 0
  //repeat reading until a card is read
  while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 800163e:	e00e      	b.n	800165e <rc522_add_card+0x4e>
    status = MFRC522_Request(PICC_REQIDL, str);
 8001640:	4954      	ldr	r1, [pc, #336]	; (8001794 <rc522_add_card+0x184>)
 8001642:	2026      	movs	r0, #38	; 0x26
 8001644:	f001 fbb1 	bl	8002daa <MFRC522_Request>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <rc522_add_card+0x188>)
 800164e:	701a      	strb	r2, [r3, #0]
    status = MFRC522_Anticoll(str);
 8001650:	4850      	ldr	r0, [pc, #320]	; (8001794 <rc522_add_card+0x184>)
 8001652:	f001 fbcf 	bl	8002df4 <MFRC522_Anticoll>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <rc522_add_card+0x188>)
 800165c:	701a      	strb	r2, [r3, #0]
  while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 800165e:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <rc522_add_card+0x184>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ec      	beq.n	8001640 <rc522_add_card+0x30>
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <rc522_add_card+0x184>)
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0e8      	beq.n	8001640 <rc522_add_card+0x30>
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <rc522_add_card+0x184>)
 8001670:	789b      	ldrb	r3, [r3, #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0e4      	beq.n	8001640 <rc522_add_card+0x30>
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <rc522_add_card+0x184>)
 8001678:	78db      	ldrb	r3, [r3, #3]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0e0      	beq.n	8001640 <rc522_add_card+0x30>
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <rc522_add_card+0x184>)
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0dc      	beq.n	8001640 <rc522_add_card+0x30>
  }
  //check if the readed card already exists in the linked list
  //if it exists, keep reading until a new card is read
  uint8_t card_exist = search_card_list_Global(str);
 8001686:	4843      	ldr	r0, [pc, #268]	; (8001794 <rc522_add_card+0x184>)
 8001688:	f7ff ff84 	bl	8001594 <search_card_list_Global>
 800168c:	4603      	mov	r3, r0
 800168e:	74fb      	strb	r3, [r7, #19]
  while(card_exist){
 8001690:	e036      	b.n	8001700 <rc522_add_card+0xf0>
    //reset str before reading
    for(int cardVal = 0; cardVal < 5; cardVal++){
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e007      	b.n	80016a8 <rc522_add_card+0x98>
      str[cardVal] = 0;
 8001698:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <rc522_add_card+0x184>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
    for(int cardVal = 0; cardVal < 5; cardVal++){
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	ddf4      	ble.n	8001698 <rc522_add_card+0x88>
    }
    while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 80016ae:	e00e      	b.n	80016ce <rc522_add_card+0xbe>
      status = MFRC522_Request(PICC_REQIDL, str);
 80016b0:	4938      	ldr	r1, [pc, #224]	; (8001794 <rc522_add_card+0x184>)
 80016b2:	2026      	movs	r0, #38	; 0x26
 80016b4:	f001 fb79 	bl	8002daa <MFRC522_Request>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <rc522_add_card+0x188>)
 80016be:	701a      	strb	r2, [r3, #0]
      status = MFRC522_Anticoll(str);
 80016c0:	4834      	ldr	r0, [pc, #208]	; (8001794 <rc522_add_card+0x184>)
 80016c2:	f001 fb97 	bl	8002df4 <MFRC522_Anticoll>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <rc522_add_card+0x188>)
 80016cc:	701a      	strb	r2, [r3, #0]
    while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <rc522_add_card+0x184>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ec      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <rc522_add_card+0x184>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0e8      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <rc522_add_card+0x184>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0e4      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <rc522_add_card+0x184>)
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0e0      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <rc522_add_card+0x184>)
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0dc      	beq.n	80016b0 <rc522_add_card+0xa0>
    }
    card_exist = search_card_list_Global(str);
 80016f6:	4827      	ldr	r0, [pc, #156]	; (8001794 <rc522_add_card+0x184>)
 80016f8:	f7ff ff4c 	bl	8001594 <search_card_list_Global>
 80016fc:	4603      	mov	r3, r0
 80016fe:	74fb      	strb	r3, [r7, #19]
  while(card_exist){
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c5      	bne.n	8001692 <rc522_add_card+0x82>
  }
  //add the new card to the list, don't forget to free this memory in delete_card fn.
  card *new_card = (card *)malloc(sizeof(card));
 8001706:	200c      	movs	r0, #12
 8001708:	f00a f9e2 	bl	800bad0 <malloc>
 800170c:	4603      	mov	r3, r0
 800170e:	607b      	str	r3, [r7, #4]
  new_card->next = NULL;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	e00c      	b.n	8001736 <rc522_add_card+0x126>
    new_card->data[cardVal] = str[cardVal];
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <rc522_add_card+0x184>)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4413      	add	r3, r2
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	460a      	mov	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3301      	adds	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b04      	cmp	r3, #4
 800173a:	ddef      	ble.n	800171c <rc522_add_card+0x10c>
  }
  if(list_start == NULL){//the list is empty
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <rc522_add_card+0x18c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <rc522_add_card+0x142>
    list_start = new_card;
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <rc522_add_card+0x18c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
    list_end = new_card;
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <rc522_add_card+0x190>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e013      	b.n	800177a <rc522_add_card+0x16a>
  }else if (list_start -> next == NULL){//there is only one card in the list
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <rc522_add_card+0x18c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <rc522_add_card+0x15c>
    list_start->next = new_card;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <rc522_add_card+0x18c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
    list_end = new_card;
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <rc522_add_card+0x190>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e006      	b.n	800177a <rc522_add_card+0x16a>
  }else{//there are >= 2 cards in the list
    list_end->next = new_card;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <rc522_add_card+0x190>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
    list_end = new_card;
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <rc522_add_card+0x190>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  }
  HAL_GPIO_WritePin(GPIOD,LED_Blue_Pin,0);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <rc522_add_card+0x180>)
 8001782:	f003 f97d 	bl	8004a80 <HAL_GPIO_WritePin>

  //update registered_card_linked_list to SD card.(overwrite)
  // update_card_to_SD();
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020c00 	.word	0x40020c00
 8001794:	200005a8 	.word	0x200005a8
 8001798:	200005a4 	.word	0x200005a4
 800179c:	200005c8 	.word	0x200005c8
 80017a0:	200005cc 	.word	0x200005cc

080017a4 <rc522_delete_card>:

//assume the target card is in the list
//delete the target card from the linked list, and update SD card
void rc522_delete_card(uint8_t *target_card_value){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  card *cur = list_start;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <rc522_delete_card+0xbc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  card *prev = NULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  while(cur != NULL){
 80017b6:	e026      	b.n	8001806 <rc522_delete_card+0x62>
    if(cur->data[0] == target_card_value[0] && cur->data[1] == target_card_value[1] && cur->data[2] == target_card_value[2] && cur->data[3] == target_card_value[3] && cur->data[4] == target_card_value[4]){
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	791a      	ldrb	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d11b      	bne.n	80017fc <rc522_delete_card+0x58>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	795a      	ldrb	r2, [r3, #5]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d114      	bne.n	80017fc <rc522_delete_card+0x58>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	799a      	ldrb	r2, [r3, #6]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3302      	adds	r3, #2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d10d      	bne.n	80017fc <rc522_delete_card+0x58>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	79da      	ldrb	r2, [r3, #7]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3303      	adds	r3, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d106      	bne.n	80017fc <rc522_delete_card+0x58>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	7a1a      	ldrb	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d008      	beq.n	800180e <rc522_delete_card+0x6a>
      break; //found
    }
    prev = cur;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	60bb      	str	r3, [r7, #8]
    cur = cur->next;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  while(cur != NULL){
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1d5      	bne.n	80017b8 <rc522_delete_card+0x14>
 800180c:	e000      	b.n	8001810 <rc522_delete_card+0x6c>
      break; //found
 800180e:	bf00      	nop
  }
  if(cur == list_start){//target is the first card
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <rc522_delete_card+0xbc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	429a      	cmp	r2, r3
 8001818:	d108      	bne.n	800182c <rc522_delete_card+0x88>
    list_start = list_start->next;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <rc522_delete_card+0xbc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <rc522_delete_card+0xbc>)
 8001822:	6013      	str	r3, [r2, #0]
    free(cur);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f00a f95b 	bl	800bae0 <free>
    free(cur);
    cur == NULL;
  }
  //update registered_card_linked_list to SD card.(overwrite)
  // update_card_to_SD();
}
 800182a:	e015      	b.n	8001858 <rc522_delete_card+0xb4>
  }else if(cur == list_end){//target is the last card
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <rc522_delete_card+0xc0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d109      	bne.n	800184a <rc522_delete_card+0xa6>
    list_end = prev;
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <rc522_delete_card+0xc0>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	6013      	str	r3, [r2, #0]
    prev->next = NULL;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    free(cur);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f00a f94c 	bl	800bae0 <free>
}
 8001848:	e006      	b.n	8001858 <rc522_delete_card+0xb4>
    prev->next = cur->next;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	601a      	str	r2, [r3, #0]
    free(cur);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f00a f944 	bl	800bae0 <free>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200005c8 	.word	0x200005c8
 8001864:	200005cc 	.word	0x200005cc

08001868 <debounce>:
    HAL_GPIO_WritePin(GPIOD,LED_Orange_Pin,led_state);
    HAL_Delay(300);
  }
}

int debounce(int state){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  //pressed
  if(state){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d013      	beq.n	800189e <debounce+0x36>
    //wait for some time to debounce
    vTaskDelay(25);
 8001876:	2019      	movs	r0, #25
 8001878:	f008 fb5c 	bl	8009f34 <vTaskDelay>
    //check if still pressed
    if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){
 800187c:	2101      	movs	r1, #1
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <debounce+0x40>)
 8001880:	f003 f8e6 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <debounce+0x36>
      //wait for button to be released
      while(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){;}
 800188a:	bf00      	nop
 800188c:	2101      	movs	r1, #1
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <debounce+0x40>)
 8001890:	f003 f8de 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f8      	bne.n	800188c <debounce+0x24>
      return 1;//pressed
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <debounce+0x38>
    }
  }
  return 0;//not pressed
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40020000 	.word	0x40020000

080018ac <rc522_check>:
      vTaskDelay(25);
    }
	}
}

uint8_t rc522_check(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  status = MFRC522_Request(PICC_REQIDL, str);
 80018b2:	4910      	ldr	r1, [pc, #64]	; (80018f4 <rc522_check+0x48>)
 80018b4:	2026      	movs	r0, #38	; 0x26
 80018b6:	f001 fa78 	bl	8002daa <MFRC522_Request>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <rc522_check+0x4c>)
 80018c0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_Anticoll(str);
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <rc522_check+0x48>)
 80018c4:	f001 fa96 	bl	8002df4 <MFRC522_Anticoll>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <rc522_check+0x4c>)
 80018ce:	701a      	strb	r2, [r3, #0]
  memcpy(sNum, str, 5); 
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <rc522_check+0x50>)
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <rc522_check+0x48>)
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	6018      	str	r0, [r3, #0]
 80018da:	3304      	adds	r3, #4
 80018dc:	7019      	strb	r1, [r3, #0]
  uint8_t card_exist = search_card_list_Global(str);
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <rc522_check+0x48>)
 80018e0:	f7ff fe58 	bl	8001594 <search_card_list_Global>
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  return card_exist;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200005a8 	.word	0x200005a8
 80018f8:	200005a4 	.word	0x200005a4
 80018fc:	200005b8 	.word	0x200005b8

08001900 <keypad_check>:

uint8_t keypad_check() {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
    printf("Entered keypad_check()\n");  
 8001906:	4854      	ldr	r0, [pc, #336]	; (8001a58 <keypad_check+0x158>)
 8001908:	f00b f8e8 	bl	800cadc <puts>
    char enteredPin[5] = {0};
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	2300      	movs	r3, #0
 8001912:	733b      	strb	r3, [r7, #12]
    uint8_t entered = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
    char key;
    bool isButtonPressed = false;
 8001918:	2300      	movs	r3, #0
 800191a:	73bb      	strb	r3, [r7, #14]
    bool startInput = false;  // Flag to indicate whether to start PIN input
 800191c:	2300      	movs	r3, #0
 800191e:	737b      	strb	r3, [r7, #13]

    HD44780_Clear();
 8001920:	f7ff fbee 	bl	8001100 <HD44780_Clear>
    HD44780_SetCursor(0, 0);
 8001924:	2100      	movs	r1, #0
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fc00 	bl	800112c <HD44780_SetCursor>
    HD44780_PrintStr("Ready");
 800192c:	484b      	ldr	r0, [pc, #300]	; (8001a5c <keypad_check+0x15c>)
 800192e:	f7ff fc6e 	bl	800120e <HD44780_PrintStr>
    HAL_Delay(20);
 8001932:	2014      	movs	r0, #20
 8001934:	f002 f80c 	bl	8003950 <HAL_Delay>

    while (entered < 4) {
 8001938:	e065      	b.n	8001a06 <keypad_check+0x106>
        key = read_keypad();  // Read key input
 800193a:	f7ff fd57 	bl	80013ec <read_keypad>
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]

        if (key != '\0' && !isButtonPressed) {
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d059      	beq.n	80019fc <keypad_check+0xfc>
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d053      	beq.n	80019fc <keypad_check+0xfc>
            printf("Entered key: %c\n", key);
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4619      	mov	r1, r3
 8001958:	4841      	ldr	r0, [pc, #260]	; (8001a60 <keypad_check+0x160>)
 800195a:	f00b f839 	bl	800c9d0 <iprintf>
            if (!startInput) {
 800195e:	7b7b      	ldrb	r3, [r7, #13]
 8001960:	f083 0301 	eor.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00a      	beq.n	8001980 <keypad_check+0x80>
                HD44780_Clear();  
 800196a:	f7ff fbc9 	bl	8001100 <HD44780_Clear>
                HD44780_SetCursor(0, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fbdb 	bl	800112c <HD44780_SetCursor>
                HD44780_PrintStr("Enter PIN:");
 8001976:	483b      	ldr	r0, [pc, #236]	; (8001a64 <keypad_check+0x164>)
 8001978:	f7ff fc49 	bl	800120e <HD44780_PrintStr>
                startInput = true;  // Start showing PIN input screen and accepting PIN input
 800197c:	2301      	movs	r3, #1
 800197e:	737b      	strb	r3, [r7, #13]
            }

            if (key >= '0' && key <= '9' && entered < 4) {
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b2f      	cmp	r3, #47	; 0x2f
 8001984:	d91e      	bls.n	80019c4 <keypad_check+0xc4>
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b39      	cmp	r3, #57	; 0x39
 800198a:	d81b      	bhi.n	80019c4 <keypad_check+0xc4>
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d818      	bhi.n	80019c4 <keypad_check+0xc4>
                strncat(enteredPin, &key, 1);
 8001992:	1df9      	adds	r1, r7, #7
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	2201      	movs	r2, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f00b f92c 	bl	800cbf8 <strncat>
                entered++;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]

                HD44780_SetCursor(11 + entered - 1, 0);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	330a      	adds	r3, #10
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fbbc 	bl	800112c <HD44780_SetCursor>
                HD44780_PrintStr("*");  // Print each '*' as it is entered
 80019b4:	482c      	ldr	r0, [pc, #176]	; (8001a68 <keypad_check+0x168>)
 80019b6:	f7ff fc2a 	bl	800120e <HD44780_PrintStr>
                printf(key);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f00b f807 	bl	800c9d0 <iprintf>
 80019c2:	e018      	b.n	80019f6 <keypad_check+0xf6>
            } else if (key == 'C' && entered > 0) {
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b43      	cmp	r3, #67	; 0x43
 80019c8:	d115      	bne.n	80019f6 <keypad_check+0xf6>
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d012      	beq.n	80019f6 <keypad_check+0xf6>
                enteredPin[--entered] = '\0';
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	3310      	adds	r3, #16
 80019da:	443b      	add	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	f803 2c08 	strb.w	r2, [r3, #-8]
                HD44780_SetCursor(11 + entered, 0);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	330b      	adds	r3, #11
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb9e 	bl	800112c <HD44780_SetCursor>
                HD44780_PrintStr(" ");  // Clear the '*' from the display
 80019f0:	481e      	ldr	r0, [pc, #120]	; (8001a6c <keypad_check+0x16c>)
 80019f2:	f7ff fc0c 	bl	800120e <HD44780_PrintStr>
            }

            isButtonPressed = true;  // Mark the button as pressed
 80019f6:	2301      	movs	r3, #1
 80019f8:	73bb      	strb	r3, [r7, #14]
 80019fa:	e004      	b.n	8001a06 <keypad_check+0x106>
        } else if (key == '\0') {
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <keypad_check+0x106>
            isButtonPressed = false;  // Reset button press state
 8001a02:	2300      	movs	r3, #0
 8001a04:	73bb      	strb	r3, [r7, #14]
    while (entered < 4) {
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d996      	bls.n	800193a <keypad_check+0x3a>
        }
    }

    if (entered == 4) {
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d11d      	bne.n	8001a4e <keypad_check+0x14e>
        if (strncmp(enteredPin, setPin, 4) == 0) {
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	2204      	movs	r2, #4
 8001a18:	4915      	ldr	r1, [pc, #84]	; (8001a70 <keypad_check+0x170>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00b f8ff 	bl	800cc1e <strncmp>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <keypad_check+0x13c>
            HD44780_Clear();
 8001a26:	f7ff fb6b 	bl	8001100 <HD44780_Clear>
            HD44780_SetCursor(0, 0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fb7d 	bl	800112c <HD44780_SetCursor>
            HD44780_PrintStr("UNLOCKED");
 8001a32:	4810      	ldr	r0, [pc, #64]	; (8001a74 <keypad_check+0x174>)
 8001a34:	f7ff fbeb 	bl	800120e <HD44780_PrintStr>
            return 1;  // PIN is correct
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e009      	b.n	8001a50 <keypad_check+0x150>
        } else {
            HD44780_SetCursor(0, 1);
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fb74 	bl	800112c <HD44780_SetCursor>
            HD44780_PrintStr("Wrong PIN. Try again.");
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <keypad_check+0x178>)
 8001a46:	f7ff fbe2 	bl	800120e <HD44780_PrintStr>
            return 0;  // PIN is incorrect
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <keypad_check+0x150>
        }
    }
    return 0;  // Default return if less than 4 digits were entered
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	080105e8 	.word	0x080105e8
 8001a5c:	08010600 	.word	0x08010600
 8001a60:	08010608 	.word	0x08010608
 8001a64:	0801061c 	.word	0x0801061c
 8001a68:	08010628 	.word	0x08010628
 8001a6c:	0801062c 	.word	0x0801062c
 8001a70:	080107f8 	.word	0x080107f8
 8001a74:	08010630 	.word	0x08010630
 8001a78:	0801063c 	.word	0x0801063c

08001a7c <unlock_fn_AddCard>:
//     }
//   }
//   return 0;//do nothing
// }

void unlock_fn_AddCard(){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
  HD44780_Init(2);//lcd init, should be called in "task"
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff fab8 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001a88:	f7ff fb3a 	bl	8001100 <HD44780_Clear>
  char unlock[16] = "UNLOCK!";
 8001a8c:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <unlock_fn_AddCard+0x98>)
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a96:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
  HD44780_PrintStr(unlock);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fbb0 	bl	800120e <HD44780_PrintStr>
  char add_Card_str[16] = "Add Card";
 8001aae:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <unlock_fn_AddCard+0x9c>)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab4:	c303      	stmia	r3!, {r0, r1}
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	f107 030d 	add.w	r3, r7, #13
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f8c3 2003 	str.w	r2, [r3, #3]
  HD44780_SetCursor(0,1);//move cursor to the first word of the second line
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fb30 	bl	800112c <HD44780_SetCursor>
  HD44780_PrintStr(add_Card_str);
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb9d 	bl	800120e <HD44780_PrintStr>
  uint32_t From_begin_time = HAL_GetTick();
 8001ad4:	f001 ff30 	bl	8003938 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button 
 8001ada:	e00c      	b.n	8001af6 <unlock_fn_AddCard+0x7a>
    if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){//push button
 8001adc:	2101      	movs	r1, #1
 8001ade:	480f      	ldr	r0, [pc, #60]	; (8001b1c <unlock_fn_AddCard+0xa0>)
 8001ae0:	f002 ffb6 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff febe 	bl	8001868 <debounce>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <unlock_fn_AddCard+0x7a>
      rc522_add_card();
 8001af2:	f7ff fd8d 	bl	8001610 <rc522_add_card>
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button 
 8001af6:	f001 ff1f 	bl	8003938 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d9e9      	bls.n	8001adc <unlock_fn_AddCard+0x60>
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	08010654 	.word	0x08010654
 8001b18:	08010664 	.word	0x08010664
 8001b1c:	40020000 	.word	0x40020000

08001b20 <unlock_fn_DelCard>:

void unlock_fn_DelCard(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b098      	sub	sp, #96	; 0x60
 8001b24:	af00      	add	r7, sp, #0
  HD44780_Init(2);//lcd init, should be called in "task"
 8001b26:	2002      	movs	r0, #2
 8001b28:	f7ff fa66 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001b2c:	f7ff fae8 	bl	8001100 <HD44780_Clear>
  char unlock[16] = "UNLOCK!";
 8001b30:	4a59      	ldr	r2, [pc, #356]	; (8001c98 <unlock_fn_DelCard+0x178>)
 8001b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
  HD44780_PrintStr(unlock);
 8001b48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb5e 	bl	800120e <HD44780_PrintStr>
  char del_Card_str[16] = "Del Card";
 8001b52:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <unlock_fn_DelCard+0x17c>)
 8001b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b5a:	c303      	stmia	r3!, {r0, r1}
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	f107 0339 	add.w	r3, r7, #57	; 0x39
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f8c3 2003 	str.w	r2, [r3, #3]
  HD44780_SetCursor(0,1);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fadd 	bl	800112c <HD44780_SetCursor>
  HD44780_PrintStr(del_Card_str);
 8001b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb49 	bl	800120e <HD44780_PrintStr>
  uint32_t From_begin_time = HAL_GetTick();
 8001b7c:	f001 fedc 	bl	8003938 <HAL_GetTick>
 8001b80:	6578      	str	r0, [r7, #84]	; 0x54
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001b82:	e07b      	b.n	8001c7c <unlock_fn_DelCard+0x15c>
    if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){//make sure doing delete card
 8001b84:	2101      	movs	r1, #1
 8001b86:	4846      	ldr	r0, [pc, #280]	; (8001ca0 <unlock_fn_DelCard+0x180>)
 8001b88:	f002 ff62 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe6a 	bl	8001868 <debounce>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d070      	beq.n	8001c7c <unlock_fn_DelCard+0x15c>
      while(1){
        int count = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
        card *current = list_start;
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <unlock_fn_DelCard+0x184>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	65bb      	str	r3, [r7, #88]	; 0x58
        while(current != NULL){
 8001ba4:	e066      	b.n	8001c74 <unlock_fn_DelCard+0x154>
          HD44780_Clear();
 8001ba6:	f7ff faab 	bl	8001100 <HD44780_Clear>
          char CARD[16] = "card ";
 8001baa:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <unlock_fn_DelCard+0x188>)
 8001bac:	f107 0320 	add.w	r3, r7, #32
 8001bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bb4:	6018      	str	r0, [r3, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	8019      	strh	r1, [r3, #0]
 8001bba:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	811a      	strh	r2, [r3, #8]
          char card_number[1];
          sprintf(card_number, "%d", count);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <unlock_fn_DelCard+0x18c>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00a ffd6 	bl	800cb80 <siprintf>
          strcat(CARD, card_number);
 8001bd4:	f107 021c 	add.w	r2, r7, #28
 8001bd8:	f107 0320 	add.w	r3, r7, #32
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00a ffee 	bl	800cbc0 <strcat>
          HD44780_PrintStr(CARD);
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fb10 	bl	800120e <HD44780_PrintStr>
          uint32_t card_showTime = HAL_GetTick();
 8001bee:	f001 fea3 	bl	8003938 <HAL_GetTick>
 8001bf2:	6538      	str	r0, [r7, #80]	; 0x50
          while(HAL_GetTick() - card_showTime < 1000/portTICK_RATE_MS){//delete selected card
 8001bf4:	e030      	b.n	8001c58 <unlock_fn_DelCard+0x138>
            if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4829      	ldr	r0, [pc, #164]	; (8001ca0 <unlock_fn_DelCard+0x180>)
 8001bfa:	f002 ff29 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe31 	bl	8001868 <debounce>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d025      	beq.n	8001c58 <unlock_fn_DelCard+0x138>
              uint8_t del[5] = {current->data[0], current->data[1], current->data[2], current->data[3], current->data[4]};
 8001c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	753b      	strb	r3, [r7, #20]
 8001c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c14:	795b      	ldrb	r3, [r3, #5]
 8001c16:	757b      	strb	r3, [r7, #21]
 8001c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c1a:	799b      	ldrb	r3, [r3, #6]
 8001c1c:	75bb      	strb	r3, [r7, #22]
 8001c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c20:	79db      	ldrb	r3, [r3, #7]
 8001c22:	75fb      	strb	r3, [r7, #23]
 8001c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c26:	7a1b      	ldrb	r3, [r3, #8]
 8001c28:	763b      	strb	r3, [r7, #24]
              rc522_delete_card(del);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fdb8 	bl	80017a4 <rc522_delete_card>
              HD44780_Clear();
 8001c34:	f7ff fa64 	bl	8001100 <HD44780_Clear>
              char unlock_str[16] = "UNLOCK!";
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <unlock_fn_DelCard+0x178>)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c40:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
              HD44780_PrintStr(unlock_str);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fadc 	bl	800120e <HD44780_PrintStr>
 8001c56:	e01b      	b.n	8001c90 <unlock_fn_DelCard+0x170>
          while(HAL_GetTick() - card_showTime < 1000/portTICK_RATE_MS){//delete selected card
 8001c58:	f001 fe6e 	bl	8003938 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c66:	d3c6      	bcc.n	8001bf6 <unlock_fn_DelCard+0xd6>
              return;
            }
          }
          current = current->next;
 8001c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	65bb      	str	r3, [r7, #88]	; 0x58
          count++;
 8001c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c70:	3301      	adds	r3, #1
 8001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
        while(current != NULL){
 8001c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d195      	bne.n	8001ba6 <unlock_fn_DelCard+0x86>
      while(1){
 8001c7a:	e78e      	b.n	8001b9a <unlock_fn_DelCard+0x7a>
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001c7c:	f001 fe5c 	bl	8003938 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	f67f af7a 	bls.w	8001b84 <unlock_fn_DelCard+0x64>
        }
      }
    }
  }
}
 8001c90:	3760      	adds	r7, #96	; 0x60
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	08010654 	.word	0x08010654
 8001c9c:	08010678 	.word	0x08010678
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	200005c8 	.word	0x200005c8
 8001ca8:	08010688 	.word	0x08010688
 8001cac:	08010674 	.word	0x08010674

08001cb0 <unlock_fn_Lock>:

void unlock_fn_Lock(){
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	af00      	add	r7, sp, #0
  HD44780_Init(2);//lcd init, should be called in "task"
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff f99e 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001cbc:	f7ff fa20 	bl	8001100 <HD44780_Clear>
  char unlock[16] = "UNLOCK!";
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <unlock_fn_Lock+0x9c>)
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cca:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
  HD44780_PrintStr(unlock);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa96 	bl	800120e <HD44780_PrintStr>
  char del_Card_str[16] = "LOCK function";
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <unlock_fn_Lock+0xa0>)
 8001ce4:	1d3c      	adds	r4, r7, #4
 8001ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce8:	c407      	stmia	r4!, {r0, r1, r2}
 8001cea:	8023      	strh	r3, [r4, #0]
 8001cec:	2300      	movs	r3, #0
 8001cee:	827b      	strh	r3, [r7, #18]
  HD44780_SetCursor(0,1);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fa1a 	bl	800112c <HD44780_SetCursor>
  HD44780_PrintStr(del_Card_str);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fa87 	bl	800120e <HD44780_PrintStr>
  uint32_t From_begin_time = HAL_GetTick();
 8001d00:	f001 fe1a 	bl	8003938 <HAL_GetTick>
 8001d04:	6278      	str	r0, [r7, #36]	; 0x24
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001d06:	e013      	b.n	8001d30 <unlock_fn_Lock+0x80>
    if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <unlock_fn_Lock+0xa4>)
 8001d0c:	f002 fea0 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fda8 	bl	8001868 <debounce>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <unlock_fn_Lock+0x80>
      HD44780_Clear();
 8001d1e:	f7ff f9ef 	bl	8001100 <HD44780_Clear>
      vTaskResume(xHandle_lock_task);
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <unlock_fn_Lock+0xa8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f008 f9fc 	bl	800a124 <vTaskResume>
      unlock_bee();
 8001d2c:	f000 f84a 	bl	8001dc4 <unlock_bee>
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001d30:	f001 fe02 	bl	8003938 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d9e2      	bls.n	8001d08 <unlock_fn_Lock+0x58>
    }
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	372c      	adds	r7, #44	; 0x2c
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	08010654 	.word	0x08010654
 8001d50:	08010698 	.word	0x08010698
 8001d54:	40020000 	.word	0x40020000
 8001d58:	200005c0 	.word	0x200005c0

08001d5c <lock_bee>:

void lock_bee(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 2; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	e023      	b.n	8001db0 <lock_bee+0x54>
  {
    uint32_t bee_time = HAL_GetTick();
 8001d68:	f001 fde6 	bl	8003938 <HAL_GetTick>
 8001d6c:	6038      	str	r0, [r7, #0]
    HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d74:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <lock_bee+0x64>)
 8001d76:	f002 fe83 	bl	8004a80 <HAL_GPIO_WritePin>
    while(HAL_GetTick() - bee_time < 300/portTICK_RATE_MS){
 8001d7a:	bf00      	nop
 8001d7c:	f001 fddc 	bl	8003938 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d8a:	d3f7      	bcc.n	8001d7c <lock_bee+0x20>
      ;
    }
    HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <lock_bee+0x64>)
 8001d94:	f002 fe74 	bl	8004a80 <HAL_GPIO_WritePin>
    while(HAL_GetTick() - bee_time < 600/portTICK_RATE_MS){
 8001d98:	bf00      	nop
 8001d9a:	f001 fdcd 	bl	8003938 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001da8:	d3f7      	bcc.n	8001d9a <lock_bee+0x3e>
  for (size_t i = 0; i < 2; i++)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3301      	adds	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d9d8      	bls.n	8001d68 <lock_bee+0xc>
      ;
    }
  }
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <unlock_bee>:

void unlock_bee(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t bee_time = HAL_GetTick();
 8001dca:	f001 fdb5 	bl	8003938 <HAL_GetTick>
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <unlock_bee+0x40>)
 8001dd8:	f002 fe52 	bl	8004a80 <HAL_GPIO_WritePin>
  while(HAL_GetTick() - bee_time < 300/portTICK_RATE_MS){
 8001ddc:	bf00      	nop
 8001dde:	f001 fdab 	bl	8003938 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001dec:	d3f7      	bcc.n	8001dde <unlock_bee+0x1a>
    ;
  }
  HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <unlock_bee+0x40>)
 8001df6:	f002 fe43 	bl	8004a80 <HAL_GPIO_WritePin>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40020c00 	.word	0x40020c00

08001e08 <lock_task>:
//     }
//   }
// }


void lock_task(void *pvParameters){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HD44780_Init(2);//lcd init, should be called in "task"
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff f8f1 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001e16:	f7ff f973 	bl	8001100 <HD44780_Clear>
  uint8_t keyPressed = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while(1){
    char lock_str[16] = "LOCK!";
 8001e20:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <lock_task+0xdc>)
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2a:	6018      	str	r0, [r3, #0]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	8019      	strh	r1, [r3, #0]
 8001e30:	f107 030e 	add.w	r3, r7, #14
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	811a      	strh	r2, [r3, #8]
    HAL_GPIO_TogglePin(GPIOD, LED_Green_Pin);
 8001e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e40:	4829      	ldr	r0, [pc, #164]	; (8001ee8 <lock_task+0xe0>)
 8001e42:	f002 fe36 	bl	8004ab2 <HAL_GPIO_TogglePin>
    HD44780_PrintStr(lock_str);
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f9df 	bl	800120e <HD44780_PrintStr>
    uint8_t unlock = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    unlock = rc522_check();//str_1
 8001e56:	f7ff fd29 	bl	80018ac <rc522_check>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(unlock){
 8001e60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00b      	beq.n	8001e80 <lock_task+0x78>
      char* device = "CARD";
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <lock_task+0xe4>)
 8001e6a:	623b      	str	r3, [r7, #32]
      sendLogToServer(device);
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f000 f89d 	bl	8001fac <sendLogToServer>
      vTaskSuspend(xHandle_lock_task);
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <lock_task+0xe8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f008 f890 	bl	8009f9c <vTaskSuspend>
      lock_bee();
 8001e7c:	f7ff ff6e 	bl	8001d5c <lock_bee>
    }

    uint32_t From_begin_time = HAL_GetTick();
 8001e80:	f001 fd5a 	bl	8003938 <HAL_GetTick>
 8001e84:	61f8      	str	r0, [r7, #28]
    while(HAL_GetTick() - From_begin_time < 300/portTICK_RATE_MS){ //busy waiting 300 ms, can't use vTaskDelay
 8001e86:	e022      	b.n	8001ece <lock_task+0xc6>
        char key = read_keypad();
 8001e88:	f7ff fab0 	bl	80013ec <read_keypad>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	76fb      	strb	r3, [r7, #27]
        if (key != '\0' && !keyPressed) {
 8001e90:	7efb      	ldrb	r3, [r7, #27]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d011      	beq.n	8001eba <lock_task+0xb2>
 8001e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <lock_task+0xb2>
            keyPressed = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (keypad_check()) {
 8001ea4:	f7ff fd2c 	bl	8001900 <keypad_check>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00f      	beq.n	8001ece <lock_task+0xc6>
                vTaskSuspend(xHandle_lock_task);
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <lock_task+0xe8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f008 f872 	bl	8009f9c <vTaskSuspend>
            if (keypad_check()) {
 8001eb8:	e009      	b.n	8001ece <lock_task+0xc6>
            }
        } else if (key == '\0' && keyPressed) {
 8001eba:	7efb      	ldrb	r3, [r7, #27]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d106      	bne.n	8001ece <lock_task+0xc6>
 8001ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <lock_task+0xc6>
            keyPressed = 0; // Reset the flag when the key is released
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(HAL_GetTick() - From_begin_time < 300/portTICK_RATE_MS){ //busy waiting 300 ms, can't use vTaskDelay
 8001ece:	f001 fd33 	bl	8003938 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001edc:	d3d4      	bcc.n	8001e88 <lock_task+0x80>
    //   sendLogToServer(device);
    //   vTaskSuspend(xHandle_lock_task);
    //   lock_bee();
    // }

    HD44780_Clear();
 8001ede:	f7ff f90f 	bl	8001100 <HD44780_Clear>
  while(1){
 8001ee2:	e79d      	b.n	8001e20 <lock_task+0x18>
 8001ee4:	080106b0 	.word	0x080106b0
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	080106a8 	.word	0x080106a8
 8001ef0:	200005c0 	.word	0x200005c0

08001ef4 <unlock_task>:
  }
}

void unlock_task(void *pvParameters){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HD44780_Init(2);//lcd init, should be called in "task"
 8001efc:	2002      	movs	r0, #2
 8001efe:	f7ff f87b 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001f02:	f7ff f8fd 	bl	8001100 <HD44780_Clear>
  unlock_bee();
 8001f06:	f7ff ff5d 	bl	8001dc4 <unlock_bee>
  while(1){
    char unlock_str[16] = "UNLOCK!";
 8001f0a:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <unlock_task+0x68>)
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f14:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
    HD44780_PrintStr(unlock_str);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f971 	bl	800120e <HD44780_PrintStr>
    uint8_t fn_execute = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
    char key = read_keypad();
 8001f30:	f7ff fa5c 	bl	80013ec <read_keypad>
 8001f34:	4603      	mov	r3, r0
 8001f36:	77bb      	strb	r3, [r7, #30]
    if (key == 'A'){
 8001f38:	7fbb      	ldrb	r3, [r7, #30]
 8001f3a:	2b41      	cmp	r3, #65	; 0x41
 8001f3c:	d101      	bne.n	8001f42 <unlock_task+0x4e>
      unlock_fn_AddCard();
 8001f3e:	f7ff fd9d 	bl	8001a7c <unlock_fn_AddCard>
    }
    if (key == 'B'){
 8001f42:	7fbb      	ldrb	r3, [r7, #30]
 8001f44:	2b42      	cmp	r3, #66	; 0x42
 8001f46:	d101      	bne.n	8001f4c <unlock_task+0x58>
      unlock_fn_DelCard();
 8001f48:	f7ff fdea 	bl	8001b20 <unlock_fn_DelCard>
    }
    if (key == 'C'){
 8001f4c:	7fbb      	ldrb	r3, [r7, #30]
 8001f4e:	2b43      	cmp	r3, #67	; 0x43
 8001f50:	d101      	bne.n	8001f56 <unlock_task+0x62>
      unlock_fn_Lock();
 8001f52:	f7ff fead 	bl	8001cb0 <unlock_fn_Lock>
    }

    HD44780_Clear();
 8001f56:	f7ff f8d3 	bl	8001100 <HD44780_Clear>
  while(1){
 8001f5a:	e7d6      	b.n	8001f0a <unlock_task+0x16>
 8001f5c:	08010654 	.word	0x08010654

08001f60 <sendCommand>:
  }
}

void sendCommand(UART_HandleTypeDef *huart, char* cmd) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)cmd, strlen(cmd), 1000);
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe f930 	bl	80001d0 <strlen>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f006 f8a3 	bl	80080c6 <HAL_UART_Transmit>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <receiveResponse>:

void receiveResponse(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t bufferSize) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(huart, buffer, bufferSize, 1000);
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f006 f923 	bl	80081ea <HAL_UART_Receive>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <sendLogToServer>:

void sendLogToServer(const char* device) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8001fb2:	af02      	add	r7, sp, #8
 8001fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001fbc:	6018      	str	r0, [r3, #0]
    char httpRequest[256];
    char httpCmd[64];
    char rxBuffer[256];

    memset(rxBuffer,'\0',sizeof(rxBuffer));
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 fd9f 	bl	800bb0c <memset>
    sendCommand(&huart1, "AT+CIPSTART=\"TCP\",\"192.168.50.94\",8000\r\n");
 8001fce:	4941      	ldr	r1, [pc, #260]	; (80020d4 <sendLogToServer+0x128>)
 8001fd0:	4841      	ldr	r0, [pc, #260]	; (80020d8 <sendLogToServer+0x12c>)
 8001fd2:	f7ff ffc5 	bl	8001f60 <sendCommand>
    receiveResponse(&huart1, rxBuffer, sizeof(rxBuffer));
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fde:	4619      	mov	r1, r3
 8001fe0:	483d      	ldr	r0, [pc, #244]	; (80020d8 <sendLogToServer+0x12c>)
 8001fe2:	f7ff ffd1 	bl	8001f88 <receiveResponse>
             "Host: 192.168.1.115:8000\r\n"
             "Content-Type: application/json\r\n"
             "Content-Length: %d\r\n"
             "\r\n"
             "{\"device\":\"%s\"}",
             strlen(device) + 13, device);
 8001fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f7fe f8ee 	bl	80001d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
    snprintf(httpRequest, sizeof(httpRequest),
 8001ff6:	f103 020d 	add.w	r2, r3, #13
 8001ffa:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	4a33      	ldr	r2, [pc, #204]	; (80020dc <sendLogToServer+0x130>)
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	f00a fd81 	bl	800cb18 <sniprintf>
 
    // Calculate the length of the HTTP request
    int httpRequestLength = strlen(httpRequest);
 8002016:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe f8d8 	bl	80001d0 <strlen>
 8002020:	4603      	mov	r3, r0
 8002022:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 
    // Create the AT+CIPSEND command with the correct length
    snprintf(httpCmd, sizeof(httpCmd), "AT+CIPSEND=%d\r\n", httpRequestLength);
 8002026:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800202a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <sendLogToServer+0x134>)
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	f00a fd71 	bl	800cb18 <sniprintf>
 
    // Clear the receive buffer
    memset(rxBuffer, '\0', sizeof(rxBuffer));
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f009 fd63 	bl	800bb0c <memset>
 
    // Send the AT+CIPSEND command
    sendCommand(&huart1, httpCmd);
 8002046:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800204a:	4619      	mov	r1, r3
 800204c:	4822      	ldr	r0, [pc, #136]	; (80020d8 <sendLogToServer+0x12c>)
 800204e:	f7ff ff87 	bl	8001f60 <sendCommand>
 
    // Receive the response (wait for ">")
    receiveResponse(&huart1, rxBuffer, sizeof(rxBuffer));
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205a:	4619      	mov	r1, r3
 800205c:	481e      	ldr	r0, [pc, #120]	; (80020d8 <sendLogToServer+0x12c>)
 800205e:	f7ff ff93 	bl	8001f88 <receiveResponse>
 
    // Check if the response contains ">"
    if (strstr(rxBuffer, ">") != NULL) {
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	213e      	movs	r1, #62	; 0x3e
 8002068:	4618      	mov	r0, r3
 800206a:	f00a fdb8 	bl	800cbde <strchr>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <sendLogToServer+0xf4>
        // Clear the receive buffer
        memset(rxBuffer, '\0', sizeof(rxBuffer));
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f009 fd44 	bl	800bb0c <memset>
 
        // Send the actual HTTP request
        sendCommand(&huart1, httpRequest);
 8002084:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002088:	4619      	mov	r1, r3
 800208a:	4813      	ldr	r0, [pc, #76]	; (80020d8 <sendLogToServer+0x12c>)
 800208c:	f7ff ff68 	bl	8001f60 <sendCommand>
 
        // Receive the response
        receiveResponse(&huart1, rxBuffer, sizeof(rxBuffer));
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002098:	4619      	mov	r1, r3
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <sendLogToServer+0x12c>)
 800209c:	f7ff ff74 	bl	8001f88 <receiveResponse>
    }

    memset(rxBuffer, '\0', sizeof(rxBuffer));
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f009 fd2e 	bl	800bb0c <memset>
    sendCommand(&huart1, "AT+CIPCLOSE\r\n");
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <sendLogToServer+0x138>)
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <sendLogToServer+0x12c>)
 80020b4:	f7ff ff54 	bl	8001f60 <sendCommand>
    receiveResponse(&huart1, rxBuffer, sizeof(rxBuffer));
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c0:	4619      	mov	r1, r3
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <sendLogToServer+0x12c>)
 80020c4:	f7ff ff60 	bl	8001f88 <receiveResponse>
}
 80020c8:	bf00      	nop
 80020ca:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	080106c0 	.word	0x080106c0
 80020d8:	200004d8 	.word	0x200004d8
 80020dc:	080106ec 	.word	0x080106ec
 80020e0:	08010760 	.word	0x08010760
 80020e4:	08010770 	.word	0x08010770

080020e8 <vEsp8266Init>:

void vEsp8266Init(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020ee:	af00      	add	r7, sp, #0
      char rxBuffer[512];
 
      memset(rxBuffer,'\0',sizeof(rxBuffer));
 80020f0:	463b      	mov	r3, r7
 80020f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f009 fd07 	bl	800bb0c <memset>
      sendCommand(&huart2, "AT\r\n");
 80020fe:	4923      	ldr	r1, [pc, #140]	; (800218c <vEsp8266Init+0xa4>)
 8002100:	4823      	ldr	r0, [pc, #140]	; (8002190 <vEsp8266Init+0xa8>)
 8002102:	f7ff ff2d 	bl	8001f60 <sendCommand>
      receiveResponse(&huart2, rxBuffer, sizeof(rxBuffer));
 8002106:	463b      	mov	r3, r7
 8002108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800210c:	4619      	mov	r1, r3
 800210e:	4820      	ldr	r0, [pc, #128]	; (8002190 <vEsp8266Init+0xa8>)
 8002110:	f7ff ff3a 	bl	8001f88 <receiveResponse>
 
      memset(rxBuffer,'\0',sizeof(rxBuffer));
 8002114:	463b      	mov	r3, r7
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f009 fcf5 	bl	800bb0c <memset>
      sendCommand(&huart2, "AT+CWMODE=1\r\n");
 8002122:	491c      	ldr	r1, [pc, #112]	; (8002194 <vEsp8266Init+0xac>)
 8002124:	481a      	ldr	r0, [pc, #104]	; (8002190 <vEsp8266Init+0xa8>)
 8002126:	f7ff ff1b 	bl	8001f60 <sendCommand>
      receiveResponse(&huart2, rxBuffer, sizeof(rxBuffer));
 800212a:	463b      	mov	r3, r7
 800212c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002130:	4619      	mov	r1, r3
 8002132:	4817      	ldr	r0, [pc, #92]	; (8002190 <vEsp8266Init+0xa8>)
 8002134:	f7ff ff28 	bl	8001f88 <receiveResponse>
 
      memset(rxBuffer,'\0',sizeof(rxBuffer));
 8002138:	463b      	mov	r3, r7
 800213a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f009 fce3 	bl	800bb0c <memset>
      sendCommand(&huart2, "AT+CWJAP=\"92902\",\"00092902\"\r\n");
 8002146:	4914      	ldr	r1, [pc, #80]	; (8002198 <vEsp8266Init+0xb0>)
 8002148:	4811      	ldr	r0, [pc, #68]	; (8002190 <vEsp8266Init+0xa8>)
 800214a:	f7ff ff09 	bl	8001f60 <sendCommand>
      receiveResponse(&huart2, rxBuffer, sizeof(rxBuffer));
 800214e:	463b      	mov	r3, r7
 8002150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002154:	4619      	mov	r1, r3
 8002156:	480e      	ldr	r0, [pc, #56]	; (8002190 <vEsp8266Init+0xa8>)
 8002158:	f7ff ff16 	bl	8001f88 <receiveResponse>
 
 
      memset(rxBuffer,'\0',sizeof(rxBuffer));
 800215c:	463b      	mov	r3, r7
 800215e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f009 fcd1 	bl	800bb0c <memset>
      sendCommand(&huart2, "AT+CIPMUX=0\r\n");
 800216a:	490c      	ldr	r1, [pc, #48]	; (800219c <vEsp8266Init+0xb4>)
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <vEsp8266Init+0xa8>)
 800216e:	f7ff fef7 	bl	8001f60 <sendCommand>
      receiveResponse(&huart2, rxBuffer, sizeof(rxBuffer));
 8002172:	463b      	mov	r3, r7
 8002174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002178:	4619      	mov	r1, r3
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <vEsp8266Init+0xa8>)
 800217c:	f7ff ff04 	bl	8001f88 <receiveResponse>
}
 8002180:	bf00      	nop
 8002182:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	08010780 	.word	0x08010780
 8002190:	2000051c 	.word	0x2000051c
 8002194:	08010788 	.word	0x08010788
 8002198:	08010798 	.word	0x08010798
 800219c:	080107b8 	.word	0x080107b8

080021a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint64_t CardSize = 0;
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b2:	f001 fb8b 	bl	80038cc <HAL_Init>

  /* USER CODE BEGIN Init */
  xQue1=xQueueCreate(5,sizeof(int));
 80021b6:	2200      	movs	r2, #0
 80021b8:	2104      	movs	r1, #4
 80021ba:	2005      	movs	r0, #5
 80021bc:	f007 f8aa 	bl	8009314 <xQueueGenericCreate>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a29      	ldr	r2, [pc, #164]	; (8002268 <main+0xc8>)
 80021c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c6:	f000 f861 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ca:	f000 fafd 	bl	80027c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80021ce:	f000 fac5 	bl	800275c <MX_DMA_Init>
  MX_SPI1_Init();
 80021d2:	f000 f981 	bl	80024d8 <MX_SPI1_Init>
  MX_I2C1_Init();
 80021d6:	f000 f923 	bl	8002420 <MX_I2C1_Init>
  MX_I2S3_Init();
 80021da:	f000 f94f 	bl	800247c <MX_I2S3_Init>
  MX_USART2_UART_Init();
 80021de:	f000 fa69 	bl	80026b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80021e2:	f000 f8bd 	bl	8002360 <MX_ADC1_Init>
  MX_SPI2_Init();
 80021e6:	f000 f9ad 	bl	8002544 <MX_SPI2_Init>
  MX_TIM2_Init();
 80021ea:	f000 f9e1 	bl	80025b0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80021ee:	f000 fa8b 	bl	8002708 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80021f2:	f000 fa35 	bl	8002660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vEsp8266Init(); //WiFi init
 80021f6:	f7ff ff77 	bl	80020e8 <vEsp8266Init>
  MFRC522_Init();//card reader init
 80021fa:	f000 fcdd 	bl	8002bb8 <MFRC522_Init>
  card *default_card = (card *)malloc(sizeof(card));
 80021fe:	200c      	movs	r0, #12
 8002200:	f009 fc66 	bl	800bad0 <malloc>
 8002204:	4603      	mov	r3, r0
 8002206:	607b      	str	r3, [r7, #4]
  default_card->next = NULL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  default_card->data[0] = 211;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	22d3      	movs	r2, #211	; 0xd3
 8002212:	711a      	strb	r2, [r3, #4]
  default_card->data[1] = 113;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2271      	movs	r2, #113	; 0x71
 8002218:	715a      	strb	r2, [r3, #5]
  default_card->data[2] = 208;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	22d0      	movs	r2, #208	; 0xd0
 800221e:	719a      	strb	r2, [r3, #6]
  default_card->data[3] = 2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	71da      	strb	r2, [r3, #7]
  default_card->data[4] = 112;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2270      	movs	r2, #112	; 0x70
 800222a:	721a      	strb	r2, [r3, #8]
  list_start = default_card;
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <main+0xcc>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  list_end = default_card;
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <main+0xd0>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6013      	str	r3, [r2, #0]
  //rc522-test
  // xTaskCreate(rc522_test, "rc522_test_task", 128, NULL, 1, &xHandle_1);

  //because configUSE_TIME_SLICING = 1
  //if priorities of lock_task and unlock_task are the same, they will be executed in turn. 
  xTaskCreate(lock_task, "lock_task", 128, NULL, 2, &xHandle_lock_task);
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <main+0xd4>)
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <main+0xd8>)
 8002246:	480d      	ldr	r0, [pc, #52]	; (800227c <main+0xdc>)
 8002248:	f007 fd36 	bl	8009cb8 <xTaskCreate>
  xTaskCreate(unlock_task, "unlock_task", 128, NULL, 1, &xHandle_unlock_task);
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <main+0xe0>)
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2301      	movs	r3, #1
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	490a      	ldr	r1, [pc, #40]	; (8002284 <main+0xe4>)
 800225a:	480b      	ldr	r0, [pc, #44]	; (8002288 <main+0xe8>)
 800225c:	f007 fd2c 	bl	8009cb8 <xTaskCreate>
	
  vTaskStartScheduler();
 8002260:	f007 ffbe 	bl	800a1e0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8002264:	e7fe      	b.n	8002264 <main+0xc4>
 8002266:	bf00      	nop
 8002268:	200005d4 	.word	0x200005d4
 800226c:	200005c8 	.word	0x200005c8
 8002270:	200005cc 	.word	0x200005cc
 8002274:	200005c0 	.word	0x200005c0
 8002278:	080107c8 	.word	0x080107c8
 800227c:	08001e09 	.word	0x08001e09
 8002280:	200005c4 	.word	0x200005c4
 8002284:	080107d4 	.word	0x080107d4
 8002288:	08001ef5 	.word	0x08001ef5

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	; 0x50
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2230      	movs	r2, #48	; 0x30
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f009 fc36 	bl	800bb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <SystemClock_Config+0xcc>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <SystemClock_Config+0xcc>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <SystemClock_Config+0xcc>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <SystemClock_Config+0xd0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a21      	ldr	r2, [pc, #132]	; (800235c <SystemClock_Config+0xd0>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <SystemClock_Config+0xd0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f2:	2302      	movs	r3, #2
 80022f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022fc:	2304      	movs	r3, #4
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002300:	235a      	movs	r3, #90	; 0x5a
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002304:	2302      	movs	r3, #2
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002308:	2304      	movs	r3, #4
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230c:	f107 0320 	add.w	r3, r7, #32
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fced 	bl	8005cf0 <HAL_RCC_OscConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800231c:	f000 fb90 	bl	8002a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002320:	230f      	movs	r3, #15
 8002322:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002324:	2302      	movs	r3, #2
 8002326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800232c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002336:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2102      	movs	r1, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f003 ff4e 	bl	80061e0 <HAL_RCC_ClockConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800234a:	f000 fb79 	bl	8002a40 <Error_Handler>
  }
}
 800234e:	bf00      	nop
 8002350:	3750      	adds	r7, #80	; 0x50
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000

08002360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002366:	463b      	mov	r3, r7
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <MX_ADC1_Init+0xb4>)
 8002374:	4a28      	ldr	r2, [pc, #160]	; (8002418 <MX_ADC1_Init+0xb8>)
 8002376:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <MX_ADC1_Init+0xb4>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <MX_ADC1_Init+0xb4>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <MX_ADC1_Init+0xb4>)
 8002386:	2204      	movs	r2, #4
 8002388:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <MX_ADC1_Init+0xb4>)
 800238c:	2204      	movs	r2, #4
 800238e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <MX_ADC1_Init+0xb4>)
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_ADC1_Init+0xb4>)
 800239a:	2200      	movs	r2, #0
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023a0:	4a1e      	ldr	r2, [pc, #120]	; (800241c <MX_ADC1_Init+0xbc>)
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023be:	4815      	ldr	r0, [pc, #84]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023c0:	f001 faea 	bl	8003998 <HAL_ADC_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80023ca:	f000 fb39 	bl	8002a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023ce:	2308      	movs	r3, #8
 80023d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023da:	463b      	mov	r3, r7
 80023dc:	4619      	mov	r1, r3
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023e0:	f001 fb1e 	bl	8003a20 <HAL_ADC_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80023ea:	f000 fb29 	bl	8002a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80023ee:	2309      	movs	r3, #9
 80023f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80023f2:	2302      	movs	r3, #2
 80023f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f6:	463b      	mov	r3, r7
 80023f8:	4619      	mov	r1, r3
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <MX_ADC1_Init+0xb4>)
 80023fc:	f001 fb10 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002406:	f000 fb1b 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000023c 	.word	0x2000023c
 8002418:	40012000 	.word	0x40012000
 800241c:	0f000001 	.word	0x0f000001

08002420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_I2C1_Init+0x50>)
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <MX_I2C1_Init+0x54>)
 8002428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_I2C1_Init+0x50>)
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <MX_I2C1_Init+0x58>)
 800242e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_I2C1_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_I2C1_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_I2C1_Init+0x50>)
 800243e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <MX_I2C1_Init+0x50>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_I2C1_Init+0x50>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <MX_I2C1_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_I2C1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <MX_I2C1_Init+0x50>)
 800245e:	f002 fb5b 	bl	8004b18 <HAL_I2C_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002468:	f000 faea 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200002e4 	.word	0x200002e4
 8002474:	40005400 	.word	0x40005400
 8002478:	000186a0 	.word	0x000186a0

0800247c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_I2S3_Init+0x54>)
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <MX_I2S3_Init+0x58>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2S3_Init+0x54>)
 8002488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <MX_I2S3_Init+0x54>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_I2S3_Init+0x54>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_I2S3_Init+0x54>)
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_I2S3_Init+0x54>)
 80024a4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80024a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_I2S3_Init+0x54>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_I2S3_Init+0x54>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_I2S3_Init+0x54>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_I2S3_Init+0x54>)
 80024be:	f002 ff77 	bl	80053b0 <HAL_I2S_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80024c8:	f000 faba 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000338 	.word	0x20000338
 80024d4:	40003c00 	.word	0x40003c00

080024d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <MX_SPI1_Init+0x64>)
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <MX_SPI1_Init+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <MX_SPI1_Init+0x64>)
 80024e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_SPI1_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_SPI1_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_SPI1_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_SPI1_Init+0x64>)
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_SPI1_Init+0x64>)
 800250c:	2220      	movs	r2, #32
 800250e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <MX_SPI1_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_SPI1_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <MX_SPI1_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_SPI1_Init+0x64>)
 8002524:	220a      	movs	r2, #10
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <MX_SPI1_Init+0x64>)
 800252a:	f004 f9eb 	bl	8006904 <HAL_SPI_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002534:	f000 fa84 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200003e0 	.word	0x200003e0
 8002540:	40013000 	.word	0x40013000

08002544 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <MX_SPI2_Init+0x64>)
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <MX_SPI2_Init+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_SPI2_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_SPI2_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002574:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002578:	2220      	movs	r2, #32
 800257a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <MX_SPI2_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <MX_SPI2_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002590:	220a      	movs	r2, #10
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_SPI2_Init+0x64>)
 8002596:	f004 f9b5 	bl	8006904 <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025a0:	f000 fa4e 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000438 	.word	0x20000438
 80025ac:	40003800 	.word	0x40003800

080025b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b6:	f107 0320 	add.w	r3, r7, #32
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <MX_TIM2_Init+0xac>)
 80025d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <MX_TIM2_Init+0xac>)
 80025dc:	2259      	movs	r2, #89	; 0x59
 80025de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <MX_TIM2_Init+0xac>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_TIM2_Init+0xac>)
 80025e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_TIM2_Init+0xac>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_TIM2_Init+0xac>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <MX_TIM2_Init+0xac>)
 80025fc:	f004 fff4 	bl	80075e8 <HAL_TIM_PWM_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002606:	f000 fa1b 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002612:	f107 0320 	add.w	r3, r7, #32
 8002616:	4619      	mov	r1, r3
 8002618:	4810      	ldr	r0, [pc, #64]	; (800265c <MX_TIM2_Init+0xac>)
 800261a:	f005 fc77 	bl	8007f0c <HAL_TIMEx_MasterConfigSynchronization>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002624:	f000 fa0c 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002628:	2360      	movs	r3, #96	; 0x60
 800262a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	2200      	movs	r2, #0
 800263c:	4619      	mov	r1, r3
 800263e:	4807      	ldr	r0, [pc, #28]	; (800265c <MX_TIM2_Init+0xac>)
 8002640:	f005 f92a 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800264a:	f000 f9f9 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800264e:	4803      	ldr	r0, [pc, #12]	; (800265c <MX_TIM2_Init+0xac>)
 8002650:	f000 fe52 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 8002654:	bf00      	nop
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000490 	.word	0x20000490

08002660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <MX_USART1_UART_Init+0x50>)
 8002668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_USART1_UART_Init+0x4c>)
 8002698:	f005 fcc8 	bl	800802c <HAL_UART_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026a2:	f000 f9cd 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200004d8 	.word	0x200004d8
 80026b0:	40011000 	.word	0x40011000

080026b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <MX_USART2_UART_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_USART2_UART_Init+0x4c>)
 80026ec:	f005 fc9e 	bl	800802c <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026f6:	f000 f9a3 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000051c 	.word	0x2000051c
 8002704:	40004400 	.word	0x40004400

08002708 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <MX_USART3_UART_Init+0x50>)
 8002710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002740:	f005 fc74 	bl	800802c <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800274a:	f000 f979 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000560 	.word	0x20000560
 8002758:	40004800 	.word	0x40004800

0800275c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_DMA_Init+0x68>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <MX_DMA_Init+0x68>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_DMA_Init+0x68>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <MX_DMA_Init+0x68>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <MX_DMA_Init+0x68>)
 8002788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <MX_DMA_Init+0x68>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2010      	movs	r0, #16
 80027a0:	f001 fc14 	bl	8003fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027a4:	2010      	movs	r0, #16
 80027a6:	f001 fc2d 	bl	8004004 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	2038      	movs	r0, #56	; 0x38
 80027b0:	f001 fc0c 	bl	8003fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027b4:	2038      	movs	r0, #56	; 0x38
 80027b6:	f001 fc25 	bl	8004004 <HAL_NVIC_EnableIRQ>

}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <MX_GPIO_Init+0x1a0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a60      	ldr	r2, [pc, #384]	; (8002968 <MX_GPIO_Init+0x1a0>)
 80027e8:	f043 0310 	orr.w	r3, r3, #16
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <MX_GPIO_Init+0x1a0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a59      	ldr	r2, [pc, #356]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b57      	ldr	r3, [pc, #348]	; (8002968 <MX_GPIO_Init+0x1a0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b53      	ldr	r3, [pc, #332]	; (8002968 <MX_GPIO_Init+0x1a0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a52      	ldr	r2, [pc, #328]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b50      	ldr	r3, [pc, #320]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a4b      	ldr	r2, [pc, #300]	; (8002968 <MX_GPIO_Init+0x1a0>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b45      	ldr	r3, [pc, #276]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a44      	ldr	r2, [pc, #272]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b42      	ldr	r3, [pc, #264]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a3d      	ldr	r2, [pc, #244]	; (8002968 <MX_GPIO_Init+0x1a0>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <MX_GPIO_Init+0x1a0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|C1_Pin|C2_Pin|C3_Pin
 8002886:	2200      	movs	r2, #0
 8002888:	f647 0112 	movw	r1, #30738	; 0x7812
 800288c:	4837      	ldr	r0, [pc, #220]	; (800296c <MX_GPIO_Init+0x1a4>)
 800288e:	f002 f8f7 	bl	8004a80 <HAL_GPIO_WritePin>
                          |C4_Pin|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BOOT1_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	f641 0104 	movw	r1, #6148	; 0x1804
 8002898:	4835      	ldr	r0, [pc, #212]	; (8002970 <MX_GPIO_Init+0x1a8>)
 800289a:	f002 f8f1 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|Bee_Pin|LED_Green_Pin|LED_Orange_Pin
 800289e:	2200      	movs	r2, #0
 80028a0:	f64f 1180 	movw	r1, #63872	; 0xf980
 80028a4:	4833      	ldr	r0, [pc, #204]	; (8002974 <MX_GPIO_Init+0x1ac>)
 80028a6:	f002 f8eb 	bl	8004a80 <HAL_GPIO_WritePin>
                          |LED_Red_Pin|LED_Blue_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 C1_Pin C2_Pin C3_Pin
                           C4_Pin PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|C1_Pin|C2_Pin|C3_Pin
 80028aa:	f647 0312 	movw	r3, #30738	; 0x7812
 80028ae:	61fb      	str	r3, [r7, #28]
                          |C4_Pin|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	482a      	ldr	r0, [pc, #168]	; (800296c <MX_GPIO_Init+0x1a4>)
 80028c4:	f001 ff28 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	4827      	ldr	r0, [pc, #156]	; (8002978 <MX_GPIO_Init+0x1b0>)
 80028dc:	f001 ff1c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB11 PB12 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80028e0:	f641 0304 	movw	r3, #6148	; 0x1804
 80028e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e6:	2301      	movs	r3, #1
 80028e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	4619      	mov	r1, r3
 80028f8:	481d      	ldr	r0, [pc, #116]	; (8002970 <MX_GPIO_Init+0x1a8>)
 80028fa:	f001 ff0d 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80028fe:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002908:	2301      	movs	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	4816      	ldr	r0, [pc, #88]	; (800296c <MX_GPIO_Init+0x1a4>)
 8002914:	f001 ff00 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 Bee_Pin LED_Green_Pin LED_Orange_Pin
                           LED_Red_Pin LED_Blue_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|Bee_Pin|LED_Green_Pin|LED_Orange_Pin
 8002918:	f64f 1380 	movw	r3, #63872	; 0xf980
 800291c:	61fb      	str	r3, [r7, #28]
                          |LED_Red_Pin|LED_Blue_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4810      	ldr	r0, [pc, #64]	; (8002974 <MX_GPIO_Init+0x1ac>)
 8002932:	f001 fef1 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800293a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4619      	mov	r1, r3
 800294a:	4808      	ldr	r0, [pc, #32]	; (800296c <MX_GPIO_Init+0x1a4>)
 800294c:	f001 fee4 	bl	8004718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	210f      	movs	r1, #15
 8002954:	2006      	movs	r0, #6
 8002956:	f001 fb39 	bl	8003fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800295a:	2006      	movs	r0, #6
 800295c:	f001 fb52 	bl	8004004 <HAL_NVIC_EnableIRQ>

}
 8002960:	bf00      	nop
 8002962:	3730      	adds	r7, #48	; 0x30
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	40021000 	.word	0x40021000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40020000 	.word	0x40020000

0800297c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	if (GPIO_Pin == GPIO_PIN_0) {
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d137      	bne.n	80029fc <HAL_GPIO_EXTI_Callback+0x80>
		xHigherPriorityTaskWoken = pdFALSE;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
		if (flag == pdTRUE) {
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x88>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_GPIO_EXTI_Callback+0x2c>
			xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x8c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f107 020c 	add.w	r2, r7, #12
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f006 feac 	bl	8009700 <xQueueGiveFromISR>
		} else {
			//do nothing
		}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80029a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ac:	4817      	ldr	r0, [pc, #92]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x90>)
 80029ae:	f002 f880 	bl	8004ab2 <HAL_GPIO_TogglePin>
		uint8_t data_1 = 0x5f | 0x80;
 80029b2:	23df      	movs	r3, #223	; 0xdf
 80029b4:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2108      	movs	r1, #8
 80029ba:	4815      	ldr	r0, [pc, #84]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x94>)
 80029bc:	f002 f860 	bl	8004a80 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &data_1, 1, 10);
 80029c0:	f107 010b 	add.w	r1, r7, #11
 80029c4:	230a      	movs	r3, #10
 80029c6:	2201      	movs	r2, #1
 80029c8:	4812      	ldr	r0, [pc, #72]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x98>)
 80029ca:	f004 f824 	bl	8006a16 <HAL_SPI_Transmit>
		////	HAL_Delay(10);
		HAL_SPI_Receive(&hspi1, &data_1, 1, 10);
 80029ce:	f107 010b 	add.w	r1, r7, #11
 80029d2:	230a      	movs	r3, #10
 80029d4:	2201      	movs	r2, #1
 80029d6:	480f      	ldr	r0, [pc, #60]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x98>)
 80029d8:	f004 f959 	bl	8006c8e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	2108      	movs	r1, #8
 80029e0:	480b      	ldr	r0, [pc, #44]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x94>)
 80029e2:	f002 f84d 	bl	8004a80 <HAL_GPIO_WritePin>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_GPIO_EXTI_Callback+0x80>
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x9c>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
	}

}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000030 	.word	0x20000030
 8002a08:	200005d0 	.word	0x200005d0
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	200003e0 	.word	0x200003e0
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a2e:	f000 ff6f 	bl	8003910 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40001400 	.word	0x40001400

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a48:	e7fe      	b.n	8002a48 <Error_Handler+0x8>
	...

08002a4c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8002a56:	f107 020f 	add.w	r2, r7, #15
 8002a5a:	1df9      	adds	r1, r7, #7
 8002a5c:	2364      	movs	r3, #100	; 0x64
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	4804      	ldr	r0, [pc, #16]	; (8002a74 <RC522_SPI_Transfer+0x28>)
 8002a64:	f004 fa24 	bl	8006eb0 <HAL_SPI_TransmitReceive>

	return rx_data;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000438 	.word	0x20000438

08002a78 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460a      	mov	r2, r1
 8002a82:	71fb      	strb	r3, [r7, #7]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a8e:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <Write_MFRC522+0x4c>)
 8002a90:	f001 fff6 	bl	8004a80 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ffd3 	bl	8002a4c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ffcf 	bl	8002a4c <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab4:	4803      	ldr	r0, [pc, #12]	; (8002ac4 <Write_MFRC522+0x4c>)
 8002ab6:	f001 ffe3 	bl	8004a80 <HAL_GPIO_WritePin>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ad8:	480f      	ldr	r0, [pc, #60]	; (8002b18 <Read_MFRC522+0x50>)
 8002ada:	f001 ffd1 	bl	8004a80 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ffaa 	bl	8002a4c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff ffa7 	bl	8002a4c <RC522_SPI_Transfer>
 8002afe:	4603      	mov	r3, r0
 8002b00:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002b02:	2201      	movs	r2, #1
 8002b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <Read_MFRC522+0x50>)
 8002b0a:	f001 ffb9 	bl	8004a80 <HAL_GPIO_WritePin>

    return val;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40020400 	.word	0x40020400

08002b1c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	460a      	mov	r2, r1
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ffca 	bl	8002ac8 <Read_MFRC522>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	79bb      	ldrb	r3, [r7, #6]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff97 	bl	8002a78 <Write_MFRC522>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	71fb      	strb	r3, [r7, #7]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ffaf 	bl	8002ac8 <Read_MFRC522>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002b6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff77 	bl	8002a78 <Write_MFRC522>
} 
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8002b96:	2014      	movs	r0, #20
 8002b98:	f7ff ff96 	bl	8002ac8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8002b9c:	2103      	movs	r1, #3
 8002b9e:	2014      	movs	r0, #20
 8002ba0:	f7ff ffbc 	bl	8002b1c <SetBitMask>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8002bac:	210f      	movs	r1, #15
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f7ff ff62 	bl	8002a78 <Write_MFRC522>
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bc2:	4813      	ldr	r0, [pc, #76]	; (8002c10 <MFRC522_Init+0x58>)
 8002bc4:	f001 ff5c 	bl	8004a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bce:	4811      	ldr	r0, [pc, #68]	; (8002c14 <MFRC522_Init+0x5c>)
 8002bd0:	f001 ff56 	bl	8004a80 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8002bd4:	f7ff ffe8 	bl	8002ba8 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8002bd8:	218d      	movs	r1, #141	; 0x8d
 8002bda:	202a      	movs	r0, #42	; 0x2a
 8002bdc:	f7ff ff4c 	bl	8002a78 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002be0:	213e      	movs	r1, #62	; 0x3e
 8002be2:	202b      	movs	r0, #43	; 0x2b
 8002be4:	f7ff ff48 	bl	8002a78 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8002be8:	211e      	movs	r1, #30
 8002bea:	202d      	movs	r0, #45	; 0x2d
 8002bec:	f7ff ff44 	bl	8002a78 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	202c      	movs	r0, #44	; 0x2c
 8002bf4:	f7ff ff40 	bl	8002a78 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8002bf8:	2140      	movs	r1, #64	; 0x40
 8002bfa:	2015      	movs	r0, #21
 8002bfc:	f7ff ff3c 	bl	8002a78 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002c00:	213d      	movs	r1, #61	; 0x3d
 8002c02:	2011      	movs	r0, #17
 8002c04:	f7ff ff38 	bl	8002a78 <Write_MFRC522>

	AntennaOn();
 8002c08:	f7ff ffc3 	bl	8002b92 <AntennaOn>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40020400 	.word	0x40020400
 8002c14:	40020c00 	.word	0x40020c00

08002c18 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	4613      	mov	r3, r2
 8002c28:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002c32:	2300      	movs	r3, #0
 8002c34:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d006      	beq.n	8002c4a <MFRC522_ToCard+0x32>
 8002c3c:	2b0e      	cmp	r3, #14
 8002c3e:	d109      	bne.n	8002c54 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8002c40:	2312      	movs	r3, #18
 8002c42:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8002c44:	2310      	movs	r3, #16
 8002c46:	777b      	strb	r3, [r7, #29]
			break;
 8002c48:	e005      	b.n	8002c56 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8002c4a:	2377      	movs	r3, #119	; 0x77
 8002c4c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8002c4e:	2330      	movs	r3, #48	; 0x30
 8002c50:	777b      	strb	r3, [r7, #29]
			break;
 8002c52:	e000      	b.n	8002c56 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002c54:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8002c56:	7fbb      	ldrb	r3, [r7, #30]
 8002c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	2002      	movs	r0, #2
 8002c62:	f7ff ff09 	bl	8002a78 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8002c66:	2180      	movs	r1, #128	; 0x80
 8002c68:	2004      	movs	r0, #4
 8002c6a:	f7ff ff72 	bl	8002b52 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	200a      	movs	r0, #10
 8002c72:	f7ff ff53 	bl	8002b1c <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8002c76:	2100      	movs	r1, #0
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff fefd 	bl	8002a78 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e00a      	b.n	8002c9a <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	2009      	movs	r0, #9
 8002c90:	f7ff fef2 	bl	8002a78 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	7bbb      	ldrb	r3, [r7, #14]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3f0      	bcc.n	8002c84 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f7ff fee6 	bl	8002a78 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d103      	bne.n	8002cba <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	200d      	movs	r0, #13
 8002cb6:	f7ff ff31 	bl	8002b1c <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8002cba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cbe:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002cc0:	2004      	movs	r0, #4
 8002cc2:	f7ff ff01 	bl	8002ac8 <Read_MFRC522>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	773b      	strb	r3, [r7, #28]
        i--;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <MFRC522_ToCard+0xd4>
 8002cd6:	7f3b      	ldrb	r3, [r7, #28]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <MFRC522_ToCard+0xd4>
 8002ce0:	7f3a      	ldrb	r2, [r7, #28]
 8002ce2:	7f7b      	ldrb	r3, [r7, #29]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0e9      	beq.n	8002cc0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	200d      	movs	r0, #13
 8002cf0:	f7ff ff2f 	bl	8002b52 <ClearBitMask>
	
    if (i != 0)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d052      	beq.n	8002da0 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8002cfa:	2006      	movs	r0, #6
 8002cfc:	f7ff fee4 	bl	8002ac8 <Read_MFRC522>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 031b 	and.w	r3, r3, #27
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d148      	bne.n	8002d9c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8002d0e:	7f3a      	ldrb	r2, [r7, #28]
 8002d10:	7fbb      	ldrb	r3, [r7, #30]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d13b      	bne.n	8002da0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002d28:	200a      	movs	r0, #10
 8002d2a:	f7ff fecd 	bl	8002ac8 <Read_MFRC522>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002d32:	200c      	movs	r0, #12
 8002d34:	f7ff fec8 	bl	8002ac8 <Read_MFRC522>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8002d46:	7f3b      	ldrb	r3, [r7, #28]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	00da      	lsls	r2, r3, #3
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	4413      	add	r3, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e004      	b.n	8002d62 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8002d58:	7f3b      	ldrb	r3, [r7, #28]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002d62:	7f3b      	ldrb	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8002d68:	2301      	movs	r3, #1
 8002d6a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8002d6c:	7f3b      	ldrb	r3, [r7, #28]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d901      	bls.n	8002d76 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8002d72:	2310      	movs	r3, #16
 8002d74:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	e00a      	b.n	8002d92 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	18d4      	adds	r4, r2, r3
 8002d82:	2009      	movs	r0, #9
 8002d84:	f7ff fea0 	bl	8002ac8 <Read_MFRC522>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	7f3b      	ldrb	r3, [r7, #28]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3f0      	bcc.n	8002d7c <MFRC522_ToCard+0x164>
 8002d9a:	e001      	b.n	8002da0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8002da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd90      	pop	{r4, r7, pc}

08002daa <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af02      	add	r7, sp, #8
 8002db0:	4603      	mov	r3, r0
 8002db2:	6039      	str	r1, [r7, #0]
 8002db4:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8002db6:	2107      	movs	r1, #7
 8002db8:	200d      	movs	r0, #13
 8002dba:	f7ff fe5d 	bl	8002a78 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002dc4:	f107 0308 	add.w	r3, r7, #8
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	200c      	movs	r0, #12
 8002dd2:	f7ff ff21 	bl	8002c18 <MFRC522_ToCard>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <MFRC522_Request+0x3c>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d001      	beq.n	8002dea <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8002de6:	2302      	movs	r3, #2
 8002de8:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002e00:	2100      	movs	r1, #0
 8002e02:	200d      	movs	r0, #13
 8002e04:	f7ff fe38 	bl	8002a78 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2293      	movs	r2, #147	; 0x93
 8002e0c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3301      	adds	r3, #1
 8002e12:	2220      	movs	r2, #32
 8002e14:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	200c      	movs	r0, #12
 8002e24:	f7ff fef8 	bl	8002c18 <MFRC522_ToCard>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d118      	bne.n	8002e64 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	73bb      	strb	r3, [r7, #14]
 8002e36:	e009      	b.n	8002e4c <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	7b7b      	ldrb	r3, [r7, #13]
 8002e42:	4053      	eors	r3, r2
 8002e44:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	73bb      	strb	r3, [r7, #14]
 8002e4c:	7bbb      	ldrb	r3, [r7, #14]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d9f2      	bls.n	8002e38 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002e52:	7bbb      	ldrb	r3, [r7, #14]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	7b7a      	ldrb	r2, [r7, #13]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8002e60:	2302      	movs	r3, #2
 8002e62:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
} 
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_MspInit+0x4c>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_ADC_MspInit+0xdc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d157      	bne.n	8002f92 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_ADC_MspInit+0xe0>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <HAL_ADC_MspInit+0xe0>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_ADC_MspInit+0xe0>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_ADC_MspInit+0xe0>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <HAL_ADC_MspInit+0xe0>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_ADC_MspInit+0xe0>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	481d      	ldr	r0, [pc, #116]	; (8002fa4 <HAL_ADC_MspInit+0xe4>)
 8002f2e:	f001 fbf3 	bl	8004718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_ADC_MspInit+0xec>)
 8002f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f76:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f78:	f001 f852 	bl	8004020 <HAL_DMA_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002f82:	f7ff fd5d 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_ADC_MspInit+0xe8>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40012000 	.word	0x40012000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	20000284 	.word	0x20000284
 8002fac:	40026410 	.word	0x40026410

08002fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_I2C_MspInit+0x84>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d12c      	bne.n	800302c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_I2C_MspInit+0x88>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a17      	ldr	r2, [pc, #92]	; (8003038 <HAL_I2C_MspInit+0x88>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_I2C_MspInit+0x88>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff4:	2312      	movs	r3, #18
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003000:	2304      	movs	r3, #4
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4619      	mov	r1, r3
 800300a:	480c      	ldr	r0, [pc, #48]	; (800303c <HAL_I2C_MspInit+0x8c>)
 800300c:	f001 fb84 	bl	8004718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_I2C_MspInit+0x88>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_I2C_MspInit+0x88>)
 800301a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800301e:	6413      	str	r3, [r2, #64]	; 0x40
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_I2C_MspInit+0x88>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40005400 	.word	0x40005400
 8003038:	40023800 	.word	0x40023800
 800303c:	40020400 	.word	0x40020400

08003040 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_I2S_MspInit+0x164>)
 800306c:	4293      	cmp	r3, r2
 800306e:	f040 8094 	bne.w	800319a <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003072:	2301      	movs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8003076:	2332      	movs	r3, #50	; 0x32
 8003078:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800307a:	2302      	movs	r3, #2
 800307c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fafe 	bl	8006684 <HAL_RCCEx_PeriphCLKConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800308e:	f7ff fcd7 	bl	8002a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 800309c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a35      	ldr	r2, [pc, #212]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_I2S_MspInit+0x168>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030e6:	2310      	movs	r3, #16
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030f6:	2306      	movs	r3, #6
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fe:	4619      	mov	r1, r3
 8003100:	482a      	ldr	r0, [pc, #168]	; (80031ac <HAL_I2S_MspInit+0x16c>)
 8003102:	f001 fb09 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003106:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003118:	2306      	movs	r3, #6
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	4619      	mov	r1, r3
 8003122:	4823      	ldr	r0, [pc, #140]	; (80031b0 <HAL_I2S_MspInit+0x170>)
 8003124:	f001 faf8 	bl	8004718 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 800312a:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_I2S_MspInit+0x178>)
 800312c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003146:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 800314a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003156:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 800315a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003168:	2204      	movs	r2, #4
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 800316e:	2203      	movs	r2, #3
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003174:	2200      	movs	r2, #0
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800317e:	480d      	ldr	r0, [pc, #52]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003180:	f000 ff4e 	bl	8004020 <HAL_DMA_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800318a:	f7ff fc59 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_I2S_MspInit+0x174>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	; 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40003c00 	.word	0x40003c00
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020800 	.word	0x40020800
 80031b4:	20000380 	.word	0x20000380
 80031b8:	40026088 	.word	0x40026088

080031bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	; 0x30
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a32      	ldr	r2, [pc, #200]	; (80032a4 <HAL_SPI_MspInit+0xe8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d12c      	bne.n	8003238 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a30      	ldr	r2, [pc, #192]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 80031e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003216:	23e0      	movs	r3, #224	; 0xe0
 8003218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003226:	2305      	movs	r3, #5
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	4619      	mov	r1, r3
 8003230:	481e      	ldr	r0, [pc, #120]	; (80032ac <HAL_SPI_MspInit+0xf0>)
 8003232:	f001 fa71 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003236:	e031      	b.n	800329c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_SPI_MspInit+0xf4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d12c      	bne.n	800329c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_SPI_MspInit+0xec>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800327a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800327e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800328c:	2305      	movs	r3, #5
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003290:	f107 031c 	add.w	r3, r7, #28
 8003294:	4619      	mov	r1, r3
 8003296:	4807      	ldr	r0, [pc, #28]	; (80032b4 <HAL_SPI_MspInit+0xf8>)
 8003298:	f001 fa3e 	bl	8004718 <HAL_GPIO_Init>
}
 800329c:	bf00      	nop
 800329e:	3730      	adds	r7, #48	; 0x30
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40013000 	.word	0x40013000
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40003800 	.word	0x40003800
 80032b4:	40020400 	.word	0x40020400

080032b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d10d      	bne.n	80032e6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800

080032f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d11e      	bne.n	8003358 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_TIM_MspPostInit+0x68>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <HAL_TIM_MspPostInit+0x68>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_TIM_MspPostInit+0x68>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003348:	2301      	movs	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	4619      	mov	r1, r3
 8003352:	4804      	ldr	r0, [pc, #16]	; (8003364 <HAL_TIM_MspPostInit+0x6c>)
 8003354:	f001 f9e0 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003358:	bf00      	nop
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	40020000 	.word	0x40020000

08003368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08e      	sub	sp, #56	; 0x38
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_UART_MspInit+0x1ac>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d12d      	bne.n	80033e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	4b62      	ldr	r3, [pc, #392]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	4a61      	ldr	r2, [pc, #388]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003394:	f043 0310 	orr.w	r3, r3, #16
 8003398:	6453      	str	r3, [r2, #68]	; 0x44
 800339a:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a5a      	ldr	r2, [pc, #360]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033d4:	2307      	movs	r3, #7
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	484f      	ldr	r0, [pc, #316]	; (800351c <HAL_UART_MspInit+0x1b4>)
 80033e0:	f001 f99a 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033e4:	e092      	b.n	800350c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_UART_MspInit+0x1b8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d134      	bne.n	800345a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	4b48      	ldr	r3, [pc, #288]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	4a47      	ldr	r2, [pc, #284]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a40      	ldr	r2, [pc, #256]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003428:	230c      	movs	r3, #12
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003438:	2307      	movs	r3, #7
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	4836      	ldr	r0, [pc, #216]	; (800351c <HAL_UART_MspInit+0x1b4>)
 8003444:	f001 f968 	bl	8004718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	2100      	movs	r1, #0
 800344c:	2026      	movs	r0, #38	; 0x26
 800344e:	f000 fdbd 	bl	8003fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003452:	2026      	movs	r0, #38	; 0x26
 8003454:	f000 fdd6 	bl	8004004 <HAL_NVIC_EnableIRQ>
}
 8003458:	e058      	b.n	800350c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a31      	ldr	r2, [pc, #196]	; (8003524 <HAL_UART_MspInit+0x1bc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d153      	bne.n	800350c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 800346e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a23      	ldr	r2, [pc, #140]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 800348a:	f043 0302 	orr.w	r3, r3, #2
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80034a6:	f043 0308 	orr.w	r3, r3, #8
 80034aa:	6313      	str	r3, [r2, #48]	; 0x30
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_UART_MspInit+0x1b0>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034ca:	2307      	movs	r3, #7
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d2:	4619      	mov	r1, r3
 80034d4:	4814      	ldr	r0, [pc, #80]	; (8003528 <HAL_UART_MspInit+0x1c0>)
 80034d6:	f001 f91f 	bl	8004718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e8:	2303      	movs	r3, #3
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034ec:	2307      	movs	r3, #7
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <HAL_UART_MspInit+0x1c4>)
 80034f8:	f001 f90e 	bl	8004718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2100      	movs	r1, #0
 8003500:	2027      	movs	r0, #39	; 0x27
 8003502:	f000 fd63 	bl	8003fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003506:	2027      	movs	r0, #39	; 0x27
 8003508:	f000 fd7c 	bl	8004004 <HAL_NVIC_EnableIRQ>
}
 800350c:	bf00      	nop
 800350e:	3738      	adds	r7, #56	; 0x38
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40011000 	.word	0x40011000
 8003518:	40023800 	.word	0x40023800
 800351c:	40020000 	.word	0x40020000
 8003520:	40004400 	.word	0x40004400
 8003524:	40004800 	.word	0x40004800
 8003528:	40020400 	.word	0x40020400
 800352c:	40020c00 	.word	0x40020c00

08003530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08e      	sub	sp, #56	; 0x38
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_InitTick+0xe4>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a32      	ldr	r2, [pc, #200]	; (8003614 <HAL_InitTick+0xe4>)
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_InitTick+0xe4>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800355c:	f107 0210 	add.w	r2, r7, #16
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f003 f85a 	bl	8006620 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003576:	f003 f82b 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 800357a:	6378      	str	r0, [r7, #52]	; 0x34
 800357c:	e004      	b.n	8003588 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800357e:	f003 f827 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8003582:	4603      	mov	r3, r0
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_InitTick+0xe8>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0c9b      	lsrs	r3, r3, #18
 8003592:	3b01      	subs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_InitTick+0xec>)
 8003598:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_InitTick+0xf0>)
 800359a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800359c:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_InitTick+0xec>)
 800359e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035a2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_InitTick+0xec>)
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_InitTick+0xec>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_InitTick+0xec>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_InitTick+0xec>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80035bc:	4817      	ldr	r0, [pc, #92]	; (800361c <HAL_InitTick+0xec>)
 80035be:	f003 ff49 	bl	8007454 <HAL_TIM_Base_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80035c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11b      	bne.n	8003608 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80035d0:	4812      	ldr	r0, [pc, #72]	; (800361c <HAL_InitTick+0xec>)
 80035d2:	f003 ff99 	bl	8007508 <HAL_TIM_Base_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80035dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80035e4:	2037      	movs	r0, #55	; 0x37
 80035e6:	f000 fd0d 	bl	8004004 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d808      	bhi.n	8003602 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80035f0:	2200      	movs	r2, #0
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	2037      	movs	r0, #55	; 0x37
 80035f6:	f000 fce9 	bl	8003fcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_InitTick+0xf4>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e002      	b.n	8003608 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800360c:	4618      	mov	r0, r3
 800360e:	3738      	adds	r7, #56	; 0x38
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	431bde83 	.word	0x431bde83
 800361c:	200005d8 	.word	0x200005d8
 8003620:	40001400 	.word	0x40001400
 8003624:	20000038 	.word	0x20000038

08003628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800362c:	e7fe      	b.n	800362c <NMI_Handler+0x4>

0800362e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003632:	e7fe      	b.n	8003632 <HardFault_Handler+0x4>

08003634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003638:	e7fe      	b.n	8003638 <MemManage_Handler+0x4>

0800363a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363e:	e7fe      	b.n	800363e <BusFault_Handler+0x4>

08003640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <UsageFault_Handler+0x4>

08003646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003658:	2001      	movs	r0, #1
 800365a:	f001 fa45 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <DMA1_Stream5_IRQHandler+0x10>)
 800366a:	f000 fe19 	bl	80042a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000380 	.word	0x20000380

08003678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <USART2_IRQHandler+0x10>)
 800367e:	f004 fe57 	bl	8008330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000051c 	.word	0x2000051c

0800368c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <USART3_IRQHandler+0x10>)
 8003692:	f004 fe4d 	bl	8008330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000560 	.word	0x20000560

080036a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <TIM7_IRQHandler+0x10>)
 80036a6:	f003 ffee 	bl	8007686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200005d8 	.word	0x200005d8

080036b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <DMA2_Stream0_IRQHandler+0x10>)
 80036ba:	f000 fdf1 	bl	80042a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000284 	.word	0x20000284

080036c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return 1;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_kill>:

int _kill(int pid, int sig)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036e2:	f008 f9cb 	bl	800ba7c <__errno>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2216      	movs	r2, #22
 80036ea:	601a      	str	r2, [r3, #0]
  return -1;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_exit>:

void _exit (int status)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffe7 	bl	80036d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800370a:	e7fe      	b.n	800370a <_exit+0x12>

0800370c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e00a      	b.n	8003734 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800371e:	f3af 8000 	nop.w
 8003722:	4601      	mov	r1, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	b2ca      	uxtb	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf0      	blt.n	800371e <_read+0x12>
  }

  return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e009      	b.n	800376c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	60ba      	str	r2, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	dbf1      	blt.n	8003758 <_write+0x12>
  }
  return len;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_close>:

int _close(int file)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037a6:	605a      	str	r2, [r3, #4]
  return 0;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_isatty>:

int _isatty(int file)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037be:	2301      	movs	r3, #1
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <_sbrk+0x5c>)
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <_sbrk+0x60>)
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <_sbrk+0x64>)
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <_sbrk+0x68>)
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <_sbrk+0x64>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	429a      	cmp	r2, r3
 8003816:	d207      	bcs.n	8003828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003818:	f008 f930 	bl	800ba7c <__errno>
 800381c:	4603      	mov	r3, r0
 800381e:	220c      	movs	r2, #12
 8003820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e009      	b.n	800383c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <_sbrk+0x64>)
 8003838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20020000 	.word	0x20020000
 8003848:	00000400 	.word	0x00000400
 800384c:	20000620 	.word	0x20000620
 8003850:	200134a0 	.word	0x200134a0

08003854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <SystemInit+0x20>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	4a05      	ldr	r2, [pc, #20]	; (8003874 <SystemInit+0x20>)
 8003860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 8003878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038b0 <LoopFillZerobss+0x12>
  ldr   sp, =_estack     /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
 800387c:	480d      	ldr	r0, [pc, #52]	; (80038b4 <LoopFillZerobss+0x16>)
  movs  r1, #0
 800387e:	490e      	ldr	r1, [pc, #56]	; (80038b8 <LoopFillZerobss+0x1a>)
  b  LoopCopyDataInit
 8003880:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <LoopFillZerobss+0x1e>)

 8003882:	2300      	movs	r3, #0
CopyDataInit:
 8003884:	e002      	b.n	800388c <LoopCopyDataInit>

08003886 <CopyDataInit>:
  ldr  r3, =_sidata
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
 8003886:	58d4      	ldr	r4, [r2, r3]
  adds  r1, r1, #4
 8003888:	50c4      	str	r4, [r0, r3]
    
 800388a:	3304      	adds	r3, #4

0800388c <LoopCopyDataInit>:
LoopCopyDataInit:
  ldr  r0, =_sdata
  ldr  r3, =_edata
 800388c:	18c4      	adds	r4, r0, r3
  adds  r2, r0, r1
 800388e:	428c      	cmp	r4, r1
  cmp  r2, r3
 8003890:	d3f9      	bcc.n	8003886 <CopyDataInit>
  bcc  CopyDataInit
  ldr  r2, =_sbss
  b  LoopFillZerobss
 8003892:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <LoopFillZerobss+0x22>)
/* Zero fill the bss segment. */  
 8003894:	4c0b      	ldr	r4, [pc, #44]	; (80038c4 <LoopFillZerobss+0x26>)
FillZerobss:
 8003896:	2300      	movs	r3, #0
  movs  r3, #0
 8003898:	e001      	b.n	800389e <LoopFillZerobss>

0800389a <FillZerobss>:
  str  r3, [r2], #4
    
LoopFillZerobss:
 800389a:	6013      	str	r3, [r2, #0]
  ldr  r3, = _ebss
 800389c:	3204      	adds	r2, #4

0800389e <LoopFillZerobss>:
  cmp  r2, r3
  bcc  FillZerobss

 800389e:	42a2      	cmp	r2, r4
/* Call the clock system intitialization function.*/
 80038a0:	d3fb      	bcc.n	800389a <FillZerobss>
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
 80038a2:	f7ff ffd7 	bl	8003854 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 80038a6:	f008 f8ef 	bl	800ba88 <__libc_init_array>
  bx  lr    
.size  Reset_Handler, .-Reset_Handler
 80038aa:	f7fe fc79 	bl	80021a0 <main>

 80038ae:	4770      	bx	lr
Reset_Handler:  
 80038b0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
 80038b4:	20000000 	.word	0x20000000
  movs  r1, #0
 80038b8:	20000218 	.word	0x20000218
  b  LoopCopyDataInit
 80038bc:	08010cdc 	.word	0x08010cdc
  b  LoopFillZerobss
 80038c0:	20000218 	.word	0x20000218
/* Zero fill the bss segment. */  
 80038c4:	200134a0 	.word	0x200134a0

080038c8 <ADC_IRQHandler>:
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
  .size  Default_Handler, .-Default_Handler
/******************************************************************************
 80038c8:	e7fe      	b.n	80038c8 <ADC_IRQHandler>
	...

080038cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <HAL_Init+0x40>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <HAL_Init+0x40>)
 80038d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_Init+0x40>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_Init+0x40>)
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_Init+0x40>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_Init+0x40>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f4:	2003      	movs	r0, #3
 80038f6:	f000 fb5e 	bl	8003fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038fa:	200f      	movs	r0, #15
 80038fc:	f7ff fe18 	bl	8003530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003900:	f7ff fab6 	bl	8002e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00

08003910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_IncTick+0x20>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_IncTick+0x24>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_IncTick+0x24>)
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000003c 	.word	0x2000003c
 8003934:	20000624 	.word	0x20000624

08003938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return uwTick;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_GetTick+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000624 	.word	0x20000624

08003950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7ff ffee 	bl	8003938 <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d005      	beq.n	8003976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_Delay+0x44>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003976:	bf00      	nop
 8003978:	f7ff ffde 	bl	8003938 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	429a      	cmp	r2, r3
 8003986:	d8f7      	bhi.n	8003978 <HAL_Delay+0x28>
  {
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000003c 	.word	0x2000003c

08003998 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e033      	b.n	8003a16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fa82 	bl	8002ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d118      	bne.n	8003a08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039de:	f023 0302 	bic.w	r3, r3, #2
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f93a 	bl	8003c64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
 8003a06:	e001      	b.n	8003a0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1c>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e105      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x228>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b09      	cmp	r3, #9
 8003a4a:	d925      	bls.n	8003a98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68d9      	ldr	r1, [r3, #12]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b1e      	subs	r3, #30
 8003a62:	2207      	movs	r2, #7
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	400a      	ands	r2, r1
 8003a70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68d9      	ldr	r1, [r3, #12]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4403      	add	r3, r0
 8003a8a:	3b1e      	subs	r3, #30
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e022      	b.n	8003ade <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6919      	ldr	r1, [r3, #16]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	2207      	movs	r2, #7
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	400a      	ands	r2, r1
 8003aba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4618      	mov	r0, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4403      	add	r3, r0
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d824      	bhi.n	8003b30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3b05      	subs	r3, #5
 8003af8:	221f      	movs	r2, #31
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b05      	subs	r3, #5
 8003b22:	fa00 f203 	lsl.w	r2, r0, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b2e:	e04c      	b.n	8003bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d824      	bhi.n	8003b82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	3b23      	subs	r3, #35	; 0x23
 8003b4a:	221f      	movs	r2, #31
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43da      	mvns	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	400a      	ands	r2, r1
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	3b23      	subs	r3, #35	; 0x23
 8003b74:	fa00 f203 	lsl.w	r2, r0, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b80:	e023      	b.n	8003bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	3b41      	subs	r3, #65	; 0x41
 8003b94:	221f      	movs	r2, #31
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	3b41      	subs	r3, #65	; 0x41
 8003bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_ADC_ConfigChannel+0x234>)
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_ADC_ConfigChannel+0x238>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d109      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1cc>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b12      	cmp	r3, #18
 8003bde:	d105      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <HAL_ADC_ConfigChannel+0x238>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d123      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21e>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d003      	beq.n	8003c06 <HAL_ADC_ConfigChannel+0x1e6>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b11      	cmp	r3, #17
 8003c04:	d11b      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d111      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <HAL_ADC_ConfigChannel+0x23c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <HAL_ADC_ConfigChannel+0x240>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	0c9a      	lsrs	r2, r3, #18
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c30:	e002      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f9      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40012300 	.word	0x40012300
 8003c58:	40012000 	.word	0x40012000
 8003c5c:	20000034 	.word	0x20000034
 8003c60:	431bde83 	.word	0x431bde83

08003c64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c6c:	4b79      	ldr	r3, [pc, #484]	; (8003e54 <ADC_Init+0x1f0>)
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	021a      	lsls	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <ADC_Init+0x1f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6899      	ldr	r1, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e00f      	b.n	8003d62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0202 	bic.w	r2, r2, #2
 8003d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7e1b      	ldrb	r3, [r3, #24]
 8003d7c:	005a      	lsls	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01b      	beq.n	8003dc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	035a      	lsls	r2, r3, #13
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e007      	b.n	8003dd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	051a      	lsls	r2, r3, #20
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6899      	ldr	r1, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e1a:	025a      	lsls	r2, r3, #9
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	029a      	lsls	r2, r3, #10
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012300 	.word	0x40012300
 8003e58:	0f000001 	.word	0x0f000001

08003e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	60d3      	str	r3, [r2, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <__NVIC_GetPriorityGrouping+0x18>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 0307 	and.w	r3, r3, #7
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db0b      	blt.n	8003eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <__NVIC_EnableIRQ+0x38>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db0a      	blt.n	8003f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	490c      	ldr	r1, [pc, #48]	; (8003f48 <__NVIC_SetPriority+0x4c>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f24:	e00a      	b.n	8003f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <__NVIC_SetPriority+0x50>)
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3b04      	subs	r3, #4
 8003f34:	0112      	lsls	r2, r2, #4
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	440b      	add	r3, r1
 8003f3a:	761a      	strb	r2, [r3, #24]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000e100 	.word	0xe000e100
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f1c3 0307 	rsb	r3, r3, #7
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf28      	it	cs
 8003f6e:	2304      	movcs	r3, #4
 8003f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d902      	bls.n	8003f80 <NVIC_EncodePriority+0x30>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3b03      	subs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <NVIC_EncodePriority+0x32>
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	401a      	ands	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43d9      	mvns	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	4313      	orrs	r3, r2
         );
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ff4c 	bl	8003e5c <__NVIC_SetPriorityGrouping>
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fde:	f7ff ff61 	bl	8003ea4 <__NVIC_GetPriorityGrouping>
 8003fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f7ff ffb1 	bl	8003f50 <NVIC_EncodePriority>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff80 	bl	8003efc <__NVIC_SetPriority>
}
 8003ffc:	bf00      	nop
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff54 	bl	8003ec0 <__NVIC_EnableIRQ>
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff fc84 	bl	8003938 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e099      	b.n	8004170 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800405c:	e00f      	b.n	800407e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800405e:	f7ff fc6b 	bl	8003938 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b05      	cmp	r3, #5
 800406a:	d908      	bls.n	800407e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2203      	movs	r2, #3
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e078      	b.n	8004170 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e8      	bne.n	800405e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4b38      	ldr	r3, [pc, #224]	; (8004178 <HAL_DMA_Init+0x158>)
 8004098:	4013      	ands	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d107      	bne.n	80040e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	4313      	orrs	r3, r2
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b04      	cmp	r3, #4
 8004110:	d117      	bne.n	8004142 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00e      	beq.n	8004142 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa7b 	bl	8004620 <DMA_CheckFifoParam>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800413e:	2301      	movs	r3, #1
 8004140:	e016      	b.n	8004170 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa32 	bl	80045b4 <DMA_CalcBaseAndBitshift>
 8004150:	4603      	mov	r3, r0
 8004152:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	223f      	movs	r2, #63	; 0x3f
 800415a:	409a      	lsls	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	f010803f 	.word	0xf010803f

0800417c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800418a:	f7ff fbd5 	bl	8003938 <HAL_GetTick>
 800418e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d008      	beq.n	80041ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2280      	movs	r2, #128	; 0x80
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e052      	b.n	8004254 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0216 	bic.w	r2, r2, #22
 80041bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <HAL_DMA_Abort+0x62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0208 	bic.w	r2, r2, #8
 80041ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041fe:	e013      	b.n	8004228 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004200:	f7ff fb9a 	bl	8003938 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b05      	cmp	r3, #5
 800420c:	d90c      	bls.n	8004228 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e015      	b.n	8004254 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e4      	bne.n	8004200 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	223f      	movs	r2, #63	; 0x3f
 800423c:	409a      	lsls	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d004      	beq.n	800427a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00c      	b.n	8004294 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2205      	movs	r2, #5
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042ac:	4b8e      	ldr	r3, [pc, #568]	; (80044e8 <HAL_DMA_IRQHandler+0x248>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a8e      	ldr	r2, [pc, #568]	; (80044ec <HAL_DMA_IRQHandler+0x24c>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	0a9b      	lsrs	r3, r3, #10
 80042b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	2208      	movs	r2, #8
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01a      	beq.n	800430c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0204 	bic.w	r2, r2, #4
 80042f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	2208      	movs	r2, #8
 80042fa:	409a      	lsls	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	2201      	movs	r2, #1
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	2201      	movs	r2, #1
 8004330:	409a      	lsls	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	2204      	movs	r2, #4
 8004348:	409a      	lsls	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	2204      	movs	r2, #4
 8004366:	409a      	lsls	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	2210      	movs	r2, #16
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d043      	beq.n	8004410 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03c      	beq.n	8004410 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2210      	movs	r2, #16
 800439c:	409a      	lsls	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d024      	beq.n	8004410 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
 80043ce:	e01f      	b.n	8004410 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
 80043e0:	e016      	b.n	8004410 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0208 	bic.w	r2, r2, #8
 80043fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	2220      	movs	r2, #32
 8004416:	409a      	lsls	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 808f 	beq.w	8004540 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8087 	beq.w	8004540 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	2220      	movs	r2, #32
 8004438:	409a      	lsls	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b05      	cmp	r3, #5
 8004448:	d136      	bne.n	80044b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0216 	bic.w	r2, r2, #22
 8004458:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004468:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_DMA_IRQHandler+0x1da>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0208 	bic.w	r2, r2, #8
 8004488:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	223f      	movs	r2, #63	; 0x3f
 8004490:	409a      	lsls	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d07e      	beq.n	80045ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
        }
        return;
 80044b6:	e079      	b.n	80045ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01d      	beq.n	8004502 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10d      	bne.n	80044f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d031      	beq.n	8004540 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
 80044e4:	e02c      	b.n	8004540 <HAL_DMA_IRQHandler+0x2a0>
 80044e6:	bf00      	nop
 80044e8:	20000034 	.word	0x20000034
 80044ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d023      	beq.n	8004540 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
 8004500:	e01e      	b.n	8004540 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10f      	bne.n	8004530 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0210 	bic.w	r2, r2, #16
 800451e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2b00      	cmp	r3, #0
 8004546:	d032      	beq.n	80045ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d022      	beq.n	800459a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2205      	movs	r2, #5
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	3301      	adds	r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	429a      	cmp	r2, r3
 8004576:	d307      	bcc.n	8004588 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f2      	bne.n	800456c <HAL_DMA_IRQHandler+0x2cc>
 8004586:	e000      	b.n	800458a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004588:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
 80045aa:	e000      	b.n	80045ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80045ac:	bf00      	nop
    }
  }
}
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3b10      	subs	r3, #16
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <DMA_CalcBaseAndBitshift+0x64>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045ce:	4a13      	ldr	r2, [pc, #76]	; (800461c <DMA_CalcBaseAndBitshift+0x68>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d909      	bls.n	80045f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	; 0x58
 80045f4:	e007      	b.n	8004606 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	aaaaaaab 	.word	0xaaaaaaab
 800461c:	08010814 	.word	0x08010814

08004620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d856      	bhi.n	80046ee <DMA_CheckFifoParam+0xce>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <DMA_CheckFifoParam+0x28>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	08004659 	.word	0x08004659
 800464c:	0800466b 	.word	0x0800466b
 8004650:	08004659 	.word	0x08004659
 8004654:	080046ef 	.word	0x080046ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d046      	beq.n	80046f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004668:	e043      	b.n	80046f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004672:	d140      	bne.n	80046f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e03d      	b.n	80046f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004682:	d121      	bne.n	80046c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d837      	bhi.n	80046fa <DMA_CheckFifoParam+0xda>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <DMA_CheckFifoParam+0x70>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046a1 	.word	0x080046a1
 8004694:	080046a7 	.word	0x080046a7
 8004698:	080046a1 	.word	0x080046a1
 800469c:	080046b9 	.word	0x080046b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e030      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d025      	beq.n	80046fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b6:	e022      	b.n	80046fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046c0:	d11f      	bne.n	8004702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046c6:	e01c      	b.n	8004702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d903      	bls.n	80046d6 <DMA_CheckFifoParam+0xb6>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d003      	beq.n	80046dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046d4:	e018      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
      break;
 80046da:	e015      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e00b      	b.n	8004706 <DMA_CheckFifoParam+0xe6>
      break;
 80046ee:	bf00      	nop
 80046f0:	e00a      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046f2:	bf00      	nop
 80046f4:	e008      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046f6:	bf00      	nop
 80046f8:	e006      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046fa:	bf00      	nop
 80046fc:	e004      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;   
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 8004706:	bf00      	nop
    }
  } 
  
  return status; 
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e16b      	b.n	8004a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	429a      	cmp	r2, r3
 800474e:	f040 815a 	bne.w	8004a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d005      	beq.n	800476a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004766:	2b02      	cmp	r3, #2
 8004768:	d130      	bne.n	80047cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a0:	2201      	movs	r2, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 0201 	and.w	r2, r3, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d017      	beq.n	8004808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d123      	bne.n	800485c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	08da      	lsrs	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3208      	adds	r2, #8
 800481c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	220f      	movs	r2, #15
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	08da      	lsrs	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3208      	adds	r2, #8
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0203 	and.w	r2, r3, #3
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80b4 	beq.w	8004a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <HAL_GPIO_Init+0x30c>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	4a5f      	ldr	r2, [pc, #380]	; (8004a24 <HAL_GPIO_Init+0x30c>)
 80048a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048ac:	6453      	str	r3, [r2, #68]	; 0x44
 80048ae:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <HAL_GPIO_Init+0x30c>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ba:	4a5b      	ldr	r2, [pc, #364]	; (8004a28 <HAL_GPIO_Init+0x310>)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	3302      	adds	r3, #2
 80048c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	220f      	movs	r2, #15
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a52      	ldr	r2, [pc, #328]	; (8004a2c <HAL_GPIO_Init+0x314>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <HAL_GPIO_Init+0x226>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a51      	ldr	r2, [pc, #324]	; (8004a30 <HAL_GPIO_Init+0x318>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d025      	beq.n	800493a <HAL_GPIO_Init+0x222>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a50      	ldr	r2, [pc, #320]	; (8004a34 <HAL_GPIO_Init+0x31c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01f      	beq.n	8004936 <HAL_GPIO_Init+0x21e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4f      	ldr	r2, [pc, #316]	; (8004a38 <HAL_GPIO_Init+0x320>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d019      	beq.n	8004932 <HAL_GPIO_Init+0x21a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4e      	ldr	r2, [pc, #312]	; (8004a3c <HAL_GPIO_Init+0x324>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_GPIO_Init+0x216>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4d      	ldr	r2, [pc, #308]	; (8004a40 <HAL_GPIO_Init+0x328>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00d      	beq.n	800492a <HAL_GPIO_Init+0x212>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4c      	ldr	r2, [pc, #304]	; (8004a44 <HAL_GPIO_Init+0x32c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <HAL_GPIO_Init+0x20e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4b      	ldr	r2, [pc, #300]	; (8004a48 <HAL_GPIO_Init+0x330>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <HAL_GPIO_Init+0x20a>
 800491e:	2307      	movs	r3, #7
 8004920:	e00e      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004922:	2308      	movs	r3, #8
 8004924:	e00c      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004926:	2306      	movs	r3, #6
 8004928:	e00a      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800492a:	2305      	movs	r3, #5
 800492c:	e008      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800492e:	2304      	movs	r3, #4
 8004930:	e006      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004932:	2303      	movs	r3, #3
 8004934:	e004      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004936:	2302      	movs	r3, #2
 8004938:	e002      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800493e:	2300      	movs	r3, #0
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f002 0203 	and.w	r2, r2, #3
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	4093      	lsls	r3, r2
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004950:	4935      	ldr	r1, [pc, #212]	; (8004a28 <HAL_GPIO_Init+0x310>)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495e:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <HAL_GPIO_Init+0x334>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004982:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <HAL_GPIO_Init+0x334>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004988:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <HAL_GPIO_Init+0x334>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <HAL_GPIO_Init+0x334>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049b2:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <HAL_GPIO_Init+0x334>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049d6:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <HAL_GPIO_Init+0x334>)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_GPIO_Init+0x334>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a00:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <HAL_GPIO_Init+0x334>)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	f67f ae90 	bls.w	8004734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40013800 	.word	0x40013800
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	40020400 	.word	0x40020400
 8004a34:	40020800 	.word	0x40020800
 8004a38:	40020c00 	.word	0x40020c00
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40021400 	.word	0x40021400
 8004a44:	40021800 	.word	0x40021800
 8004a48:	40021c00 	.word	0x40021c00
 8004a4c:	40013c00 	.word	0x40013c00

08004a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	887b      	ldrh	r3, [r7, #2]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e001      	b.n	8004a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a90:	787b      	ldrb	r3, [r7, #1]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a9c:	e003      	b.n	8004aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a9e:	887b      	ldrh	r3, [r7, #2]
 8004aa0:	041a      	lsls	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac4:	887a      	ldrh	r2, [r7, #2]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	041a      	lsls	r2, r3, #16
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	43d9      	mvns	r1, r3
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	619a      	str	r2, [r3, #24]
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fd ff38 	bl	800297c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40013c00 	.word	0x40013c00

08004b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e12b      	b.n	8004d82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fe fa36 	bl	8002fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f001 fd28 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8004b80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4a81      	ldr	r2, [pc, #516]	; (8004d8c <HAL_I2C_Init+0x274>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d807      	bhi.n	8004b9c <HAL_I2C_Init+0x84>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a80      	ldr	r2, [pc, #512]	; (8004d90 <HAL_I2C_Init+0x278>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	bf94      	ite	ls
 8004b94:	2301      	movls	r3, #1
 8004b96:	2300      	movhi	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e006      	b.n	8004baa <HAL_I2C_Init+0x92>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a7d      	ldr	r2, [pc, #500]	; (8004d94 <HAL_I2C_Init+0x27c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bf94      	ite	ls
 8004ba4:	2301      	movls	r3, #1
 8004ba6:	2300      	movhi	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0e7      	b.n	8004d82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a78      	ldr	r2, [pc, #480]	; (8004d98 <HAL_I2C_Init+0x280>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	0c9b      	lsrs	r3, r3, #18
 8004bbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a6a      	ldr	r2, [pc, #424]	; (8004d8c <HAL_I2C_Init+0x274>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d802      	bhi.n	8004bec <HAL_I2C_Init+0xd4>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	3301      	adds	r3, #1
 8004bea:	e009      	b.n	8004c00 <HAL_I2C_Init+0xe8>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	4a69      	ldr	r2, [pc, #420]	; (8004d9c <HAL_I2C_Init+0x284>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	3301      	adds	r3, #1
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	495c      	ldr	r1, [pc, #368]	; (8004d8c <HAL_I2C_Init+0x274>)
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	d819      	bhi.n	8004c54 <HAL_I2C_Init+0x13c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1e59      	subs	r1, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c34:	400b      	ands	r3, r1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_I2C_Init+0x138>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1e59      	subs	r1, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4e:	e051      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004c50:	2304      	movs	r3, #4
 8004c52:	e04f      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d111      	bne.n	8004c80 <HAL_I2C_Init+0x168>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e58      	subs	r0, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	440b      	add	r3, r1
 8004c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e012      	b.n	8004ca6 <HAL_I2C_Init+0x18e>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e58      	subs	r0, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	0099      	lsls	r1, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c96:	3301      	adds	r3, #1
 8004c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Init+0x196>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e022      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_I2C_Init+0x1bc>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1e58      	subs	r0, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	440b      	add	r3, r1
 8004cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	e00f      	b.n	8004cf4 <HAL_I2C_Init+0x1dc>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e58      	subs	r0, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	0099      	lsls	r1, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	6809      	ldr	r1, [r1, #0]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6911      	ldr	r1, [r2, #16]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68d2      	ldr	r2, [r2, #12]
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	000186a0 	.word	0x000186a0
 8004d90:	001e847f 	.word	0x001e847f
 8004d94:	003d08ff 	.word	0x003d08ff
 8004d98:	431bde83 	.word	0x431bde83
 8004d9c:	10624dd3 	.word	0x10624dd3

08004da0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	461a      	mov	r2, r3
 8004dac:	460b      	mov	r3, r1
 8004dae:	817b      	strh	r3, [r7, #10]
 8004db0:	4613      	mov	r3, r2
 8004db2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7fe fdc0 	bl	8003938 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	f040 80e0 	bne.w	8004f88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2319      	movs	r3, #25
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4970      	ldr	r1, [pc, #448]	; (8004f94 <HAL_I2C_Master_Transmit+0x1f4>)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f964 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0d3      	b.n	8004f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_I2C_Master_Transmit+0x50>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e0cc      	b.n	8004f8a <HAL_I2C_Master_Transmit+0x1ea>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d007      	beq.n	8004e16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2221      	movs	r2, #33	; 0x21
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2210      	movs	r2, #16
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	893a      	ldrh	r2, [r7, #8]
 8004e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a50      	ldr	r2, [pc, #320]	; (8004f98 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e58:	8979      	ldrh	r1, [r7, #10]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6a3a      	ldr	r2, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f89c 	bl	8004f9c <I2C_MasterRequestWrite>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e08d      	b.n	8004f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e84:	e066      	b.n	8004f54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f9de 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00d      	beq.n	8004eb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d107      	bne.n	8004eae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e06b      	b.n	8004f8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	781a      	ldrb	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d11b      	bne.n	8004f28 <HAL_I2C_Master_Transmit+0x188>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	6a39      	ldr	r1, [r7, #32]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f9ce 	bl	80052ce <I2C_WaitOnBTFFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00d      	beq.n	8004f54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d107      	bne.n	8004f50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e01a      	b.n	8004f8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d194      	bne.n	8004e86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	00100002 	.word	0x00100002
 8004f98:	ffff0000 	.word	0xffff0000

08004f9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d006      	beq.n	8004fc6 <I2C_MasterRequestWrite+0x2a>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d003      	beq.n	8004fc6 <I2C_MasterRequestWrite+0x2a>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc4:	d108      	bne.n	8004fd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e00b      	b.n	8004ff0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	2b12      	cmp	r3, #18
 8004fde:	d107      	bne.n	8004ff0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f84f 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	d103      	bne.n	8005020 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e035      	b.n	8005090 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502c:	d108      	bne.n	8005040 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800502e:	897b      	ldrh	r3, [r7, #10]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	e01b      	b.n	8005078 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005040:	897b      	ldrh	r3, [r7, #10]
 8005042:	11db      	asrs	r3, r3, #7
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f003 0306 	and.w	r3, r3, #6
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f063 030f 	orn	r3, r3, #15
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <I2C_MasterRequestWrite+0xfc>)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f875 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e010      	b.n	8005090 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800506e:	897b      	ldrh	r3, [r7, #10]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4907      	ldr	r1, [pc, #28]	; (800509c <I2C_MasterRequestWrite+0x100>)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f865 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	00010008 	.word	0x00010008
 800509c:	00010002 	.word	0x00010002

080050a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b0:	e025      	b.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d021      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fe fc3d 	bl	8003938 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e023      	b.n	8005146 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d10d      	bne.n	8005124 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	43da      	mvns	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	e00c      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf0c      	ite	eq
 8005136:	2301      	moveq	r3, #1
 8005138:	2300      	movne	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	429a      	cmp	r2, r3
 8005142:	d0b6      	beq.n	80050b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800515c:	e051      	b.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d123      	bne.n	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005186:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e046      	b.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d021      	beq.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fe fbbb 	bl	8003938 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d116      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e020      	b.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d10c      	bne.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	43da      	mvns	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e00b      	b.n	800523e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	43da      	mvns	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d18d      	bne.n	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005258:	e02d      	b.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f878 	bl	8005350 <I2C_IsAcknowledgeFailed>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e02d      	b.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d021      	beq.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fe fb61 	bl	8003938 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d116      	bne.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e007      	b.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d1ca      	bne.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052da:	e02d      	b.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f837 	bl	8005350 <I2C_IsAcknowledgeFailed>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e02d      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d021      	beq.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f4:	f7fe fb20 	bl	8003938 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d116      	bne.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e007      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d1ca      	bne.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d11b      	bne.n	80053a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005370:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0204 	orr.w	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e128      	b.n	8005614 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a90      	ldr	r2, [pc, #576]	; (800561c <HAL_I2S_Init+0x26c>)
 80053da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fd fe2f 	bl	8003040 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053f8:	f023 030f 	bic.w	r3, r3, #15
 80053fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2202      	movs	r2, #2
 8005404:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d060      	beq.n	80054d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005416:	2310      	movs	r3, #16
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e001      	b.n	8005420 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800541c:	2320      	movs	r3, #32
 800541e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b20      	cmp	r3, #32
 8005426:	d802      	bhi.n	800542e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800542e:	2001      	movs	r0, #1
 8005430:	f001 fa0a 	bl	8006848 <HAL_RCCEx_GetPeriphCLKFreq>
 8005434:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543e:	d125      	bne.n	800548c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d010      	beq.n	800546a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	3305      	adds	r3, #5
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	e01f      	b.n	80054aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	fbb2 f2f3 	udiv	r2, r2, r3
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	fbb2 f3f3 	udiv	r3, r2, r3
 8005486:	3305      	adds	r3, #5
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e00e      	b.n	80054aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	fbb2 f2f3 	udiv	r2, r2, r3
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	3305      	adds	r3, #5
 80054a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4a5c      	ldr	r2, [pc, #368]	; (8005620 <HAL_I2S_Init+0x270>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e003      	b.n	80054d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80054d0:	2302      	movs	r3, #2
 80054d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d902      	bls.n	80054e4 <HAL_I2S_Init+0x134>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2bff      	cmp	r3, #255	; 0xff
 80054e2:	d907      	bls.n	80054f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	f043 0210 	orr.w	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e08f      	b.n	8005614 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	ea42 0103 	orr.w	r1, r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	430a      	orrs	r2, r1
 8005506:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005512:	f023 030f 	bic.w	r3, r3, #15
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6851      	ldr	r1, [r2, #4]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6892      	ldr	r2, [r2, #8]
 800551e:	4311      	orrs	r1, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68d2      	ldr	r2, [r2, #12]
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6992      	ldr	r2, [r2, #24]
 800552a:	430a      	orrs	r2, r1
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005536:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d161      	bne.n	8005604 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a38      	ldr	r2, [pc, #224]	; (8005624 <HAL_I2S_Init+0x274>)
 8005544:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a37      	ldr	r2, [pc, #220]	; (8005628 <HAL_I2S_Init+0x278>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_I2S_Init+0x1a4>
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_I2S_Init+0x27c>)
 8005552:	e001      	b.n	8005558 <HAL_I2S_Init+0x1a8>
 8005554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	4932      	ldr	r1, [pc, #200]	; (8005628 <HAL_I2S_Init+0x278>)
 8005560:	428a      	cmp	r2, r1
 8005562:	d101      	bne.n	8005568 <HAL_I2S_Init+0x1b8>
 8005564:	4a31      	ldr	r2, [pc, #196]	; (800562c <HAL_I2S_Init+0x27c>)
 8005566:	e001      	b.n	800556c <HAL_I2S_Init+0x1bc>
 8005568:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800556c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005570:	f023 030f 	bic.w	r3, r3, #15
 8005574:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <HAL_I2S_Init+0x278>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_I2S_Init+0x1d4>
 8005580:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_I2S_Init+0x27c>)
 8005582:	e001      	b.n	8005588 <HAL_I2S_Init+0x1d8>
 8005584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005588:	2202      	movs	r2, #2
 800558a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_I2S_Init+0x278>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <HAL_I2S_Init+0x1ea>
 8005596:	4b25      	ldr	r3, [pc, #148]	; (800562c <HAL_I2S_Init+0x27c>)
 8005598:	e001      	b.n	800559e <HAL_I2S_Init+0x1ee>
 800559a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055aa:	d003      	beq.n	80055b4 <HAL_I2S_Init+0x204>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d103      	bne.n	80055bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80055b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e001      	b.n	80055c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055ca:	4313      	orrs	r3, r2
 80055cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055d4:	4313      	orrs	r3, r2
 80055d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055de:	4313      	orrs	r3, r2
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <HAL_I2S_Init+0x278>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_I2S_Init+0x24c>
 80055f8:	4b0c      	ldr	r3, [pc, #48]	; (800562c <HAL_I2S_Init+0x27c>)
 80055fa:	e001      	b.n	8005600 <HAL_I2S_Init+0x250>
 80055fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005600:	897a      	ldrh	r2, [r7, #10]
 8005602:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	08005727 	.word	0x08005727
 8005620:	cccccccd 	.word	0xcccccccd
 8005624:	0800583d 	.word	0x0800583d
 8005628:	40003800 	.word	0x40003800
 800562c:	40003400 	.word	0x40003400

08005630 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	881a      	ldrh	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10e      	bne.n	80056c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ffb8 	bl	8005630 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	b292      	uxth	r2, r2
 80056dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	1c9a      	adds	r2, r3, #2
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10e      	bne.n	800571e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800570e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff93 	bl	8005644 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b04      	cmp	r3, #4
 8005740:	d13a      	bne.n	80057b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d109      	bne.n	8005760 <I2S_IRQHandler+0x3a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d102      	bne.n	8005760 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ffb4 	bl	80056c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d126      	bne.n	80057b8 <I2S_IRQHandler+0x92>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b20      	cmp	r3, #32
 8005776:	d11f      	bne.n	80057b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005786:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	f043 0202 	orr.w	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ff50 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d136      	bne.n	8005832 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d109      	bne.n	80057e2 <I2S_IRQHandler+0xbc>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d102      	bne.n	80057e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff ff45 	bl	800566c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d122      	bne.n	8005832 <I2S_IRQHandler+0x10c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d11b      	bne.n	8005832 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005808:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	f043 0204 	orr.w	r2, r3, #4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff13 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005832:	bf00      	nop
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a92      	ldr	r2, [pc, #584]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005856:	4b92      	ldr	r3, [pc, #584]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005858:	e001      	b.n	800585e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800585a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a8b      	ldr	r2, [pc, #556]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d101      	bne.n	8005878 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005874:	4b8a      	ldr	r3, [pc, #552]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005876:	e001      	b.n	800587c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005888:	d004      	beq.n	8005894 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 8099 	bne.w	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d107      	bne.n	80058ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f925 	bl	8005af8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9c8 	bl	8005c58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d13a      	bne.n	8005948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d035      	beq.n	8005948 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6e      	ldr	r2, [pc, #440]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80058e6:	4b6e      	ldr	r3, [pc, #440]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058e8:	e001      	b.n	80058ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80058ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4969      	ldr	r1, [pc, #420]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058f6:	428b      	cmp	r3, r1
 80058f8:	d101      	bne.n	80058fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80058fa:	4b69      	ldr	r3, [pc, #420]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058fc:	e001      	b.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80058fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005906:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005916:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	f043 0202 	orr.w	r2, r3, #2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fe88 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b08      	cmp	r3, #8
 8005950:	f040 80c3 	bne.w	8005ada <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80bd 	beq.w	8005ada <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800596e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a49      	ldr	r2, [pc, #292]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d101      	bne.n	800597e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800597a:	4b49      	ldr	r3, [pc, #292]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800597c:	e001      	b.n	8005982 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800597e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4944      	ldr	r1, [pc, #272]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800598a:	428b      	cmp	r3, r1
 800598c:	d101      	bne.n	8005992 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800598e:	4b44      	ldr	r3, [pc, #272]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005990:	e001      	b.n	8005996 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800599a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800599c:	2300      	movs	r3, #0
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	f043 0204 	orr.w	r2, r3, #4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fe4a 	bl	8005658 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059c4:	e089      	b.n	8005ada <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d107      	bne.n	80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8be 	bl	8005b5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8fd 	bl	8005bf4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d12f      	bne.n	8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d02a      	beq.n	8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005a28:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a2a:	e001      	b.n	8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4919      	ldr	r1, [pc, #100]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	d101      	bne.n	8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005a3c:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a3e:	e001      	b.n	8005a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f043 0202 	orr.w	r2, r3, #2
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fdfa 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d136      	bne.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d031      	beq.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a84:	e001      	b.n	8005a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4902      	ldr	r1, [pc, #8]	; (8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a92:	428b      	cmp	r3, r1
 8005a94:	d106      	bne.n	8005aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005a96:	4b02      	ldr	r3, [pc, #8]	; (8005aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a98:	e006      	b.n	8005aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005a9a:	bf00      	nop
 8005a9c:	40003800 	.word	0x40003800
 8005aa0:	40003400 	.word	0x40003400
 8005aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005aac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005abc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fdc0 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ad8:	e000      	b.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ada:	bf00      	nop
}
 8005adc:	bf00      	nop
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c99      	adds	r1, r3, #2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6251      	str	r1, [r2, #36]	; 0x24
 8005b0a:	881a      	ldrh	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d113      	bne.n	8005b52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffc9 	bl	8005ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c99      	adds	r1, r3, #2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6251      	str	r1, [r2, #36]	; 0x24
 8005b6e:	8819      	ldrh	r1, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <I2SEx_TxISR_I2SExt+0x90>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <I2SEx_TxISR_I2SExt+0x22>
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8005b7c:	e001      	b.n	8005b82 <I2SEx_TxISR_I2SExt+0x26>
 8005b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b82:	460a      	mov	r2, r1
 8005b84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d121      	bne.n	8005be2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <I2SEx_TxISR_I2SExt+0x90>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d101      	bne.n	8005bac <I2SEx_TxISR_I2SExt+0x50>
 8005ba8:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8005baa:	e001      	b.n	8005bb0 <I2SEx_TxISR_I2SExt+0x54>
 8005bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	490d      	ldr	r1, [pc, #52]	; (8005bec <I2SEx_TxISR_I2SExt+0x90>)
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	d101      	bne.n	8005bc0 <I2SEx_TxISR_I2SExt+0x64>
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <I2SEx_TxISR_I2SExt+0x94>)
 8005bbe:	e001      	b.n	8005bc4 <I2SEx_TxISR_I2SExt+0x68>
 8005bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ff81 	bl	8005ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40003800 	.word	0x40003800
 8005bf0:	40003400 	.word	0x40003400

08005bf4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68d8      	ldr	r0, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	1c99      	adds	r1, r3, #2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c0c:	b282      	uxth	r2, r0
 8005c0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d113      	bne.n	8005c50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ff4a 	bl	8005ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <I2SEx_RxISR_I2SExt+0x16>
 8005c6a:	4b20      	ldr	r3, [pc, #128]	; (8005cec <I2SEx_RxISR_I2SExt+0x94>)
 8005c6c:	e001      	b.n	8005c72 <I2SEx_RxISR_I2SExt+0x1a>
 8005c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c72:	68d8      	ldr	r0, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	1c99      	adds	r1, r3, #2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c7e:	b282      	uxth	r2, r0
 8005c80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d121      	bne.n	8005cde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <I2SEx_RxISR_I2SExt+0x50>
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <I2SEx_RxISR_I2SExt+0x94>)
 8005ca6:	e001      	b.n	8005cac <I2SEx_RxISR_I2SExt+0x54>
 8005ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	490d      	ldr	r1, [pc, #52]	; (8005ce8 <I2SEx_RxISR_I2SExt+0x90>)
 8005cb4:	428b      	cmp	r3, r1
 8005cb6:	d101      	bne.n	8005cbc <I2SEx_RxISR_I2SExt+0x64>
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <I2SEx_RxISR_I2SExt+0x94>)
 8005cba:	e001      	b.n	8005cc0 <I2SEx_RxISR_I2SExt+0x68>
 8005cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff03 	bl	8005ae4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40003800 	.word	0x40003800
 8005cec:	40003400 	.word	0x40003400

08005cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e267      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d075      	beq.n	8005dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d0e:	4b88      	ldr	r3, [pc, #544]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d00c      	beq.n	8005d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d1a:	4b85      	ldr	r3, [pc, #532]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d112      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d26:	4b82      	ldr	r3, [pc, #520]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d32:	d10b      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	4b7e      	ldr	r3, [pc, #504]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05b      	beq.n	8005df8 <HAL_RCC_OscConfig+0x108>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d157      	bne.n	8005df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e242      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d54:	d106      	bne.n	8005d64 <HAL_RCC_OscConfig+0x74>
 8005d56:	4b76      	ldr	r3, [pc, #472]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a75      	ldr	r2, [pc, #468]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <HAL_RCC_OscConfig+0xb0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x98>
 8005d6e:	4b70      	ldr	r3, [pc, #448]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a6f      	ldr	r2, [pc, #444]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a6c      	ldr	r2, [pc, #432]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0xb0>
 8005d88:	4b69      	ldr	r3, [pc, #420]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a68      	ldr	r2, [pc, #416]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b66      	ldr	r3, [pc, #408]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a65      	ldr	r2, [pc, #404]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d013      	beq.n	8005dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fd fdc6 	bl	8003938 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fd fdc2 	bl	8003938 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e207      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0xc0>
 8005dce:	e014      	b.n	8005dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd0:	f7fd fdb2 	bl	8003938 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dd8:	f7fd fdae 	bl	8003938 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	; 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1f3      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dea:	4b51      	ldr	r3, [pc, #324]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0xe8>
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d063      	beq.n	8005ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e06:	4b4a      	ldr	r3, [pc, #296]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e12:	4b47      	ldr	r3, [pc, #284]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d11c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1e:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2a:	4b41      	ldr	r3, [pc, #260]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCC_OscConfig+0x152>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d001      	beq.n	8005e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e1c7      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e42:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4937      	ldr	r1, [pc, #220]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	e03a      	b.n	8005ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e60:	4b34      	ldr	r3, [pc, #208]	; (8005f34 <HAL_RCC_OscConfig+0x244>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fd fd67 	bl	8003938 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e6e:	f7fd fd63 	bl	8003938 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e1a8      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	4b28      	ldr	r3, [pc, #160]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4925      	ldr	r1, [pc, #148]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	e015      	b.n	8005ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_RCC_OscConfig+0x244>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fd fd46 	bl	8003938 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fd fd42 	bl	8003938 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e187      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d036      	beq.n	8005f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HAL_RCC_OscConfig+0x248>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fd fd26 	bl	8003938 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef0:	f7fd fd22 	bl	8003938 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e167      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x200>
 8005f0e:	e01b      	b.n	8005f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <HAL_RCC_OscConfig+0x248>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f16:	f7fd fd0f 	bl	8003938 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f1c:	e00e      	b.n	8005f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f1e:	f7fd fd0b 	bl	8003938 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d907      	bls.n	8005f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e150      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
 8005f30:	40023800 	.word	0x40023800
 8005f34:	42470000 	.word	0x42470000
 8005f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	4b88      	ldr	r3, [pc, #544]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ea      	bne.n	8005f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8097 	beq.w	8006084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b81      	ldr	r3, [pc, #516]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	4b7d      	ldr	r3, [pc, #500]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4a7c      	ldr	r2, [pc, #496]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f74:	6413      	str	r3, [r2, #64]	; 0x40
 8005f76:	4b7a      	ldr	r3, [pc, #488]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	4b77      	ldr	r3, [pc, #476]	; (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d118      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f92:	4b74      	ldr	r3, [pc, #464]	; (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a73      	ldr	r2, [pc, #460]	; (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9e:	f7fd fccb 	bl	8003938 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fd fcc7 	bl	8003938 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e10c      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb8:	4b6a      	ldr	r3, [pc, #424]	; (8006164 <HAL_RCC_OscConfig+0x474>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_OscConfig+0x2ea>
 8005fcc:	4b64      	ldr	r3, [pc, #400]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a63      	ldr	r2, [pc, #396]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x324>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d10c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x30c>
 8005fe2:	4b5f      	ldr	r3, [pc, #380]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	4a5e      	ldr	r2, [pc, #376]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	6713      	str	r3, [r2, #112]	; 0x70
 8005fee:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	4a5b      	ldr	r2, [pc, #364]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffa:	e00b      	b.n	8006014 <HAL_RCC_OscConfig+0x324>
 8005ffc:	4b58      	ldr	r3, [pc, #352]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	4a57      	ldr	r2, [pc, #348]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	6713      	str	r3, [r2, #112]	; 0x70
 8006008:	4b55      	ldr	r3, [pc, #340]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600c:	4a54      	ldr	r2, [pc, #336]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 800600e:	f023 0304 	bic.w	r3, r3, #4
 8006012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fd fc8c 	bl	8003938 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006022:	e00a      	b.n	800603a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006024:	f7fd fc88 	bl	8003938 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e0cb      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	4b49      	ldr	r3, [pc, #292]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0ee      	beq.n	8006024 <HAL_RCC_OscConfig+0x334>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006048:	f7fd fc76 	bl	8003938 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800604e:	e00a      	b.n	8006066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fd fc72 	bl	8003938 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	; 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0b5      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1ee      	bne.n	8006050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	4a38      	ldr	r2, [pc, #224]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a1 	beq.w	80061d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b08      	cmp	r3, #8
 8006098:	d05c      	beq.n	8006154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d141      	bne.n	8006126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <HAL_RCC_OscConfig+0x478>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fd fc46 	bl	8003938 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fd fc42 	bl	8003938 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e087      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	4b27      	ldr	r3, [pc, #156]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	019b      	lsls	r3, r3, #6
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	3b01      	subs	r3, #1
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	061b      	lsls	r3, r3, #24
 80060f2:	491b      	ldr	r1, [pc, #108]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f8:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <HAL_RCC_OscConfig+0x478>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fd fc1b 	bl	8003938 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006106:	f7fd fc17 	bl	8003938 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e05c      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x416>
 8006124:	e054      	b.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b10      	ldr	r3, [pc, #64]	; (8006168 <HAL_RCC_OscConfig+0x478>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fd fc04 	bl	8003938 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006134:	f7fd fc00 	bl	8003938 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e045      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_RCC_OscConfig+0x470>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x444>
 8006152:	e03d      	b.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e038      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
 8006160:	40023800 	.word	0x40023800
 8006164:	40007000 	.word	0x40007000
 8006168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800616c:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <HAL_RCC_OscConfig+0x4ec>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d028      	beq.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d121      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d11a      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	3b01      	subs	r3, #1
 80061b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800

080061e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0cc      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061f4:	4b68      	ldr	r3, [pc, #416]	; (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d90c      	bls.n	800621c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006202:	4b65      	ldr	r3, [pc, #404]	; (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b63      	ldr	r3, [pc, #396]	; (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0b8      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006234:	4b59      	ldr	r3, [pc, #356]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a58      	ldr	r2, [pc, #352]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800623e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800624c:	4b53      	ldr	r3, [pc, #332]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a52      	ldr	r2, [pc, #328]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b50      	ldr	r3, [pc, #320]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	494d      	ldr	r1, [pc, #308]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d044      	beq.n	8006300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b47      	ldr	r3, [pc, #284]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d119      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d003      	beq.n	800629e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629a:	2b03      	cmp	r3, #3
 800629c:	d107      	bne.n	80062ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629e:	4b3f      	ldr	r3, [pc, #252]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e06f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ae:	4b3b      	ldr	r3, [pc, #236]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e067      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062be:	4b37      	ldr	r3, [pc, #220]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f023 0203 	bic.w	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4934      	ldr	r1, [pc, #208]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062d0:	f7fd fb32 	bl	8003938 <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d8:	f7fd fb2e 	bl	8003938 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e04f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	4b2b      	ldr	r3, [pc, #172]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 020c 	and.w	r2, r3, #12
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d1eb      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d20c      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b22      	ldr	r3, [pc, #136]	; (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b20      	ldr	r3, [pc, #128]	; (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e032      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006334:	4b19      	ldr	r3, [pc, #100]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4916      	ldr	r1, [pc, #88]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	490e      	ldr	r1, [pc, #56]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	4313      	orrs	r3, r2
 8006364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006366:	f000 f821 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	490a      	ldr	r1, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006378:	5ccb      	ldrb	r3, [r1, r3]
 800637a:	fa22 f303 	lsr.w	r3, r2, r3
 800637e:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fd f8d2 	bl	8003530 <HAL_InitTick>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023c00 	.word	0x40023c00
 800639c:	40023800 	.word	0x40023800
 80063a0:	080107fc 	.word	0x080107fc
 80063a4:	20000034 	.word	0x20000034
 80063a8:	20000038 	.word	0x20000038

080063ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b0:	b094      	sub	sp, #80	; 0x50
 80063b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	647b      	str	r3, [r7, #68]	; 0x44
 80063b8:	2300      	movs	r3, #0
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063bc:	2300      	movs	r3, #0
 80063be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c4:	4b79      	ldr	r3, [pc, #484]	; (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d00d      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x40>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	f200 80e1 	bhi.w	8006598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x34>
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063de:	e0db      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063e0:	4b73      	ldr	r3, [pc, #460]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063e4:	e0db      	b.n	800659e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063e6:	4b73      	ldr	r3, [pc, #460]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80063e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063ea:	e0d8      	b.n	800659e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ec:	4b6f      	ldr	r3, [pc, #444]	; (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063f6:	4b6d      	ldr	r3, [pc, #436]	; (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d063      	beq.n	80064ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006402:	4b6a      	ldr	r3, [pc, #424]	; (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	2200      	movs	r2, #0
 800640a:	63bb      	str	r3, [r7, #56]	; 0x38
 800640c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006414:	633b      	str	r3, [r7, #48]	; 0x30
 8006416:	2300      	movs	r3, #0
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
 800641a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800641e:	4622      	mov	r2, r4
 8006420:	462b      	mov	r3, r5
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	0159      	lsls	r1, r3, #5
 800642c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006430:	0150      	lsls	r0, r2, #5
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4621      	mov	r1, r4
 8006438:	1a51      	subs	r1, r2, r1
 800643a:	6139      	str	r1, [r7, #16]
 800643c:	4629      	mov	r1, r5
 800643e:	eb63 0301 	sbc.w	r3, r3, r1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006450:	4659      	mov	r1, fp
 8006452:	018b      	lsls	r3, r1, #6
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800645a:	4651      	mov	r1, sl
 800645c:	018a      	lsls	r2, r1, #6
 800645e:	4651      	mov	r1, sl
 8006460:	ebb2 0801 	subs.w	r8, r2, r1
 8006464:	4659      	mov	r1, fp
 8006466:	eb63 0901 	sbc.w	r9, r3, r1
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800647a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800647e:	4690      	mov	r8, r2
 8006480:	4699      	mov	r9, r3
 8006482:	4623      	mov	r3, r4
 8006484:	eb18 0303 	adds.w	r3, r8, r3
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	462b      	mov	r3, r5
 800648c:	eb49 0303 	adc.w	r3, r9, r3
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800649e:	4629      	mov	r1, r5
 80064a0:	024b      	lsls	r3, r1, #9
 80064a2:	4621      	mov	r1, r4
 80064a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064a8:	4621      	mov	r1, r4
 80064aa:	024a      	lsls	r2, r1, #9
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b2:	2200      	movs	r2, #0
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064bc:	f7fa fbe4 	bl	8000c88 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4613      	mov	r3, r2
 80064c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c8:	e058      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	099b      	lsrs	r3, r3, #6
 80064d0:	2200      	movs	r2, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	4611      	mov	r1, r2
 80064d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	2300      	movs	r3, #0
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
 80064e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064e4:	4642      	mov	r2, r8
 80064e6:	464b      	mov	r3, r9
 80064e8:	f04f 0000 	mov.w	r0, #0
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	0159      	lsls	r1, r3, #5
 80064f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f6:	0150      	lsls	r0, r2, #5
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4641      	mov	r1, r8
 80064fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006502:	4649      	mov	r1, r9
 8006504:	eb63 0b01 	sbc.w	fp, r3, r1
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800651c:	ebb2 040a 	subs.w	r4, r2, sl
 8006520:	eb63 050b 	sbc.w	r5, r3, fp
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	00eb      	lsls	r3, r5, #3
 800652e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006532:	00e2      	lsls	r2, r4, #3
 8006534:	4614      	mov	r4, r2
 8006536:	461d      	mov	r5, r3
 8006538:	4643      	mov	r3, r8
 800653a:	18e3      	adds	r3, r4, r3
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	464b      	mov	r3, r9
 8006540:	eb45 0303 	adc.w	r3, r5, r3
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006552:	4629      	mov	r1, r5
 8006554:	028b      	lsls	r3, r1, #10
 8006556:	4621      	mov	r1, r4
 8006558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800655c:	4621      	mov	r1, r4
 800655e:	028a      	lsls	r2, r1, #10
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006566:	2200      	movs	r2, #0
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	61fa      	str	r2, [r7, #28]
 800656c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006570:	f7fa fb8a 	bl	8000c88 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4613      	mov	r3, r2
 800657a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	3301      	adds	r3, #1
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800658c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800658e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006596:	e002      	b.n	800659e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800659a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800659c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3750      	adds	r7, #80	; 0x50
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800
 80065b0:	00f42400 	.word	0x00f42400
 80065b4:	007a1200 	.word	0x007a1200

080065b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065bc:	4b03      	ldr	r3, [pc, #12]	; (80065cc <HAL_RCC_GetHCLKFreq+0x14>)
 80065be:	681b      	ldr	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000034 	.word	0x20000034

080065d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065d4:	f7ff fff0 	bl	80065b8 <HAL_RCC_GetHCLKFreq>
 80065d8:	4602      	mov	r2, r0
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	0a9b      	lsrs	r3, r3, #10
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	4903      	ldr	r1, [pc, #12]	; (80065f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e6:	5ccb      	ldrb	r3, [r1, r3]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40023800 	.word	0x40023800
 80065f4:	0801080c 	.word	0x0801080c

080065f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065fc:	f7ff ffdc 	bl	80065b8 <HAL_RCC_GetHCLKFreq>
 8006600:	4602      	mov	r2, r0
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	0b5b      	lsrs	r3, r3, #13
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	4903      	ldr	r1, [pc, #12]	; (800661c <HAL_RCC_GetPCLK2Freq+0x24>)
 800660e:	5ccb      	ldrb	r3, [r1, r3]
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40023800 	.word	0x40023800
 800661c:	0801080c 	.word	0x0801080c

08006620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	220f      	movs	r2, #15
 800662e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006630:	4b12      	ldr	r3, [pc, #72]	; (800667c <HAL_RCC_GetClockConfig+0x5c>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0203 	and.w	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <HAL_RCC_GetClockConfig+0x5c>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <HAL_RCC_GetClockConfig+0x5c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <HAL_RCC_GetClockConfig+0x5c>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	08db      	lsrs	r3, r3, #3
 800665a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006662:	4b07      	ldr	r3, [pc, #28]	; (8006680 <HAL_RCC_GetClockConfig+0x60>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0207 	and.w	r2, r3, #7
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
 8006680:	40023c00 	.word	0x40023c00

08006684 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d035      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066ac:	4b62      	ldr	r3, [pc, #392]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066b2:	f7fd f941 	bl	8003938 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ba:	f7fd f93d 	bl	8003938 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0b0      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066cc:	4b5b      	ldr	r3, [pc, #364]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	019a      	lsls	r2, r3, #6
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	071b      	lsls	r3, r3, #28
 80066e4:	4955      	ldr	r1, [pc, #340]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066ec:	4b52      	ldr	r3, [pc, #328]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066f2:	f7fd f921 	bl	8003938 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066fa:	f7fd f91d 	bl	8003938 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e090      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800670c:	4b4b      	ldr	r3, [pc, #300]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0f0      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8083 	beq.w	800682c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	4b44      	ldr	r3, [pc, #272]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	4a43      	ldr	r2, [pc, #268]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006734:	6413      	str	r3, [r2, #64]	; 0x40
 8006736:	4b41      	ldr	r3, [pc, #260]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006742:	4b3f      	ldr	r3, [pc, #252]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a3e      	ldr	r2, [pc, #248]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800674e:	f7fd f8f3 	bl	8003938 <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006756:	f7fd f8ef 	bl	8003938 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e062      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006768:	4b35      	ldr	r3, [pc, #212]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006774:	4b31      	ldr	r3, [pc, #196]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02f      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	d028      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006792:	4b2a      	ldr	r3, [pc, #168]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800679c:	4b29      	ldr	r3, [pc, #164]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067a2:	4b28      	ldr	r3, [pc, #160]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067a8:	4a24      	ldr	r2, [pc, #144]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067ae:	4b23      	ldr	r3, [pc, #140]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d114      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fd f8bd 	bl	8003938 <HAL_GetTick>
 80067be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c0:	e00a      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067c2:	f7fd f8b9 	bl	8003938 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e02a      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d8:	4b18      	ldr	r3, [pc, #96]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ee      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f0:	d10d      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006806:	490d      	ldr	r1, [pc, #52]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006808:	4313      	orrs	r3, r2
 800680a:	608b      	str	r3, [r1, #8]
 800680c:	e005      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006814:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006818:	6093      	str	r3, [r2, #8]
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800681c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006826:	4905      	ldr	r1, [pc, #20]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006828:	4313      	orrs	r3, r2
 800682a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	42470068 	.word	0x42470068
 800683c:	40023800 	.word	0x40023800
 8006840:	40007000 	.word	0x40007000
 8006844:	42470e40 	.word	0x42470e40

08006848 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d13e      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d12f      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800687c:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800687e:	617b      	str	r3, [r7, #20]
          break;
 8006880:	e02f      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688e:	d108      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006890:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006898:	4a18      	ldr	r2, [pc, #96]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	e007      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068a2:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068b2:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b8:	099b      	lsrs	r3, r3, #6
 80068ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	fb02 f303 	mul.w	r3, r2, r3
 80068c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068cc:	0f1b      	lsrs	r3, r3, #28
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]
          break;
 80068da:	e002      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
          break;
 80068e0:	bf00      	nop
        }
      }
      break;
 80068e2:	bf00      	nop
    }
  }
  return frequency;
 80068e4:	697b      	ldr	r3, [r7, #20]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40023800 	.word	0x40023800
 80068f8:	00bb8000 	.word	0x00bb8000
 80068fc:	007a1200 	.word	0x007a1200
 8006900:	00f42400 	.word	0x00f42400

08006904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e07b      	b.n	8006a0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d108      	bne.n	8006930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006926:	d009      	beq.n	800693c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	61da      	str	r2, [r3, #28]
 800692e:	e005      	b.n	800693c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fc fc30 	bl	80031bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	ea42 0103 	orr.w	r1, r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	f003 0104 	and.w	r1, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0210 	and.w	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b088      	sub	sp, #32
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_SPI_Transmit+0x22>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e126      	b.n	8006c86 <HAL_SPI_Transmit+0x270>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a40:	f7fc ff7a 	bl	8003938 <HAL_GetTick>
 8006a44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
 8006a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a5a:	e10b      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_SPI_Transmit+0x52>
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a6c:	e102      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2203      	movs	r2, #3
 8006a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ad4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d007      	beq.n	8006af4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afc:	d14b      	bne.n	8006b96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <HAL_SPI_Transmit+0xf6>
 8006b06:	8afb      	ldrh	r3, [r7, #22]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d13e      	bne.n	8006b8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	881a      	ldrh	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b30:	e02b      	b.n	8006b8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d112      	bne.n	8006b66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	881a      	ldrh	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b64:	e011      	b.n	8006b8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b66:	f7fc fee7 	bl	8003938 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d803      	bhi.n	8006b7e <HAL_SPI_Transmit+0x168>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Transmit+0x16e>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b88:	e074      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ce      	bne.n	8006b32 <HAL_SPI_Transmit+0x11c>
 8006b94:	e04c      	b.n	8006c30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Transmit+0x18e>
 8006b9e:	8afb      	ldrh	r3, [r7, #22]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d140      	bne.n	8006c26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bca:	e02c      	b.n	8006c26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d113      	bne.n	8006c02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c00:	e011      	b.n	8006c26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c02:	f7fc fe99 	bl	8003938 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d803      	bhi.n	8006c1a <HAL_SPI_Transmit+0x204>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d102      	bne.n	8006c20 <HAL_SPI_Transmit+0x20a>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c24:	e026      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1cd      	bne.n	8006bcc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fbcb 	bl	80073d0 <SPI_EndRxTxTransaction>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e000      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b088      	sub	sp, #32
 8006c92:	af02      	add	r7, sp, #8
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	603b      	str	r3, [r7, #0]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006caa:	d112      	bne.n	8006cd2 <HAL_SPI_Receive+0x44>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10e      	bne.n	8006cd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f8f1 	bl	8006eb0 <HAL_SPI_TransmitReceive>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	e0ea      	b.n	8006ea8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_SPI_Receive+0x52>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e0e3      	b.n	8006ea8 <HAL_SPI_Receive+0x21a>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce8:	f7fc fe26 	bl	8003938 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cfe:	e0ca      	b.n	8006e96 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_Receive+0x7e>
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d10:	e0c1      	b.n	8006e96 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2204      	movs	r2, #4
 8006d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	d10f      	bne.n	8006d7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d007      	beq.n	8006d98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d162      	bne.n	8006e66 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006da0:	e02e      	b.n	8006e00 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d115      	bne.n	8006ddc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f103 020c 	add.w	r2, r3, #12
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	7812      	ldrb	r2, [r2, #0]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dda:	e011      	b.n	8006e00 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ddc:	f7fc fdac 	bl	8003938 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_Receive+0x166>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Receive+0x16c>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dfe:	e04a      	b.n	8006e96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1cb      	bne.n	8006da2 <HAL_SPI_Receive+0x114>
 8006e0a:	e031      	b.n	8006e70 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d113      	bne.n	8006e42 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	b292      	uxth	r2, r2
 8006e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	1c9a      	adds	r2, r3, #2
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e40:	e011      	b.n	8006e66 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e42:	f7fc fd79 	bl	8003938 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d803      	bhi.n	8006e5a <HAL_SPI_Receive+0x1cc>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d102      	bne.n	8006e60 <HAL_SPI_Receive+0x1d2>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d102      	bne.n	8006e66 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e64:	e017      	b.n	8006e96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1cd      	bne.n	8006e0c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 fa45 	bl	8007304 <SPI_EndRxTransaction>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
 8006e92:	e000      	b.n	8006e96 <HAL_SPI_Receive+0x208>
  }

error :
 8006e94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x26>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e18a      	b.n	80071ec <HAL_SPI_TransmitReceive+0x33c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ede:	f7fc fd2b 	bl	8003938 <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ef4:	887b      	ldrh	r3, [r7, #2]
 8006ef6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d00f      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x70>
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f06:	d107      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x68>
 8006f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d003      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f1e:	e15b      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x82>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x82>
 8006f2c:	887b      	ldrh	r3, [r7, #2]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f38:	e14e      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d003      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2205      	movs	r2, #5
 8006f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	887a      	ldrh	r2, [r7, #2]
 8006f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	887a      	ldrh	r2, [r7, #2]
 8006f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	887a      	ldrh	r2, [r7, #2]
 8006f70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	887a      	ldrh	r2, [r7, #2]
 8006f76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d007      	beq.n	8006fa2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006faa:	d178      	bne.n	800709e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_SPI_TransmitReceive+0x10a>
 8006fb4:	8b7b      	ldrh	r3, [r7, #26]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d166      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	881a      	ldrh	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fde:	e053      	b.n	8007088 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d11b      	bne.n	8007026 <HAL_SPI_TransmitReceive+0x176>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d016      	beq.n	8007026 <HAL_SPI_TransmitReceive+0x176>
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d113      	bne.n	8007026 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	881a      	ldrh	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b01      	cmp	r3, #1
 8007032:	d119      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x1b8>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d014      	beq.n	8007068 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	b292      	uxth	r2, r2
 800704a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	1c9a      	adds	r2, r3, #2
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007064:	2301      	movs	r3, #1
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007068:	f7fc fc66 	bl	8003938 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007074:	429a      	cmp	r2, r3
 8007076:	d807      	bhi.n	8007088 <HAL_SPI_TransmitReceive+0x1d8>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d003      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007086:	e0a7      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1a6      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x130>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1a1      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x130>
 800709c:	e07c      	b.n	8007198 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_SPI_TransmitReceive+0x1fc>
 80070a6:	8b7b      	ldrh	r3, [r7, #26]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d16b      	bne.n	8007184 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	7812      	ldrb	r2, [r2, #0]
 80070b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d2:	e057      	b.n	8007184 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d11c      	bne.n	800711c <HAL_SPI_TransmitReceive+0x26c>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d017      	beq.n	800711c <HAL_SPI_TransmitReceive+0x26c>
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d114      	bne.n	800711c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b01      	cmp	r3, #1
 8007128:	d119      	bne.n	800715e <HAL_SPI_TransmitReceive+0x2ae>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d014      	beq.n	800715e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800715a:	2301      	movs	r3, #1
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800715e:	f7fc fbeb 	bl	8003938 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716a:	429a      	cmp	r2, r3
 800716c:	d803      	bhi.n	8007176 <HAL_SPI_TransmitReceive+0x2c6>
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d102      	bne.n	800717c <HAL_SPI_TransmitReceive+0x2cc>
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2b00      	cmp	r3, #0
 800717a:	d103      	bne.n	8007184 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007182:	e029      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1a2      	bne.n	80070d4 <HAL_SPI_TransmitReceive+0x224>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d19d      	bne.n	80070d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f917 	bl	80073d0 <SPI_EndRxTxTransaction>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071b4:	e010      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	e000      	b.n	80071d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80071d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3730      	adds	r7, #48	; 0x30
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007204:	f7fc fb98 	bl	8003938 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4413      	add	r3, r2
 8007212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007214:	f7fc fb90 	bl	8003938 <HAL_GetTick>
 8007218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800721a:	4b39      	ldr	r3, [pc, #228]	; (8007300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	015b      	lsls	r3, r3, #5
 8007220:	0d1b      	lsrs	r3, r3, #20
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	fb02 f303 	mul.w	r3, r2, r3
 8007228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800722a:	e054      	b.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d050      	beq.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007234:	f7fc fb80 	bl	8003938 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	429a      	cmp	r2, r3
 8007242:	d902      	bls.n	800724a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d13d      	bne.n	80072c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007262:	d111      	bne.n	8007288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726c:	d004      	beq.n	8007278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007276:	d107      	bne.n	8007288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007290:	d10f      	bne.n	80072b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e017      	b.n	80072f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4013      	ands	r3, r2
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	bf0c      	ite	eq
 80072e6:	2301      	moveq	r3, #1
 80072e8:	2300      	movne	r3, #0
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d19b      	bne.n	800722c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000034 	.word	0x20000034

08007304 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007318:	d111      	bne.n	800733e <SPI_EndRxTransaction+0x3a>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007322:	d004      	beq.n	800732e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800732c:	d107      	bne.n	800733e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800733c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007346:	d12a      	bne.n	800739e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007350:	d012      	beq.n	8007378 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	2180      	movs	r1, #128	; 0x80
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7ff ff49 	bl	80071f4 <SPI_WaitFlagStateUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d02d      	beq.n	80073c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e026      	b.n	80073c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	2101      	movs	r1, #1
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff ff36 	bl	80071f4 <SPI_WaitFlagStateUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01a      	beq.n	80073c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e013      	b.n	80073c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	2101      	movs	r1, #1
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff ff23 	bl	80071f4 <SPI_WaitFlagStateUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	f043 0220 	orr.w	r2, r3, #32
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e000      	b.n	80073c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <SPI_EndRxTxTransaction+0x7c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <SPI_EndRxTxTransaction+0x80>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	0d5b      	lsrs	r3, r3, #21
 80073e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073fa:	d112      	bne.n	8007422 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff fef4 	bl	80071f4 <SPI_WaitFlagStateUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d016      	beq.n	8007440 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	f043 0220 	orr.w	r2, r3, #32
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e00f      	b.n	8007442 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	3b01      	subs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d0f2      	beq.n	8007422 <SPI_EndRxTxTransaction+0x52>
 800743c:	e000      	b.n	8007440 <SPI_EndRxTxTransaction+0x70>
        break;
 800743e:	bf00      	nop
  }

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000034 	.word	0x20000034
 8007450:	165e9f81 	.word	0x165e9f81

08007454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e041      	b.n	80074ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f839 	bl	80074f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f000 faea 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d001      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e04e      	b.n	80075be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a23      	ldr	r2, [pc, #140]	; (80075cc <HAL_TIM_Base_Start_IT+0xc4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d022      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754a:	d01d      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d018      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1c      	ldr	r2, [pc, #112]	; (80075d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0x80>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d111      	bne.n	80075ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b06      	cmp	r3, #6
 8007598:	d010      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075aa:	e007      	b.n	80075bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0201 	orr.w	r2, r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40010000 	.word	0x40010000
 80075d0:	40000400 	.word	0x40000400
 80075d4:	40000800 	.word	0x40000800
 80075d8:	40000c00 	.word	0x40000c00
 80075dc:	40010400 	.word	0x40010400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40001800 	.word	0x40001800

080075e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e041      	b.n	800767e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fb fe52 	bl	80032b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 fa20 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b02      	cmp	r3, #2
 800769a:	d122      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d11b      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0202 	mvn.w	r2, #2
 80076b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9b1 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 80076ce:	e005      	b.n	80076dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9a3 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f9b4 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d122      	bne.n	8007736 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d11b      	bne.n	8007736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0204 	mvn.w	r2, #4
 8007706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f987 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 8007722:	e005      	b.n	8007730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f979 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f98a 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b08      	cmp	r3, #8
 8007742:	d122      	bne.n	800778a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b08      	cmp	r3, #8
 8007750:	d11b      	bne.n	800778a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0208 	mvn.w	r2, #8
 800775a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2204      	movs	r2, #4
 8007760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f95d 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 8007776:	e005      	b.n	8007784 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f94f 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f960 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b10      	cmp	r3, #16
 8007796:	d122      	bne.n	80077de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d11b      	bne.n	80077de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f06f 0210 	mvn.w	r2, #16
 80077ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2208      	movs	r2, #8
 80077b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f933 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 80077ca:	e005      	b.n	80077d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f925 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f936 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10e      	bne.n	800780a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d107      	bne.n	800780a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f06f 0201 	mvn.w	r2, #1
 8007802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fb f909 	bl	8002a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d10e      	bne.n	8007836 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d107      	bne.n	8007836 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800782e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbf1 	bl	8008018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d10e      	bne.n	8007862 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d107      	bne.n	8007862 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800785a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f8fb 	bl	8007a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b20      	cmp	r3, #32
 800786e:	d10e      	bne.n	800788e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b20      	cmp	r3, #32
 800787c:	d107      	bne.n	800788e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f06f 0220 	mvn.w	r2, #32
 8007886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fbbb 	bl	8008004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e0ae      	b.n	8007a14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b0c      	cmp	r3, #12
 80078c2:	f200 809f 	bhi.w	8007a04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	08007901 	.word	0x08007901
 80078d0:	08007a05 	.word	0x08007a05
 80078d4:	08007a05 	.word	0x08007a05
 80078d8:	08007a05 	.word	0x08007a05
 80078dc:	08007941 	.word	0x08007941
 80078e0:	08007a05 	.word	0x08007a05
 80078e4:	08007a05 	.word	0x08007a05
 80078e8:	08007a05 	.word	0x08007a05
 80078ec:	08007983 	.word	0x08007983
 80078f0:	08007a05 	.word	0x08007a05
 80078f4:	08007a05 	.word	0x08007a05
 80078f8:	08007a05 	.word	0x08007a05
 80078fc:	080079c3 	.word	0x080079c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f950 	bl	8007bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0208 	orr.w	r2, r2, #8
 800791a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0204 	bic.w	r2, r2, #4
 800792a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6999      	ldr	r1, [r3, #24]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	619a      	str	r2, [r3, #24]
      break;
 800793e:	e064      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f9a0 	bl	8007c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800796a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6999      	ldr	r1, [r3, #24]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	021a      	lsls	r2, r3, #8
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	619a      	str	r2, [r3, #24]
      break;
 8007980:	e043      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 f9f5 	bl	8007d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0208 	orr.w	r2, r2, #8
 800799c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0204 	bic.w	r2, r2, #4
 80079ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69d9      	ldr	r1, [r3, #28]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	61da      	str	r2, [r3, #28]
      break;
 80079c0:	e023      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fa49 	bl	8007e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69d9      	ldr	r1, [r3, #28]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	021a      	lsls	r2, r3, #8
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	61da      	str	r2, [r3, #28]
      break;
 8007a02:	e002      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
      break;
 8007a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a40      	ldr	r2, [pc, #256]	; (8007b80 <TIM_Base_SetConfig+0x114>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d00f      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3d      	ldr	r2, [pc, #244]	; (8007b84 <TIM_Base_SetConfig+0x118>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3c      	ldr	r2, [pc, #240]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a3b      	ldr	r2, [pc, #236]	; (8007b8c <TIM_Base_SetConfig+0x120>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a3a      	ldr	r2, [pc, #232]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d108      	bne.n	8007abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <TIM_Base_SetConfig+0x114>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007acc:	d027      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2c      	ldr	r2, [pc, #176]	; (8007b84 <TIM_Base_SetConfig+0x118>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d023      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a2b      	ldr	r2, [pc, #172]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01f      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <TIM_Base_SetConfig+0x120>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a29      	ldr	r2, [pc, #164]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d017      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a28      	ldr	r2, [pc, #160]	; (8007b94 <TIM_Base_SetConfig+0x128>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a27      	ldr	r2, [pc, #156]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00f      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a26      	ldr	r2, [pc, #152]	; (8007b9c <TIM_Base_SetConfig+0x130>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a25      	ldr	r2, [pc, #148]	; (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d007      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a23      	ldr	r2, [pc, #140]	; (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <TIM_Base_SetConfig+0x114>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_Base_SetConfig+0xf8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d103      	bne.n	8007b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	615a      	str	r2, [r3, #20]
}
 8007b72:	bf00      	nop
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800
 8007ba0:	40001800 	.word	0x40001800
 8007ba4:	40001c00 	.word	0x40001c00
 8007ba8:	40002000 	.word	0x40002000

08007bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f023 0302 	bic.w	r3, r3, #2
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <TIM_OC1_SetConfig+0xd8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC1_SetConfig+0x64>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <TIM_OC1_SetConfig+0xdc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10c      	bne.n	8007c2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f023 0308 	bic.w	r3, r3, #8
 8007c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 0304 	bic.w	r3, r3, #4
 8007c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <TIM_OC1_SetConfig+0xd8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_OC1_SetConfig+0x8e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <TIM_OC1_SetConfig+0xdc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d111      	bne.n	8007c5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40010400 	.word	0x40010400

08007c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f023 0210 	bic.w	r2, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 0320 	bic.w	r3, r3, #32
 8007cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <TIM_OC2_SetConfig+0xe4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_OC2_SetConfig+0x68>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <TIM_OC2_SetConfig+0xe8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d10d      	bne.n	8007d10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <TIM_OC2_SetConfig+0xe4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC2_SetConfig+0x94>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <TIM_OC2_SetConfig+0xe8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d113      	bne.n	8007d48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40010400 	.word	0x40010400

08007d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a21      	ldr	r2, [pc, #132]	; (8007e58 <TIM_OC3_SetConfig+0xe0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d003      	beq.n	8007dde <TIM_OC3_SetConfig+0x66>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a20      	ldr	r2, [pc, #128]	; (8007e5c <TIM_OC3_SetConfig+0xe4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d10d      	bne.n	8007dfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <TIM_OC3_SetConfig+0xe0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC3_SetConfig+0x92>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a15      	ldr	r2, [pc, #84]	; (8007e5c <TIM_OC3_SetConfig+0xe4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d113      	bne.n	8007e32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	621a      	str	r2, [r3, #32]
}
 8007e4c:	bf00      	nop
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	40010000 	.word	0x40010000
 8007e5c:	40010400 	.word	0x40010400

08007e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	031b      	lsls	r3, r3, #12
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <TIM_OC4_SetConfig+0xa4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_OC4_SetConfig+0x68>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a11      	ldr	r2, [pc, #68]	; (8007f08 <TIM_OC4_SetConfig+0xa8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d109      	bne.n	8007edc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	019b      	lsls	r3, r3, #6
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	621a      	str	r2, [r3, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400

08007f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e05a      	b.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d022      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f70:	d01d      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1d      	ldr	r2, [pc, #116]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d018      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00e      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10c      	bne.n	8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40000400 	.word	0x40000400
 8007ff0:	40000800 	.word	0x40000800
 8007ff4:	40000c00 	.word	0x40000c00
 8007ff8:	40010400 	.word	0x40010400
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40001800 	.word	0x40001800

08008004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e03f      	b.n	80080be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fb f988 	bl	8003368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2224      	movs	r2, #36	; 0x24
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800806e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fdbf 	bl	8008bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695a      	ldr	r2, [r3, #20]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b08a      	sub	sp, #40	; 0x28
 80080ca:	af02      	add	r7, sp, #8
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d17c      	bne.n	80081e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_UART_Transmit+0x2c>
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e075      	b.n	80081e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_UART_Transmit+0x3e>
 8008100:	2302      	movs	r3, #2
 8008102:	e06e      	b.n	80081e2 <HAL_UART_Transmit+0x11c>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2221      	movs	r2, #33	; 0x21
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800811a:	f7fb fc0d 	bl	8003938 <HAL_GetTick>
 800811e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	88fa      	ldrh	r2, [r7, #6]
 8008124:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008134:	d108      	bne.n	8008148 <HAL_UART_Transmit+0x82>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	e003      	b.n	8008150 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800814c:	2300      	movs	r3, #0
 800814e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008158:	e02a      	b.n	80081b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	2180      	movs	r1, #128	; 0x80
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fb9b 	bl	80088a0 <UART_WaitOnFlagUntilTimeout>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e036      	b.n	80081e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008188:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	3302      	adds	r3, #2
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	e007      	b.n	80081a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	3301      	adds	r3, #1
 80081a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1cf      	bne.n	800815a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2200      	movs	r2, #0
 80081c2:	2140      	movs	r1, #64	; 0x40
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fb6b 	bl	80088a0 <UART_WaitOnFlagUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e006      	b.n	80081e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	e000      	b.n	80081e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80081e0:	2302      	movs	r3, #2
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b08a      	sub	sp, #40	; 0x28
 80081ee:	af02      	add	r7, sp, #8
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b20      	cmp	r3, #32
 8008208:	f040 808c 	bne.w	8008324 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_UART_Receive+0x2e>
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e084      	b.n	8008326 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_UART_Receive+0x40>
 8008226:	2302      	movs	r3, #2
 8008228:	e07d      	b.n	8008326 <HAL_UART_Receive+0x13c>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2222      	movs	r2, #34	; 0x22
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008246:	f7fb fb77 	bl	8003938 <HAL_GetTick>
 800824a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	88fa      	ldrh	r2, [r7, #6]
 8008256:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008260:	d108      	bne.n	8008274 <HAL_UART_Receive+0x8a>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	61bb      	str	r3, [r7, #24]
 8008272:	e003      	b.n	800827c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008284:	e043      	b.n	800830e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2200      	movs	r2, #0
 800828e:	2120      	movs	r1, #32
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fb05 	bl	80088a0 <UART_WaitOnFlagUntilTimeout>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e042      	b.n	8008326 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10c      	bne.n	80082c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	3302      	adds	r3, #2
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	e01f      	b.n	8008300 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c8:	d007      	beq.n	80082da <HAL_UART_Receive+0xf0>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <HAL_UART_Receive+0xfe>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	e008      	b.n	80082fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	3301      	adds	r3, #1
 80082fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	b29a      	uxth	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1b6      	bne.n	8008286 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	e000      	b.n	8008326 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008324:	2302      	movs	r3, #2
  }
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b0ba      	sub	sp, #232	; 0xe8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008356:	2300      	movs	r3, #0
 8008358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800835c:	2300      	movs	r3, #0
 800835e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800836e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10f      	bne.n	8008396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <HAL_UART_IRQHandler+0x66>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fb74 	bl	8008a7c <UART_Receive_IT>
      return;
 8008394:	e256      	b.n	8008844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80de 	beq.w	800855c <HAL_UART_IRQHandler+0x22c>
 80083a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d106      	bne.n	80083ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80d1 	beq.w	800855c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <HAL_UART_IRQHandler+0xae>
 80083c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	f043 0201 	orr.w	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <HAL_UART_IRQHandler+0xd2>
 80083ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f043 0202 	orr.w	r2, r3, #2
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <HAL_UART_IRQHandler+0xf6>
 800840e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	f043 0204 	orr.w	r2, r3, #4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842a:	f003 0308 	and.w	r3, r3, #8
 800842e:	2b00      	cmp	r3, #0
 8008430:	d011      	beq.n	8008456 <HAL_UART_IRQHandler+0x126>
 8008432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800843e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f043 0208 	orr.w	r2, r3, #8
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 81ed 	beq.w	800883a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b00      	cmp	r3, #0
 800846a:	d008      	beq.n	800847e <HAL_UART_IRQHandler+0x14e>
 800846c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 faff 	bl	8008a7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	bf0c      	ite	eq
 800848c:	2301      	moveq	r3, #1
 800848e:	2300      	movne	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <HAL_UART_IRQHandler+0x17a>
 80084a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d04f      	beq.n	800854a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa07 	bl	80088be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d141      	bne.n	8008542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3314      	adds	r3, #20
 80084c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3314      	adds	r3, #20
 80084e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1d9      	bne.n	80084be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	2b00      	cmp	r3, #0
 8008510:	d013      	beq.n	800853a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	4a7d      	ldr	r2, [pc, #500]	; (800870c <HAL_UART_IRQHandler+0x3dc>)
 8008518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	4618      	mov	r0, r3
 8008520:	f7fb fe9c 	bl	800425c <HAL_DMA_Abort_IT>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d016      	beq.n	8008558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008538:	e00e      	b.n	8008558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f99a 	bl	8008874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008540:	e00a      	b.n	8008558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f996 	bl	8008874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	e006      	b.n	8008558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f992 	bl	8008874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008556:	e170      	b.n	800883a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	bf00      	nop
    return;
 800855a:	e16e      	b.n	800883a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	2b01      	cmp	r3, #1
 8008562:	f040 814a 	bne.w	80087fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856a:	f003 0310 	and.w	r3, r3, #16
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 8143 	beq.w	80087fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 813c 	beq.w	80087fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60bb      	str	r3, [r7, #8]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	f040 80b4 	bne.w	8008710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8140 	beq.w	800883e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085c6:	429a      	cmp	r2, r3
 80085c8:	f080 8139 	bcs.w	800883e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	f000 8088 	beq.w	80086f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	330c      	adds	r3, #12
 80085e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800860e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800861a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1d9      	bne.n	80085e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800863e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008640:	f023 0301 	bic.w	r3, r3, #1
 8008644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800865a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e1      	bne.n	800862e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3314      	adds	r3, #20
 8008670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800867a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3314      	adds	r3, #20
 800868a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800868e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800869c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e3      	bne.n	800866a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c2:	f023 0310 	bic.w	r3, r3, #16
 80086c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	330c      	adds	r3, #12
 80086d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80086d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80086d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e3      	bne.n	80086b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fb fd45 	bl	800417c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8c0 	bl	8008888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008708:	e099      	b.n	800883e <HAL_UART_IRQHandler+0x50e>
 800870a:	bf00      	nop
 800870c:	08008985 	.word	0x08008985
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008718:	b29b      	uxth	r3, r3
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 808b 	beq.w	8008842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800872c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8086 	beq.w	8008842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800874c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800875a:	647a      	str	r2, [r7, #68]	; 0x44
 800875c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e3      	bne.n	8008736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	623b      	str	r3, [r7, #32]
   return(result);
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3314      	adds	r3, #20
 800878e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008792:	633a      	str	r2, [r7, #48]	; 0x30
 8008794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e3      	bne.n	800876e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	330c      	adds	r3, #12
 80087ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0310 	bic.w	r3, r3, #16
 80087ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087d8:	61fa      	str	r2, [r7, #28]
 80087da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	69b9      	ldr	r1, [r7, #24]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	617b      	str	r3, [r7, #20]
   return(result);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e3      	bne.n	80087b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f848 	bl	8008888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087f8:	e023      	b.n	8008842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <HAL_UART_IRQHandler+0x4ea>
 8008806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f8ca 	bl	80089ac <UART_Transmit_IT>
    return;
 8008818:	e014      	b.n	8008844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800881a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00e      	beq.n	8008844 <HAL_UART_IRQHandler+0x514>
 8008826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d008      	beq.n	8008844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f90a 	bl	8008a4c <UART_EndTransmit_IT>
    return;
 8008838:	e004      	b.n	8008844 <HAL_UART_IRQHandler+0x514>
    return;
 800883a:	bf00      	nop
 800883c:	e002      	b.n	8008844 <HAL_UART_IRQHandler+0x514>
      return;
 800883e:	bf00      	nop
 8008840:	e000      	b.n	8008844 <HAL_UART_IRQHandler+0x514>
      return;
 8008842:	bf00      	nop
  }
}
 8008844:	37e8      	adds	r7, #232	; 0xe8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop

0800884c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	71fb      	strb	r3, [r7, #7]

  //       return HAL_TIMEOUT;
  //     }
  //   }
  // }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088be:	b480      	push	{r7}
 80088c0:	b095      	sub	sp, #84	; 0x54
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	330c      	adds	r3, #12
 80088cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	330c      	adds	r3, #12
 80088e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e6:	643a      	str	r2, [r7, #64]	; 0x40
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e5      	bne.n	80088c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3314      	adds	r3, #20
 8008900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	61fb      	str	r3, [r7, #28]
   return(result);
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	64bb      	str	r3, [r7, #72]	; 0x48
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3314      	adds	r3, #20
 8008918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800891a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800891c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e5      	bne.n	80088fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	2b01      	cmp	r3, #1
 8008934:	d119      	bne.n	800896a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	330c      	adds	r3, #12
 800893c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	60bb      	str	r3, [r7, #8]
   return(result);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	647b      	str	r3, [r7, #68]	; 0x44
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008956:	61ba      	str	r2, [r7, #24]
 8008958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6979      	ldr	r1, [r7, #20]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008978:	bf00      	nop
 800897a:	3754      	adds	r7, #84	; 0x54
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff ff68 	bl	8008874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b21      	cmp	r3, #33	; 0x21
 80089be:	d13e      	bne.n	8008a3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c8:	d114      	bne.n	80089f4 <UART_Transmit_IT+0x48>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d110      	bne.n	80089f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	1c9a      	adds	r2, r3, #2
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]
 80089f2:	e008      	b.n	8008a06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	1c59      	adds	r1, r3, #1
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6211      	str	r1, [r2, #32]
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	4619      	mov	r1, r3
 8008a14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10f      	bne.n	8008a3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e000      	b.n	8008a40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
  }
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff feed 	bl	800884c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08c      	sub	sp, #48	; 0x30
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b22      	cmp	r3, #34	; 0x22
 8008a8e:	f040 80ab 	bne.w	8008be8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d117      	bne.n	8008acc <UART_Receive_IT+0x50>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d113      	bne.n	8008acc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	1c9a      	adds	r2, r3, #2
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8008aca:	e026      	b.n	8008b1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ade:	d007      	beq.n	8008af0 <UART_Receive_IT+0x74>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <UART_Receive_IT+0x82>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e008      	b.n	8008b10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b01      	subs	r3, #1
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4619      	mov	r1, r3
 8008b28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d15a      	bne.n	8008be4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0220 	bic.w	r2, r2, #32
 8008b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 0201 	bic.w	r2, r2, #1
 8008b5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d135      	bne.n	8008bda <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	613b      	str	r3, [r7, #16]
   return(result);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	330c      	adds	r3, #12
 8008b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b94:	623a      	str	r2, [r7, #32]
 8008b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	69f9      	ldr	r1, [r7, #28]
 8008b9a:	6a3a      	ldr	r2, [r7, #32]
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e5      	bne.n	8008b74 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0310 	and.w	r3, r3, #16
 8008bb2:	2b10      	cmp	r3, #16
 8008bb4:	d10a      	bne.n	8008bcc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fe58 	bl	8008888 <HAL_UARTEx_RxEventCallback>
 8008bd8:	e002      	b.n	8008be0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff fe40 	bl	8008860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e002      	b.n	8008bea <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e000      	b.n	8008bea <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008be8:	2302      	movs	r3, #2
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3730      	adds	r7, #48	; 0x30
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bf8:	b0c0      	sub	sp, #256	; 0x100
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c10:	68d9      	ldr	r1, [r3, #12]
 8008c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	ea40 0301 	orr.w	r3, r0, r1
 8008c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c4c:	f021 010c 	bic.w	r1, r1, #12
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6e:	6999      	ldr	r1, [r3, #24]
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	ea40 0301 	orr.w	r3, r0, r1
 8008c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b8f      	ldr	r3, [pc, #572]	; (8008ec0 <UART_SetConfig+0x2cc>)
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d005      	beq.n	8008c94 <UART_SetConfig+0xa0>
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b8d      	ldr	r3, [pc, #564]	; (8008ec4 <UART_SetConfig+0x2d0>)
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d104      	bne.n	8008c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c94:	f7fd fcb0 	bl	80065f8 <HAL_RCC_GetPCLK2Freq>
 8008c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c9c:	e003      	b.n	8008ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c9e:	f7fd fc97 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8008ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb0:	f040 810c 	bne.w	8008ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	462b      	mov	r3, r5
 8008cca:	1891      	adds	r1, r2, r2
 8008ccc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cce:	415b      	adcs	r3, r3
 8008cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	eb12 0801 	adds.w	r8, r2, r1
 8008cdc:	4629      	mov	r1, r5
 8008cde:	eb43 0901 	adc.w	r9, r3, r1
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	f04f 0300 	mov.w	r3, #0
 8008cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cf6:	4690      	mov	r8, r2
 8008cf8:	4699      	mov	r9, r3
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	eb18 0303 	adds.w	r3, r8, r3
 8008d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d04:	462b      	mov	r3, r5
 8008d06:	eb49 0303 	adc.w	r3, r9, r3
 8008d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d22:	460b      	mov	r3, r1
 8008d24:	18db      	adds	r3, r3, r3
 8008d26:	653b      	str	r3, [r7, #80]	; 0x50
 8008d28:	4613      	mov	r3, r2
 8008d2a:	eb42 0303 	adc.w	r3, r2, r3
 8008d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d38:	f7f7 ffa6 	bl	8000c88 <__aeabi_uldivmod>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4b61      	ldr	r3, [pc, #388]	; (8008ec8 <UART_SetConfig+0x2d4>)
 8008d42:	fba3 2302 	umull	r2, r3, r3, r2
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	011c      	lsls	r4, r3, #4
 8008d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	1891      	adds	r1, r2, r2
 8008d62:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d64:	415b      	adcs	r3, r3
 8008d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8008d72:	4649      	mov	r1, r9
 8008d74:	eb43 0b01 	adc.w	fp, r3, r1
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d8c:	4692      	mov	sl, r2
 8008d8e:	469b      	mov	fp, r3
 8008d90:	4643      	mov	r3, r8
 8008d92:	eb1a 0303 	adds.w	r3, sl, r3
 8008d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8008da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008db0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008db8:	460b      	mov	r3, r1
 8008dba:	18db      	adds	r3, r3, r3
 8008dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	eb42 0303 	adc.w	r3, r2, r3
 8008dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8008dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008dce:	f7f7 ff5b 	bl	8000c88 <__aeabi_uldivmod>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4b3b      	ldr	r3, [pc, #236]	; (8008ec8 <UART_SetConfig+0x2d4>)
 8008dda:	fba3 2301 	umull	r2, r3, r3, r1
 8008dde:	095b      	lsrs	r3, r3, #5
 8008de0:	2264      	movs	r2, #100	; 0x64
 8008de2:	fb02 f303 	mul.w	r3, r2, r3
 8008de6:	1acb      	subs	r3, r1, r3
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dee:	4b36      	ldr	r3, [pc, #216]	; (8008ec8 <UART_SetConfig+0x2d4>)
 8008df0:	fba3 2302 	umull	r2, r3, r3, r2
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dfc:	441c      	add	r4, r3
 8008dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e10:	4642      	mov	r2, r8
 8008e12:	464b      	mov	r3, r9
 8008e14:	1891      	adds	r1, r2, r2
 8008e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e18:	415b      	adcs	r3, r3
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e20:	4641      	mov	r1, r8
 8008e22:	1851      	adds	r1, r2, r1
 8008e24:	6339      	str	r1, [r7, #48]	; 0x30
 8008e26:	4649      	mov	r1, r9
 8008e28:	414b      	adcs	r3, r1
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	f04f 0300 	mov.w	r3, #0
 8008e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e38:	4659      	mov	r1, fp
 8008e3a:	00cb      	lsls	r3, r1, #3
 8008e3c:	4651      	mov	r1, sl
 8008e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e42:	4651      	mov	r1, sl
 8008e44:	00ca      	lsls	r2, r1, #3
 8008e46:	4610      	mov	r0, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	189b      	adds	r3, r3, r2
 8008e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e54:	464b      	mov	r3, r9
 8008e56:	460a      	mov	r2, r1
 8008e58:	eb42 0303 	adc.w	r3, r2, r3
 8008e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e74:	460b      	mov	r3, r1
 8008e76:	18db      	adds	r3, r3, r3
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	eb42 0303 	adc.w	r3, r2, r3
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e8a:	f7f7 fefd 	bl	8000c88 <__aeabi_uldivmod>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <UART_SetConfig+0x2d4>)
 8008e94:	fba3 1302 	umull	r1, r3, r3, r2
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	2164      	movs	r1, #100	; 0x64
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	3332      	adds	r3, #50	; 0x32
 8008ea6:	4a08      	ldr	r2, [pc, #32]	; (8008ec8 <UART_SetConfig+0x2d4>)
 8008ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	f003 0207 	and.w	r2, r3, #7
 8008eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4422      	add	r2, r4
 8008eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ebc:	e105      	b.n	80090ca <UART_SetConfig+0x4d6>
 8008ebe:	bf00      	nop
 8008ec0:	40011000 	.word	0x40011000
 8008ec4:	40011400 	.word	0x40011400
 8008ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	1891      	adds	r1, r2, r2
 8008ee4:	6239      	str	r1, [r7, #32]
 8008ee6:	415b      	adcs	r3, r3
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eee:	4641      	mov	r1, r8
 8008ef0:	1854      	adds	r4, r2, r1
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	eb43 0501 	adc.w	r5, r3, r1
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	f04f 0300 	mov.w	r3, #0
 8008f00:	00eb      	lsls	r3, r5, #3
 8008f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f06:	00e2      	lsls	r2, r4, #3
 8008f08:	4614      	mov	r4, r2
 8008f0a:	461d      	mov	r5, r3
 8008f0c:	4643      	mov	r3, r8
 8008f0e:	18e3      	adds	r3, r4, r3
 8008f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f14:	464b      	mov	r3, r9
 8008f16:	eb45 0303 	adc.w	r3, r5, r3
 8008f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	008b      	lsls	r3, r1, #2
 8008f3e:	4621      	mov	r1, r4
 8008f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f44:	4621      	mov	r1, r4
 8008f46:	008a      	lsls	r2, r1, #2
 8008f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f4c:	f7f7 fe9c 	bl	8000c88 <__aeabi_uldivmod>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4b60      	ldr	r3, [pc, #384]	; (80090d8 <UART_SetConfig+0x4e4>)
 8008f56:	fba3 2302 	umull	r2, r3, r3, r2
 8008f5a:	095b      	lsrs	r3, r3, #5
 8008f5c:	011c      	lsls	r4, r3, #4
 8008f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f70:	4642      	mov	r2, r8
 8008f72:	464b      	mov	r3, r9
 8008f74:	1891      	adds	r1, r2, r2
 8008f76:	61b9      	str	r1, [r7, #24]
 8008f78:	415b      	adcs	r3, r3
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f80:	4641      	mov	r1, r8
 8008f82:	1851      	adds	r1, r2, r1
 8008f84:	6139      	str	r1, [r7, #16]
 8008f86:	4649      	mov	r1, r9
 8008f88:	414b      	adcs	r3, r1
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	f04f 0300 	mov.w	r3, #0
 8008f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f98:	4659      	mov	r1, fp
 8008f9a:	00cb      	lsls	r3, r1, #3
 8008f9c:	4651      	mov	r1, sl
 8008f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fa2:	4651      	mov	r1, sl
 8008fa4:	00ca      	lsls	r2, r1, #3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	4642      	mov	r2, r8
 8008fae:	189b      	adds	r3, r3, r2
 8008fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	eb42 0303 	adc.w	r3, r2, r3
 8008fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	f04f 0300 	mov.w	r3, #0
 8008fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fd8:	4649      	mov	r1, r9
 8008fda:	008b      	lsls	r3, r1, #2
 8008fdc:	4641      	mov	r1, r8
 8008fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fe2:	4641      	mov	r1, r8
 8008fe4:	008a      	lsls	r2, r1, #2
 8008fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fea:	f7f7 fe4d 	bl	8000c88 <__aeabi_uldivmod>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <UART_SetConfig+0x4e4>)
 8008ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	2164      	movs	r1, #100	; 0x64
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	3332      	adds	r3, #50	; 0x32
 8009006:	4a34      	ldr	r2, [pc, #208]	; (80090d8 <UART_SetConfig+0x4e4>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009012:	441c      	add	r4, r3
 8009014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009018:	2200      	movs	r2, #0
 800901a:	673b      	str	r3, [r7, #112]	; 0x70
 800901c:	677a      	str	r2, [r7, #116]	; 0x74
 800901e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009022:	4642      	mov	r2, r8
 8009024:	464b      	mov	r3, r9
 8009026:	1891      	adds	r1, r2, r2
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	415b      	adcs	r3, r3
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009032:	4641      	mov	r1, r8
 8009034:	1851      	adds	r1, r2, r1
 8009036:	6039      	str	r1, [r7, #0]
 8009038:	4649      	mov	r1, r9
 800903a:	414b      	adcs	r3, r1
 800903c:	607b      	str	r3, [r7, #4]
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800904a:	4659      	mov	r1, fp
 800904c:	00cb      	lsls	r3, r1, #3
 800904e:	4651      	mov	r1, sl
 8009050:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009054:	4651      	mov	r1, sl
 8009056:	00ca      	lsls	r2, r1, #3
 8009058:	4610      	mov	r0, r2
 800905a:	4619      	mov	r1, r3
 800905c:	4603      	mov	r3, r0
 800905e:	4642      	mov	r2, r8
 8009060:	189b      	adds	r3, r3, r2
 8009062:	66bb      	str	r3, [r7, #104]	; 0x68
 8009064:	464b      	mov	r3, r9
 8009066:	460a      	mov	r2, r1
 8009068:	eb42 0303 	adc.w	r3, r2, r3
 800906c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800906e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	663b      	str	r3, [r7, #96]	; 0x60
 8009078:	667a      	str	r2, [r7, #100]	; 0x64
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009086:	4649      	mov	r1, r9
 8009088:	008b      	lsls	r3, r1, #2
 800908a:	4641      	mov	r1, r8
 800908c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009090:	4641      	mov	r1, r8
 8009092:	008a      	lsls	r2, r1, #2
 8009094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009098:	f7f7 fdf6 	bl	8000c88 <__aeabi_uldivmod>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <UART_SetConfig+0x4e4>)
 80090a2:	fba3 1302 	umull	r1, r3, r3, r2
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	2164      	movs	r1, #100	; 0x64
 80090aa:	fb01 f303 	mul.w	r3, r1, r3
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	3332      	adds	r3, #50	; 0x32
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <UART_SetConfig+0x4e4>)
 80090b6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	f003 020f 	and.w	r2, r3, #15
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4422      	add	r2, r4
 80090c8:	609a      	str	r2, [r3, #8]
}
 80090ca:	bf00      	nop
 80090cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090d0:	46bd      	mov	sp, r7
 80090d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090d6:	bf00      	nop
 80090d8:	51eb851f 	.word	0x51eb851f

080090dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f103 0208 	add.w	r2, r3, #8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f103 0208 	add.w	r2, r3, #8
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 0208 	add.w	r2, r3, #8
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
}
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d103      	bne.n	800919e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e00c      	b.n	80091b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3308      	adds	r3, #8
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e002      	b.n	80091ac <vListInsert+0x2e>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d2f6      	bcs.n	80091a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	601a      	str	r2, [r3, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6892      	ldr	r2, [r2, #8]
 8009206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6852      	ldr	r2, [r2, #4]
 8009210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d103      	bne.n	8009224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	1e5a      	subs	r2, r3, #1
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800926e:	f002 f909 	bl	800b484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	441a      	add	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929e:	3b01      	subs	r3, #1
 80092a0:	68f9      	ldr	r1, [r7, #12]
 80092a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	22ff      	movs	r2, #255	; 0xff
 80092b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	22ff      	movs	r2, #255	; 0xff
 80092ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d114      	bne.n	80092ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01a      	beq.n	8009302 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3310      	adds	r3, #16
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f9f1 	bl	800a6b8 <xTaskRemoveFromEventList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d012      	beq.n	8009302 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092dc:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <xQueueGenericReset+0xcc>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	e009      	b.n	8009302 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3310      	adds	r3, #16
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fef2 	bl	80090dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3324      	adds	r3, #36	; 0x24
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7ff feed 	bl	80090dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009302:	f002 f8ef 	bl	800b4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009306:	2301      	movs	r3, #1
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	; 0x28
 8009318:	af02      	add	r7, sp, #8
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	613b      	str	r3, [r7, #16]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d102      	bne.n	800934a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e004      	b.n	8009354 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	fb02 f303 	mul.w	r3, r2, r3
 8009352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	3350      	adds	r3, #80	; 0x50
 8009358:	4618      	mov	r0, r3
 800935a:	f002 f9b5 	bl	800b6c8 <pvPortMalloc>
 800935e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	3350      	adds	r3, #80	; 0x50
 800936e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009370:	79fa      	ldrb	r2, [r7, #7]
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4613      	mov	r3, r2
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	68b9      	ldr	r1, [r7, #8]
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f805 	bl	800938c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009382:	69bb      	ldr	r3, [r7, #24]
	}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	e002      	b.n	80093ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093ba:	2101      	movs	r1, #1
 80093bc:	69b8      	ldr	r0, [r7, #24]
 80093be:	f7ff ff41 	bl	8009244 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08e      	sub	sp, #56	; 0x38
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093e2:	2300      	movs	r3, #0
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <xQueueGenericSend+0x32>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d103      	bne.n	8009414 <xQueueGenericSend+0x40>
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <xQueueGenericSend+0x44>
 8009414:	2301      	movs	r3, #1
 8009416:	e000      	b.n	800941a <xQueueGenericSend+0x46>
 8009418:	2300      	movs	r3, #0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <xQueueGenericSend+0x60>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d103      	bne.n	8009442 <xQueueGenericSend+0x6e>
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <xQueueGenericSend+0x72>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <xQueueGenericSend+0x74>
 8009446:	2300      	movs	r3, #0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericSend+0x8e>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	623b      	str	r3, [r7, #32]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009462:	f001 fac5 	bl	800a9f0 <xTaskGetSchedulerState>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <xQueueGenericSend+0x9e>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <xQueueGenericSend+0xa2>
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <xQueueGenericSend+0xa4>
 8009476:	2300      	movs	r3, #0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xQueueGenericSend+0xbe>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	61fb      	str	r3, [r7, #28]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009492:	f001 fff7 	bl	800b484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <xQueueGenericSend+0xd4>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d129      	bne.n	80094fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ae:	f000 fa95 	bl	80099dc <prvCopyDataToQueue>
 80094b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d010      	beq.n	80094de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 f8f9 	bl	800a6b8 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d013      	beq.n	80094f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094cc:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <xQueueGenericSend+0x1f8>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	e00a      	b.n	80094f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d007      	beq.n	80094f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094e4:	4b39      	ldr	r3, [pc, #228]	; (80095cc <xQueueGenericSend+0x1f8>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094f4:	f001 fff6 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e063      	b.n	80095c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009502:	f001 ffef 	bl	800b4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009506:	2300      	movs	r3, #0
 8009508:	e05c      	b.n	80095c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800950a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f931 	bl	800a77c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800951a:	2301      	movs	r3, #1
 800951c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800951e:	f001 ffe1 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009522:	f000 feab 	bl	800a27c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009526:	f001 ffad 	bl	800b484 <vPortEnterCritical>
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009530:	b25b      	sxtb	r3, r3
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d103      	bne.n	8009540 <xQueueGenericSend+0x16c>
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009546:	b25b      	sxtb	r3, r3
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954c:	d103      	bne.n	8009556 <xQueueGenericSend+0x182>
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009556:	f001 ffc5 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800955a:	1d3a      	adds	r2, r7, #4
 800955c:	f107 0314 	add.w	r3, r7, #20
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 f920 	bl	800a7a8 <xTaskCheckForTimeOut>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d124      	bne.n	80095b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800956e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009570:	f000 fb2c 	bl	8009bcc <prvIsQueueFull>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	3310      	adds	r3, #16
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 f848 	bl	800a618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958a:	f000 fab7 	bl	8009afc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800958e:	f000 fe83 	bl	800a298 <xTaskResumeAll>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f af7c 	bne.w	8009492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <xQueueGenericSend+0x1f8>)
 800959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	e772      	b.n	8009492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ae:	f000 faa5 	bl	8009afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095b2:	f000 fe71 	bl	800a298 <xTaskResumeAll>
 80095b6:	e76c      	b.n	8009492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ba:	f000 fa9f 	bl	8009afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095be:	f000 fe6b 	bl	800a298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3738      	adds	r7, #56	; 0x38
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	; 0x38
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <xQueueGenericSendFromISR+0x3c>
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <xQueueGenericSendFromISR+0x40>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <xQueueGenericSendFromISR+0x42>
 8009610:	2300      	movs	r3, #0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	623b      	str	r3, [r7, #32]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d103      	bne.n	800963a <xQueueGenericSendFromISR+0x6a>
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <xQueueGenericSendFromISR+0x6e>
 800963a:	2301      	movs	r3, #1
 800963c:	e000      	b.n	8009640 <xQueueGenericSendFromISR+0x70>
 800963e:	2300      	movs	r3, #0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	61fb      	str	r3, [r7, #28]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800965a:	f001 fff5 	bl	800b648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800965e:	f3ef 8211 	mrs	r2, BASEPRI
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	61ba      	str	r2, [r7, #24]
 8009674:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009676:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	429a      	cmp	r2, r3
 8009684:	d302      	bcc.n	800968c <xQueueGenericSendFromISR+0xbc>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d12c      	bne.n	80096e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969c:	f000 f99e 	bl	80099dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d112      	bne.n	80096d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d016      	beq.n	80096e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	3324      	adds	r3, #36	; 0x24
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fffe 	bl	800a6b8 <xTaskRemoveFromEventList>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00e      	beq.n	80096e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e007      	b.n	80096e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096d4:	3301      	adds	r3, #1
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	b25a      	sxtb	r2, r3
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80096e0:	2301      	movs	r3, #1
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80096e4:	e001      	b.n	80096ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3738      	adds	r7, #56	; 0x38
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08e      	sub	sp, #56	; 0x38
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	623b      	str	r3, [r7, #32]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	61fb      	str	r3, [r7, #28]
}
 8009744:	bf00      	nop
 8009746:	e7fe      	b.n	8009746 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <xQueueGiveFromISR+0x58>
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <xQueueGiveFromISR+0x5c>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <xQueueGiveFromISR+0x5e>
 800975c:	2300      	movs	r3, #0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	61bb      	str	r3, [r7, #24]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009778:	f001 ff66 	bl	800b648 <vPortValidateInterruptPriority>
	__asm volatile
 800977c:	f3ef 8211 	mrs	r2, BASEPRI
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	617a      	str	r2, [r7, #20]
 8009792:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009794:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009796:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d22b      	bcs.n	8009800 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d112      	bne.n	80097ea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d016      	beq.n	80097fa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	3324      	adds	r3, #36	; 0x24
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 ff71 	bl	800a6b8 <xTaskRemoveFromEventList>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00e      	beq.n	80097fa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2201      	movs	r2, #1
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	e007      	b.n	80097fa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097ee:	3301      	adds	r3, #1
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	b25a      	sxtb	r2, r3
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097fa:	2301      	movs	r3, #1
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
 80097fe:	e001      	b.n	8009804 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009800:	2300      	movs	r3, #0
 8009802:	637b      	str	r3, [r7, #52]	; 0x34
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f383 8811 	msr	BASEPRI, r3
}
 800980e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009812:	4618      	mov	r0, r3
 8009814:	3738      	adds	r7, #56	; 0x38
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08c      	sub	sp, #48	; 0x30
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009828:	2300      	movs	r3, #0
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <xQueueReceive+0x30>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	623b      	str	r3, [r7, #32]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d103      	bne.n	800985a <xQueueReceive+0x3e>
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <xQueueReceive+0x42>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <xQueueReceive+0x44>
 800985e:	2300      	movs	r3, #0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10a      	bne.n	800987a <xQueueReceive+0x5e>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	61fb      	str	r3, [r7, #28]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800987a:	f001 f8b9 	bl	800a9f0 <xTaskGetSchedulerState>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <xQueueReceive+0x6e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <xQueueReceive+0x72>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <xQueueReceive+0x74>
 800988e:	2300      	movs	r3, #0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <xQueueReceive+0x8e>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	61bb      	str	r3, [r7, #24]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098aa:	f001 fdeb 	bl	800b484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d01f      	beq.n	80098fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098ba:	68b9      	ldr	r1, [r7, #8]
 80098bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098be:	f000 f8f7 	bl	8009ab0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	1e5a      	subs	r2, r3, #1
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00f      	beq.n	80098f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	3310      	adds	r3, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 feee 	bl	800a6b8 <xTaskRemoveFromEventList>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098e2:	4b3d      	ldr	r3, [pc, #244]	; (80099d8 <xQueueReceive+0x1bc>)
 80098e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098f2:	f001 fdf7 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e069      	b.n	80099ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d103      	bne.n	8009908 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009900:	f001 fdf0 	bl	800b4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009904:	2300      	movs	r3, #0
 8009906:	e062      	b.n	80099ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d106      	bne.n	800991c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800990e:	f107 0310 	add.w	r3, r7, #16
 8009912:	4618      	mov	r0, r3
 8009914:	f000 ff32 	bl	800a77c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800991c:	f001 fde2 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009920:	f000 fcac 	bl	800a27c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009924:	f001 fdae 	bl	800b484 <vPortEnterCritical>
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800992e:	b25b      	sxtb	r3, r3
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d103      	bne.n	800993e <xQueueReceive+0x122>
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009944:	b25b      	sxtb	r3, r3
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d103      	bne.n	8009954 <xQueueReceive+0x138>
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009954:	f001 fdc6 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009958:	1d3a      	adds	r2, r7, #4
 800995a:	f107 0310 	add.w	r3, r7, #16
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f000 ff21 	bl	800a7a8 <xTaskCheckForTimeOut>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d123      	bne.n	80099b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800996c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996e:	f000 f917 	bl	8009ba0 <prvIsQueueEmpty>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d017      	beq.n	80099a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	3324      	adds	r3, #36	; 0x24
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f000 fe49 	bl	800a618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009988:	f000 f8b8 	bl	8009afc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800998c:	f000 fc84 	bl	800a298 <xTaskResumeAll>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d189      	bne.n	80098aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009996:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <xQueueReceive+0x1bc>)
 8009998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	e780      	b.n	80098aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099aa:	f000 f8a7 	bl	8009afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099ae:	f000 fc73 	bl	800a298 <xTaskResumeAll>
 80099b2:	e77a      	b.n	80098aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b6:	f000 f8a1 	bl	8009afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ba:	f000 fc6d 	bl	800a298 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c0:	f000 f8ee 	bl	8009ba0 <prvIsQueueEmpty>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f43f af6f 	beq.w	80098aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3730      	adds	r7, #48	; 0x30
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10d      	bne.n	8009a16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d14d      	bne.n	8009a9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 f810 	bl	800aa2c <xTaskPriorityDisinherit>
 8009a0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	609a      	str	r2, [r3, #8]
 8009a14:	e043      	b.n	8009a9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d119      	bne.n	8009a50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6858      	ldr	r0, [r3, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a24:	461a      	mov	r2, r3
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	f002 f862 	bl	800baf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	441a      	add	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d32b      	bcc.n	8009a9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]
 8009a4e:	e026      	b.n	8009a9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68d8      	ldr	r0, [r3, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	f002 f848 	bl	800baf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	425b      	negs	r3, r3
 8009a6a:	441a      	add	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	68da      	ldr	r2, [r3, #12]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d207      	bcs.n	8009a8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a84:	425b      	negs	r3, r3
 8009a86:	441a      	add	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d105      	bne.n	8009a9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009aa6:	697b      	ldr	r3, [r7, #20]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d018      	beq.n	8009af4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	441a      	add	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d303      	bcc.n	8009ae4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68d9      	ldr	r1, [r3, #12]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aec:	461a      	mov	r2, r3
 8009aee:	6838      	ldr	r0, [r7, #0]
 8009af0:	f001 fffe 	bl	800baf0 <memcpy>
	}
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b04:	f001 fcbe 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b10:	e011      	b.n	8009b36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d012      	beq.n	8009b40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3324      	adds	r3, #36	; 0x24
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fdca 	bl	800a6b8 <xTaskRemoveFromEventList>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b2a:	f000 fe9f 	bl	800a86c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dce9      	bgt.n	8009b12 <prvUnlockQueue+0x16>
 8009b3e:	e000      	b.n	8009b42 <prvUnlockQueue+0x46>
					break;
 8009b40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	22ff      	movs	r2, #255	; 0xff
 8009b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b4a:	f001 fccb 	bl	800b4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b4e:	f001 fc99 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b5a:	e011      	b.n	8009b80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d012      	beq.n	8009b8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3310      	adds	r3, #16
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 fda5 	bl	800a6b8 <xTaskRemoveFromEventList>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b74:	f000 fe7a 	bl	800a86c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dce9      	bgt.n	8009b5c <prvUnlockQueue+0x60>
 8009b88:	e000      	b.n	8009b8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	22ff      	movs	r2, #255	; 0xff
 8009b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b94:	f001 fca6 	bl	800b4e4 <vPortExitCritical>
}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ba8:	f001 fc6c 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e001      	b.n	8009bbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bbe:	f001 fc91 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bd4:	f001 fc56 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d102      	bne.n	8009bea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009be4:	2301      	movs	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	e001      	b.n	8009bee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bee:	f001 fc79 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	e014      	b.n	8009c36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c0c:	4a0f      	ldr	r2, [pc, #60]	; (8009c4c <vQueueAddToRegistry+0x50>)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10b      	bne.n	8009c30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c18:	490c      	ldr	r1, [pc, #48]	; (8009c4c <vQueueAddToRegistry+0x50>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c22:	4a0a      	ldr	r2, [pc, #40]	; (8009c4c <vQueueAddToRegistry+0x50>)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	4413      	add	r3, r2
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c2e:	e006      	b.n	8009c3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b07      	cmp	r3, #7
 8009c3a:	d9e7      	bls.n	8009c0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	20000628 	.word	0x20000628

08009c50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c60:	f001 fc10 	bl	800b484 <vPortEnterCritical>
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c6a:	b25b      	sxtb	r3, r3
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c70:	d103      	bne.n	8009c7a <vQueueWaitForMessageRestricted+0x2a>
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c80:	b25b      	sxtb	r3, r3
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d103      	bne.n	8009c90 <vQueueWaitForMessageRestricted+0x40>
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c90:	f001 fc28 	bl	800b4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	3324      	adds	r3, #36	; 0x24
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fcdb 	bl	800a660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	f7ff ff26 	bl	8009afc <prvUnlockQueue>
	}
 8009cb0:	bf00      	nop
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08c      	sub	sp, #48	; 0x30
 8009cbc:	af04      	add	r7, sp, #16
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cc8:	88fb      	ldrh	r3, [r7, #6]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fcfb 	bl	800b6c8 <pvPortMalloc>
 8009cd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00e      	beq.n	8009cf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cda:	2058      	movs	r0, #88	; 0x58
 8009cdc:	f001 fcf4 	bl	800b6c8 <pvPortMalloc>
 8009ce0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	631a      	str	r2, [r3, #48]	; 0x30
 8009cee:	e005      	b.n	8009cfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cf0:	6978      	ldr	r0, [r7, #20]
 8009cf2:	f001 fdad 	bl	800b850 <vPortFree>
 8009cf6:	e001      	b.n	8009cfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d013      	beq.n	8009d2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d02:	88fa      	ldrh	r2, [r7, #6]
 8009d04:	2300      	movs	r3, #0
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	9302      	str	r3, [sp, #8]
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f000 f80e 	bl	8009d3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d1e:	69f8      	ldr	r0, [r7, #28]
 8009d20:	f000 f89a 	bl	8009e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d24:	2301      	movs	r3, #1
 8009d26:	61bb      	str	r3, [r7, #24]
 8009d28:	e002      	b.n	8009d30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d30:	69bb      	ldr	r3, [r7, #24]
	}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b088      	sub	sp, #32
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	461a      	mov	r2, r3
 8009d52:	21a5      	movs	r1, #165	; 0xa5
 8009d54:	f001 feda 	bl	800bb0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d62:	3b01      	subs	r3, #1
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	f023 0307 	bic.w	r3, r3, #7
 8009d70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	f003 0307 	and.w	r3, r3, #7
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	617b      	str	r3, [r7, #20]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01f      	beq.n	8009dd8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d98:	2300      	movs	r3, #0
 8009d9a:	61fb      	str	r3, [r7, #28]
 8009d9c:	e012      	b.n	8009dc4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	7819      	ldrb	r1, [r3, #0]
 8009da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	4413      	add	r3, r2
 8009dac:	3334      	adds	r3, #52	; 0x34
 8009dae:	460a      	mov	r2, r1
 8009db0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	4413      	add	r3, r2
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	d9e9      	bls.n	8009d9e <prvInitialiseNewTask+0x64>
 8009dca:	e000      	b.n	8009dce <prvInitialiseNewTask+0x94>
			{
				break;
 8009dcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009dd6:	e003      	b.n	8009de0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b0e      	cmp	r3, #14
 8009de4:	d901      	bls.n	8009dea <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009de6:	230e      	movs	r3, #14
 8009de8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	2200      	movs	r2, #0
 8009dfa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff f98b 	bl	800911c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	3318      	adds	r3, #24
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff f986 	bl	800911c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	f1c3 020f 	rsb	r2, r3, #15
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	2200      	movs	r2, #0
 8009e2a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	68f9      	ldr	r1, [r7, #12]
 8009e38:	69b8      	ldr	r0, [r7, #24]
 8009e3a:	f001 f9f5 	bl	800b228 <pxPortInitialiseStack>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e50:	bf00      	nop
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e60:	f001 fb10 	bl	800b484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e64:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <prvAddNewTaskToReadyList+0xc0>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	4a2b      	ldr	r2, [pc, #172]	; (8009f18 <prvAddNewTaskToReadyList+0xc0>)
 8009e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e6e:	4b2b      	ldr	r3, [pc, #172]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d109      	bne.n	8009e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e76:	4a29      	ldr	r2, [pc, #164]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e7c:	4b26      	ldr	r3, [pc, #152]	; (8009f18 <prvAddNewTaskToReadyList+0xc0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d110      	bne.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e84:	f000 fd16 	bl	800a8b4 <prvInitialiseTaskLists>
 8009e88:	e00d      	b.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e8a:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d109      	bne.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e92:	4b22      	ldr	r3, [pc, #136]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d802      	bhi.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ea0:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ea6:	4b1f      	ldr	r3, [pc, #124]	; (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009eb0:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	409a      	lsls	r2, r3
 8009ec0:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <prvAddNewTaskToReadyList+0xd4>)
 8009ed8:	441a      	add	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f7ff f928 	bl	8009136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee6:	f001 fafd 	bl	800b4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00e      	beq.n	8009f10 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d207      	bcs.n	8009f10 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <prvAddNewTaskToReadyList+0xd8>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20000808 	.word	0x20000808
 8009f1c:	20000668 	.word	0x20000668
 8009f20:	20000814 	.word	0x20000814
 8009f24:	20000824 	.word	0x20000824
 8009f28:	20000810 	.word	0x20000810
 8009f2c:	2000066c 	.word	0x2000066c
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d017      	beq.n	8009f76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f46:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <vTaskDelay+0x60>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <vTaskDelay+0x30>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60bb      	str	r3, [r7, #8]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f64:	f000 f98a 	bl	800a27c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fde4 	bl	800ab38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f70:	f000 f992 	bl	800a298 <xTaskResumeAll>
 8009f74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d107      	bne.n	8009f8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <vTaskDelay+0x64>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000830 	.word	0x20000830
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009fa4:	f001 fa6e 	bl	800b484 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <vTaskSuspend+0x18>
 8009fae:	4b3c      	ldr	r3, [pc, #240]	; (800a0a0 <vTaskSuspend+0x104>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	e000      	b.n	8009fb6 <vTaskSuspend+0x1a>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff f917 	bl	80091f0 <uxListRemove>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d115      	bne.n	8009ff4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fcc:	4935      	ldr	r1, [pc, #212]	; (800a0a4 <vTaskSuspend+0x108>)
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <vTaskSuspend+0x58>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe8:	43da      	mvns	r2, r3
 8009fea:	4b2f      	ldr	r3, [pc, #188]	; (800a0a8 <vTaskSuspend+0x10c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	4a2d      	ldr	r2, [pc, #180]	; (800a0a8 <vTaskSuspend+0x10c>)
 8009ff2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3318      	adds	r3, #24
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff f8f5 	bl	80091f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3304      	adds	r3, #4
 800a00a:	4619      	mov	r1, r3
 800a00c:	4827      	ldr	r0, [pc, #156]	; (800a0ac <vTaskSuspend+0x110>)
 800a00e:	f7ff f892 	bl	8009136 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d103      	bne.n	800a026 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a026:	f001 fa5d 	bl	800b4e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a02a:	4b21      	ldr	r3, [pc, #132]	; (800a0b0 <vTaskSuspend+0x114>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a032:	f001 fa27 	bl	800b484 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a036:	f000 fcbb 	bl	800a9b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a03a:	f001 fa53 	bl	800b4e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <vTaskSuspend+0x104>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	429a      	cmp	r2, r3
 800a046:	d127      	bne.n	800a098 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a048:	4b19      	ldr	r3, [pc, #100]	; (800a0b0 <vTaskSuspend+0x114>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d017      	beq.n	800a080 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a050:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <vTaskSuspend+0x118>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00a      	beq.n	800a06e <vTaskSuspend+0xd2>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	60bb      	str	r3, [r7, #8]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a06e:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <vTaskSuspend+0x11c>)
 800a070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a07e:	e00b      	b.n	800a098 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <vTaskSuspend+0x110>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <vTaskSuspend+0x120>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d103      	bne.n	800a094 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800a08c:	4b04      	ldr	r3, [pc, #16]	; (800a0a0 <vTaskSuspend+0x104>)
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
	}
 800a092:	e001      	b.n	800a098 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800a094:	f000 fa64 	bl	800a560 <vTaskSwitchContext>
	}
 800a098:	bf00      	nop
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20000668 	.word	0x20000668
 800a0a4:	2000066c 	.word	0x2000066c
 800a0a8:	20000810 	.word	0x20000810
 800a0ac:	200007f4 	.word	0x200007f4
 800a0b0:	20000814 	.word	0x20000814
 800a0b4:	20000830 	.word	0x20000830
 800a0b8:	e000ed04 	.word	0xe000ed04
 800a0bc:	20000808 	.word	0x20000808

0800a0c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10a      	bne.n	800a0ec <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	60fb      	str	r3, [r7, #12]
}
 800a0e8:	bf00      	nop
 800a0ea:	e7fe      	b.n	800a0ea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <prvTaskIsTaskSuspended+0x5c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d10a      	bne.n	800a10c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fa:	4a09      	ldr	r2, [pc, #36]	; (800a120 <prvTaskIsTaskSuspended+0x60>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d005      	beq.n	800a10c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a108:	2301      	movs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a10c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	200007f4 	.word	0x200007f4
 800a120:	200007c8 	.word	0x200007c8

0800a124 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <vTaskResume+0x28>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60bb      	str	r3, [r7, #8]
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a14c:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <vTaskResume+0xac>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	429a      	cmp	r2, r3
 800a154:	d037      	beq.n	800a1c6 <vTaskResume+0xa2>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d034      	beq.n	800a1c6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800a15c:	f001 f992 	bl	800b484 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7ff ffad 	bl	800a0c0 <prvTaskIsTaskSuspended>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d02a      	beq.n	800a1c2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3304      	adds	r3, #4
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff f83d 	bl	80091f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	2201      	movs	r2, #1
 800a17c:	409a      	lsls	r2, r3
 800a17e:	4b15      	ldr	r3, [pc, #84]	; (800a1d4 <vTaskResume+0xb0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4313      	orrs	r3, r2
 800a184:	4a13      	ldr	r2, [pc, #76]	; (800a1d4 <vTaskResume+0xb0>)
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4a10      	ldr	r2, [pc, #64]	; (800a1d8 <vTaskResume+0xb4>)
 800a196:	441a      	add	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f7fe ffc9 	bl	8009136 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a8:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <vTaskResume+0xac>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d307      	bcc.n	800a1c2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <vTaskResume+0xb8>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a1c2:	f001 f98f 	bl	800b4e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1c6:	bf00      	nop
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000668 	.word	0x20000668
 800a1d4:	20000810 	.word	0x20000810
 800a1d8:	2000066c 	.word	0x2000066c
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a1e6:	4b1f      	ldr	r3, [pc, #124]	; (800a264 <vTaskStartScheduler+0x84>)
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	2282      	movs	r2, #130	; 0x82
 800a1f2:	491d      	ldr	r1, [pc, #116]	; (800a268 <vTaskStartScheduler+0x88>)
 800a1f4:	481d      	ldr	r0, [pc, #116]	; (800a26c <vTaskStartScheduler+0x8c>)
 800a1f6:	f7ff fd5f 	bl	8009cb8 <xTaskCreate>
 800a1fa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d102      	bne.n	800a208 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800a202:	f000 fcff 	bl	800ac04 <xTimerCreateTimerTask>
 800a206:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d116      	bne.n	800a23c <vTaskStartScheduler+0x5c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	60bb      	str	r3, [r7, #8]
}
 800a220:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a222:	4b13      	ldr	r3, [pc, #76]	; (800a270 <vTaskStartScheduler+0x90>)
 800a224:	f04f 32ff 	mov.w	r2, #4294967295
 800a228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a22a:	4b12      	ldr	r3, [pc, #72]	; (800a274 <vTaskStartScheduler+0x94>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a230:	4b11      	ldr	r3, [pc, #68]	; (800a278 <vTaskStartScheduler+0x98>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a236:	f001 f883 	bl	800b340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a23a:	e00e      	b.n	800a25a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a242:	d10a      	bne.n	800a25a <vTaskStartScheduler+0x7a>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	607b      	str	r3, [r7, #4]
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <vTaskStartScheduler+0x78>
}
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	2000082c 	.word	0x2000082c
 800a268:	080107e0 	.word	0x080107e0
 800a26c:	0800a885 	.word	0x0800a885
 800a270:	20000828 	.word	0x20000828
 800a274:	20000814 	.word	0x20000814
 800a278:	2000080c 	.word	0x2000080c

0800a27c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <vTaskSuspendAll+0x18>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3301      	adds	r3, #1
 800a286:	4a03      	ldr	r2, [pc, #12]	; (800a294 <vTaskSuspendAll+0x18>)
 800a288:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a28a:	bf00      	nop
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	20000830 	.word	0x20000830

0800a298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2a6:	4b41      	ldr	r3, [pc, #260]	; (800a3ac <xTaskResumeAll+0x114>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10a      	bne.n	800a2c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	603b      	str	r3, [r7, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2c4:	f001 f8de 	bl	800b484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2c8:	4b38      	ldr	r3, [pc, #224]	; (800a3ac <xTaskResumeAll+0x114>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a37      	ldr	r2, [pc, #220]	; (800a3ac <xTaskResumeAll+0x114>)
 800a2d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2d2:	4b36      	ldr	r3, [pc, #216]	; (800a3ac <xTaskResumeAll+0x114>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d161      	bne.n	800a39e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2da:	4b35      	ldr	r3, [pc, #212]	; (800a3b0 <xTaskResumeAll+0x118>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d05d      	beq.n	800a39e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2e2:	e02e      	b.n	800a342 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e4:	4b33      	ldr	r3, [pc, #204]	; (800a3b4 <xTaskResumeAll+0x11c>)
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3318      	adds	r3, #24
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe ff7d 	bl	80091f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe ff78 	bl	80091f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	2201      	movs	r2, #1
 800a306:	409a      	lsls	r2, r3
 800a308:	4b2b      	ldr	r3, [pc, #172]	; (800a3b8 <xTaskResumeAll+0x120>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	4a2a      	ldr	r2, [pc, #168]	; (800a3b8 <xTaskResumeAll+0x120>)
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4a27      	ldr	r2, [pc, #156]	; (800a3bc <xTaskResumeAll+0x124>)
 800a320:	441a      	add	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3304      	adds	r3, #4
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f7fe ff04 	bl	8009136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a332:	4b23      	ldr	r3, [pc, #140]	; (800a3c0 <xTaskResumeAll+0x128>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	429a      	cmp	r2, r3
 800a33a:	d302      	bcc.n	800a342 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a33c:	4b21      	ldr	r3, [pc, #132]	; (800a3c4 <xTaskResumeAll+0x12c>)
 800a33e:	2201      	movs	r2, #1
 800a340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a342:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <xTaskResumeAll+0x11c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1cc      	bne.n	800a2e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a350:	f000 fb2e 	bl	800a9b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a354:	4b1c      	ldr	r3, [pc, #112]	; (800a3c8 <xTaskResumeAll+0x130>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d010      	beq.n	800a382 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a360:	f000 f846 	bl	800a3f0 <xTaskIncrementTick>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a36a:	4b16      	ldr	r3, [pc, #88]	; (800a3c4 <xTaskResumeAll+0x12c>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	3b01      	subs	r3, #1
 800a374:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f1      	bne.n	800a360 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a37c:	4b12      	ldr	r3, [pc, #72]	; (800a3c8 <xTaskResumeAll+0x130>)
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a382:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <xTaskResumeAll+0x12c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a38a:	2301      	movs	r3, #1
 800a38c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a38e:	4b0f      	ldr	r3, [pc, #60]	; (800a3cc <xTaskResumeAll+0x134>)
 800a390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a39e:	f001 f8a1 	bl	800b4e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20000830 	.word	0x20000830
 800a3b0:	20000808 	.word	0x20000808
 800a3b4:	200007c8 	.word	0x200007c8
 800a3b8:	20000810 	.word	0x20000810
 800a3bc:	2000066c 	.word	0x2000066c
 800a3c0:	20000668 	.word	0x20000668
 800a3c4:	2000081c 	.word	0x2000081c
 800a3c8:	20000818 	.word	0x20000818
 800a3cc:	e000ed04 	.word	0xe000ed04

0800a3d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <xTaskGetTickCount+0x1c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3dc:	687b      	ldr	r3, [r7, #4]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2000080c 	.word	0x2000080c

0800a3f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3fa:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <xTaskIncrementTick+0x144>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f040 8088 	bne.w	800a514 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a404:	4b4c      	ldr	r3, [pc, #304]	; (800a538 <xTaskIncrementTick+0x148>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3301      	adds	r3, #1
 800a40a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a40c:	4a4a      	ldr	r2, [pc, #296]	; (800a538 <xTaskIncrementTick+0x148>)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d120      	bne.n	800a45a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a418:	4b48      	ldr	r3, [pc, #288]	; (800a53c <xTaskIncrementTick+0x14c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <xTaskIncrementTick+0x48>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	603b      	str	r3, [r7, #0]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <xTaskIncrementTick+0x46>
 800a438:	4b40      	ldr	r3, [pc, #256]	; (800a53c <xTaskIncrementTick+0x14c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	4b40      	ldr	r3, [pc, #256]	; (800a540 <xTaskIncrementTick+0x150>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a3e      	ldr	r2, [pc, #248]	; (800a53c <xTaskIncrementTick+0x14c>)
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	4a3e      	ldr	r2, [pc, #248]	; (800a540 <xTaskIncrementTick+0x150>)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	4b3d      	ldr	r3, [pc, #244]	; (800a544 <xTaskIncrementTick+0x154>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	4a3c      	ldr	r2, [pc, #240]	; (800a544 <xTaskIncrementTick+0x154>)
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	f000 faab 	bl	800a9b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a45a:	4b3b      	ldr	r3, [pc, #236]	; (800a548 <xTaskIncrementTick+0x158>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d348      	bcc.n	800a4f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a464:	4b35      	ldr	r3, [pc, #212]	; (800a53c <xTaskIncrementTick+0x14c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d104      	bne.n	800a478 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a46e:	4b36      	ldr	r3, [pc, #216]	; (800a548 <xTaskIncrementTick+0x158>)
 800a470:	f04f 32ff 	mov.w	r2, #4294967295
 800a474:	601a      	str	r2, [r3, #0]
					break;
 800a476:	e03e      	b.n	800a4f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a478:	4b30      	ldr	r3, [pc, #192]	; (800a53c <xTaskIncrementTick+0x14c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d203      	bcs.n	800a498 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a490:	4a2d      	ldr	r2, [pc, #180]	; (800a548 <xTaskIncrementTick+0x158>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a496:	e02e      	b.n	800a4f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe fea7 	bl	80091f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	3318      	adds	r3, #24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fe9e 	bl	80091f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	409a      	lsls	r2, r3
 800a4bc:	4b23      	ldr	r3, [pc, #140]	; (800a54c <xTaskIncrementTick+0x15c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	4a22      	ldr	r2, [pc, #136]	; (800a54c <xTaskIncrementTick+0x15c>)
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4a1f      	ldr	r2, [pc, #124]	; (800a550 <xTaskIncrementTick+0x160>)
 800a4d4:	441a      	add	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4610      	mov	r0, r2
 800a4de:	f7fe fe2a 	bl	8009136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e6:	4b1b      	ldr	r3, [pc, #108]	; (800a554 <xTaskIncrementTick+0x164>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d3b9      	bcc.n	800a464 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4f4:	e7b6      	b.n	800a464 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4f6:	4b17      	ldr	r3, [pc, #92]	; (800a554 <xTaskIncrementTick+0x164>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	4914      	ldr	r1, [pc, #80]	; (800a550 <xTaskIncrementTick+0x160>)
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	440b      	add	r3, r1
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d907      	bls.n	800a51e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a50e:	2301      	movs	r3, #1
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	e004      	b.n	800a51e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a514:	4b10      	ldr	r3, [pc, #64]	; (800a558 <xTaskIncrementTick+0x168>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3301      	adds	r3, #1
 800a51a:	4a0f      	ldr	r2, [pc, #60]	; (800a558 <xTaskIncrementTick+0x168>)
 800a51c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a51e:	4b0f      	ldr	r3, [pc, #60]	; (800a55c <xTaskIncrementTick+0x16c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a52a:	697b      	ldr	r3, [r7, #20]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20000830 	.word	0x20000830
 800a538:	2000080c 	.word	0x2000080c
 800a53c:	200007c0 	.word	0x200007c0
 800a540:	200007c4 	.word	0x200007c4
 800a544:	20000820 	.word	0x20000820
 800a548:	20000828 	.word	0x20000828
 800a54c:	20000810 	.word	0x20000810
 800a550:	2000066c 	.word	0x2000066c
 800a554:	20000668 	.word	0x20000668
 800a558:	20000818 	.word	0x20000818
 800a55c:	2000081c 	.word	0x2000081c

0800a560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a566:	4b27      	ldr	r3, [pc, #156]	; (800a604 <vTaskSwitchContext+0xa4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a56e:	4b26      	ldr	r3, [pc, #152]	; (800a608 <vTaskSwitchContext+0xa8>)
 800a570:	2201      	movs	r2, #1
 800a572:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a574:	e03f      	b.n	800a5f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a576:	4b24      	ldr	r3, [pc, #144]	; (800a608 <vTaskSwitchContext+0xa8>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a57c:	4b23      	ldr	r3, [pc, #140]	; (800a60c <vTaskSwitchContext+0xac>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	fab3 f383 	clz	r3, r3
 800a588:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a58a:	7afb      	ldrb	r3, [r7, #11]
 800a58c:	f1c3 031f 	rsb	r3, r3, #31
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	491f      	ldr	r1, [pc, #124]	; (800a610 <vTaskSwitchContext+0xb0>)
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	4613      	mov	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	440b      	add	r3, r1
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10a      	bne.n	800a5bc <vTaskSwitchContext+0x5c>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	607b      	str	r3, [r7, #4]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vTaskSwitchContext+0x5a>
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4a12      	ldr	r2, [pc, #72]	; (800a610 <vTaskSwitchContext+0xb0>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	605a      	str	r2, [r3, #4]
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3308      	adds	r3, #8
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d104      	bne.n	800a5ec <vTaskSwitchContext+0x8c>
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	605a      	str	r2, [r3, #4]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	4a08      	ldr	r2, [pc, #32]	; (800a614 <vTaskSwitchContext+0xb4>)
 800a5f4:	6013      	str	r3, [r2, #0]
}
 800a5f6:	bf00      	nop
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	20000830 	.word	0x20000830
 800a608:	2000081c 	.word	0x2000081c
 800a60c:	20000810 	.word	0x20000810
 800a610:	2000066c 	.word	0x2000066c
 800a614:	20000668 	.word	0x20000668

0800a618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60fb      	str	r3, [r7, #12]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a63e:	4b07      	ldr	r3, [pc, #28]	; (800a65c <vTaskPlaceOnEventList+0x44>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3318      	adds	r3, #24
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7fe fd99 	bl	800917e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a64c:	2101      	movs	r1, #1
 800a64e:	6838      	ldr	r0, [r7, #0]
 800a650:	f000 fa72 	bl	800ab38 <prvAddCurrentTaskToDelayedList>
}
 800a654:	bf00      	nop
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20000668 	.word	0x20000668

0800a660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	617b      	str	r3, [r7, #20]
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3318      	adds	r3, #24
 800a68e:	4619      	mov	r1, r3
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f7fe fd50 	bl	8009136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a69c:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	68b8      	ldr	r0, [r7, #8]
 800a6a6:	f000 fa47 	bl	800ab38 <prvAddCurrentTaskToDelayedList>
	}
 800a6aa:	bf00      	nop
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000668 	.word	0x20000668

0800a6b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	60fb      	str	r3, [r7, #12]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	3318      	adds	r3, #24
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fd81 	bl	80091f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ee:	4b1d      	ldr	r3, [pc, #116]	; (800a764 <xTaskRemoveFromEventList+0xac>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d11c      	bne.n	800a730 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fd78 	bl	80091f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	2201      	movs	r2, #1
 800a706:	409a      	lsls	r2, r3
 800a708:	4b17      	ldr	r3, [pc, #92]	; (800a768 <xTaskRemoveFromEventList+0xb0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	4a16      	ldr	r2, [pc, #88]	; (800a768 <xTaskRemoveFromEventList+0xb0>)
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4a13      	ldr	r2, [pc, #76]	; (800a76c <xTaskRemoveFromEventList+0xb4>)
 800a720:	441a      	add	r2, r3
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3304      	adds	r3, #4
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f7fe fd04 	bl	8009136 <vListInsertEnd>
 800a72e:	e005      	b.n	800a73c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	3318      	adds	r3, #24
 800a734:	4619      	mov	r1, r3
 800a736:	480e      	ldr	r0, [pc, #56]	; (800a770 <xTaskRemoveFromEventList+0xb8>)
 800a738:	f7fe fcfd 	bl	8009136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	4b0c      	ldr	r3, [pc, #48]	; (800a774 <xTaskRemoveFromEventList+0xbc>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	429a      	cmp	r2, r3
 800a748:	d905      	bls.n	800a756 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a74a:	2301      	movs	r3, #1
 800a74c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a74e:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <xTaskRemoveFromEventList+0xc0>)
 800a750:	2201      	movs	r2, #1
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	e001      	b.n	800a75a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a75a:	697b      	ldr	r3, [r7, #20]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20000830 	.word	0x20000830
 800a768:	20000810 	.word	0x20000810
 800a76c:	2000066c 	.word	0x2000066c
 800a770:	200007c8 	.word	0x200007c8
 800a774:	20000668 	.word	0x20000668
 800a778:	2000081c 	.word	0x2000081c

0800a77c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a784:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <vTaskInternalSetTimeOutState+0x24>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <vTaskInternalSetTimeOutState+0x28>)
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	605a      	str	r2, [r3, #4]
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	20000820 	.word	0x20000820
 800a7a4:	2000080c 	.word	0x2000080c

0800a7a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10a      	bne.n	800a7ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	613b      	str	r3, [r7, #16]
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10a      	bne.n	800a7ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	60fb      	str	r3, [r7, #12]
}
 800a7e6:	bf00      	nop
 800a7e8:	e7fe      	b.n	800a7e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a7ea:	f000 fe4b 	bl	800b484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7ee:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <xTaskCheckForTimeOut+0xbc>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a806:	d102      	bne.n	800a80e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]
 800a80c:	e023      	b.n	800a856 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <xTaskCheckForTimeOut+0xc0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d007      	beq.n	800a82a <xTaskCheckForTimeOut+0x82>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	429a      	cmp	r2, r3
 800a822:	d302      	bcc.n	800a82a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	61fb      	str	r3, [r7, #28]
 800a828:	e015      	b.n	800a856 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	429a      	cmp	r2, r3
 800a832:	d20b      	bcs.n	800a84c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff ff9b 	bl	800a77c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a846:	2300      	movs	r3, #0
 800a848:	61fb      	str	r3, [r7, #28]
 800a84a:	e004      	b.n	800a856 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a852:	2301      	movs	r3, #1
 800a854:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a856:	f000 fe45 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 800a85a:	69fb      	ldr	r3, [r7, #28]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	2000080c 	.word	0x2000080c
 800a868:	20000820 	.word	0x20000820

0800a86c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a870:	4b03      	ldr	r3, [pc, #12]	; (800a880 <vTaskMissedYield+0x14>)
 800a872:	2201      	movs	r2, #1
 800a874:	601a      	str	r2, [r3, #0]
}
 800a876:	bf00      	nop
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	2000081c 	.word	0x2000081c

0800a884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a88c:	f000 f852 	bl	800a934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a890:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <prvIdleTask+0x28>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d9f9      	bls.n	800a88c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <prvIdleTask+0x2c>)
 800a89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8a8:	e7f0      	b.n	800a88c <prvIdleTask+0x8>
 800a8aa:	bf00      	nop
 800a8ac:	2000066c 	.word	0x2000066c
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	e00c      	b.n	800a8da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4a12      	ldr	r2, [pc, #72]	; (800a914 <prvInitialiseTaskLists+0x60>)
 800a8cc:	4413      	add	r3, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fc04 	bl	80090dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	607b      	str	r3, [r7, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b0e      	cmp	r3, #14
 800a8de:	d9ef      	bls.n	800a8c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8e0:	480d      	ldr	r0, [pc, #52]	; (800a918 <prvInitialiseTaskLists+0x64>)
 800a8e2:	f7fe fbfb 	bl	80090dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8e6:	480d      	ldr	r0, [pc, #52]	; (800a91c <prvInitialiseTaskLists+0x68>)
 800a8e8:	f7fe fbf8 	bl	80090dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8ec:	480c      	ldr	r0, [pc, #48]	; (800a920 <prvInitialiseTaskLists+0x6c>)
 800a8ee:	f7fe fbf5 	bl	80090dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8f2:	480c      	ldr	r0, [pc, #48]	; (800a924 <prvInitialiseTaskLists+0x70>)
 800a8f4:	f7fe fbf2 	bl	80090dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8f8:	480b      	ldr	r0, [pc, #44]	; (800a928 <prvInitialiseTaskLists+0x74>)
 800a8fa:	f7fe fbef 	bl	80090dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <prvInitialiseTaskLists+0x78>)
 800a900:	4a05      	ldr	r2, [pc, #20]	; (800a918 <prvInitialiseTaskLists+0x64>)
 800a902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <prvInitialiseTaskLists+0x7c>)
 800a906:	4a05      	ldr	r2, [pc, #20]	; (800a91c <prvInitialiseTaskLists+0x68>)
 800a908:	601a      	str	r2, [r3, #0]
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	2000066c 	.word	0x2000066c
 800a918:	20000798 	.word	0x20000798
 800a91c:	200007ac 	.word	0x200007ac
 800a920:	200007c8 	.word	0x200007c8
 800a924:	200007dc 	.word	0x200007dc
 800a928:	200007f4 	.word	0x200007f4
 800a92c:	200007c0 	.word	0x200007c0
 800a930:	200007c4 	.word	0x200007c4

0800a934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a93a:	e019      	b.n	800a970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a93c:	f000 fda2 	bl	800b484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a940:	4b10      	ldr	r3, [pc, #64]	; (800a984 <prvCheckTasksWaitingTermination+0x50>)
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fe fc4f 	bl	80091f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <prvCheckTasksWaitingTermination+0x54>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3b01      	subs	r3, #1
 800a958:	4a0b      	ldr	r2, [pc, #44]	; (800a988 <prvCheckTasksWaitingTermination+0x54>)
 800a95a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a95c:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <prvCheckTasksWaitingTermination+0x58>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3b01      	subs	r3, #1
 800a962:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <prvCheckTasksWaitingTermination+0x58>)
 800a964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a966:	f000 fdbd 	bl	800b4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f810 	bl	800a990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a970:	4b06      	ldr	r3, [pc, #24]	; (800a98c <prvCheckTasksWaitingTermination+0x58>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e1      	bne.n	800a93c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200007dc 	.word	0x200007dc
 800a988:	20000808 	.word	0x20000808
 800a98c:	200007f0 	.word	0x200007f0

0800a990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 ff57 	bl	800b850 <vPortFree>
			vPortFree( pxTCB );
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 ff54 	bl	800b850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <prvResetNextTaskUnblockTime+0x38>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d104      	bne.n	800a9ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9c0:	4b0a      	ldr	r3, [pc, #40]	; (800a9ec <prvResetNextTaskUnblockTime+0x3c>)
 800a9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9c8:	e008      	b.n	800a9dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ca:	4b07      	ldr	r3, [pc, #28]	; (800a9e8 <prvResetNextTaskUnblockTime+0x38>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <prvResetNextTaskUnblockTime+0x3c>)
 800a9da:	6013      	str	r3, [r2, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	200007c0 	.word	0x200007c0
 800a9ec:	20000828 	.word	0x20000828

0800a9f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <xTaskGetSchedulerState+0x34>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d102      	bne.n	800aa04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	607b      	str	r3, [r7, #4]
 800aa02:	e008      	b.n	800aa16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa04:	4b08      	ldr	r3, [pc, #32]	; (800aa28 <xTaskGetSchedulerState+0x38>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	607b      	str	r3, [r7, #4]
 800aa10:	e001      	b.n	800aa16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa12:	2300      	movs	r3, #0
 800aa14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa16:	687b      	ldr	r3, [r7, #4]
	}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	20000814 	.word	0x20000814
 800aa28:	20000830 	.word	0x20000830

0800aa2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d06e      	beq.n	800ab20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa42:	4b3a      	ldr	r3, [pc, #232]	; (800ab2c <xTaskPriorityDisinherit+0x100>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d00a      	beq.n	800aa62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	60fb      	str	r3, [r7, #12]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10a      	bne.n	800aa80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	60bb      	str	r3, [r7, #8]
}
 800aa7c:	bf00      	nop
 800aa7e:	e7fe      	b.n	800aa7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa84:	1e5a      	subs	r2, r3, #1
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d044      	beq.n	800ab20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d140      	bne.n	800ab20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fba4 	bl	80091f0 <uxListRemove>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d115      	bne.n	800aada <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab2:	491f      	ldr	r1, [pc, #124]	; (800ab30 <xTaskPriorityDisinherit+0x104>)
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xTaskPriorityDisinherit+0xae>
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	2201      	movs	r2, #1
 800aaca:	fa02 f303 	lsl.w	r3, r2, r3
 800aace:	43da      	mvns	r2, r3
 800aad0:	4b18      	ldr	r3, [pc, #96]	; (800ab34 <xTaskPriorityDisinherit+0x108>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4013      	ands	r3, r2
 800aad6:	4a17      	ldr	r2, [pc, #92]	; (800ab34 <xTaskPriorityDisinherit+0x108>)
 800aad8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	f1c3 020f 	rsb	r2, r3, #15
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	409a      	lsls	r2, r3
 800aaf6:	4b0f      	ldr	r3, [pc, #60]	; (800ab34 <xTaskPriorityDisinherit+0x108>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	4a0d      	ldr	r2, [pc, #52]	; (800ab34 <xTaskPriorityDisinherit+0x108>)
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4a08      	ldr	r2, [pc, #32]	; (800ab30 <xTaskPriorityDisinherit+0x104>)
 800ab0e:	441a      	add	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f7fe fb0d 	bl	8009136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab20:	697b      	ldr	r3, [r7, #20]
	}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20000668 	.word	0x20000668
 800ab30:	2000066c 	.word	0x2000066c
 800ab34:	20000810 	.word	0x20000810

0800ab38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab42:	4b29      	ldr	r3, [pc, #164]	; (800abe8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab48:	4b28      	ldr	r3, [pc, #160]	; (800abec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fb4e 	bl	80091f0 <uxListRemove>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10b      	bne.n	800ab72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab5a:	4b24      	ldr	r3, [pc, #144]	; (800abec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	2201      	movs	r2, #1
 800ab62:	fa02 f303 	lsl.w	r3, r2, r3
 800ab66:	43da      	mvns	r2, r3
 800ab68:	4b21      	ldr	r3, [pc, #132]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	4a20      	ldr	r2, [pc, #128]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab78:	d10a      	bne.n	800ab90 <prvAddCurrentTaskToDelayedList+0x58>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d007      	beq.n	800ab90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab80:	4b1a      	ldr	r3, [pc, #104]	; (800abec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3304      	adds	r3, #4
 800ab86:	4619      	mov	r1, r3
 800ab88:	481a      	ldr	r0, [pc, #104]	; (800abf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab8a:	f7fe fad4 	bl	8009136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab8e:	e026      	b.n	800abde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4413      	add	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab98:	4b14      	ldr	r3, [pc, #80]	; (800abec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d209      	bcs.n	800abbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aba8:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	4b0f      	ldr	r3, [pc, #60]	; (800abec <prvAddCurrentTaskToDelayedList+0xb4>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3304      	adds	r3, #4
 800abb2:	4619      	mov	r1, r3
 800abb4:	4610      	mov	r0, r2
 800abb6:	f7fe fae2 	bl	800917e <vListInsert>
}
 800abba:	e010      	b.n	800abde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abbc:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <prvAddCurrentTaskToDelayedList+0xc4>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <prvAddCurrentTaskToDelayedList+0xb4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4619      	mov	r1, r3
 800abc8:	4610      	mov	r0, r2
 800abca:	f7fe fad8 	bl	800917e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abce:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d202      	bcs.n	800abde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800abd8:	4a09      	ldr	r2, [pc, #36]	; (800ac00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	6013      	str	r3, [r2, #0]
}
 800abde:	bf00      	nop
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	2000080c 	.word	0x2000080c
 800abec:	20000668 	.word	0x20000668
 800abf0:	20000810 	.word	0x20000810
 800abf4:	200007f4 	.word	0x200007f4
 800abf8:	200007c4 	.word	0x200007c4
 800abfc:	200007c0 	.word	0x200007c0
 800ac00:	20000828 	.word	0x20000828

0800ac04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac0e:	f000 fad5 	bl	800b1bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <xTimerCreateTimerTask+0x54>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00b      	beq.n	800ac32 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800ac1a:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <xTimerCreateTimerTask+0x58>)
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	2302      	movs	r3, #2
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	2300      	movs	r3, #0
 800ac24:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ac28:	490d      	ldr	r1, [pc, #52]	; (800ac60 <xTimerCreateTimerTask+0x5c>)
 800ac2a:	480e      	ldr	r0, [pc, #56]	; (800ac64 <xTimerCreateTimerTask+0x60>)
 800ac2c:	f7ff f844 	bl	8009cb8 <xTaskCreate>
 800ac30:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10a      	bne.n	800ac4e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	603b      	str	r3, [r7, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800ac4e:	687b      	ldr	r3, [r7, #4]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20000864 	.word	0x20000864
 800ac5c:	20000868 	.word	0x20000868
 800ac60:	080107e8 	.word	0x080107e8
 800ac64:	0800ad9d 	.word	0x0800ad9d

0800ac68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08a      	sub	sp, #40	; 0x28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10a      	bne.n	800ac96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	623b      	str	r3, [r7, #32]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <xTimerGenericCommand+0x98>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d02a      	beq.n	800acf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b05      	cmp	r3, #5
 800acae:	dc18      	bgt.n	800ace2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800acb0:	f7ff fe9e 	bl	800a9f0 <xTaskGetSchedulerState>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d109      	bne.n	800acce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800acba:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <xTimerGenericCommand+0x98>)
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f107 0114 	add.w	r1, r7, #20
 800acc2:	2300      	movs	r3, #0
 800acc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acc6:	f7fe fb85 	bl	80093d4 <xQueueGenericSend>
 800acca:	6278      	str	r0, [r7, #36]	; 0x24
 800accc:	e012      	b.n	800acf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acce:	4b0c      	ldr	r3, [pc, #48]	; (800ad00 <xTimerGenericCommand+0x98>)
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	f107 0114 	add.w	r1, r7, #20
 800acd6:	2300      	movs	r3, #0
 800acd8:	2200      	movs	r2, #0
 800acda:	f7fe fb7b 	bl	80093d4 <xQueueGenericSend>
 800acde:	6278      	str	r0, [r7, #36]	; 0x24
 800ace0:	e008      	b.n	800acf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ace2:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <xTimerGenericCommand+0x98>)
 800ace4:	6818      	ldr	r0, [r3, #0]
 800ace6:	f107 0114 	add.w	r1, r7, #20
 800acea:	2300      	movs	r3, #0
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	f7fe fc6f 	bl	80095d0 <xQueueGenericSendFromISR>
 800acf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3728      	adds	r7, #40	; 0x28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20000864 	.word	0x20000864

0800ad04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad0e:	4b22      	ldr	r3, [pc, #136]	; (800ad98 <prvProcessExpiredTimer+0x94>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe fa67 	bl	80091f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad28:	f003 0304 	and.w	r3, r3, #4
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d022      	beq.n	800ad76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	699a      	ldr	r2, [r3, #24]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	18d1      	adds	r1, r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	6978      	ldr	r0, [r7, #20]
 800ad3e:	f000 f8d1 	bl	800aee4 <prvInsertTimerInActiveList>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d01f      	beq.n	800ad88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	2100      	movs	r1, #0
 800ad52:	6978      	ldr	r0, [r7, #20]
 800ad54:	f7ff ff88 	bl	800ac68 <xTimerGenericCommand>
 800ad58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d113      	bne.n	800ad88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	60fb      	str	r3, [r7, #12]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad7c:	f023 0301 	bic.w	r3, r3, #1
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	6978      	ldr	r0, [r7, #20]
 800ad8e:	4798      	blx	r3
}
 800ad90:	bf00      	nop
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	2000085c 	.word	0x2000085c

0800ad9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ada4:	f107 0308 	add.w	r3, r7, #8
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f857 	bl	800ae5c <prvGetNextExpireTime>
 800adae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	4619      	mov	r1, r3
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 f803 	bl	800adc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800adba:	f000 f8d5 	bl	800af68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adbe:	e7f1      	b.n	800ada4 <prvTimerTask+0x8>

0800adc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800adca:	f7ff fa57 	bl	800a27c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adce:	f107 0308 	add.w	r3, r7, #8
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f866 	bl	800aea4 <prvSampleTimeNow>
 800add8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d130      	bne.n	800ae42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <prvProcessTimerOrBlockTask+0x3c>
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	429a      	cmp	r2, r3
 800adec:	d806      	bhi.n	800adfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800adee:	f7ff fa53 	bl	800a298 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7ff ff85 	bl	800ad04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800adfa:	e024      	b.n	800ae46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d008      	beq.n	800ae14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae02:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <prvProcessTimerOrBlockTask+0x90>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <prvProcessTimerOrBlockTask+0x50>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e000      	b.n	800ae12 <prvProcessTimerOrBlockTask+0x52>
 800ae10:	2300      	movs	r3, #0
 800ae12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <prvProcessTimerOrBlockTask+0x94>)
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	f7fe ff15 	bl	8009c50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae26:	f7ff fa37 	bl	800a298 <xTaskResumeAll>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae30:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <prvProcessTimerOrBlockTask+0x98>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
}
 800ae40:	e001      	b.n	800ae46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae42:	f7ff fa29 	bl	800a298 <xTaskResumeAll>
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000860 	.word	0x20000860
 800ae54:	20000864 	.word	0x20000864
 800ae58:	e000ed04 	.word	0xe000ed04

0800ae5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae64:	4b0e      	ldr	r3, [pc, #56]	; (800aea0 <prvGetNextExpireTime+0x44>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <prvGetNextExpireTime+0x16>
 800ae6e:	2201      	movs	r2, #1
 800ae70:	e000      	b.n	800ae74 <prvGetNextExpireTime+0x18>
 800ae72:	2200      	movs	r2, #0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d105      	bne.n	800ae8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae80:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <prvGetNextExpireTime+0x44>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	e001      	b.n	800ae90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae90:	68fb      	ldr	r3, [r7, #12]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	2000085c 	.word	0x2000085c

0800aea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aeac:	f7ff fa90 	bl	800a3d0 <xTaskGetTickCount>
 800aeb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aeb2:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <prvSampleTimeNow+0x3c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d205      	bcs.n	800aec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aebc:	f000 f91a 	bl	800b0f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	e002      	b.n	800aece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aece:	4a04      	ldr	r2, [pc, #16]	; (800aee0 <prvSampleTimeNow+0x3c>)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aed4:	68fb      	ldr	r3, [r7, #12]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	2000086c 	.word	0x2000086c

0800aee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	429a      	cmp	r2, r3
 800af08:	d812      	bhi.n	800af30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	429a      	cmp	r2, r3
 800af16:	d302      	bcc.n	800af1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	617b      	str	r3, [r7, #20]
 800af1c:	e01b      	b.n	800af56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af1e:	4b10      	ldr	r3, [pc, #64]	; (800af60 <prvInsertTimerInActiveList+0x7c>)
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3304      	adds	r3, #4
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7fe f928 	bl	800917e <vListInsert>
 800af2e:	e012      	b.n	800af56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	429a      	cmp	r2, r3
 800af36:	d206      	bcs.n	800af46 <prvInsertTimerInActiveList+0x62>
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d302      	bcc.n	800af46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	e007      	b.n	800af56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af46:	4b07      	ldr	r3, [pc, #28]	; (800af64 <prvInsertTimerInActiveList+0x80>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3304      	adds	r3, #4
 800af4e:	4619      	mov	r1, r3
 800af50:	4610      	mov	r0, r2
 800af52:	f7fe f914 	bl	800917e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af56:	697b      	ldr	r3, [r7, #20]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000860 	.word	0x20000860
 800af64:	2000085c 	.word	0x2000085c

0800af68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	; 0x30
 800af6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af6e:	e0ae      	b.n	800b0ce <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	f2c0 80aa 	blt.w	800b0cc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	3304      	adds	r3, #4
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe f931 	bl	80091f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af8e:	1d3b      	adds	r3, r7, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff ff87 	bl	800aea4 <prvSampleTimeNow>
 800af96:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b09      	cmp	r3, #9
 800af9c:	f200 8097 	bhi.w	800b0ce <prvProcessReceivedCommands+0x166>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <prvProcessReceivedCommands+0x40>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afd1 	.word	0x0800afd1
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afd1 	.word	0x0800afd1
 800afb4:	0800b045 	.word	0x0800b045
 800afb8:	0800b059 	.word	0x0800b059
 800afbc:	0800b0a3 	.word	0x0800b0a3
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800afd1 	.word	0x0800afd1
 800afc8:	0800b045 	.word	0x0800b045
 800afcc:	0800b059 	.word	0x0800b059
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afd6:	f043 0301 	orr.w	r3, r3, #1
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	18d1      	adds	r1, r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6a3a      	ldr	r2, [r7, #32]
 800afee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aff0:	f7ff ff78 	bl	800aee4 <prvInsertTimerInActiveList>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d069      	beq.n	800b0ce <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d05e      	beq.n	800b0ce <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	441a      	add	r2, r3
 800b018:	2300      	movs	r3, #0
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	2300      	movs	r3, #0
 800b01e:	2100      	movs	r1, #0
 800b020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b022:	f7ff fe21 	bl	800ac68 <xTimerGenericCommand>
 800b026:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d14f      	bne.n	800b0ce <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	61bb      	str	r3, [r7, #24]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b04a:	f023 0301 	bic.w	r3, r3, #1
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b056:	e03a      	b.n	800b0ce <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b05e:	f043 0301 	orr.w	r3, r3, #1
 800b062:	b2da      	uxtb	r2, r3
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	617b      	str	r3, [r7, #20]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	699a      	ldr	r2, [r3, #24]
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	18d1      	adds	r1, r2, r3
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	6a3a      	ldr	r2, [r7, #32]
 800b09a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b09c:	f7ff ff22 	bl	800aee4 <prvInsertTimerInActiveList>
					break;
 800b0a0:	e015      	b.n	800b0ce <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a8:	f003 0302 	and.w	r3, r3, #2
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d103      	bne.n	800b0b8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0b2:	f000 fbcd 	bl	800b850 <vPortFree>
 800b0b6:	e00a      	b.n	800b0ce <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0be:	f023 0301 	bic.w	r3, r3, #1
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0ca:	e000      	b.n	800b0ce <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b0cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0ce:	4b08      	ldr	r3, [pc, #32]	; (800b0f0 <prvProcessReceivedCommands+0x188>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f107 0108 	add.w	r1, r7, #8
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fb9f 	bl	800981c <xQueueReceive>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f47f af45 	bne.w	800af70 <prvProcessReceivedCommands+0x8>
	}
}
 800b0e6:	bf00      	nop
 800b0e8:	bf00      	nop
 800b0ea:	3728      	adds	r7, #40	; 0x28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000864 	.word	0x20000864

0800b0f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0fa:	e048      	b.n	800b18e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0fc:	4b2d      	ldr	r3, [pc, #180]	; (800b1b4 <prvSwitchTimerLists+0xc0>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b106:	4b2b      	ldr	r3, [pc, #172]	; (800b1b4 <prvSwitchTimerLists+0xc0>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3304      	adds	r3, #4
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe f86b 	bl	80091f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d02e      	beq.n	800b18e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	4413      	add	r3, r2
 800b138:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d90e      	bls.n	800b160 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b14e:	4b19      	ldr	r3, [pc, #100]	; (800b1b4 <prvSwitchTimerLists+0xc0>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3304      	adds	r3, #4
 800b156:	4619      	mov	r1, r3
 800b158:	4610      	mov	r0, r2
 800b15a:	f7fe f810 	bl	800917e <vListInsert>
 800b15e:	e016      	b.n	800b18e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b160:	2300      	movs	r3, #0
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	2300      	movs	r3, #0
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	2100      	movs	r1, #0
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f7ff fd7c 	bl	800ac68 <xTimerGenericCommand>
 800b170:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10a      	bne.n	800b18e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	603b      	str	r3, [r7, #0]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <prvSwitchTimerLists+0xc0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1b1      	bne.n	800b0fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <prvSwitchTimerLists+0xc0>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b19e:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <prvSwitchTimerLists+0xc4>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a04      	ldr	r2, [pc, #16]	; (800b1b4 <prvSwitchTimerLists+0xc0>)
 800b1a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b1a6:	4a04      	ldr	r2, [pc, #16]	; (800b1b8 <prvSwitchTimerLists+0xc4>)
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	6013      	str	r3, [r2, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	2000085c 	.word	0x2000085c
 800b1b8:	20000860 	.word	0x20000860

0800b1bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1c0:	f000 f960 	bl	800b484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1c4:	4b12      	ldr	r3, [pc, #72]	; (800b210 <prvCheckForValidListAndQueue+0x54>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d11d      	bne.n	800b208 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1cc:	4811      	ldr	r0, [pc, #68]	; (800b214 <prvCheckForValidListAndQueue+0x58>)
 800b1ce:	f7fd ff85 	bl	80090dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1d2:	4811      	ldr	r0, [pc, #68]	; (800b218 <prvCheckForValidListAndQueue+0x5c>)
 800b1d4:	f7fd ff82 	bl	80090dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1d8:	4b10      	ldr	r3, [pc, #64]	; (800b21c <prvCheckForValidListAndQueue+0x60>)
 800b1da:	4a0e      	ldr	r2, [pc, #56]	; (800b214 <prvCheckForValidListAndQueue+0x58>)
 800b1dc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1de:	4b10      	ldr	r3, [pc, #64]	; (800b220 <prvCheckForValidListAndQueue+0x64>)
 800b1e0:	4a0d      	ldr	r2, [pc, #52]	; (800b218 <prvCheckForValidListAndQueue+0x5c>)
 800b1e2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	210c      	movs	r1, #12
 800b1e8:	200a      	movs	r0, #10
 800b1ea:	f7fe f893 	bl	8009314 <xQueueGenericCreate>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4a07      	ldr	r2, [pc, #28]	; (800b210 <prvCheckForValidListAndQueue+0x54>)
 800b1f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <prvCheckForValidListAndQueue+0x54>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1fc:	4b04      	ldr	r3, [pc, #16]	; (800b210 <prvCheckForValidListAndQueue+0x54>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4908      	ldr	r1, [pc, #32]	; (800b224 <prvCheckForValidListAndQueue+0x68>)
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fcfa 	bl	8009bfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b208:	f000 f96c 	bl	800b4e4 <vPortExitCritical>
}
 800b20c:	bf00      	nop
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000864 	.word	0x20000864
 800b214:	20000834 	.word	0x20000834
 800b218:	20000848 	.word	0x20000848
 800b21c:	2000085c 	.word	0x2000085c
 800b220:	20000860 	.word	0x20000860
 800b224:	080107f0 	.word	0x080107f0

0800b228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3b04      	subs	r3, #4
 800b238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3b04      	subs	r3, #4
 800b246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	f023 0201 	bic.w	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3b04      	subs	r3, #4
 800b256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b258:	4a0c      	ldr	r2, [pc, #48]	; (800b28c <pxPortInitialiseStack+0x64>)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3b14      	subs	r3, #20
 800b262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3b04      	subs	r3, #4
 800b26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f06f 0202 	mvn.w	r2, #2
 800b276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3b20      	subs	r3, #32
 800b27c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b27e:	68fb      	ldr	r3, [r7, #12]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	0800b291 	.word	0x0800b291

0800b290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b29a:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <prvTaskExitError+0x54>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a2:	d00a      	beq.n	800b2ba <prvTaskExitError+0x2a>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	60fb      	str	r3, [r7, #12]
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <prvTaskExitError+0x28>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	60bb      	str	r3, [r7, #8]
}
 800b2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2ce:	bf00      	nop
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0fc      	beq.n	800b2d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	20000040 	.word	0x20000040
	...

0800b2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <pxCurrentTCBConst2>)
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	f380 8809 	msr	PSP, r0
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f380 8811 	msr	BASEPRI, r0
 800b30a:	4770      	bx	lr
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst2>:
 800b310:	20000668 	.word	0x20000668
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b318:	4808      	ldr	r0, [pc, #32]	; (800b33c <prvPortStartFirstTask+0x24>)
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	6800      	ldr	r0, [r0, #0]
 800b31e:	f380 8808 	msr	MSP, r0
 800b322:	f04f 0000 	mov.w	r0, #0
 800b326:	f380 8814 	msr	CONTROL, r0
 800b32a:	b662      	cpsie	i
 800b32c:	b661      	cpsie	f
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	df00      	svc	0
 800b338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b33a:	bf00      	nop
 800b33c:	e000ed08 	.word	0xe000ed08

0800b340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b346:	4b46      	ldr	r3, [pc, #280]	; (800b460 <xPortStartScheduler+0x120>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a46      	ldr	r2, [pc, #280]	; (800b464 <xPortStartScheduler+0x124>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10a      	bne.n	800b366 <xPortStartScheduler+0x26>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b366:	4b3e      	ldr	r3, [pc, #248]	; (800b460 <xPortStartScheduler+0x120>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a3f      	ldr	r2, [pc, #252]	; (800b468 <xPortStartScheduler+0x128>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10a      	bne.n	800b386 <xPortStartScheduler+0x46>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	60fb      	str	r3, [r7, #12]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b386:	4b39      	ldr	r3, [pc, #228]	; (800b46c <xPortStartScheduler+0x12c>)
 800b388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3a0:	78fb      	ldrb	r3, [r7, #3]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b31      	ldr	r3, [pc, #196]	; (800b470 <xPortStartScheduler+0x130>)
 800b3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3ae:	4b31      	ldr	r3, [pc, #196]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3b4:	e009      	b.n	800b3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3b6:	4b2f      	ldr	r3, [pc, #188]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4a2d      	ldr	r2, [pc, #180]	; (800b474 <xPortStartScheduler+0x134>)
 800b3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3c0:	78fb      	ldrb	r3, [r7, #3]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b80      	cmp	r3, #128	; 0x80
 800b3d4:	d0ef      	beq.n	800b3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3d6:	4b27      	ldr	r3, [pc, #156]	; (800b474 <xPortStartScheduler+0x134>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f1c3 0307 	rsb	r3, r3, #7
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d00a      	beq.n	800b3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60bb      	str	r3, [r7, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <xPortStartScheduler+0x134>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	4a1d      	ldr	r2, [pc, #116]	; (800b474 <xPortStartScheduler+0x134>)
 800b400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b402:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <xPortStartScheduler+0x134>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b40a:	4a1a      	ldr	r2, [pc, #104]	; (800b474 <xPortStartScheduler+0x134>)
 800b40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	b2da      	uxtb	r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <xPortStartScheduler+0x138>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a17      	ldr	r2, [pc, #92]	; (800b478 <xPortStartScheduler+0x138>)
 800b41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <xPortStartScheduler+0x138>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <xPortStartScheduler+0x138>)
 800b428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b42e:	f000 f8dd 	bl	800b5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <xPortStartScheduler+0x13c>)
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b438:	f000 f8fc 	bl	800b634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b43c:	4b10      	ldr	r3, [pc, #64]	; (800b480 <xPortStartScheduler+0x140>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0f      	ldr	r2, [pc, #60]	; (800b480 <xPortStartScheduler+0x140>)
 800b442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b448:	f7ff ff66 	bl	800b318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b44c:	f7ff f888 	bl	800a560 <vTaskSwitchContext>
	prvTaskExitError();
 800b450:	f7ff ff1e 	bl	800b290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	e000ed00 	.word	0xe000ed00
 800b464:	410fc271 	.word	0x410fc271
 800b468:	410fc270 	.word	0x410fc270
 800b46c:	e000e400 	.word	0xe000e400
 800b470:	20000870 	.word	0x20000870
 800b474:	20000874 	.word	0x20000874
 800b478:	e000ed20 	.word	0xe000ed20
 800b47c:	20000040 	.word	0x20000040
 800b480:	e000ef34 	.word	0xe000ef34

0800b484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	607b      	str	r3, [r7, #4]
}
 800b49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a0d      	ldr	r2, [pc, #52]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d10f      	bne.n	800b4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <vPortEnterCritical+0x5c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	603b      	str	r3, [r7, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	e7fe      	b.n	800b4ce <vPortEnterCritical+0x4a>
	}
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	20000040 	.word	0x20000040
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4ea:	4b12      	ldr	r3, [pc, #72]	; (800b534 <vPortExitCritical+0x50>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <vPortExitCritical+0x24>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	607b      	str	r3, [r7, #4]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <vPortExitCritical+0x50>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <vPortExitCritical+0x50>)
 800b510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b512:	4b08      	ldr	r3, [pc, #32]	; (800b534 <vPortExitCritical+0x50>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d105      	bne.n	800b526 <vPortExitCritical+0x42>
 800b51a:	2300      	movs	r3, #0
 800b51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f383 8811 	msr	BASEPRI, r3
}
 800b524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000040 	.word	0x20000040
	...

0800b540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f7fe fff6 	bl	800a560 <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	20000668 	.word	0x20000668
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
}
 800b5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5c2:	f7fe ff15 	bl	800a3f0 <xTaskIncrementTick>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <SysTick_Handler+0x40>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f383 8811 	msr	BASEPRI, r3
}
 800b5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <vPortSetupTimerInterrupt+0x38>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <vPortSetupTimerInterrupt+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <vPortSetupTimerInterrupt+0x40>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	099b      	lsrs	r3, r3, #6
 800b608:	4a09      	ldr	r2, [pc, #36]	; (800b630 <vPortSetupTimerInterrupt+0x44>)
 800b60a:	3b01      	subs	r3, #1
 800b60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b60e:	4b04      	ldr	r3, [pc, #16]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	e000e010 	.word	0xe000e010
 800b624:	e000e018 	.word	0xe000e018
 800b628:	20000034 	.word	0x20000034
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	e000e014 	.word	0xe000e014

0800b634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b644 <vPortEnableVFP+0x10>
 800b638:	6801      	ldr	r1, [r0, #0]
 800b63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b63e:	6001      	str	r1, [r0, #0]
 800b640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b642:	bf00      	nop
 800b644:	e000ed88 	.word	0xe000ed88

0800b648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b64e:	f3ef 8305 	mrs	r3, IPSR
 800b652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b0f      	cmp	r3, #15
 800b658:	d914      	bls.n	800b684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <vPortValidateInterruptPriority+0x70>)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b664:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <vPortValidateInterruptPriority+0x74>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d20a      	bcs.n	800b684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b684:	4b0e      	ldr	r3, [pc, #56]	; (800b6c0 <vPortValidateInterruptPriority+0x78>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <vPortValidateInterruptPriority+0x7c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d90a      	bls.n	800b6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	603b      	str	r3, [r7, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <vPortValidateInterruptPriority+0x60>
	}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	e000e3f0 	.word	0xe000e3f0
 800b6bc:	20000870 	.word	0x20000870
 800b6c0:	e000ed0c 	.word	0xe000ed0c
 800b6c4:	20000874 	.word	0x20000874

0800b6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6d4:	f7fe fdd2 	bl	800a27c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6d8:	4b58      	ldr	r3, [pc, #352]	; (800b83c <pvPortMalloc+0x174>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6e0:	f000 f910 	bl	800b904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6e4:	4b56      	ldr	r3, [pc, #344]	; (800b840 <pvPortMalloc+0x178>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f040 808e 	bne.w	800b80e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01d      	beq.n	800b734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b00      	cmp	r3, #0
 800b708:	d014      	beq.n	800b734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f023 0307 	bic.w	r3, r3, #7
 800b710:	3308      	adds	r3, #8
 800b712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00a      	beq.n	800b734 <pvPortMalloc+0x6c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	617b      	str	r3, [r7, #20]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d069      	beq.n	800b80e <pvPortMalloc+0x146>
 800b73a:	4b42      	ldr	r3, [pc, #264]	; (800b844 <pvPortMalloc+0x17c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d864      	bhi.n	800b80e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b744:	4b40      	ldr	r3, [pc, #256]	; (800b848 <pvPortMalloc+0x180>)
 800b746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b748:	4b3f      	ldr	r3, [pc, #252]	; (800b848 <pvPortMalloc+0x180>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b74e:	e004      	b.n	800b75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <pvPortMalloc+0xa4>
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f1      	bne.n	800b750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b76c:	4b33      	ldr	r3, [pc, #204]	; (800b83c <pvPortMalloc+0x174>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b772:	429a      	cmp	r2, r3
 800b774:	d04b      	beq.n	800b80e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2208      	movs	r2, #8
 800b77c:	4413      	add	r3, r2
 800b77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	6a3b      	ldr	r3, [r7, #32]
 800b786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	2308      	movs	r3, #8
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d91f      	bls.n	800b7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	613b      	str	r3, [r7, #16]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	1ad2      	subs	r2, r2, r3
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7d2:	69b8      	ldr	r0, [r7, #24]
 800b7d4:	f000 f8f8 	bl	800b9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <pvPortMalloc+0x17c>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a18      	ldr	r2, [pc, #96]	; (800b844 <pvPortMalloc+0x17c>)
 800b7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7e6:	4b17      	ldr	r3, [pc, #92]	; (800b844 <pvPortMalloc+0x17c>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b18      	ldr	r3, [pc, #96]	; (800b84c <pvPortMalloc+0x184>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d203      	bcs.n	800b7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7f2:	4b14      	ldr	r3, [pc, #80]	; (800b844 <pvPortMalloc+0x17c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a15      	ldr	r2, [pc, #84]	; (800b84c <pvPortMalloc+0x184>)
 800b7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	4b10      	ldr	r3, [pc, #64]	; (800b840 <pvPortMalloc+0x178>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	431a      	orrs	r2, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b80e:	f7fe fd43 	bl	800a298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	f003 0307 	and.w	r3, r3, #7
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <pvPortMalloc+0x16a>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	60fb      	str	r3, [r7, #12]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <pvPortMalloc+0x168>
	return pvReturn;
 800b832:	69fb      	ldr	r3, [r7, #28]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3728      	adds	r7, #40	; 0x28
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20013480 	.word	0x20013480
 800b840:	2001348c 	.word	0x2001348c
 800b844:	20013484 	.word	0x20013484
 800b848:	20013478 	.word	0x20013478
 800b84c:	20013488 	.word	0x20013488

0800b850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d048      	beq.n	800b8f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b862:	2308      	movs	r3, #8
 800b864:	425b      	negs	r3, r3
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	4413      	add	r3, r2
 800b86a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	4b21      	ldr	r3, [pc, #132]	; (800b8fc <vPortFree+0xac>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4013      	ands	r3, r2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <vPortFree+0x44>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	60fb      	str	r3, [r7, #12]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00a      	beq.n	800b8b2 <vPortFree+0x62>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60bb      	str	r3, [r7, #8]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <vPortFree+0xac>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d019      	beq.n	800b8f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d115      	bne.n	800b8f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	; (800b8fc <vPortFree+0xac>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	43db      	mvns	r3, r3
 800b8d2:	401a      	ands	r2, r3
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8d8:	f7fe fcd0 	bl	800a27c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	4b07      	ldr	r3, [pc, #28]	; (800b900 <vPortFree+0xb0>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	4a06      	ldr	r2, [pc, #24]	; (800b900 <vPortFree+0xb0>)
 800b8e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8ea:	6938      	ldr	r0, [r7, #16]
 800b8ec:	f000 f86c 	bl	800b9c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b8f0:	f7fe fcd2 	bl	800a298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8f4:	bf00      	nop
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	2001348c 	.word	0x2001348c
 800b900:	20013484 	.word	0x20013484

0800b904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b90a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800b90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b910:	4b27      	ldr	r3, [pc, #156]	; (800b9b0 <prvHeapInit+0xac>)
 800b912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00c      	beq.n	800b938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3307      	adds	r3, #7
 800b922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f023 0307 	bic.w	r3, r3, #7
 800b92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	4a1f      	ldr	r2, [pc, #124]	; (800b9b0 <prvHeapInit+0xac>)
 800b934:	4413      	add	r3, r2
 800b936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b93c:	4a1d      	ldr	r2, [pc, #116]	; (800b9b4 <prvHeapInit+0xb0>)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <prvHeapInit+0xb0>)
 800b944:	2200      	movs	r2, #0
 800b946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	4413      	add	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b950:	2208      	movs	r2, #8
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	1a9b      	subs	r3, r3, r2
 800b956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f023 0307 	bic.w	r3, r3, #7
 800b95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a15      	ldr	r2, [pc, #84]	; (800b9b8 <prvHeapInit+0xb4>)
 800b964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b966:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <prvHeapInit+0xb4>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2200      	movs	r2, #0
 800b96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b96e:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <prvHeapInit+0xb4>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	1ad2      	subs	r2, r2, r3
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b984:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <prvHeapInit+0xb4>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <prvHeapInit+0xb8>)
 800b992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <prvHeapInit+0xbc>)
 800b99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b99c:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <prvHeapInit+0xc0>)
 800b99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9a2:	601a      	str	r2, [r3, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20000878 	.word	0x20000878
 800b9b4:	20013478 	.word	0x20013478
 800b9b8:	20013480 	.word	0x20013480
 800b9bc:	20013488 	.word	0x20013488
 800b9c0:	20013484 	.word	0x20013484
 800b9c4:	2001348c 	.word	0x2001348c

0800b9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9d0:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <prvInsertBlockIntoFreeList+0xac>)
 800b9d2:	60fb      	str	r3, [r7, #12]
 800b9d4:	e002      	b.n	800b9dc <prvInsertBlockIntoFreeList+0x14>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d8f7      	bhi.n	800b9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d108      	bne.n	800ba0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	441a      	add	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	441a      	add	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d118      	bne.n	800ba50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	4b15      	ldr	r3, [pc, #84]	; (800ba78 <prvInsertBlockIntoFreeList+0xb0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d00d      	beq.n	800ba46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	441a      	add	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	e008      	b.n	800ba58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <prvInsertBlockIntoFreeList+0xb0>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	e003      	b.n	800ba58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d002      	beq.n	800ba66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20013478 	.word	0x20013478
 800ba78:	20013480 	.word	0x20013480

0800ba7c <__errno>:
 800ba7c:	4b01      	ldr	r3, [pc, #4]	; (800ba84 <__errno+0x8>)
 800ba7e:	6818      	ldr	r0, [r3, #0]
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20000044 	.word	0x20000044

0800ba88 <__libc_init_array>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	4d0d      	ldr	r5, [pc, #52]	; (800bac0 <__libc_init_array+0x38>)
 800ba8c:	4c0d      	ldr	r4, [pc, #52]	; (800bac4 <__libc_init_array+0x3c>)
 800ba8e:	1b64      	subs	r4, r4, r5
 800ba90:	10a4      	asrs	r4, r4, #2
 800ba92:	2600      	movs	r6, #0
 800ba94:	42a6      	cmp	r6, r4
 800ba96:	d109      	bne.n	800baac <__libc_init_array+0x24>
 800ba98:	4d0b      	ldr	r5, [pc, #44]	; (800bac8 <__libc_init_array+0x40>)
 800ba9a:	4c0c      	ldr	r4, [pc, #48]	; (800bacc <__libc_init_array+0x44>)
 800ba9c:	f004 fd86 	bl	80105ac <_init>
 800baa0:	1b64      	subs	r4, r4, r5
 800baa2:	10a4      	asrs	r4, r4, #2
 800baa4:	2600      	movs	r6, #0
 800baa6:	42a6      	cmp	r6, r4
 800baa8:	d105      	bne.n	800bab6 <__libc_init_array+0x2e>
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab0:	4798      	blx	r3
 800bab2:	3601      	adds	r6, #1
 800bab4:	e7ee      	b.n	800ba94 <__libc_init_array+0xc>
 800bab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baba:	4798      	blx	r3
 800babc:	3601      	adds	r6, #1
 800babe:	e7f2      	b.n	800baa6 <__libc_init_array+0x1e>
 800bac0:	08010cd4 	.word	0x08010cd4
 800bac4:	08010cd4 	.word	0x08010cd4
 800bac8:	08010cd4 	.word	0x08010cd4
 800bacc:	08010cd8 	.word	0x08010cd8

0800bad0 <malloc>:
 800bad0:	4b02      	ldr	r3, [pc, #8]	; (800badc <malloc+0xc>)
 800bad2:	4601      	mov	r1, r0
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	f000 b88d 	b.w	800bbf4 <_malloc_r>
 800bada:	bf00      	nop
 800badc:	20000044 	.word	0x20000044

0800bae0 <free>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <free+0xc>)
 800bae2:	4601      	mov	r1, r0
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f000 b819 	b.w	800bb1c <_free_r>
 800baea:	bf00      	nop
 800baec:	20000044 	.word	0x20000044

0800baf0 <memcpy>:
 800baf0:	440a      	add	r2, r1
 800baf2:	4291      	cmp	r1, r2
 800baf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800baf8:	d100      	bne.n	800bafc <memcpy+0xc>
 800bafa:	4770      	bx	lr
 800bafc:	b510      	push	{r4, lr}
 800bafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb06:	4291      	cmp	r1, r2
 800bb08:	d1f9      	bne.n	800bafe <memcpy+0xe>
 800bb0a:	bd10      	pop	{r4, pc}

0800bb0c <memset>:
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d100      	bne.n	800bb16 <memset+0xa>
 800bb14:	4770      	bx	lr
 800bb16:	f803 1b01 	strb.w	r1, [r3], #1
 800bb1a:	e7f9      	b.n	800bb10 <memset+0x4>

0800bb1c <_free_r>:
 800bb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb1e:	2900      	cmp	r1, #0
 800bb20:	d044      	beq.n	800bbac <_free_r+0x90>
 800bb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb26:	9001      	str	r0, [sp, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb2e:	bfb8      	it	lt
 800bb30:	18e4      	addlt	r4, r4, r3
 800bb32:	f003 fc13 	bl	800f35c <__malloc_lock>
 800bb36:	4a1e      	ldr	r2, [pc, #120]	; (800bbb0 <_free_r+0x94>)
 800bb38:	9801      	ldr	r0, [sp, #4]
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	b933      	cbnz	r3, 800bb4c <_free_r+0x30>
 800bb3e:	6063      	str	r3, [r4, #4]
 800bb40:	6014      	str	r4, [r2, #0]
 800bb42:	b003      	add	sp, #12
 800bb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb48:	f003 bc0e 	b.w	800f368 <__malloc_unlock>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d908      	bls.n	800bb62 <_free_r+0x46>
 800bb50:	6825      	ldr	r5, [r4, #0]
 800bb52:	1961      	adds	r1, r4, r5
 800bb54:	428b      	cmp	r3, r1
 800bb56:	bf01      	itttt	eq
 800bb58:	6819      	ldreq	r1, [r3, #0]
 800bb5a:	685b      	ldreq	r3, [r3, #4]
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	e7ed      	b.n	800bb3e <_free_r+0x22>
 800bb62:	461a      	mov	r2, r3
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	b10b      	cbz	r3, 800bb6c <_free_r+0x50>
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d9fa      	bls.n	800bb62 <_free_r+0x46>
 800bb6c:	6811      	ldr	r1, [r2, #0]
 800bb6e:	1855      	adds	r5, r2, r1
 800bb70:	42a5      	cmp	r5, r4
 800bb72:	d10b      	bne.n	800bb8c <_free_r+0x70>
 800bb74:	6824      	ldr	r4, [r4, #0]
 800bb76:	4421      	add	r1, r4
 800bb78:	1854      	adds	r4, r2, r1
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	d1e0      	bne.n	800bb42 <_free_r+0x26>
 800bb80:	681c      	ldr	r4, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	6053      	str	r3, [r2, #4]
 800bb86:	4421      	add	r1, r4
 800bb88:	6011      	str	r1, [r2, #0]
 800bb8a:	e7da      	b.n	800bb42 <_free_r+0x26>
 800bb8c:	d902      	bls.n	800bb94 <_free_r+0x78>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	e7d6      	b.n	800bb42 <_free_r+0x26>
 800bb94:	6825      	ldr	r5, [r4, #0]
 800bb96:	1961      	adds	r1, r4, r5
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	bf04      	itt	eq
 800bb9c:	6819      	ldreq	r1, [r3, #0]
 800bb9e:	685b      	ldreq	r3, [r3, #4]
 800bba0:	6063      	str	r3, [r4, #4]
 800bba2:	bf04      	itt	eq
 800bba4:	1949      	addeq	r1, r1, r5
 800bba6:	6021      	streq	r1, [r4, #0]
 800bba8:	6054      	str	r4, [r2, #4]
 800bbaa:	e7ca      	b.n	800bb42 <_free_r+0x26>
 800bbac:	b003      	add	sp, #12
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	20013490 	.word	0x20013490

0800bbb4 <sbrk_aligned>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	4e0e      	ldr	r6, [pc, #56]	; (800bbf0 <sbrk_aligned+0x3c>)
 800bbb8:	460c      	mov	r4, r1
 800bbba:	6831      	ldr	r1, [r6, #0]
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	b911      	cbnz	r1, 800bbc6 <sbrk_aligned+0x12>
 800bbc0:	f000 ff94 	bl	800caec <_sbrk_r>
 800bbc4:	6030      	str	r0, [r6, #0]
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f000 ff8f 	bl	800caec <_sbrk_r>
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	d00a      	beq.n	800bbe8 <sbrk_aligned+0x34>
 800bbd2:	1cc4      	adds	r4, r0, #3
 800bbd4:	f024 0403 	bic.w	r4, r4, #3
 800bbd8:	42a0      	cmp	r0, r4
 800bbda:	d007      	beq.n	800bbec <sbrk_aligned+0x38>
 800bbdc:	1a21      	subs	r1, r4, r0
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 ff84 	bl	800caec <_sbrk_r>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d101      	bne.n	800bbec <sbrk_aligned+0x38>
 800bbe8:	f04f 34ff 	mov.w	r4, #4294967295
 800bbec:	4620      	mov	r0, r4
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	20013494 	.word	0x20013494

0800bbf4 <_malloc_r>:
 800bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf8:	1ccd      	adds	r5, r1, #3
 800bbfa:	f025 0503 	bic.w	r5, r5, #3
 800bbfe:	3508      	adds	r5, #8
 800bc00:	2d0c      	cmp	r5, #12
 800bc02:	bf38      	it	cc
 800bc04:	250c      	movcc	r5, #12
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	4607      	mov	r7, r0
 800bc0a:	db01      	blt.n	800bc10 <_malloc_r+0x1c>
 800bc0c:	42a9      	cmp	r1, r5
 800bc0e:	d905      	bls.n	800bc1c <_malloc_r+0x28>
 800bc10:	230c      	movs	r3, #12
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	2600      	movs	r6, #0
 800bc16:	4630      	mov	r0, r6
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	4e2e      	ldr	r6, [pc, #184]	; (800bcd8 <_malloc_r+0xe4>)
 800bc1e:	f003 fb9d 	bl	800f35c <__malloc_lock>
 800bc22:	6833      	ldr	r3, [r6, #0]
 800bc24:	461c      	mov	r4, r3
 800bc26:	bb34      	cbnz	r4, 800bc76 <_malloc_r+0x82>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f7ff ffc2 	bl	800bbb4 <sbrk_aligned>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	4604      	mov	r4, r0
 800bc34:	d14d      	bne.n	800bcd2 <_malloc_r+0xde>
 800bc36:	6834      	ldr	r4, [r6, #0]
 800bc38:	4626      	mov	r6, r4
 800bc3a:	2e00      	cmp	r6, #0
 800bc3c:	d140      	bne.n	800bcc0 <_malloc_r+0xcc>
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	4631      	mov	r1, r6
 800bc42:	4638      	mov	r0, r7
 800bc44:	eb04 0803 	add.w	r8, r4, r3
 800bc48:	f000 ff50 	bl	800caec <_sbrk_r>
 800bc4c:	4580      	cmp	r8, r0
 800bc4e:	d13a      	bne.n	800bcc6 <_malloc_r+0xd2>
 800bc50:	6821      	ldr	r1, [r4, #0]
 800bc52:	3503      	adds	r5, #3
 800bc54:	1a6d      	subs	r5, r5, r1
 800bc56:	f025 0503 	bic.w	r5, r5, #3
 800bc5a:	3508      	adds	r5, #8
 800bc5c:	2d0c      	cmp	r5, #12
 800bc5e:	bf38      	it	cc
 800bc60:	250c      	movcc	r5, #12
 800bc62:	4629      	mov	r1, r5
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff ffa5 	bl	800bbb4 <sbrk_aligned>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	d02b      	beq.n	800bcc6 <_malloc_r+0xd2>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	442b      	add	r3, r5
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	e00e      	b.n	800bc94 <_malloc_r+0xa0>
 800bc76:	6822      	ldr	r2, [r4, #0]
 800bc78:	1b52      	subs	r2, r2, r5
 800bc7a:	d41e      	bmi.n	800bcba <_malloc_r+0xc6>
 800bc7c:	2a0b      	cmp	r2, #11
 800bc7e:	d916      	bls.n	800bcae <_malloc_r+0xba>
 800bc80:	1961      	adds	r1, r4, r5
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	6025      	str	r5, [r4, #0]
 800bc86:	bf18      	it	ne
 800bc88:	6059      	strne	r1, [r3, #4]
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	bf08      	it	eq
 800bc8e:	6031      	streq	r1, [r6, #0]
 800bc90:	5162      	str	r2, [r4, r5]
 800bc92:	604b      	str	r3, [r1, #4]
 800bc94:	4638      	mov	r0, r7
 800bc96:	f104 060b 	add.w	r6, r4, #11
 800bc9a:	f003 fb65 	bl	800f368 <__malloc_unlock>
 800bc9e:	f026 0607 	bic.w	r6, r6, #7
 800bca2:	1d23      	adds	r3, r4, #4
 800bca4:	1af2      	subs	r2, r6, r3
 800bca6:	d0b6      	beq.n	800bc16 <_malloc_r+0x22>
 800bca8:	1b9b      	subs	r3, r3, r6
 800bcaa:	50a3      	str	r3, [r4, r2]
 800bcac:	e7b3      	b.n	800bc16 <_malloc_r+0x22>
 800bcae:	6862      	ldr	r2, [r4, #4]
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	bf0c      	ite	eq
 800bcb4:	6032      	streq	r2, [r6, #0]
 800bcb6:	605a      	strne	r2, [r3, #4]
 800bcb8:	e7ec      	b.n	800bc94 <_malloc_r+0xa0>
 800bcba:	4623      	mov	r3, r4
 800bcbc:	6864      	ldr	r4, [r4, #4]
 800bcbe:	e7b2      	b.n	800bc26 <_malloc_r+0x32>
 800bcc0:	4634      	mov	r4, r6
 800bcc2:	6876      	ldr	r6, [r6, #4]
 800bcc4:	e7b9      	b.n	800bc3a <_malloc_r+0x46>
 800bcc6:	230c      	movs	r3, #12
 800bcc8:	603b      	str	r3, [r7, #0]
 800bcca:	4638      	mov	r0, r7
 800bccc:	f003 fb4c 	bl	800f368 <__malloc_unlock>
 800bcd0:	e7a1      	b.n	800bc16 <_malloc_r+0x22>
 800bcd2:	6025      	str	r5, [r4, #0]
 800bcd4:	e7de      	b.n	800bc94 <_malloc_r+0xa0>
 800bcd6:	bf00      	nop
 800bcd8:	20013490 	.word	0x20013490

0800bcdc <__cvt>:
 800bcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	ec55 4b10 	vmov	r4, r5, d0
 800bce4:	2d00      	cmp	r5, #0
 800bce6:	460e      	mov	r6, r1
 800bce8:	4619      	mov	r1, r3
 800bcea:	462b      	mov	r3, r5
 800bcec:	bfbb      	ittet	lt
 800bcee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcf2:	461d      	movlt	r5, r3
 800bcf4:	2300      	movge	r3, #0
 800bcf6:	232d      	movlt	r3, #45	; 0x2d
 800bcf8:	700b      	strb	r3, [r1, #0]
 800bcfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd00:	4691      	mov	r9, r2
 800bd02:	f023 0820 	bic.w	r8, r3, #32
 800bd06:	bfbc      	itt	lt
 800bd08:	4622      	movlt	r2, r4
 800bd0a:	4614      	movlt	r4, r2
 800bd0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd10:	d005      	beq.n	800bd1e <__cvt+0x42>
 800bd12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd16:	d100      	bne.n	800bd1a <__cvt+0x3e>
 800bd18:	3601      	adds	r6, #1
 800bd1a:	2102      	movs	r1, #2
 800bd1c:	e000      	b.n	800bd20 <__cvt+0x44>
 800bd1e:	2103      	movs	r1, #3
 800bd20:	ab03      	add	r3, sp, #12
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	ab02      	add	r3, sp, #8
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	ec45 4b10 	vmov	d0, r4, r5
 800bd2c:	4653      	mov	r3, sl
 800bd2e:	4632      	mov	r2, r6
 800bd30:	f001 ff82 	bl	800dc38 <_dtoa_r>
 800bd34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd38:	4607      	mov	r7, r0
 800bd3a:	d102      	bne.n	800bd42 <__cvt+0x66>
 800bd3c:	f019 0f01 	tst.w	r9, #1
 800bd40:	d022      	beq.n	800bd88 <__cvt+0xac>
 800bd42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd46:	eb07 0906 	add.w	r9, r7, r6
 800bd4a:	d110      	bne.n	800bd6e <__cvt+0x92>
 800bd4c:	783b      	ldrb	r3, [r7, #0]
 800bd4e:	2b30      	cmp	r3, #48	; 0x30
 800bd50:	d10a      	bne.n	800bd68 <__cvt+0x8c>
 800bd52:	2200      	movs	r2, #0
 800bd54:	2300      	movs	r3, #0
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	f7f4 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd5e:	b918      	cbnz	r0, 800bd68 <__cvt+0x8c>
 800bd60:	f1c6 0601 	rsb	r6, r6, #1
 800bd64:	f8ca 6000 	str.w	r6, [sl]
 800bd68:	f8da 3000 	ldr.w	r3, [sl]
 800bd6c:	4499      	add	r9, r3
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2300      	movs	r3, #0
 800bd72:	4620      	mov	r0, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	f7f4 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd7a:	b108      	cbz	r0, 800bd80 <__cvt+0xa4>
 800bd7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd80:	2230      	movs	r2, #48	; 0x30
 800bd82:	9b03      	ldr	r3, [sp, #12]
 800bd84:	454b      	cmp	r3, r9
 800bd86:	d307      	bcc.n	800bd98 <__cvt+0xbc>
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd8c:	1bdb      	subs	r3, r3, r7
 800bd8e:	4638      	mov	r0, r7
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	b004      	add	sp, #16
 800bd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd98:	1c59      	adds	r1, r3, #1
 800bd9a:	9103      	str	r1, [sp, #12]
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e7f0      	b.n	800bd82 <__cvt+0xa6>

0800bda0 <__exponent>:
 800bda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda2:	4603      	mov	r3, r0
 800bda4:	2900      	cmp	r1, #0
 800bda6:	bfb8      	it	lt
 800bda8:	4249      	neglt	r1, r1
 800bdaa:	f803 2b02 	strb.w	r2, [r3], #2
 800bdae:	bfb4      	ite	lt
 800bdb0:	222d      	movlt	r2, #45	; 0x2d
 800bdb2:	222b      	movge	r2, #43	; 0x2b
 800bdb4:	2909      	cmp	r1, #9
 800bdb6:	7042      	strb	r2, [r0, #1]
 800bdb8:	dd2a      	ble.n	800be10 <__exponent+0x70>
 800bdba:	f10d 0407 	add.w	r4, sp, #7
 800bdbe:	46a4      	mov	ip, r4
 800bdc0:	270a      	movs	r7, #10
 800bdc2:	46a6      	mov	lr, r4
 800bdc4:	460a      	mov	r2, r1
 800bdc6:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdca:	fb07 1516 	mls	r5, r7, r6, r1
 800bdce:	3530      	adds	r5, #48	; 0x30
 800bdd0:	2a63      	cmp	r2, #99	; 0x63
 800bdd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdda:	4631      	mov	r1, r6
 800bddc:	dcf1      	bgt.n	800bdc2 <__exponent+0x22>
 800bdde:	3130      	adds	r1, #48	; 0x30
 800bde0:	f1ae 0502 	sub.w	r5, lr, #2
 800bde4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bde8:	1c44      	adds	r4, r0, #1
 800bdea:	4629      	mov	r1, r5
 800bdec:	4561      	cmp	r1, ip
 800bdee:	d30a      	bcc.n	800be06 <__exponent+0x66>
 800bdf0:	f10d 0209 	add.w	r2, sp, #9
 800bdf4:	eba2 020e 	sub.w	r2, r2, lr
 800bdf8:	4565      	cmp	r5, ip
 800bdfa:	bf88      	it	hi
 800bdfc:	2200      	movhi	r2, #0
 800bdfe:	4413      	add	r3, r2
 800be00:	1a18      	subs	r0, r3, r0
 800be02:	b003      	add	sp, #12
 800be04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be0e:	e7ed      	b.n	800bdec <__exponent+0x4c>
 800be10:	2330      	movs	r3, #48	; 0x30
 800be12:	3130      	adds	r1, #48	; 0x30
 800be14:	7083      	strb	r3, [r0, #2]
 800be16:	70c1      	strb	r1, [r0, #3]
 800be18:	1d03      	adds	r3, r0, #4
 800be1a:	e7f1      	b.n	800be00 <__exponent+0x60>

0800be1c <_printf_float>:
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	ed2d 8b02 	vpush	{d8}
 800be24:	b08d      	sub	sp, #52	; 0x34
 800be26:	460c      	mov	r4, r1
 800be28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be2c:	4616      	mov	r6, r2
 800be2e:	461f      	mov	r7, r3
 800be30:	4605      	mov	r5, r0
 800be32:	f003 fa15 	bl	800f260 <_localeconv_r>
 800be36:	f8d0 a000 	ldr.w	sl, [r0]
 800be3a:	4650      	mov	r0, sl
 800be3c:	f7f4 f9c8 	bl	80001d0 <strlen>
 800be40:	2300      	movs	r3, #0
 800be42:	930a      	str	r3, [sp, #40]	; 0x28
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	9305      	str	r3, [sp, #20]
 800be48:	f8d8 3000 	ldr.w	r3, [r8]
 800be4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be50:	3307      	adds	r3, #7
 800be52:	f023 0307 	bic.w	r3, r3, #7
 800be56:	f103 0208 	add.w	r2, r3, #8
 800be5a:	f8c8 2000 	str.w	r2, [r8]
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be6e:	9307      	str	r3, [sp, #28]
 800be70:	f8cd 8018 	str.w	r8, [sp, #24]
 800be74:	ee08 0a10 	vmov	s16, r0
 800be78:	4b9f      	ldr	r3, [pc, #636]	; (800c0f8 <_printf_float+0x2dc>)
 800be7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be7e:	f04f 32ff 	mov.w	r2, #4294967295
 800be82:	f7f4 fe53 	bl	8000b2c <__aeabi_dcmpun>
 800be86:	bb88      	cbnz	r0, 800beec <_printf_float+0xd0>
 800be88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be8c:	4b9a      	ldr	r3, [pc, #616]	; (800c0f8 <_printf_float+0x2dc>)
 800be8e:	f04f 32ff 	mov.w	r2, #4294967295
 800be92:	f7f4 fe2d 	bl	8000af0 <__aeabi_dcmple>
 800be96:	bb48      	cbnz	r0, 800beec <_printf_float+0xd0>
 800be98:	2200      	movs	r2, #0
 800be9a:	2300      	movs	r3, #0
 800be9c:	4640      	mov	r0, r8
 800be9e:	4649      	mov	r1, r9
 800bea0:	f7f4 fe1c 	bl	8000adc <__aeabi_dcmplt>
 800bea4:	b110      	cbz	r0, 800beac <_printf_float+0x90>
 800bea6:	232d      	movs	r3, #45	; 0x2d
 800bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beac:	4b93      	ldr	r3, [pc, #588]	; (800c0fc <_printf_float+0x2e0>)
 800beae:	4894      	ldr	r0, [pc, #592]	; (800c100 <_printf_float+0x2e4>)
 800beb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800beb4:	bf94      	ite	ls
 800beb6:	4698      	movls	r8, r3
 800beb8:	4680      	movhi	r8, r0
 800beba:	2303      	movs	r3, #3
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	9b05      	ldr	r3, [sp, #20]
 800bec0:	f023 0204 	bic.w	r2, r3, #4
 800bec4:	6022      	str	r2, [r4, #0]
 800bec6:	f04f 0900 	mov.w	r9, #0
 800beca:	9700      	str	r7, [sp, #0]
 800becc:	4633      	mov	r3, r6
 800bece:	aa0b      	add	r2, sp, #44	; 0x2c
 800bed0:	4621      	mov	r1, r4
 800bed2:	4628      	mov	r0, r5
 800bed4:	f000 f9d8 	bl	800c288 <_printf_common>
 800bed8:	3001      	adds	r0, #1
 800beda:	f040 8090 	bne.w	800bffe <_printf_float+0x1e2>
 800bede:	f04f 30ff 	mov.w	r0, #4294967295
 800bee2:	b00d      	add	sp, #52	; 0x34
 800bee4:	ecbd 8b02 	vpop	{d8}
 800bee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beec:	4642      	mov	r2, r8
 800beee:	464b      	mov	r3, r9
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fe1a 	bl	8000b2c <__aeabi_dcmpun>
 800bef8:	b140      	cbz	r0, 800bf0c <_printf_float+0xf0>
 800befa:	464b      	mov	r3, r9
 800befc:	2b00      	cmp	r3, #0
 800befe:	bfbc      	itt	lt
 800bf00:	232d      	movlt	r3, #45	; 0x2d
 800bf02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf06:	487f      	ldr	r0, [pc, #508]	; (800c104 <_printf_float+0x2e8>)
 800bf08:	4b7f      	ldr	r3, [pc, #508]	; (800c108 <_printf_float+0x2ec>)
 800bf0a:	e7d1      	b.n	800beb0 <_printf_float+0x94>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf12:	9206      	str	r2, [sp, #24]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	d13f      	bne.n	800bf98 <_printf_float+0x17c>
 800bf18:	2306      	movs	r3, #6
 800bf1a:	6063      	str	r3, [r4, #4]
 800bf1c:	9b05      	ldr	r3, [sp, #20]
 800bf1e:	6861      	ldr	r1, [r4, #4]
 800bf20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf24:	2300      	movs	r3, #0
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	ab0a      	add	r3, sp, #40	; 0x28
 800bf2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf2e:	ab09      	add	r3, sp, #36	; 0x24
 800bf30:	ec49 8b10 	vmov	d0, r8, r9
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	6022      	str	r2, [r4, #0]
 800bf38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f7ff fecd 	bl	800bcdc <__cvt>
 800bf42:	9b06      	ldr	r3, [sp, #24]
 800bf44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf46:	2b47      	cmp	r3, #71	; 0x47
 800bf48:	4680      	mov	r8, r0
 800bf4a:	d108      	bne.n	800bf5e <_printf_float+0x142>
 800bf4c:	1cc8      	adds	r0, r1, #3
 800bf4e:	db02      	blt.n	800bf56 <_printf_float+0x13a>
 800bf50:	6863      	ldr	r3, [r4, #4]
 800bf52:	4299      	cmp	r1, r3
 800bf54:	dd41      	ble.n	800bfda <_printf_float+0x1be>
 800bf56:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf5a:	fa5f fb8b 	uxtb.w	fp, fp
 800bf5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf62:	d820      	bhi.n	800bfa6 <_printf_float+0x18a>
 800bf64:	3901      	subs	r1, #1
 800bf66:	465a      	mov	r2, fp
 800bf68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf6c:	9109      	str	r1, [sp, #36]	; 0x24
 800bf6e:	f7ff ff17 	bl	800bda0 <__exponent>
 800bf72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf74:	1813      	adds	r3, r2, r0
 800bf76:	2a01      	cmp	r2, #1
 800bf78:	4681      	mov	r9, r0
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	dc02      	bgt.n	800bf84 <_printf_float+0x168>
 800bf7e:	6822      	ldr	r2, [r4, #0]
 800bf80:	07d2      	lsls	r2, r2, #31
 800bf82:	d501      	bpl.n	800bf88 <_printf_float+0x16c>
 800bf84:	3301      	adds	r3, #1
 800bf86:	6123      	str	r3, [r4, #16]
 800bf88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d09c      	beq.n	800beca <_printf_float+0xae>
 800bf90:	232d      	movs	r3, #45	; 0x2d
 800bf92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf96:	e798      	b.n	800beca <_printf_float+0xae>
 800bf98:	9a06      	ldr	r2, [sp, #24]
 800bf9a:	2a47      	cmp	r2, #71	; 0x47
 800bf9c:	d1be      	bne.n	800bf1c <_printf_float+0x100>
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1bc      	bne.n	800bf1c <_printf_float+0x100>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e7b9      	b.n	800bf1a <_printf_float+0xfe>
 800bfa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfaa:	d118      	bne.n	800bfde <_printf_float+0x1c2>
 800bfac:	2900      	cmp	r1, #0
 800bfae:	6863      	ldr	r3, [r4, #4]
 800bfb0:	dd0b      	ble.n	800bfca <_printf_float+0x1ae>
 800bfb2:	6121      	str	r1, [r4, #16]
 800bfb4:	b913      	cbnz	r3, 800bfbc <_printf_float+0x1a0>
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	07d0      	lsls	r0, r2, #31
 800bfba:	d502      	bpl.n	800bfc2 <_printf_float+0x1a6>
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	440b      	add	r3, r1
 800bfc0:	6123      	str	r3, [r4, #16]
 800bfc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfc4:	f04f 0900 	mov.w	r9, #0
 800bfc8:	e7de      	b.n	800bf88 <_printf_float+0x16c>
 800bfca:	b913      	cbnz	r3, 800bfd2 <_printf_float+0x1b6>
 800bfcc:	6822      	ldr	r2, [r4, #0]
 800bfce:	07d2      	lsls	r2, r2, #31
 800bfd0:	d501      	bpl.n	800bfd6 <_printf_float+0x1ba>
 800bfd2:	3302      	adds	r3, #2
 800bfd4:	e7f4      	b.n	800bfc0 <_printf_float+0x1a4>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e7f2      	b.n	800bfc0 <_printf_float+0x1a4>
 800bfda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	db05      	blt.n	800bff0 <_printf_float+0x1d4>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	6121      	str	r1, [r4, #16]
 800bfe8:	07d8      	lsls	r0, r3, #31
 800bfea:	d5ea      	bpl.n	800bfc2 <_printf_float+0x1a6>
 800bfec:	1c4b      	adds	r3, r1, #1
 800bfee:	e7e7      	b.n	800bfc0 <_printf_float+0x1a4>
 800bff0:	2900      	cmp	r1, #0
 800bff2:	bfd4      	ite	le
 800bff4:	f1c1 0202 	rsble	r2, r1, #2
 800bff8:	2201      	movgt	r2, #1
 800bffa:	4413      	add	r3, r2
 800bffc:	e7e0      	b.n	800bfc0 <_printf_float+0x1a4>
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	055a      	lsls	r2, r3, #21
 800c002:	d407      	bmi.n	800c014 <_printf_float+0x1f8>
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	4642      	mov	r2, r8
 800c008:	4631      	mov	r1, r6
 800c00a:	4628      	mov	r0, r5
 800c00c:	47b8      	blx	r7
 800c00e:	3001      	adds	r0, #1
 800c010:	d12c      	bne.n	800c06c <_printf_float+0x250>
 800c012:	e764      	b.n	800bede <_printf_float+0xc2>
 800c014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c018:	f240 80e0 	bls.w	800c1dc <_printf_float+0x3c0>
 800c01c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c020:	2200      	movs	r2, #0
 800c022:	2300      	movs	r3, #0
 800c024:	f7f4 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d034      	beq.n	800c096 <_printf_float+0x27a>
 800c02c:	4a37      	ldr	r2, [pc, #220]	; (800c10c <_printf_float+0x2f0>)
 800c02e:	2301      	movs	r3, #1
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f af51 	beq.w	800bede <_printf_float+0xc2>
 800c03c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c040:	429a      	cmp	r2, r3
 800c042:	db02      	blt.n	800c04a <_printf_float+0x22e>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	07d8      	lsls	r0, r3, #31
 800c048:	d510      	bpl.n	800c06c <_printf_float+0x250>
 800c04a:	ee18 3a10 	vmov	r3, s16
 800c04e:	4652      	mov	r2, sl
 800c050:	4631      	mov	r1, r6
 800c052:	4628      	mov	r0, r5
 800c054:	47b8      	blx	r7
 800c056:	3001      	adds	r0, #1
 800c058:	f43f af41 	beq.w	800bede <_printf_float+0xc2>
 800c05c:	f04f 0800 	mov.w	r8, #0
 800c060:	f104 091a 	add.w	r9, r4, #26
 800c064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c066:	3b01      	subs	r3, #1
 800c068:	4543      	cmp	r3, r8
 800c06a:	dc09      	bgt.n	800c080 <_printf_float+0x264>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	079b      	lsls	r3, r3, #30
 800c070:	f100 8105 	bmi.w	800c27e <_printf_float+0x462>
 800c074:	68e0      	ldr	r0, [r4, #12]
 800c076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c078:	4298      	cmp	r0, r3
 800c07a:	bfb8      	it	lt
 800c07c:	4618      	movlt	r0, r3
 800c07e:	e730      	b.n	800bee2 <_printf_float+0xc6>
 800c080:	2301      	movs	r3, #1
 800c082:	464a      	mov	r2, r9
 800c084:	4631      	mov	r1, r6
 800c086:	4628      	mov	r0, r5
 800c088:	47b8      	blx	r7
 800c08a:	3001      	adds	r0, #1
 800c08c:	f43f af27 	beq.w	800bede <_printf_float+0xc2>
 800c090:	f108 0801 	add.w	r8, r8, #1
 800c094:	e7e6      	b.n	800c064 <_printf_float+0x248>
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dc39      	bgt.n	800c110 <_printf_float+0x2f4>
 800c09c:	4a1b      	ldr	r2, [pc, #108]	; (800c10c <_printf_float+0x2f0>)
 800c09e:	2301      	movs	r3, #1
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af19 	beq.w	800bede <_printf_float+0xc2>
 800c0ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	d102      	bne.n	800c0ba <_printf_float+0x29e>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	07d9      	lsls	r1, r3, #31
 800c0b8:	d5d8      	bpl.n	800c06c <_printf_float+0x250>
 800c0ba:	ee18 3a10 	vmov	r3, s16
 800c0be:	4652      	mov	r2, sl
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b8      	blx	r7
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	f43f af09 	beq.w	800bede <_printf_float+0xc2>
 800c0cc:	f04f 0900 	mov.w	r9, #0
 800c0d0:	f104 0a1a 	add.w	sl, r4, #26
 800c0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d6:	425b      	negs	r3, r3
 800c0d8:	454b      	cmp	r3, r9
 800c0da:	dc01      	bgt.n	800c0e0 <_printf_float+0x2c4>
 800c0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0de:	e792      	b.n	800c006 <_printf_float+0x1ea>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	4652      	mov	r2, sl
 800c0e4:	4631      	mov	r1, r6
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	47b8      	blx	r7
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	f43f aef7 	beq.w	800bede <_printf_float+0xc2>
 800c0f0:	f109 0901 	add.w	r9, r9, #1
 800c0f4:	e7ee      	b.n	800c0d4 <_printf_float+0x2b8>
 800c0f6:	bf00      	nop
 800c0f8:	7fefffff 	.word	0x7fefffff
 800c0fc:	08010820 	.word	0x08010820
 800c100:	08010824 	.word	0x08010824
 800c104:	0801082c 	.word	0x0801082c
 800c108:	08010828 	.word	0x08010828
 800c10c:	08010830 	.word	0x08010830
 800c110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c114:	429a      	cmp	r2, r3
 800c116:	bfa8      	it	ge
 800c118:	461a      	movge	r2, r3
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	4691      	mov	r9, r2
 800c11e:	dc37      	bgt.n	800c190 <_printf_float+0x374>
 800c120:	f04f 0b00 	mov.w	fp, #0
 800c124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c128:	f104 021a 	add.w	r2, r4, #26
 800c12c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c12e:	9305      	str	r3, [sp, #20]
 800c130:	eba3 0309 	sub.w	r3, r3, r9
 800c134:	455b      	cmp	r3, fp
 800c136:	dc33      	bgt.n	800c1a0 <_printf_float+0x384>
 800c138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c13c:	429a      	cmp	r2, r3
 800c13e:	db3b      	blt.n	800c1b8 <_printf_float+0x39c>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	07da      	lsls	r2, r3, #31
 800c144:	d438      	bmi.n	800c1b8 <_printf_float+0x39c>
 800c146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c148:	9a05      	ldr	r2, [sp, #20]
 800c14a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c14c:	1a9a      	subs	r2, r3, r2
 800c14e:	eba3 0901 	sub.w	r9, r3, r1
 800c152:	4591      	cmp	r9, r2
 800c154:	bfa8      	it	ge
 800c156:	4691      	movge	r9, r2
 800c158:	f1b9 0f00 	cmp.w	r9, #0
 800c15c:	dc35      	bgt.n	800c1ca <_printf_float+0x3ae>
 800c15e:	f04f 0800 	mov.w	r8, #0
 800c162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c166:	f104 0a1a 	add.w	sl, r4, #26
 800c16a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c16e:	1a9b      	subs	r3, r3, r2
 800c170:	eba3 0309 	sub.w	r3, r3, r9
 800c174:	4543      	cmp	r3, r8
 800c176:	f77f af79 	ble.w	800c06c <_printf_float+0x250>
 800c17a:	2301      	movs	r3, #1
 800c17c:	4652      	mov	r2, sl
 800c17e:	4631      	mov	r1, r6
 800c180:	4628      	mov	r0, r5
 800c182:	47b8      	blx	r7
 800c184:	3001      	adds	r0, #1
 800c186:	f43f aeaa 	beq.w	800bede <_printf_float+0xc2>
 800c18a:	f108 0801 	add.w	r8, r8, #1
 800c18e:	e7ec      	b.n	800c16a <_printf_float+0x34e>
 800c190:	4613      	mov	r3, r2
 800c192:	4631      	mov	r1, r6
 800c194:	4642      	mov	r2, r8
 800c196:	4628      	mov	r0, r5
 800c198:	47b8      	blx	r7
 800c19a:	3001      	adds	r0, #1
 800c19c:	d1c0      	bne.n	800c120 <_printf_float+0x304>
 800c19e:	e69e      	b.n	800bede <_printf_float+0xc2>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	9205      	str	r2, [sp, #20]
 800c1a8:	47b8      	blx	r7
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	f43f ae97 	beq.w	800bede <_printf_float+0xc2>
 800c1b0:	9a05      	ldr	r2, [sp, #20]
 800c1b2:	f10b 0b01 	add.w	fp, fp, #1
 800c1b6:	e7b9      	b.n	800c12c <_printf_float+0x310>
 800c1b8:	ee18 3a10 	vmov	r3, s16
 800c1bc:	4652      	mov	r2, sl
 800c1be:	4631      	mov	r1, r6
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	47b8      	blx	r7
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d1be      	bne.n	800c146 <_printf_float+0x32a>
 800c1c8:	e689      	b.n	800bede <_printf_float+0xc2>
 800c1ca:	9a05      	ldr	r2, [sp, #20]
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	4442      	add	r2, r8
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d1c1      	bne.n	800c15e <_printf_float+0x342>
 800c1da:	e680      	b.n	800bede <_printf_float+0xc2>
 800c1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1de:	2a01      	cmp	r2, #1
 800c1e0:	dc01      	bgt.n	800c1e6 <_printf_float+0x3ca>
 800c1e2:	07db      	lsls	r3, r3, #31
 800c1e4:	d538      	bpl.n	800c258 <_printf_float+0x43c>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	4642      	mov	r2, r8
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47b8      	blx	r7
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	f43f ae74 	beq.w	800bede <_printf_float+0xc2>
 800c1f6:	ee18 3a10 	vmov	r3, s16
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f ae6b 	beq.w	800bede <_printf_float+0xc2>
 800c208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c20c:	2200      	movs	r2, #0
 800c20e:	2300      	movs	r3, #0
 800c210:	f7f4 fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c214:	b9d8      	cbnz	r0, 800c24e <_printf_float+0x432>
 800c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c218:	f108 0201 	add.w	r2, r8, #1
 800c21c:	3b01      	subs	r3, #1
 800c21e:	4631      	mov	r1, r6
 800c220:	4628      	mov	r0, r5
 800c222:	47b8      	blx	r7
 800c224:	3001      	adds	r0, #1
 800c226:	d10e      	bne.n	800c246 <_printf_float+0x42a>
 800c228:	e659      	b.n	800bede <_printf_float+0xc2>
 800c22a:	2301      	movs	r3, #1
 800c22c:	4652      	mov	r2, sl
 800c22e:	4631      	mov	r1, r6
 800c230:	4628      	mov	r0, r5
 800c232:	47b8      	blx	r7
 800c234:	3001      	adds	r0, #1
 800c236:	f43f ae52 	beq.w	800bede <_printf_float+0xc2>
 800c23a:	f108 0801 	add.w	r8, r8, #1
 800c23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c240:	3b01      	subs	r3, #1
 800c242:	4543      	cmp	r3, r8
 800c244:	dcf1      	bgt.n	800c22a <_printf_float+0x40e>
 800c246:	464b      	mov	r3, r9
 800c248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c24c:	e6dc      	b.n	800c008 <_printf_float+0x1ec>
 800c24e:	f04f 0800 	mov.w	r8, #0
 800c252:	f104 0a1a 	add.w	sl, r4, #26
 800c256:	e7f2      	b.n	800c23e <_printf_float+0x422>
 800c258:	2301      	movs	r3, #1
 800c25a:	4642      	mov	r2, r8
 800c25c:	e7df      	b.n	800c21e <_printf_float+0x402>
 800c25e:	2301      	movs	r3, #1
 800c260:	464a      	mov	r2, r9
 800c262:	4631      	mov	r1, r6
 800c264:	4628      	mov	r0, r5
 800c266:	47b8      	blx	r7
 800c268:	3001      	adds	r0, #1
 800c26a:	f43f ae38 	beq.w	800bede <_printf_float+0xc2>
 800c26e:	f108 0801 	add.w	r8, r8, #1
 800c272:	68e3      	ldr	r3, [r4, #12]
 800c274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c276:	1a5b      	subs	r3, r3, r1
 800c278:	4543      	cmp	r3, r8
 800c27a:	dcf0      	bgt.n	800c25e <_printf_float+0x442>
 800c27c:	e6fa      	b.n	800c074 <_printf_float+0x258>
 800c27e:	f04f 0800 	mov.w	r8, #0
 800c282:	f104 0919 	add.w	r9, r4, #25
 800c286:	e7f4      	b.n	800c272 <_printf_float+0x456>

0800c288 <_printf_common>:
 800c288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c28c:	4616      	mov	r6, r2
 800c28e:	4699      	mov	r9, r3
 800c290:	688a      	ldr	r2, [r1, #8]
 800c292:	690b      	ldr	r3, [r1, #16]
 800c294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c298:	4293      	cmp	r3, r2
 800c29a:	bfb8      	it	lt
 800c29c:	4613      	movlt	r3, r2
 800c29e:	6033      	str	r3, [r6, #0]
 800c2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	b10a      	cbz	r2, 800c2ae <_printf_common+0x26>
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	6033      	str	r3, [r6, #0]
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	0699      	lsls	r1, r3, #26
 800c2b2:	bf42      	ittt	mi
 800c2b4:	6833      	ldrmi	r3, [r6, #0]
 800c2b6:	3302      	addmi	r3, #2
 800c2b8:	6033      	strmi	r3, [r6, #0]
 800c2ba:	6825      	ldr	r5, [r4, #0]
 800c2bc:	f015 0506 	ands.w	r5, r5, #6
 800c2c0:	d106      	bne.n	800c2d0 <_printf_common+0x48>
 800c2c2:	f104 0a19 	add.w	sl, r4, #25
 800c2c6:	68e3      	ldr	r3, [r4, #12]
 800c2c8:	6832      	ldr	r2, [r6, #0]
 800c2ca:	1a9b      	subs	r3, r3, r2
 800c2cc:	42ab      	cmp	r3, r5
 800c2ce:	dc26      	bgt.n	800c31e <_printf_common+0x96>
 800c2d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2d4:	1e13      	subs	r3, r2, #0
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	bf18      	it	ne
 800c2da:	2301      	movne	r3, #1
 800c2dc:	0692      	lsls	r2, r2, #26
 800c2de:	d42b      	bmi.n	800c338 <_printf_common+0xb0>
 800c2e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	47c0      	blx	r8
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d01e      	beq.n	800c32c <_printf_common+0xa4>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	68e5      	ldr	r5, [r4, #12]
 800c2f2:	6832      	ldr	r2, [r6, #0]
 800c2f4:	f003 0306 	and.w	r3, r3, #6
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	bf08      	it	eq
 800c2fc:	1aad      	subeq	r5, r5, r2
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	6922      	ldr	r2, [r4, #16]
 800c302:	bf0c      	ite	eq
 800c304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c308:	2500      	movne	r5, #0
 800c30a:	4293      	cmp	r3, r2
 800c30c:	bfc4      	itt	gt
 800c30e:	1a9b      	subgt	r3, r3, r2
 800c310:	18ed      	addgt	r5, r5, r3
 800c312:	2600      	movs	r6, #0
 800c314:	341a      	adds	r4, #26
 800c316:	42b5      	cmp	r5, r6
 800c318:	d11a      	bne.n	800c350 <_printf_common+0xc8>
 800c31a:	2000      	movs	r0, #0
 800c31c:	e008      	b.n	800c330 <_printf_common+0xa8>
 800c31e:	2301      	movs	r3, #1
 800c320:	4652      	mov	r2, sl
 800c322:	4649      	mov	r1, r9
 800c324:	4638      	mov	r0, r7
 800c326:	47c0      	blx	r8
 800c328:	3001      	adds	r0, #1
 800c32a:	d103      	bne.n	800c334 <_printf_common+0xac>
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295
 800c330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c334:	3501      	adds	r5, #1
 800c336:	e7c6      	b.n	800c2c6 <_printf_common+0x3e>
 800c338:	18e1      	adds	r1, r4, r3
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	2030      	movs	r0, #48	; 0x30
 800c33e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c342:	4422      	add	r2, r4
 800c344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c34c:	3302      	adds	r3, #2
 800c34e:	e7c7      	b.n	800c2e0 <_printf_common+0x58>
 800c350:	2301      	movs	r3, #1
 800c352:	4622      	mov	r2, r4
 800c354:	4649      	mov	r1, r9
 800c356:	4638      	mov	r0, r7
 800c358:	47c0      	blx	r8
 800c35a:	3001      	adds	r0, #1
 800c35c:	d0e6      	beq.n	800c32c <_printf_common+0xa4>
 800c35e:	3601      	adds	r6, #1
 800c360:	e7d9      	b.n	800c316 <_printf_common+0x8e>
	...

0800c364 <_printf_i>:
 800c364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	7e0f      	ldrb	r7, [r1, #24]
 800c36a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c36c:	2f78      	cmp	r7, #120	; 0x78
 800c36e:	4691      	mov	r9, r2
 800c370:	4680      	mov	r8, r0
 800c372:	460c      	mov	r4, r1
 800c374:	469a      	mov	sl, r3
 800c376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c37a:	d807      	bhi.n	800c38c <_printf_i+0x28>
 800c37c:	2f62      	cmp	r7, #98	; 0x62
 800c37e:	d80a      	bhi.n	800c396 <_printf_i+0x32>
 800c380:	2f00      	cmp	r7, #0
 800c382:	f000 80d8 	beq.w	800c536 <_printf_i+0x1d2>
 800c386:	2f58      	cmp	r7, #88	; 0x58
 800c388:	f000 80a3 	beq.w	800c4d2 <_printf_i+0x16e>
 800c38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c394:	e03a      	b.n	800c40c <_printf_i+0xa8>
 800c396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c39a:	2b15      	cmp	r3, #21
 800c39c:	d8f6      	bhi.n	800c38c <_printf_i+0x28>
 800c39e:	a101      	add	r1, pc, #4	; (adr r1, 800c3a4 <_printf_i+0x40>)
 800c3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3a4:	0800c3fd 	.word	0x0800c3fd
 800c3a8:	0800c411 	.word	0x0800c411
 800c3ac:	0800c38d 	.word	0x0800c38d
 800c3b0:	0800c38d 	.word	0x0800c38d
 800c3b4:	0800c38d 	.word	0x0800c38d
 800c3b8:	0800c38d 	.word	0x0800c38d
 800c3bc:	0800c411 	.word	0x0800c411
 800c3c0:	0800c38d 	.word	0x0800c38d
 800c3c4:	0800c38d 	.word	0x0800c38d
 800c3c8:	0800c38d 	.word	0x0800c38d
 800c3cc:	0800c38d 	.word	0x0800c38d
 800c3d0:	0800c51d 	.word	0x0800c51d
 800c3d4:	0800c441 	.word	0x0800c441
 800c3d8:	0800c4ff 	.word	0x0800c4ff
 800c3dc:	0800c38d 	.word	0x0800c38d
 800c3e0:	0800c38d 	.word	0x0800c38d
 800c3e4:	0800c53f 	.word	0x0800c53f
 800c3e8:	0800c38d 	.word	0x0800c38d
 800c3ec:	0800c441 	.word	0x0800c441
 800c3f0:	0800c38d 	.word	0x0800c38d
 800c3f4:	0800c38d 	.word	0x0800c38d
 800c3f8:	0800c507 	.word	0x0800c507
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	1d1a      	adds	r2, r3, #4
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	602a      	str	r2, [r5, #0]
 800c404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c40c:	2301      	movs	r3, #1
 800c40e:	e0a3      	b.n	800c558 <_printf_i+0x1f4>
 800c410:	6820      	ldr	r0, [r4, #0]
 800c412:	6829      	ldr	r1, [r5, #0]
 800c414:	0606      	lsls	r6, r0, #24
 800c416:	f101 0304 	add.w	r3, r1, #4
 800c41a:	d50a      	bpl.n	800c432 <_printf_i+0xce>
 800c41c:	680e      	ldr	r6, [r1, #0]
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	2e00      	cmp	r6, #0
 800c422:	da03      	bge.n	800c42c <_printf_i+0xc8>
 800c424:	232d      	movs	r3, #45	; 0x2d
 800c426:	4276      	negs	r6, r6
 800c428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c42c:	485e      	ldr	r0, [pc, #376]	; (800c5a8 <_printf_i+0x244>)
 800c42e:	230a      	movs	r3, #10
 800c430:	e019      	b.n	800c466 <_printf_i+0x102>
 800c432:	680e      	ldr	r6, [r1, #0]
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c43a:	bf18      	it	ne
 800c43c:	b236      	sxthne	r6, r6
 800c43e:	e7ef      	b.n	800c420 <_printf_i+0xbc>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	6820      	ldr	r0, [r4, #0]
 800c444:	1d19      	adds	r1, r3, #4
 800c446:	6029      	str	r1, [r5, #0]
 800c448:	0601      	lsls	r1, r0, #24
 800c44a:	d501      	bpl.n	800c450 <_printf_i+0xec>
 800c44c:	681e      	ldr	r6, [r3, #0]
 800c44e:	e002      	b.n	800c456 <_printf_i+0xf2>
 800c450:	0646      	lsls	r6, r0, #25
 800c452:	d5fb      	bpl.n	800c44c <_printf_i+0xe8>
 800c454:	881e      	ldrh	r6, [r3, #0]
 800c456:	4854      	ldr	r0, [pc, #336]	; (800c5a8 <_printf_i+0x244>)
 800c458:	2f6f      	cmp	r7, #111	; 0x6f
 800c45a:	bf0c      	ite	eq
 800c45c:	2308      	moveq	r3, #8
 800c45e:	230a      	movne	r3, #10
 800c460:	2100      	movs	r1, #0
 800c462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c466:	6865      	ldr	r5, [r4, #4]
 800c468:	60a5      	str	r5, [r4, #8]
 800c46a:	2d00      	cmp	r5, #0
 800c46c:	bfa2      	ittt	ge
 800c46e:	6821      	ldrge	r1, [r4, #0]
 800c470:	f021 0104 	bicge.w	r1, r1, #4
 800c474:	6021      	strge	r1, [r4, #0]
 800c476:	b90e      	cbnz	r6, 800c47c <_printf_i+0x118>
 800c478:	2d00      	cmp	r5, #0
 800c47a:	d04d      	beq.n	800c518 <_printf_i+0x1b4>
 800c47c:	4615      	mov	r5, r2
 800c47e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c482:	fb03 6711 	mls	r7, r3, r1, r6
 800c486:	5dc7      	ldrb	r7, [r0, r7]
 800c488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c48c:	4637      	mov	r7, r6
 800c48e:	42bb      	cmp	r3, r7
 800c490:	460e      	mov	r6, r1
 800c492:	d9f4      	bls.n	800c47e <_printf_i+0x11a>
 800c494:	2b08      	cmp	r3, #8
 800c496:	d10b      	bne.n	800c4b0 <_printf_i+0x14c>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	07de      	lsls	r6, r3, #31
 800c49c:	d508      	bpl.n	800c4b0 <_printf_i+0x14c>
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	6861      	ldr	r1, [r4, #4]
 800c4a2:	4299      	cmp	r1, r3
 800c4a4:	bfde      	ittt	le
 800c4a6:	2330      	movle	r3, #48	; 0x30
 800c4a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4b0:	1b52      	subs	r2, r2, r5
 800c4b2:	6122      	str	r2, [r4, #16]
 800c4b4:	f8cd a000 	str.w	sl, [sp]
 800c4b8:	464b      	mov	r3, r9
 800c4ba:	aa03      	add	r2, sp, #12
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4640      	mov	r0, r8
 800c4c0:	f7ff fee2 	bl	800c288 <_printf_common>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d14c      	bne.n	800c562 <_printf_i+0x1fe>
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	b004      	add	sp, #16
 800c4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d2:	4835      	ldr	r0, [pc, #212]	; (800c5a8 <_printf_i+0x244>)
 800c4d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4d8:	6829      	ldr	r1, [r5, #0]
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4e0:	6029      	str	r1, [r5, #0]
 800c4e2:	061d      	lsls	r5, r3, #24
 800c4e4:	d514      	bpl.n	800c510 <_printf_i+0x1ac>
 800c4e6:	07df      	lsls	r7, r3, #31
 800c4e8:	bf44      	itt	mi
 800c4ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ee:	6023      	strmi	r3, [r4, #0]
 800c4f0:	b91e      	cbnz	r6, 800c4fa <_printf_i+0x196>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	f023 0320 	bic.w	r3, r3, #32
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	2310      	movs	r3, #16
 800c4fc:	e7b0      	b.n	800c460 <_printf_i+0xfc>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	f043 0320 	orr.w	r3, r3, #32
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	2378      	movs	r3, #120	; 0x78
 800c508:	4828      	ldr	r0, [pc, #160]	; (800c5ac <_printf_i+0x248>)
 800c50a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c50e:	e7e3      	b.n	800c4d8 <_printf_i+0x174>
 800c510:	0659      	lsls	r1, r3, #25
 800c512:	bf48      	it	mi
 800c514:	b2b6      	uxthmi	r6, r6
 800c516:	e7e6      	b.n	800c4e6 <_printf_i+0x182>
 800c518:	4615      	mov	r5, r2
 800c51a:	e7bb      	b.n	800c494 <_printf_i+0x130>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	6826      	ldr	r6, [r4, #0]
 800c520:	6961      	ldr	r1, [r4, #20]
 800c522:	1d18      	adds	r0, r3, #4
 800c524:	6028      	str	r0, [r5, #0]
 800c526:	0635      	lsls	r5, r6, #24
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	d501      	bpl.n	800c530 <_printf_i+0x1cc>
 800c52c:	6019      	str	r1, [r3, #0]
 800c52e:	e002      	b.n	800c536 <_printf_i+0x1d2>
 800c530:	0670      	lsls	r0, r6, #25
 800c532:	d5fb      	bpl.n	800c52c <_printf_i+0x1c8>
 800c534:	8019      	strh	r1, [r3, #0]
 800c536:	2300      	movs	r3, #0
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	4615      	mov	r5, r2
 800c53c:	e7ba      	b.n	800c4b4 <_printf_i+0x150>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	1d1a      	adds	r2, r3, #4
 800c542:	602a      	str	r2, [r5, #0]
 800c544:	681d      	ldr	r5, [r3, #0]
 800c546:	6862      	ldr	r2, [r4, #4]
 800c548:	2100      	movs	r1, #0
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7f3 fe48 	bl	80001e0 <memchr>
 800c550:	b108      	cbz	r0, 800c556 <_printf_i+0x1f2>
 800c552:	1b40      	subs	r0, r0, r5
 800c554:	6060      	str	r0, [r4, #4]
 800c556:	6863      	ldr	r3, [r4, #4]
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	2300      	movs	r3, #0
 800c55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c560:	e7a8      	b.n	800c4b4 <_printf_i+0x150>
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	462a      	mov	r2, r5
 800c566:	4649      	mov	r1, r9
 800c568:	4640      	mov	r0, r8
 800c56a:	47d0      	blx	sl
 800c56c:	3001      	adds	r0, #1
 800c56e:	d0ab      	beq.n	800c4c8 <_printf_i+0x164>
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	079b      	lsls	r3, r3, #30
 800c574:	d413      	bmi.n	800c59e <_printf_i+0x23a>
 800c576:	68e0      	ldr	r0, [r4, #12]
 800c578:	9b03      	ldr	r3, [sp, #12]
 800c57a:	4298      	cmp	r0, r3
 800c57c:	bfb8      	it	lt
 800c57e:	4618      	movlt	r0, r3
 800c580:	e7a4      	b.n	800c4cc <_printf_i+0x168>
 800c582:	2301      	movs	r3, #1
 800c584:	4632      	mov	r2, r6
 800c586:	4649      	mov	r1, r9
 800c588:	4640      	mov	r0, r8
 800c58a:	47d0      	blx	sl
 800c58c:	3001      	adds	r0, #1
 800c58e:	d09b      	beq.n	800c4c8 <_printf_i+0x164>
 800c590:	3501      	adds	r5, #1
 800c592:	68e3      	ldr	r3, [r4, #12]
 800c594:	9903      	ldr	r1, [sp, #12]
 800c596:	1a5b      	subs	r3, r3, r1
 800c598:	42ab      	cmp	r3, r5
 800c59a:	dcf2      	bgt.n	800c582 <_printf_i+0x21e>
 800c59c:	e7eb      	b.n	800c576 <_printf_i+0x212>
 800c59e:	2500      	movs	r5, #0
 800c5a0:	f104 0619 	add.w	r6, r4, #25
 800c5a4:	e7f5      	b.n	800c592 <_printf_i+0x22e>
 800c5a6:	bf00      	nop
 800c5a8:	08010832 	.word	0x08010832
 800c5ac:	08010843 	.word	0x08010843

0800c5b0 <_scanf_float>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	b087      	sub	sp, #28
 800c5b6:	4617      	mov	r7, r2
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	688b      	ldr	r3, [r1, #8]
 800c5bc:	1e5a      	subs	r2, r3, #1
 800c5be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c5c2:	bf83      	ittte	hi
 800c5c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c5c8:	195b      	addhi	r3, r3, r5
 800c5ca:	9302      	strhi	r3, [sp, #8]
 800c5cc:	2300      	movls	r3, #0
 800c5ce:	bf86      	itte	hi
 800c5d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c5d4:	608b      	strhi	r3, [r1, #8]
 800c5d6:	9302      	strls	r3, [sp, #8]
 800c5d8:	680b      	ldr	r3, [r1, #0]
 800c5da:	468b      	mov	fp, r1
 800c5dc:	2500      	movs	r5, #0
 800c5de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c5e2:	f84b 3b1c 	str.w	r3, [fp], #28
 800c5e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c5ea:	4680      	mov	r8, r0
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	465e      	mov	r6, fp
 800c5f0:	46aa      	mov	sl, r5
 800c5f2:	46a9      	mov	r9, r5
 800c5f4:	9501      	str	r5, [sp, #4]
 800c5f6:	68a2      	ldr	r2, [r4, #8]
 800c5f8:	b152      	cbz	r2, 800c610 <_scanf_float+0x60>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b4e      	cmp	r3, #78	; 0x4e
 800c600:	d864      	bhi.n	800c6cc <_scanf_float+0x11c>
 800c602:	2b40      	cmp	r3, #64	; 0x40
 800c604:	d83c      	bhi.n	800c680 <_scanf_float+0xd0>
 800c606:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c60a:	b2c8      	uxtb	r0, r1
 800c60c:	280e      	cmp	r0, #14
 800c60e:	d93a      	bls.n	800c686 <_scanf_float+0xd6>
 800c610:	f1b9 0f00 	cmp.w	r9, #0
 800c614:	d003      	beq.n	800c61e <_scanf_float+0x6e>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c622:	f1ba 0f01 	cmp.w	sl, #1
 800c626:	f200 8113 	bhi.w	800c850 <_scanf_float+0x2a0>
 800c62a:	455e      	cmp	r6, fp
 800c62c:	f200 8105 	bhi.w	800c83a <_scanf_float+0x28a>
 800c630:	2501      	movs	r5, #1
 800c632:	4628      	mov	r0, r5
 800c634:	b007      	add	sp, #28
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c63e:	2a0d      	cmp	r2, #13
 800c640:	d8e6      	bhi.n	800c610 <_scanf_float+0x60>
 800c642:	a101      	add	r1, pc, #4	; (adr r1, 800c648 <_scanf_float+0x98>)
 800c644:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c648:	0800c787 	.word	0x0800c787
 800c64c:	0800c611 	.word	0x0800c611
 800c650:	0800c611 	.word	0x0800c611
 800c654:	0800c611 	.word	0x0800c611
 800c658:	0800c7e7 	.word	0x0800c7e7
 800c65c:	0800c7bf 	.word	0x0800c7bf
 800c660:	0800c611 	.word	0x0800c611
 800c664:	0800c611 	.word	0x0800c611
 800c668:	0800c795 	.word	0x0800c795
 800c66c:	0800c611 	.word	0x0800c611
 800c670:	0800c611 	.word	0x0800c611
 800c674:	0800c611 	.word	0x0800c611
 800c678:	0800c611 	.word	0x0800c611
 800c67c:	0800c74d 	.word	0x0800c74d
 800c680:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c684:	e7db      	b.n	800c63e <_scanf_float+0x8e>
 800c686:	290e      	cmp	r1, #14
 800c688:	d8c2      	bhi.n	800c610 <_scanf_float+0x60>
 800c68a:	a001      	add	r0, pc, #4	; (adr r0, 800c690 <_scanf_float+0xe0>)
 800c68c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c690:	0800c73f 	.word	0x0800c73f
 800c694:	0800c611 	.word	0x0800c611
 800c698:	0800c73f 	.word	0x0800c73f
 800c69c:	0800c7d3 	.word	0x0800c7d3
 800c6a0:	0800c611 	.word	0x0800c611
 800c6a4:	0800c6ed 	.word	0x0800c6ed
 800c6a8:	0800c729 	.word	0x0800c729
 800c6ac:	0800c729 	.word	0x0800c729
 800c6b0:	0800c729 	.word	0x0800c729
 800c6b4:	0800c729 	.word	0x0800c729
 800c6b8:	0800c729 	.word	0x0800c729
 800c6bc:	0800c729 	.word	0x0800c729
 800c6c0:	0800c729 	.word	0x0800c729
 800c6c4:	0800c729 	.word	0x0800c729
 800c6c8:	0800c729 	.word	0x0800c729
 800c6cc:	2b6e      	cmp	r3, #110	; 0x6e
 800c6ce:	d809      	bhi.n	800c6e4 <_scanf_float+0x134>
 800c6d0:	2b60      	cmp	r3, #96	; 0x60
 800c6d2:	d8b2      	bhi.n	800c63a <_scanf_float+0x8a>
 800c6d4:	2b54      	cmp	r3, #84	; 0x54
 800c6d6:	d077      	beq.n	800c7c8 <_scanf_float+0x218>
 800c6d8:	2b59      	cmp	r3, #89	; 0x59
 800c6da:	d199      	bne.n	800c610 <_scanf_float+0x60>
 800c6dc:	2d07      	cmp	r5, #7
 800c6de:	d197      	bne.n	800c610 <_scanf_float+0x60>
 800c6e0:	2508      	movs	r5, #8
 800c6e2:	e029      	b.n	800c738 <_scanf_float+0x188>
 800c6e4:	2b74      	cmp	r3, #116	; 0x74
 800c6e6:	d06f      	beq.n	800c7c8 <_scanf_float+0x218>
 800c6e8:	2b79      	cmp	r3, #121	; 0x79
 800c6ea:	e7f6      	b.n	800c6da <_scanf_float+0x12a>
 800c6ec:	6821      	ldr	r1, [r4, #0]
 800c6ee:	05c8      	lsls	r0, r1, #23
 800c6f0:	d51a      	bpl.n	800c728 <_scanf_float+0x178>
 800c6f2:	9b02      	ldr	r3, [sp, #8]
 800c6f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c6f8:	6021      	str	r1, [r4, #0]
 800c6fa:	f109 0901 	add.w	r9, r9, #1
 800c6fe:	b11b      	cbz	r3, 800c708 <_scanf_float+0x158>
 800c700:	3b01      	subs	r3, #1
 800c702:	3201      	adds	r2, #1
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	60a2      	str	r2, [r4, #8]
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	3301      	adds	r3, #1
 800c712:	6123      	str	r3, [r4, #16]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	3b01      	subs	r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	f340 8084 	ble.w	800c828 <_scanf_float+0x278>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	3301      	adds	r3, #1
 800c724:	603b      	str	r3, [r7, #0]
 800c726:	e766      	b.n	800c5f6 <_scanf_float+0x46>
 800c728:	eb1a 0f05 	cmn.w	sl, r5
 800c72c:	f47f af70 	bne.w	800c610 <_scanf_float+0x60>
 800c730:	6822      	ldr	r2, [r4, #0]
 800c732:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c736:	6022      	str	r2, [r4, #0]
 800c738:	f806 3b01 	strb.w	r3, [r6], #1
 800c73c:	e7e4      	b.n	800c708 <_scanf_float+0x158>
 800c73e:	6822      	ldr	r2, [r4, #0]
 800c740:	0610      	lsls	r0, r2, #24
 800c742:	f57f af65 	bpl.w	800c610 <_scanf_float+0x60>
 800c746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c74a:	e7f4      	b.n	800c736 <_scanf_float+0x186>
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	d10e      	bne.n	800c770 <_scanf_float+0x1c0>
 800c752:	f1b9 0f00 	cmp.w	r9, #0
 800c756:	d10e      	bne.n	800c776 <_scanf_float+0x1c6>
 800c758:	6822      	ldr	r2, [r4, #0]
 800c75a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c75e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c762:	d108      	bne.n	800c776 <_scanf_float+0x1c6>
 800c764:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c768:	6022      	str	r2, [r4, #0]
 800c76a:	f04f 0a01 	mov.w	sl, #1
 800c76e:	e7e3      	b.n	800c738 <_scanf_float+0x188>
 800c770:	f1ba 0f02 	cmp.w	sl, #2
 800c774:	d055      	beq.n	800c822 <_scanf_float+0x272>
 800c776:	2d01      	cmp	r5, #1
 800c778:	d002      	beq.n	800c780 <_scanf_float+0x1d0>
 800c77a:	2d04      	cmp	r5, #4
 800c77c:	f47f af48 	bne.w	800c610 <_scanf_float+0x60>
 800c780:	3501      	adds	r5, #1
 800c782:	b2ed      	uxtb	r5, r5
 800c784:	e7d8      	b.n	800c738 <_scanf_float+0x188>
 800c786:	f1ba 0f01 	cmp.w	sl, #1
 800c78a:	f47f af41 	bne.w	800c610 <_scanf_float+0x60>
 800c78e:	f04f 0a02 	mov.w	sl, #2
 800c792:	e7d1      	b.n	800c738 <_scanf_float+0x188>
 800c794:	b97d      	cbnz	r5, 800c7b6 <_scanf_float+0x206>
 800c796:	f1b9 0f00 	cmp.w	r9, #0
 800c79a:	f47f af3c 	bne.w	800c616 <_scanf_float+0x66>
 800c79e:	6822      	ldr	r2, [r4, #0]
 800c7a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c7a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c7a8:	f47f af39 	bne.w	800c61e <_scanf_float+0x6e>
 800c7ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c7b0:	6022      	str	r2, [r4, #0]
 800c7b2:	2501      	movs	r5, #1
 800c7b4:	e7c0      	b.n	800c738 <_scanf_float+0x188>
 800c7b6:	2d03      	cmp	r5, #3
 800c7b8:	d0e2      	beq.n	800c780 <_scanf_float+0x1d0>
 800c7ba:	2d05      	cmp	r5, #5
 800c7bc:	e7de      	b.n	800c77c <_scanf_float+0x1cc>
 800c7be:	2d02      	cmp	r5, #2
 800c7c0:	f47f af26 	bne.w	800c610 <_scanf_float+0x60>
 800c7c4:	2503      	movs	r5, #3
 800c7c6:	e7b7      	b.n	800c738 <_scanf_float+0x188>
 800c7c8:	2d06      	cmp	r5, #6
 800c7ca:	f47f af21 	bne.w	800c610 <_scanf_float+0x60>
 800c7ce:	2507      	movs	r5, #7
 800c7d0:	e7b2      	b.n	800c738 <_scanf_float+0x188>
 800c7d2:	6822      	ldr	r2, [r4, #0]
 800c7d4:	0591      	lsls	r1, r2, #22
 800c7d6:	f57f af1b 	bpl.w	800c610 <_scanf_float+0x60>
 800c7da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c7de:	6022      	str	r2, [r4, #0]
 800c7e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c7e4:	e7a8      	b.n	800c738 <_scanf_float+0x188>
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c7ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c7f0:	d006      	beq.n	800c800 <_scanf_float+0x250>
 800c7f2:	0550      	lsls	r0, r2, #21
 800c7f4:	f57f af0c 	bpl.w	800c610 <_scanf_float+0x60>
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	f43f af0f 	beq.w	800c61e <_scanf_float+0x6e>
 800c800:	0591      	lsls	r1, r2, #22
 800c802:	bf58      	it	pl
 800c804:	9901      	ldrpl	r1, [sp, #4]
 800c806:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c80a:	bf58      	it	pl
 800c80c:	eba9 0101 	subpl.w	r1, r9, r1
 800c810:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c814:	bf58      	it	pl
 800c816:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c81a:	6022      	str	r2, [r4, #0]
 800c81c:	f04f 0900 	mov.w	r9, #0
 800c820:	e78a      	b.n	800c738 <_scanf_float+0x188>
 800c822:	f04f 0a03 	mov.w	sl, #3
 800c826:	e787      	b.n	800c738 <_scanf_float+0x188>
 800c828:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c82c:	4639      	mov	r1, r7
 800c82e:	4640      	mov	r0, r8
 800c830:	4798      	blx	r3
 800c832:	2800      	cmp	r0, #0
 800c834:	f43f aedf 	beq.w	800c5f6 <_scanf_float+0x46>
 800c838:	e6ea      	b.n	800c610 <_scanf_float+0x60>
 800c83a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c83e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c842:	463a      	mov	r2, r7
 800c844:	4640      	mov	r0, r8
 800c846:	4798      	blx	r3
 800c848:	6923      	ldr	r3, [r4, #16]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	6123      	str	r3, [r4, #16]
 800c84e:	e6ec      	b.n	800c62a <_scanf_float+0x7a>
 800c850:	1e6b      	subs	r3, r5, #1
 800c852:	2b06      	cmp	r3, #6
 800c854:	d825      	bhi.n	800c8a2 <_scanf_float+0x2f2>
 800c856:	2d02      	cmp	r5, #2
 800c858:	d836      	bhi.n	800c8c8 <_scanf_float+0x318>
 800c85a:	455e      	cmp	r6, fp
 800c85c:	f67f aee8 	bls.w	800c630 <_scanf_float+0x80>
 800c860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c864:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c868:	463a      	mov	r2, r7
 800c86a:	4640      	mov	r0, r8
 800c86c:	4798      	blx	r3
 800c86e:	6923      	ldr	r3, [r4, #16]
 800c870:	3b01      	subs	r3, #1
 800c872:	6123      	str	r3, [r4, #16]
 800c874:	e7f1      	b.n	800c85a <_scanf_float+0x2aa>
 800c876:	9802      	ldr	r0, [sp, #8]
 800c878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c87c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c880:	9002      	str	r0, [sp, #8]
 800c882:	463a      	mov	r2, r7
 800c884:	4640      	mov	r0, r8
 800c886:	4798      	blx	r3
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	6123      	str	r3, [r4, #16]
 800c88e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c892:	fa5f fa8a 	uxtb.w	sl, sl
 800c896:	f1ba 0f02 	cmp.w	sl, #2
 800c89a:	d1ec      	bne.n	800c876 <_scanf_float+0x2c6>
 800c89c:	3d03      	subs	r5, #3
 800c89e:	b2ed      	uxtb	r5, r5
 800c8a0:	1b76      	subs	r6, r6, r5
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	05da      	lsls	r2, r3, #23
 800c8a6:	d52f      	bpl.n	800c908 <_scanf_float+0x358>
 800c8a8:	055b      	lsls	r3, r3, #21
 800c8aa:	d510      	bpl.n	800c8ce <_scanf_float+0x31e>
 800c8ac:	455e      	cmp	r6, fp
 800c8ae:	f67f aebf 	bls.w	800c630 <_scanf_float+0x80>
 800c8b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8ba:	463a      	mov	r2, r7
 800c8bc:	4640      	mov	r0, r8
 800c8be:	4798      	blx	r3
 800c8c0:	6923      	ldr	r3, [r4, #16]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	e7f1      	b.n	800c8ac <_scanf_float+0x2fc>
 800c8c8:	46aa      	mov	sl, r5
 800c8ca:	9602      	str	r6, [sp, #8]
 800c8cc:	e7df      	b.n	800c88e <_scanf_float+0x2de>
 800c8ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	2965      	cmp	r1, #101	; 0x65
 800c8d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c8da:	f106 35ff 	add.w	r5, r6, #4294967295
 800c8de:	6123      	str	r3, [r4, #16]
 800c8e0:	d00c      	beq.n	800c8fc <_scanf_float+0x34c>
 800c8e2:	2945      	cmp	r1, #69	; 0x45
 800c8e4:	d00a      	beq.n	800c8fc <_scanf_float+0x34c>
 800c8e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	4640      	mov	r0, r8
 800c8ee:	4798      	blx	r3
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	1eb5      	subs	r5, r6, #2
 800c8fa:	6123      	str	r3, [r4, #16]
 800c8fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c900:	463a      	mov	r2, r7
 800c902:	4640      	mov	r0, r8
 800c904:	4798      	blx	r3
 800c906:	462e      	mov	r6, r5
 800c908:	6825      	ldr	r5, [r4, #0]
 800c90a:	f015 0510 	ands.w	r5, r5, #16
 800c90e:	d159      	bne.n	800c9c4 <_scanf_float+0x414>
 800c910:	7035      	strb	r5, [r6, #0]
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c91c:	d11b      	bne.n	800c956 <_scanf_float+0x3a6>
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	454b      	cmp	r3, r9
 800c922:	eba3 0209 	sub.w	r2, r3, r9
 800c926:	d123      	bne.n	800c970 <_scanf_float+0x3c0>
 800c928:	2200      	movs	r2, #0
 800c92a:	4659      	mov	r1, fp
 800c92c:	4640      	mov	r0, r8
 800c92e:	f000 ffad 	bl	800d88c <_strtod_r>
 800c932:	6822      	ldr	r2, [r4, #0]
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	f012 0f02 	tst.w	r2, #2
 800c93a:	ec57 6b10 	vmov	r6, r7, d0
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	d021      	beq.n	800c986 <_scanf_float+0x3d6>
 800c942:	9903      	ldr	r1, [sp, #12]
 800c944:	1d1a      	adds	r2, r3, #4
 800c946:	600a      	str	r2, [r1, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	e9c3 6700 	strd	r6, r7, [r3]
 800c94e:	68e3      	ldr	r3, [r4, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60e3      	str	r3, [r4, #12]
 800c954:	e66d      	b.n	800c632 <_scanf_float+0x82>
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0e5      	beq.n	800c928 <_scanf_float+0x378>
 800c95c:	9905      	ldr	r1, [sp, #20]
 800c95e:	230a      	movs	r3, #10
 800c960:	462a      	mov	r2, r5
 800c962:	3101      	adds	r1, #1
 800c964:	4640      	mov	r0, r8
 800c966:	f001 f819 	bl	800d99c <_strtol_r>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	9e05      	ldr	r6, [sp, #20]
 800c96e:	1ac2      	subs	r2, r0, r3
 800c970:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c974:	429e      	cmp	r6, r3
 800c976:	bf28      	it	cs
 800c978:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c97c:	4912      	ldr	r1, [pc, #72]	; (800c9c8 <_scanf_float+0x418>)
 800c97e:	4630      	mov	r0, r6
 800c980:	f000 f8fe 	bl	800cb80 <siprintf>
 800c984:	e7d0      	b.n	800c928 <_scanf_float+0x378>
 800c986:	9903      	ldr	r1, [sp, #12]
 800c988:	f012 0f04 	tst.w	r2, #4
 800c98c:	f103 0204 	add.w	r2, r3, #4
 800c990:	600a      	str	r2, [r1, #0]
 800c992:	d1d9      	bne.n	800c948 <_scanf_float+0x398>
 800c994:	f8d3 8000 	ldr.w	r8, [r3]
 800c998:	ee10 2a10 	vmov	r2, s0
 800c99c:	ee10 0a10 	vmov	r0, s0
 800c9a0:	463b      	mov	r3, r7
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f4 f8c2 	bl	8000b2c <__aeabi_dcmpun>
 800c9a8:	b128      	cbz	r0, 800c9b6 <_scanf_float+0x406>
 800c9aa:	4808      	ldr	r0, [pc, #32]	; (800c9cc <_scanf_float+0x41c>)
 800c9ac:	f000 f8ae 	bl	800cb0c <nanf>
 800c9b0:	ed88 0a00 	vstr	s0, [r8]
 800c9b4:	e7cb      	b.n	800c94e <_scanf_float+0x39e>
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	f7f4 f915 	bl	8000be8 <__aeabi_d2f>
 800c9be:	f8c8 0000 	str.w	r0, [r8]
 800c9c2:	e7c4      	b.n	800c94e <_scanf_float+0x39e>
 800c9c4:	2500      	movs	r5, #0
 800c9c6:	e634      	b.n	800c632 <_scanf_float+0x82>
 800c9c8:	08010854 	.word	0x08010854
 800c9cc:	08010cc8 	.word	0x08010cc8

0800c9d0 <iprintf>:
 800c9d0:	b40f      	push	{r0, r1, r2, r3}
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <iprintf+0x2c>)
 800c9d4:	b513      	push	{r0, r1, r4, lr}
 800c9d6:	681c      	ldr	r4, [r3, #0]
 800c9d8:	b124      	cbz	r4, 800c9e4 <iprintf+0x14>
 800c9da:	69a3      	ldr	r3, [r4, #24]
 800c9dc:	b913      	cbnz	r3, 800c9e4 <iprintf+0x14>
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f002 f832 	bl	800ea48 <__sinit>
 800c9e4:	ab05      	add	r3, sp, #20
 800c9e6:	9a04      	ldr	r2, [sp, #16]
 800c9e8:	68a1      	ldr	r1, [r4, #8]
 800c9ea:	9301      	str	r3, [sp, #4]
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f003 fb1d 	bl	801002c <_vfiprintf_r>
 800c9f2:	b002      	add	sp, #8
 800c9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f8:	b004      	add	sp, #16
 800c9fa:	4770      	bx	lr
 800c9fc:	20000044 	.word	0x20000044

0800ca00 <_puts_r>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	460e      	mov	r6, r1
 800ca04:	4605      	mov	r5, r0
 800ca06:	b118      	cbz	r0, 800ca10 <_puts_r+0x10>
 800ca08:	6983      	ldr	r3, [r0, #24]
 800ca0a:	b90b      	cbnz	r3, 800ca10 <_puts_r+0x10>
 800ca0c:	f002 f81c 	bl	800ea48 <__sinit>
 800ca10:	69ab      	ldr	r3, [r5, #24]
 800ca12:	68ac      	ldr	r4, [r5, #8]
 800ca14:	b913      	cbnz	r3, 800ca1c <_puts_r+0x1c>
 800ca16:	4628      	mov	r0, r5
 800ca18:	f002 f816 	bl	800ea48 <__sinit>
 800ca1c:	4b2c      	ldr	r3, [pc, #176]	; (800cad0 <_puts_r+0xd0>)
 800ca1e:	429c      	cmp	r4, r3
 800ca20:	d120      	bne.n	800ca64 <_puts_r+0x64>
 800ca22:	686c      	ldr	r4, [r5, #4]
 800ca24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca26:	07db      	lsls	r3, r3, #31
 800ca28:	d405      	bmi.n	800ca36 <_puts_r+0x36>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	0598      	lsls	r0, r3, #22
 800ca2e:	d402      	bmi.n	800ca36 <_puts_r+0x36>
 800ca30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca32:	f002 fc1a 	bl	800f26a <__retarget_lock_acquire_recursive>
 800ca36:	89a3      	ldrh	r3, [r4, #12]
 800ca38:	0719      	lsls	r1, r3, #28
 800ca3a:	d51d      	bpl.n	800ca78 <_puts_r+0x78>
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	b1db      	cbz	r3, 800ca78 <_puts_r+0x78>
 800ca40:	3e01      	subs	r6, #1
 800ca42:	68a3      	ldr	r3, [r4, #8]
 800ca44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	60a3      	str	r3, [r4, #8]
 800ca4c:	bb39      	cbnz	r1, 800ca9e <_puts_r+0x9e>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	da38      	bge.n	800cac4 <_puts_r+0xc4>
 800ca52:	4622      	mov	r2, r4
 800ca54:	210a      	movs	r1, #10
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 ffa2 	bl	800d9a0 <__swbuf_r>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d011      	beq.n	800ca84 <_puts_r+0x84>
 800ca60:	250a      	movs	r5, #10
 800ca62:	e011      	b.n	800ca88 <_puts_r+0x88>
 800ca64:	4b1b      	ldr	r3, [pc, #108]	; (800cad4 <_puts_r+0xd4>)
 800ca66:	429c      	cmp	r4, r3
 800ca68:	d101      	bne.n	800ca6e <_puts_r+0x6e>
 800ca6a:	68ac      	ldr	r4, [r5, #8]
 800ca6c:	e7da      	b.n	800ca24 <_puts_r+0x24>
 800ca6e:	4b1a      	ldr	r3, [pc, #104]	; (800cad8 <_puts_r+0xd8>)
 800ca70:	429c      	cmp	r4, r3
 800ca72:	bf08      	it	eq
 800ca74:	68ec      	ldreq	r4, [r5, #12]
 800ca76:	e7d5      	b.n	800ca24 <_puts_r+0x24>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f000 ffe2 	bl	800da44 <__swsetup_r>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d0dd      	beq.n	800ca40 <_puts_r+0x40>
 800ca84:	f04f 35ff 	mov.w	r5, #4294967295
 800ca88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca8a:	07da      	lsls	r2, r3, #31
 800ca8c:	d405      	bmi.n	800ca9a <_puts_r+0x9a>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	059b      	lsls	r3, r3, #22
 800ca92:	d402      	bmi.n	800ca9a <_puts_r+0x9a>
 800ca94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca96:	f002 fbe9 	bl	800f26c <__retarget_lock_release_recursive>
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	bd70      	pop	{r4, r5, r6, pc}
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	da04      	bge.n	800caac <_puts_r+0xac>
 800caa2:	69a2      	ldr	r2, [r4, #24]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	dc06      	bgt.n	800cab6 <_puts_r+0xb6>
 800caa8:	290a      	cmp	r1, #10
 800caaa:	d004      	beq.n	800cab6 <_puts_r+0xb6>
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	6022      	str	r2, [r4, #0]
 800cab2:	7019      	strb	r1, [r3, #0]
 800cab4:	e7c5      	b.n	800ca42 <_puts_r+0x42>
 800cab6:	4622      	mov	r2, r4
 800cab8:	4628      	mov	r0, r5
 800caba:	f000 ff71 	bl	800d9a0 <__swbuf_r>
 800cabe:	3001      	adds	r0, #1
 800cac0:	d1bf      	bne.n	800ca42 <_puts_r+0x42>
 800cac2:	e7df      	b.n	800ca84 <_puts_r+0x84>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	250a      	movs	r5, #10
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	6022      	str	r2, [r4, #0]
 800cacc:	701d      	strb	r5, [r3, #0]
 800cace:	e7db      	b.n	800ca88 <_puts_r+0x88>
 800cad0:	08010a64 	.word	0x08010a64
 800cad4:	08010a84 	.word	0x08010a84
 800cad8:	08010a44 	.word	0x08010a44

0800cadc <puts>:
 800cadc:	4b02      	ldr	r3, [pc, #8]	; (800cae8 <puts+0xc>)
 800cade:	4601      	mov	r1, r0
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f7ff bf8d 	b.w	800ca00 <_puts_r>
 800cae6:	bf00      	nop
 800cae8:	20000044 	.word	0x20000044

0800caec <_sbrk_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d06      	ldr	r5, [pc, #24]	; (800cb08 <_sbrk_r+0x1c>)
 800caf0:	2300      	movs	r3, #0
 800caf2:	4604      	mov	r4, r0
 800caf4:	4608      	mov	r0, r1
 800caf6:	602b      	str	r3, [r5, #0]
 800caf8:	f7f6 fe76 	bl	80037e8 <_sbrk>
 800cafc:	1c43      	adds	r3, r0, #1
 800cafe:	d102      	bne.n	800cb06 <_sbrk_r+0x1a>
 800cb00:	682b      	ldr	r3, [r5, #0]
 800cb02:	b103      	cbz	r3, 800cb06 <_sbrk_r+0x1a>
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
 800cb08:	2001349c 	.word	0x2001349c

0800cb0c <nanf>:
 800cb0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb14 <nanf+0x8>
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	7fc00000 	.word	0x7fc00000

0800cb18 <sniprintf>:
 800cb18:	b40c      	push	{r2, r3}
 800cb1a:	b530      	push	{r4, r5, lr}
 800cb1c:	4b17      	ldr	r3, [pc, #92]	; (800cb7c <sniprintf+0x64>)
 800cb1e:	1e0c      	subs	r4, r1, #0
 800cb20:	681d      	ldr	r5, [r3, #0]
 800cb22:	b09d      	sub	sp, #116	; 0x74
 800cb24:	da08      	bge.n	800cb38 <sniprintf+0x20>
 800cb26:	238b      	movs	r3, #139	; 0x8b
 800cb28:	602b      	str	r3, [r5, #0]
 800cb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2e:	b01d      	add	sp, #116	; 0x74
 800cb30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb34:	b002      	add	sp, #8
 800cb36:	4770      	bx	lr
 800cb38:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cb3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb40:	bf14      	ite	ne
 800cb42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb46:	4623      	moveq	r3, r4
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	9307      	str	r3, [sp, #28]
 800cb4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb50:	9002      	str	r0, [sp, #8]
 800cb52:	9006      	str	r0, [sp, #24]
 800cb54:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cb5a:	ab21      	add	r3, sp, #132	; 0x84
 800cb5c:	a902      	add	r1, sp, #8
 800cb5e:	4628      	mov	r0, r5
 800cb60:	9301      	str	r3, [sp, #4]
 800cb62:	f003 f939 	bl	800fdd8 <_svfiprintf_r>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	bfbc      	itt	lt
 800cb6a:	238b      	movlt	r3, #139	; 0x8b
 800cb6c:	602b      	strlt	r3, [r5, #0]
 800cb6e:	2c00      	cmp	r4, #0
 800cb70:	d0dd      	beq.n	800cb2e <sniprintf+0x16>
 800cb72:	9b02      	ldr	r3, [sp, #8]
 800cb74:	2200      	movs	r2, #0
 800cb76:	701a      	strb	r2, [r3, #0]
 800cb78:	e7d9      	b.n	800cb2e <sniprintf+0x16>
 800cb7a:	bf00      	nop
 800cb7c:	20000044 	.word	0x20000044

0800cb80 <siprintf>:
 800cb80:	b40e      	push	{r1, r2, r3}
 800cb82:	b500      	push	{lr}
 800cb84:	b09c      	sub	sp, #112	; 0x70
 800cb86:	ab1d      	add	r3, sp, #116	; 0x74
 800cb88:	9002      	str	r0, [sp, #8]
 800cb8a:	9006      	str	r0, [sp, #24]
 800cb8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb90:	4809      	ldr	r0, [pc, #36]	; (800cbb8 <siprintf+0x38>)
 800cb92:	9107      	str	r1, [sp, #28]
 800cb94:	9104      	str	r1, [sp, #16]
 800cb96:	4909      	ldr	r1, [pc, #36]	; (800cbbc <siprintf+0x3c>)
 800cb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9c:	9105      	str	r1, [sp, #20]
 800cb9e:	6800      	ldr	r0, [r0, #0]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	a902      	add	r1, sp, #8
 800cba4:	f003 f918 	bl	800fdd8 <_svfiprintf_r>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
 800cbae:	b01c      	add	sp, #112	; 0x70
 800cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb4:	b003      	add	sp, #12
 800cbb6:	4770      	bx	lr
 800cbb8:	20000044 	.word	0x20000044
 800cbbc:	ffff0208 	.word	0xffff0208

0800cbc0 <strcat>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	7814      	ldrb	r4, [r2, #0]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	3201      	adds	r2, #1
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d1fa      	bne.n	800cbc4 <strcat+0x4>
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbd8:	2a00      	cmp	r2, #0
 800cbda:	d1f9      	bne.n	800cbd0 <strcat+0x10>
 800cbdc:	bd10      	pop	{r4, pc}

0800cbde <strchr>:
 800cbde:	b2c9      	uxtb	r1, r1
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe6:	b11a      	cbz	r2, 800cbf0 <strchr+0x12>
 800cbe8:	428a      	cmp	r2, r1
 800cbea:	d1f9      	bne.n	800cbe0 <strchr+0x2>
 800cbec:	4618      	mov	r0, r3
 800cbee:	4770      	bx	lr
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	bf18      	it	ne
 800cbf4:	2300      	movne	r3, #0
 800cbf6:	e7f9      	b.n	800cbec <strchr+0xe>

0800cbf8 <strncat>:
 800cbf8:	b530      	push	{r4, r5, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	7825      	ldrb	r5, [r4, #0]
 800cbfe:	4623      	mov	r3, r4
 800cc00:	3401      	adds	r4, #1
 800cc02:	2d00      	cmp	r5, #0
 800cc04:	d1fa      	bne.n	800cbfc <strncat+0x4>
 800cc06:	3a01      	subs	r2, #1
 800cc08:	d304      	bcc.n	800cc14 <strncat+0x1c>
 800cc0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc0e:	f803 4b01 	strb.w	r4, [r3], #1
 800cc12:	b904      	cbnz	r4, 800cc16 <strncat+0x1e>
 800cc14:	bd30      	pop	{r4, r5, pc}
 800cc16:	2a00      	cmp	r2, #0
 800cc18:	d1f5      	bne.n	800cc06 <strncat+0xe>
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e7f3      	b.n	800cc06 <strncat+0xe>

0800cc1e <strncmp>:
 800cc1e:	b510      	push	{r4, lr}
 800cc20:	b17a      	cbz	r2, 800cc42 <strncmp+0x24>
 800cc22:	4603      	mov	r3, r0
 800cc24:	3901      	subs	r1, #1
 800cc26:	1884      	adds	r4, r0, r2
 800cc28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc30:	4290      	cmp	r0, r2
 800cc32:	d101      	bne.n	800cc38 <strncmp+0x1a>
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d101      	bne.n	800cc3c <strncmp+0x1e>
 800cc38:	1a80      	subs	r0, r0, r2
 800cc3a:	bd10      	pop	{r4, pc}
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d1f3      	bne.n	800cc28 <strncmp+0xa>
 800cc40:	e7fa      	b.n	800cc38 <strncmp+0x1a>
 800cc42:	4610      	mov	r0, r2
 800cc44:	e7f9      	b.n	800cc3a <strncmp+0x1c>

0800cc46 <sulp>:
 800cc46:	b570      	push	{r4, r5, r6, lr}
 800cc48:	4604      	mov	r4, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	ec45 4b10 	vmov	d0, r4, r5
 800cc50:	4616      	mov	r6, r2
 800cc52:	f002 ff01 	bl	800fa58 <__ulp>
 800cc56:	ec51 0b10 	vmov	r0, r1, d0
 800cc5a:	b17e      	cbz	r6, 800cc7c <sulp+0x36>
 800cc5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dd09      	ble.n	800cc7c <sulp+0x36>
 800cc68:	051b      	lsls	r3, r3, #20
 800cc6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc6e:	2400      	movs	r4, #0
 800cc70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc74:	4622      	mov	r2, r4
 800cc76:	462b      	mov	r3, r5
 800cc78:	f7f3 fcbe 	bl	80005f8 <__aeabi_dmul>
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc80 <_strtod_l>:
 800cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	ed2d 8b02 	vpush	{d8}
 800cc88:	b09d      	sub	sp, #116	; 0x74
 800cc8a:	461f      	mov	r7, r3
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9318      	str	r3, [sp, #96]	; 0x60
 800cc90:	4ba2      	ldr	r3, [pc, #648]	; (800cf1c <_strtod_l+0x29c>)
 800cc92:	9213      	str	r2, [sp, #76]	; 0x4c
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	9305      	str	r3, [sp, #20]
 800cc98:	4604      	mov	r4, r0
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	4688      	mov	r8, r1
 800cc9e:	f7f3 fa97 	bl	80001d0 <strlen>
 800cca2:	f04f 0a00 	mov.w	sl, #0
 800cca6:	4605      	mov	r5, r0
 800cca8:	f04f 0b00 	mov.w	fp, #0
 800ccac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ccb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccb2:	781a      	ldrb	r2, [r3, #0]
 800ccb4:	2a2b      	cmp	r2, #43	; 0x2b
 800ccb6:	d04e      	beq.n	800cd56 <_strtod_l+0xd6>
 800ccb8:	d83b      	bhi.n	800cd32 <_strtod_l+0xb2>
 800ccba:	2a0d      	cmp	r2, #13
 800ccbc:	d834      	bhi.n	800cd28 <_strtod_l+0xa8>
 800ccbe:	2a08      	cmp	r2, #8
 800ccc0:	d834      	bhi.n	800cd2c <_strtod_l+0xac>
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	d03e      	beq.n	800cd44 <_strtod_l+0xc4>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	930a      	str	r3, [sp, #40]	; 0x28
 800ccca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cccc:	7833      	ldrb	r3, [r6, #0]
 800ccce:	2b30      	cmp	r3, #48	; 0x30
 800ccd0:	f040 80b0 	bne.w	800ce34 <_strtod_l+0x1b4>
 800ccd4:	7873      	ldrb	r3, [r6, #1]
 800ccd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccda:	2b58      	cmp	r3, #88	; 0x58
 800ccdc:	d168      	bne.n	800cdb0 <_strtod_l+0x130>
 800ccde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	ab18      	add	r3, sp, #96	; 0x60
 800cce4:	9702      	str	r7, [sp, #8]
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	4a8d      	ldr	r2, [pc, #564]	; (800cf20 <_strtod_l+0x2a0>)
 800ccea:	ab19      	add	r3, sp, #100	; 0x64
 800ccec:	a917      	add	r1, sp, #92	; 0x5c
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f001 ffae 	bl	800ec50 <__gethex>
 800ccf4:	f010 0707 	ands.w	r7, r0, #7
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	d005      	beq.n	800cd08 <_strtod_l+0x88>
 800ccfc:	2f06      	cmp	r7, #6
 800ccfe:	d12c      	bne.n	800cd5a <_strtod_l+0xda>
 800cd00:	3601      	adds	r6, #1
 800cd02:	2300      	movs	r3, #0
 800cd04:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd06:	930a      	str	r3, [sp, #40]	; 0x28
 800cd08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f040 8590 	bne.w	800d830 <_strtod_l+0xbb0>
 800cd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd12:	b1eb      	cbz	r3, 800cd50 <_strtod_l+0xd0>
 800cd14:	4652      	mov	r2, sl
 800cd16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd1a:	ec43 2b10 	vmov	d0, r2, r3
 800cd1e:	b01d      	add	sp, #116	; 0x74
 800cd20:	ecbd 8b02 	vpop	{d8}
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	2a20      	cmp	r2, #32
 800cd2a:	d1cc      	bne.n	800ccc6 <_strtod_l+0x46>
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd30:	e7be      	b.n	800ccb0 <_strtod_l+0x30>
 800cd32:	2a2d      	cmp	r2, #45	; 0x2d
 800cd34:	d1c7      	bne.n	800ccc6 <_strtod_l+0x46>
 800cd36:	2201      	movs	r2, #1
 800cd38:	920a      	str	r2, [sp, #40]	; 0x28
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1c2      	bne.n	800ccca <_strtod_l+0x4a>
 800cd44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f040 856e 	bne.w	800d82c <_strtod_l+0xbac>
 800cd50:	4652      	mov	r2, sl
 800cd52:	465b      	mov	r3, fp
 800cd54:	e7e1      	b.n	800cd1a <_strtod_l+0x9a>
 800cd56:	2200      	movs	r2, #0
 800cd58:	e7ee      	b.n	800cd38 <_strtod_l+0xb8>
 800cd5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd5c:	b13a      	cbz	r2, 800cd6e <_strtod_l+0xee>
 800cd5e:	2135      	movs	r1, #53	; 0x35
 800cd60:	a81a      	add	r0, sp, #104	; 0x68
 800cd62:	f002 ff84 	bl	800fc6e <__copybits>
 800cd66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f002 fb43 	bl	800f3f4 <_Bfree>
 800cd6e:	3f01      	subs	r7, #1
 800cd70:	2f04      	cmp	r7, #4
 800cd72:	d806      	bhi.n	800cd82 <_strtod_l+0x102>
 800cd74:	e8df f007 	tbb	[pc, r7]
 800cd78:	1714030a 	.word	0x1714030a
 800cd7c:	0a          	.byte	0x0a
 800cd7d:	00          	.byte	0x00
 800cd7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cd82:	0728      	lsls	r0, r5, #28
 800cd84:	d5c0      	bpl.n	800cd08 <_strtod_l+0x88>
 800cd86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cd8a:	e7bd      	b.n	800cd08 <_strtod_l+0x88>
 800cd8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cd90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cd9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd9e:	e7f0      	b.n	800cd82 <_strtod_l+0x102>
 800cda0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cf24 <_strtod_l+0x2a4>
 800cda4:	e7ed      	b.n	800cd82 <_strtod_l+0x102>
 800cda6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cdaa:	f04f 3aff 	mov.w	sl, #4294967295
 800cdae:	e7e8      	b.n	800cd82 <_strtod_l+0x102>
 800cdb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdb6:	785b      	ldrb	r3, [r3, #1]
 800cdb8:	2b30      	cmp	r3, #48	; 0x30
 800cdba:	d0f9      	beq.n	800cdb0 <_strtod_l+0x130>
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0a3      	beq.n	800cd08 <_strtod_l+0x88>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	f04f 0900 	mov.w	r9, #0
 800cdc6:	9304      	str	r3, [sp, #16]
 800cdc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdca:	9308      	str	r3, [sp, #32]
 800cdcc:	f8cd 901c 	str.w	r9, [sp, #28]
 800cdd0:	464f      	mov	r7, r9
 800cdd2:	220a      	movs	r2, #10
 800cdd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cdd6:	7806      	ldrb	r6, [r0, #0]
 800cdd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cddc:	b2d9      	uxtb	r1, r3
 800cdde:	2909      	cmp	r1, #9
 800cde0:	d92a      	bls.n	800ce38 <_strtod_l+0x1b8>
 800cde2:	9905      	ldr	r1, [sp, #20]
 800cde4:	462a      	mov	r2, r5
 800cde6:	f7ff ff1a 	bl	800cc1e <strncmp>
 800cdea:	b398      	cbz	r0, 800ce54 <_strtod_l+0x1d4>
 800cdec:	2000      	movs	r0, #0
 800cdee:	4632      	mov	r2, r6
 800cdf0:	463d      	mov	r5, r7
 800cdf2:	9005      	str	r0, [sp, #20]
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2a65      	cmp	r2, #101	; 0x65
 800cdf8:	d001      	beq.n	800cdfe <_strtod_l+0x17e>
 800cdfa:	2a45      	cmp	r2, #69	; 0x45
 800cdfc:	d118      	bne.n	800ce30 <_strtod_l+0x1b0>
 800cdfe:	b91d      	cbnz	r5, 800ce08 <_strtod_l+0x188>
 800ce00:	9a04      	ldr	r2, [sp, #16]
 800ce02:	4302      	orrs	r2, r0
 800ce04:	d09e      	beq.n	800cd44 <_strtod_l+0xc4>
 800ce06:	2500      	movs	r5, #0
 800ce08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ce0c:	f108 0201 	add.w	r2, r8, #1
 800ce10:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce12:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ce16:	2a2b      	cmp	r2, #43	; 0x2b
 800ce18:	d075      	beq.n	800cf06 <_strtod_l+0x286>
 800ce1a:	2a2d      	cmp	r2, #45	; 0x2d
 800ce1c:	d07b      	beq.n	800cf16 <_strtod_l+0x296>
 800ce1e:	f04f 0c00 	mov.w	ip, #0
 800ce22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ce26:	2909      	cmp	r1, #9
 800ce28:	f240 8082 	bls.w	800cf30 <_strtod_l+0x2b0>
 800ce2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce30:	2600      	movs	r6, #0
 800ce32:	e09d      	b.n	800cf70 <_strtod_l+0x2f0>
 800ce34:	2300      	movs	r3, #0
 800ce36:	e7c4      	b.n	800cdc2 <_strtod_l+0x142>
 800ce38:	2f08      	cmp	r7, #8
 800ce3a:	bfd8      	it	le
 800ce3c:	9907      	ldrle	r1, [sp, #28]
 800ce3e:	f100 0001 	add.w	r0, r0, #1
 800ce42:	bfda      	itte	le
 800ce44:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce48:	9307      	strle	r3, [sp, #28]
 800ce4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ce4e:	3701      	adds	r7, #1
 800ce50:	9017      	str	r0, [sp, #92]	; 0x5c
 800ce52:	e7bf      	b.n	800cdd4 <_strtod_l+0x154>
 800ce54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce56:	195a      	adds	r2, r3, r5
 800ce58:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce5a:	5d5a      	ldrb	r2, [r3, r5]
 800ce5c:	2f00      	cmp	r7, #0
 800ce5e:	d037      	beq.n	800ced0 <_strtod_l+0x250>
 800ce60:	9005      	str	r0, [sp, #20]
 800ce62:	463d      	mov	r5, r7
 800ce64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce68:	2b09      	cmp	r3, #9
 800ce6a:	d912      	bls.n	800ce92 <_strtod_l+0x212>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e7c2      	b.n	800cdf6 <_strtod_l+0x176>
 800ce70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce76:	785a      	ldrb	r2, [r3, #1]
 800ce78:	3001      	adds	r0, #1
 800ce7a:	2a30      	cmp	r2, #48	; 0x30
 800ce7c:	d0f8      	beq.n	800ce70 <_strtod_l+0x1f0>
 800ce7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce82:	2b08      	cmp	r3, #8
 800ce84:	f200 84d9 	bhi.w	800d83a <_strtod_l+0xbba>
 800ce88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce8a:	9005      	str	r0, [sp, #20]
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	4605      	mov	r5, r0
 800ce92:	3a30      	subs	r2, #48	; 0x30
 800ce94:	f100 0301 	add.w	r3, r0, #1
 800ce98:	d014      	beq.n	800cec4 <_strtod_l+0x244>
 800ce9a:	9905      	ldr	r1, [sp, #20]
 800ce9c:	4419      	add	r1, r3
 800ce9e:	9105      	str	r1, [sp, #20]
 800cea0:	462b      	mov	r3, r5
 800cea2:	eb00 0e05 	add.w	lr, r0, r5
 800cea6:	210a      	movs	r1, #10
 800cea8:	4573      	cmp	r3, lr
 800ceaa:	d113      	bne.n	800ced4 <_strtod_l+0x254>
 800ceac:	182b      	adds	r3, r5, r0
 800ceae:	2b08      	cmp	r3, #8
 800ceb0:	f105 0501 	add.w	r5, r5, #1
 800ceb4:	4405      	add	r5, r0
 800ceb6:	dc1c      	bgt.n	800cef2 <_strtod_l+0x272>
 800ceb8:	9907      	ldr	r1, [sp, #28]
 800ceba:	230a      	movs	r3, #10
 800cebc:	fb03 2301 	mla	r3, r3, r1, r2
 800cec0:	9307      	str	r3, [sp, #28]
 800cec2:	2300      	movs	r3, #0
 800cec4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cec6:	1c51      	adds	r1, r2, #1
 800cec8:	9117      	str	r1, [sp, #92]	; 0x5c
 800ceca:	7852      	ldrb	r2, [r2, #1]
 800cecc:	4618      	mov	r0, r3
 800cece:	e7c9      	b.n	800ce64 <_strtod_l+0x1e4>
 800ced0:	4638      	mov	r0, r7
 800ced2:	e7d2      	b.n	800ce7a <_strtod_l+0x1fa>
 800ced4:	2b08      	cmp	r3, #8
 800ced6:	dc04      	bgt.n	800cee2 <_strtod_l+0x262>
 800ced8:	9e07      	ldr	r6, [sp, #28]
 800ceda:	434e      	muls	r6, r1
 800cedc:	9607      	str	r6, [sp, #28]
 800cede:	3301      	adds	r3, #1
 800cee0:	e7e2      	b.n	800cea8 <_strtod_l+0x228>
 800cee2:	f103 0c01 	add.w	ip, r3, #1
 800cee6:	f1bc 0f10 	cmp.w	ip, #16
 800ceea:	bfd8      	it	le
 800ceec:	fb01 f909 	mulle.w	r9, r1, r9
 800cef0:	e7f5      	b.n	800cede <_strtod_l+0x25e>
 800cef2:	2d10      	cmp	r5, #16
 800cef4:	bfdc      	itt	le
 800cef6:	230a      	movle	r3, #10
 800cef8:	fb03 2909 	mlale	r9, r3, r9, r2
 800cefc:	e7e1      	b.n	800cec2 <_strtod_l+0x242>
 800cefe:	2300      	movs	r3, #0
 800cf00:	9305      	str	r3, [sp, #20]
 800cf02:	2301      	movs	r3, #1
 800cf04:	e77c      	b.n	800ce00 <_strtod_l+0x180>
 800cf06:	f04f 0c00 	mov.w	ip, #0
 800cf0a:	f108 0202 	add.w	r2, r8, #2
 800cf0e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf10:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cf14:	e785      	b.n	800ce22 <_strtod_l+0x1a2>
 800cf16:	f04f 0c01 	mov.w	ip, #1
 800cf1a:	e7f6      	b.n	800cf0a <_strtod_l+0x28a>
 800cf1c:	08010b0c 	.word	0x08010b0c
 800cf20:	0801085c 	.word	0x0801085c
 800cf24:	7ff00000 	.word	0x7ff00000
 800cf28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf2a:	1c51      	adds	r1, r2, #1
 800cf2c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf2e:	7852      	ldrb	r2, [r2, #1]
 800cf30:	2a30      	cmp	r2, #48	; 0x30
 800cf32:	d0f9      	beq.n	800cf28 <_strtod_l+0x2a8>
 800cf34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cf38:	2908      	cmp	r1, #8
 800cf3a:	f63f af79 	bhi.w	800ce30 <_strtod_l+0x1b0>
 800cf3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cf42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf44:	9206      	str	r2, [sp, #24]
 800cf46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf48:	1c51      	adds	r1, r2, #1
 800cf4a:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf4c:	7852      	ldrb	r2, [r2, #1]
 800cf4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cf52:	2e09      	cmp	r6, #9
 800cf54:	d937      	bls.n	800cfc6 <_strtod_l+0x346>
 800cf56:	9e06      	ldr	r6, [sp, #24]
 800cf58:	1b89      	subs	r1, r1, r6
 800cf5a:	2908      	cmp	r1, #8
 800cf5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cf60:	dc02      	bgt.n	800cf68 <_strtod_l+0x2e8>
 800cf62:	4576      	cmp	r6, lr
 800cf64:	bfa8      	it	ge
 800cf66:	4676      	movge	r6, lr
 800cf68:	f1bc 0f00 	cmp.w	ip, #0
 800cf6c:	d000      	beq.n	800cf70 <_strtod_l+0x2f0>
 800cf6e:	4276      	negs	r6, r6
 800cf70:	2d00      	cmp	r5, #0
 800cf72:	d14d      	bne.n	800d010 <_strtod_l+0x390>
 800cf74:	9904      	ldr	r1, [sp, #16]
 800cf76:	4301      	orrs	r1, r0
 800cf78:	f47f aec6 	bne.w	800cd08 <_strtod_l+0x88>
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f47f aee1 	bne.w	800cd44 <_strtod_l+0xc4>
 800cf82:	2a69      	cmp	r2, #105	; 0x69
 800cf84:	d027      	beq.n	800cfd6 <_strtod_l+0x356>
 800cf86:	dc24      	bgt.n	800cfd2 <_strtod_l+0x352>
 800cf88:	2a49      	cmp	r2, #73	; 0x49
 800cf8a:	d024      	beq.n	800cfd6 <_strtod_l+0x356>
 800cf8c:	2a4e      	cmp	r2, #78	; 0x4e
 800cf8e:	f47f aed9 	bne.w	800cd44 <_strtod_l+0xc4>
 800cf92:	499f      	ldr	r1, [pc, #636]	; (800d210 <_strtod_l+0x590>)
 800cf94:	a817      	add	r0, sp, #92	; 0x5c
 800cf96:	f002 f8b3 	bl	800f100 <__match>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	f43f aed2 	beq.w	800cd44 <_strtod_l+0xc4>
 800cfa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b28      	cmp	r3, #40	; 0x28
 800cfa6:	d12d      	bne.n	800d004 <_strtod_l+0x384>
 800cfa8:	499a      	ldr	r1, [pc, #616]	; (800d214 <_strtod_l+0x594>)
 800cfaa:	aa1a      	add	r2, sp, #104	; 0x68
 800cfac:	a817      	add	r0, sp, #92	; 0x5c
 800cfae:	f002 f8bb 	bl	800f128 <__hexnan>
 800cfb2:	2805      	cmp	r0, #5
 800cfb4:	d126      	bne.n	800d004 <_strtod_l+0x384>
 800cfb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cfbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cfc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cfc4:	e6a0      	b.n	800cd08 <_strtod_l+0x88>
 800cfc6:	210a      	movs	r1, #10
 800cfc8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cfcc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cfd0:	e7b9      	b.n	800cf46 <_strtod_l+0x2c6>
 800cfd2:	2a6e      	cmp	r2, #110	; 0x6e
 800cfd4:	e7db      	b.n	800cf8e <_strtod_l+0x30e>
 800cfd6:	4990      	ldr	r1, [pc, #576]	; (800d218 <_strtod_l+0x598>)
 800cfd8:	a817      	add	r0, sp, #92	; 0x5c
 800cfda:	f002 f891 	bl	800f100 <__match>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	f43f aeb0 	beq.w	800cd44 <_strtod_l+0xc4>
 800cfe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfe6:	498d      	ldr	r1, [pc, #564]	; (800d21c <_strtod_l+0x59c>)
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	a817      	add	r0, sp, #92	; 0x5c
 800cfec:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfee:	f002 f887 	bl	800f100 <__match>
 800cff2:	b910      	cbnz	r0, 800cffa <_strtod_l+0x37a>
 800cff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cff6:	3301      	adds	r3, #1
 800cff8:	9317      	str	r3, [sp, #92]	; 0x5c
 800cffa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d22c <_strtod_l+0x5ac>
 800cffe:	f04f 0a00 	mov.w	sl, #0
 800d002:	e681      	b.n	800cd08 <_strtod_l+0x88>
 800d004:	4886      	ldr	r0, [pc, #536]	; (800d220 <_strtod_l+0x5a0>)
 800d006:	f003 f943 	bl	8010290 <nan>
 800d00a:	ec5b ab10 	vmov	sl, fp, d0
 800d00e:	e67b      	b.n	800cd08 <_strtod_l+0x88>
 800d010:	9b05      	ldr	r3, [sp, #20]
 800d012:	9807      	ldr	r0, [sp, #28]
 800d014:	1af3      	subs	r3, r6, r3
 800d016:	2f00      	cmp	r7, #0
 800d018:	bf08      	it	eq
 800d01a:	462f      	moveq	r7, r5
 800d01c:	2d10      	cmp	r5, #16
 800d01e:	9306      	str	r3, [sp, #24]
 800d020:	46a8      	mov	r8, r5
 800d022:	bfa8      	it	ge
 800d024:	f04f 0810 	movge.w	r8, #16
 800d028:	f7f3 fa6c 	bl	8000504 <__aeabi_ui2d>
 800d02c:	2d09      	cmp	r5, #9
 800d02e:	4682      	mov	sl, r0
 800d030:	468b      	mov	fp, r1
 800d032:	dd13      	ble.n	800d05c <_strtod_l+0x3dc>
 800d034:	4b7b      	ldr	r3, [pc, #492]	; (800d224 <_strtod_l+0x5a4>)
 800d036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d03a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d03e:	f7f3 fadb 	bl	80005f8 <__aeabi_dmul>
 800d042:	4682      	mov	sl, r0
 800d044:	4648      	mov	r0, r9
 800d046:	468b      	mov	fp, r1
 800d048:	f7f3 fa5c 	bl	8000504 <__aeabi_ui2d>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	4650      	mov	r0, sl
 800d052:	4659      	mov	r1, fp
 800d054:	f7f3 f91a 	bl	800028c <__adddf3>
 800d058:	4682      	mov	sl, r0
 800d05a:	468b      	mov	fp, r1
 800d05c:	2d0f      	cmp	r5, #15
 800d05e:	dc38      	bgt.n	800d0d2 <_strtod_l+0x452>
 800d060:	9b06      	ldr	r3, [sp, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f43f ae50 	beq.w	800cd08 <_strtod_l+0x88>
 800d068:	dd24      	ble.n	800d0b4 <_strtod_l+0x434>
 800d06a:	2b16      	cmp	r3, #22
 800d06c:	dc0b      	bgt.n	800d086 <_strtod_l+0x406>
 800d06e:	496d      	ldr	r1, [pc, #436]	; (800d224 <_strtod_l+0x5a4>)
 800d070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d078:	4652      	mov	r2, sl
 800d07a:	465b      	mov	r3, fp
 800d07c:	f7f3 fabc 	bl	80005f8 <__aeabi_dmul>
 800d080:	4682      	mov	sl, r0
 800d082:	468b      	mov	fp, r1
 800d084:	e640      	b.n	800cd08 <_strtod_l+0x88>
 800d086:	9a06      	ldr	r2, [sp, #24]
 800d088:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d08c:	4293      	cmp	r3, r2
 800d08e:	db20      	blt.n	800d0d2 <_strtod_l+0x452>
 800d090:	4c64      	ldr	r4, [pc, #400]	; (800d224 <_strtod_l+0x5a4>)
 800d092:	f1c5 050f 	rsb	r5, r5, #15
 800d096:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d09a:	4652      	mov	r2, sl
 800d09c:	465b      	mov	r3, fp
 800d09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a2:	f7f3 faa9 	bl	80005f8 <__aeabi_dmul>
 800d0a6:	9b06      	ldr	r3, [sp, #24]
 800d0a8:	1b5d      	subs	r5, r3, r5
 800d0aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0b2:	e7e3      	b.n	800d07c <_strtod_l+0x3fc>
 800d0b4:	9b06      	ldr	r3, [sp, #24]
 800d0b6:	3316      	adds	r3, #22
 800d0b8:	db0b      	blt.n	800d0d2 <_strtod_l+0x452>
 800d0ba:	9b05      	ldr	r3, [sp, #20]
 800d0bc:	1b9e      	subs	r6, r3, r6
 800d0be:	4b59      	ldr	r3, [pc, #356]	; (800d224 <_strtod_l+0x5a4>)
 800d0c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d0c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0c8:	4650      	mov	r0, sl
 800d0ca:	4659      	mov	r1, fp
 800d0cc:	f7f3 fbbe 	bl	800084c <__aeabi_ddiv>
 800d0d0:	e7d6      	b.n	800d080 <_strtod_l+0x400>
 800d0d2:	9b06      	ldr	r3, [sp, #24]
 800d0d4:	eba5 0808 	sub.w	r8, r5, r8
 800d0d8:	4498      	add	r8, r3
 800d0da:	f1b8 0f00 	cmp.w	r8, #0
 800d0de:	dd74      	ble.n	800d1ca <_strtod_l+0x54a>
 800d0e0:	f018 030f 	ands.w	r3, r8, #15
 800d0e4:	d00a      	beq.n	800d0fc <_strtod_l+0x47c>
 800d0e6:	494f      	ldr	r1, [pc, #316]	; (800d224 <_strtod_l+0x5a4>)
 800d0e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0ec:	4652      	mov	r2, sl
 800d0ee:	465b      	mov	r3, fp
 800d0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f4:	f7f3 fa80 	bl	80005f8 <__aeabi_dmul>
 800d0f8:	4682      	mov	sl, r0
 800d0fa:	468b      	mov	fp, r1
 800d0fc:	f038 080f 	bics.w	r8, r8, #15
 800d100:	d04f      	beq.n	800d1a2 <_strtod_l+0x522>
 800d102:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d106:	dd22      	ble.n	800d14e <_strtod_l+0x4ce>
 800d108:	2500      	movs	r5, #0
 800d10a:	462e      	mov	r6, r5
 800d10c:	9507      	str	r5, [sp, #28]
 800d10e:	9505      	str	r5, [sp, #20]
 800d110:	2322      	movs	r3, #34	; 0x22
 800d112:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d22c <_strtod_l+0x5ac>
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	f04f 0a00 	mov.w	sl, #0
 800d11c:	9b07      	ldr	r3, [sp, #28]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f43f adf2 	beq.w	800cd08 <_strtod_l+0x88>
 800d124:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d126:	4620      	mov	r0, r4
 800d128:	f002 f964 	bl	800f3f4 <_Bfree>
 800d12c:	9905      	ldr	r1, [sp, #20]
 800d12e:	4620      	mov	r0, r4
 800d130:	f002 f960 	bl	800f3f4 <_Bfree>
 800d134:	4631      	mov	r1, r6
 800d136:	4620      	mov	r0, r4
 800d138:	f002 f95c 	bl	800f3f4 <_Bfree>
 800d13c:	9907      	ldr	r1, [sp, #28]
 800d13e:	4620      	mov	r0, r4
 800d140:	f002 f958 	bl	800f3f4 <_Bfree>
 800d144:	4629      	mov	r1, r5
 800d146:	4620      	mov	r0, r4
 800d148:	f002 f954 	bl	800f3f4 <_Bfree>
 800d14c:	e5dc      	b.n	800cd08 <_strtod_l+0x88>
 800d14e:	4b36      	ldr	r3, [pc, #216]	; (800d228 <_strtod_l+0x5a8>)
 800d150:	9304      	str	r3, [sp, #16]
 800d152:	2300      	movs	r3, #0
 800d154:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d158:	4650      	mov	r0, sl
 800d15a:	4659      	mov	r1, fp
 800d15c:	4699      	mov	r9, r3
 800d15e:	f1b8 0f01 	cmp.w	r8, #1
 800d162:	dc21      	bgt.n	800d1a8 <_strtod_l+0x528>
 800d164:	b10b      	cbz	r3, 800d16a <_strtod_l+0x4ea>
 800d166:	4682      	mov	sl, r0
 800d168:	468b      	mov	fp, r1
 800d16a:	4b2f      	ldr	r3, [pc, #188]	; (800d228 <_strtod_l+0x5a8>)
 800d16c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d170:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d174:	4652      	mov	r2, sl
 800d176:	465b      	mov	r3, fp
 800d178:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	4b2a      	ldr	r3, [pc, #168]	; (800d22c <_strtod_l+0x5ac>)
 800d182:	460a      	mov	r2, r1
 800d184:	400b      	ands	r3, r1
 800d186:	492a      	ldr	r1, [pc, #168]	; (800d230 <_strtod_l+0x5b0>)
 800d188:	428b      	cmp	r3, r1
 800d18a:	4682      	mov	sl, r0
 800d18c:	d8bc      	bhi.n	800d108 <_strtod_l+0x488>
 800d18e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d192:	428b      	cmp	r3, r1
 800d194:	bf86      	itte	hi
 800d196:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d234 <_strtod_l+0x5b4>
 800d19a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d19e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	e084      	b.n	800d2b2 <_strtod_l+0x632>
 800d1a8:	f018 0f01 	tst.w	r8, #1
 800d1ac:	d005      	beq.n	800d1ba <_strtod_l+0x53a>
 800d1ae:	9b04      	ldr	r3, [sp, #16]
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	f7f3 fa20 	bl	80005f8 <__aeabi_dmul>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	9a04      	ldr	r2, [sp, #16]
 800d1bc:	3208      	adds	r2, #8
 800d1be:	f109 0901 	add.w	r9, r9, #1
 800d1c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1c6:	9204      	str	r2, [sp, #16]
 800d1c8:	e7c9      	b.n	800d15e <_strtod_l+0x4de>
 800d1ca:	d0ea      	beq.n	800d1a2 <_strtod_l+0x522>
 800d1cc:	f1c8 0800 	rsb	r8, r8, #0
 800d1d0:	f018 020f 	ands.w	r2, r8, #15
 800d1d4:	d00a      	beq.n	800d1ec <_strtod_l+0x56c>
 800d1d6:	4b13      	ldr	r3, [pc, #76]	; (800d224 <_strtod_l+0x5a4>)
 800d1d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1dc:	4650      	mov	r0, sl
 800d1de:	4659      	mov	r1, fp
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	f7f3 fb32 	bl	800084c <__aeabi_ddiv>
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	468b      	mov	fp, r1
 800d1ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d1f0:	d0d7      	beq.n	800d1a2 <_strtod_l+0x522>
 800d1f2:	f1b8 0f1f 	cmp.w	r8, #31
 800d1f6:	dd1f      	ble.n	800d238 <_strtod_l+0x5b8>
 800d1f8:	2500      	movs	r5, #0
 800d1fa:	462e      	mov	r6, r5
 800d1fc:	9507      	str	r5, [sp, #28]
 800d1fe:	9505      	str	r5, [sp, #20]
 800d200:	2322      	movs	r3, #34	; 0x22
 800d202:	f04f 0a00 	mov.w	sl, #0
 800d206:	f04f 0b00 	mov.w	fp, #0
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	e786      	b.n	800d11c <_strtod_l+0x49c>
 800d20e:	bf00      	nop
 800d210:	0801082d 	.word	0x0801082d
 800d214:	08010870 	.word	0x08010870
 800d218:	08010825 	.word	0x08010825
 800d21c:	080109b4 	.word	0x080109b4
 800d220:	08010cc8 	.word	0x08010cc8
 800d224:	08010ba8 	.word	0x08010ba8
 800d228:	08010b80 	.word	0x08010b80
 800d22c:	7ff00000 	.word	0x7ff00000
 800d230:	7ca00000 	.word	0x7ca00000
 800d234:	7fefffff 	.word	0x7fefffff
 800d238:	f018 0310 	ands.w	r3, r8, #16
 800d23c:	bf18      	it	ne
 800d23e:	236a      	movne	r3, #106	; 0x6a
 800d240:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d5f0 <_strtod_l+0x970>
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	4650      	mov	r0, sl
 800d248:	4659      	mov	r1, fp
 800d24a:	2300      	movs	r3, #0
 800d24c:	f018 0f01 	tst.w	r8, #1
 800d250:	d004      	beq.n	800d25c <_strtod_l+0x5dc>
 800d252:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d256:	f7f3 f9cf 	bl	80005f8 <__aeabi_dmul>
 800d25a:	2301      	movs	r3, #1
 800d25c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d260:	f109 0908 	add.w	r9, r9, #8
 800d264:	d1f2      	bne.n	800d24c <_strtod_l+0x5cc>
 800d266:	b10b      	cbz	r3, 800d26c <_strtod_l+0x5ec>
 800d268:	4682      	mov	sl, r0
 800d26a:	468b      	mov	fp, r1
 800d26c:	9b04      	ldr	r3, [sp, #16]
 800d26e:	b1c3      	cbz	r3, 800d2a2 <_strtod_l+0x622>
 800d270:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d274:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d278:	2b00      	cmp	r3, #0
 800d27a:	4659      	mov	r1, fp
 800d27c:	dd11      	ble.n	800d2a2 <_strtod_l+0x622>
 800d27e:	2b1f      	cmp	r3, #31
 800d280:	f340 8124 	ble.w	800d4cc <_strtod_l+0x84c>
 800d284:	2b34      	cmp	r3, #52	; 0x34
 800d286:	bfde      	ittt	le
 800d288:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d28c:	f04f 33ff 	movle.w	r3, #4294967295
 800d290:	fa03 f202 	lslle.w	r2, r3, r2
 800d294:	f04f 0a00 	mov.w	sl, #0
 800d298:	bfcc      	ite	gt
 800d29a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d29e:	ea02 0b01 	andle.w	fp, r2, r1
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	4659      	mov	r1, fp
 800d2aa:	f7f3 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d1a2      	bne.n	800d1f8 <_strtod_l+0x578>
 800d2b2:	9b07      	ldr	r3, [sp, #28]
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	9908      	ldr	r1, [sp, #32]
 800d2b8:	462b      	mov	r3, r5
 800d2ba:	463a      	mov	r2, r7
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f002 f901 	bl	800f4c4 <__s2b>
 800d2c2:	9007      	str	r0, [sp, #28]
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f43f af1f 	beq.w	800d108 <_strtod_l+0x488>
 800d2ca:	9b05      	ldr	r3, [sp, #20]
 800d2cc:	1b9e      	subs	r6, r3, r6
 800d2ce:	9b06      	ldr	r3, [sp, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	bfb4      	ite	lt
 800d2d4:	4633      	movlt	r3, r6
 800d2d6:	2300      	movge	r3, #0
 800d2d8:	930c      	str	r3, [sp, #48]	; 0x30
 800d2da:	9b06      	ldr	r3, [sp, #24]
 800d2dc:	2500      	movs	r5, #0
 800d2de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2e2:	9312      	str	r3, [sp, #72]	; 0x48
 800d2e4:	462e      	mov	r6, r5
 800d2e6:	9b07      	ldr	r3, [sp, #28]
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	6859      	ldr	r1, [r3, #4]
 800d2ec:	f002 f842 	bl	800f374 <_Balloc>
 800d2f0:	9005      	str	r0, [sp, #20]
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	f43f af0c 	beq.w	800d110 <_strtod_l+0x490>
 800d2f8:	9b07      	ldr	r3, [sp, #28]
 800d2fa:	691a      	ldr	r2, [r3, #16]
 800d2fc:	3202      	adds	r2, #2
 800d2fe:	f103 010c 	add.w	r1, r3, #12
 800d302:	0092      	lsls	r2, r2, #2
 800d304:	300c      	adds	r0, #12
 800d306:	f7fe fbf3 	bl	800baf0 <memcpy>
 800d30a:	ec4b ab10 	vmov	d0, sl, fp
 800d30e:	aa1a      	add	r2, sp, #104	; 0x68
 800d310:	a919      	add	r1, sp, #100	; 0x64
 800d312:	4620      	mov	r0, r4
 800d314:	f002 fc1c 	bl	800fb50 <__d2b>
 800d318:	ec4b ab18 	vmov	d8, sl, fp
 800d31c:	9018      	str	r0, [sp, #96]	; 0x60
 800d31e:	2800      	cmp	r0, #0
 800d320:	f43f aef6 	beq.w	800d110 <_strtod_l+0x490>
 800d324:	2101      	movs	r1, #1
 800d326:	4620      	mov	r0, r4
 800d328:	f002 f966 	bl	800f5f8 <__i2b>
 800d32c:	4606      	mov	r6, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	f43f aeee 	beq.w	800d110 <_strtod_l+0x490>
 800d334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d336:	9904      	ldr	r1, [sp, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bfab      	itete	ge
 800d33c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d33e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d340:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d342:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d346:	bfac      	ite	ge
 800d348:	eb03 0902 	addge.w	r9, r3, r2
 800d34c:	1ad7      	sublt	r7, r2, r3
 800d34e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d350:	eba3 0801 	sub.w	r8, r3, r1
 800d354:	4490      	add	r8, r2
 800d356:	4ba1      	ldr	r3, [pc, #644]	; (800d5dc <_strtod_l+0x95c>)
 800d358:	f108 38ff 	add.w	r8, r8, #4294967295
 800d35c:	4598      	cmp	r8, r3
 800d35e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d362:	f280 80c7 	bge.w	800d4f4 <_strtod_l+0x874>
 800d366:	eba3 0308 	sub.w	r3, r3, r8
 800d36a:	2b1f      	cmp	r3, #31
 800d36c:	eba2 0203 	sub.w	r2, r2, r3
 800d370:	f04f 0101 	mov.w	r1, #1
 800d374:	f300 80b1 	bgt.w	800d4da <_strtod_l+0x85a>
 800d378:	fa01 f303 	lsl.w	r3, r1, r3
 800d37c:	930d      	str	r3, [sp, #52]	; 0x34
 800d37e:	2300      	movs	r3, #0
 800d380:	9308      	str	r3, [sp, #32]
 800d382:	eb09 0802 	add.w	r8, r9, r2
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	45c1      	cmp	r9, r8
 800d38a:	4417      	add	r7, r2
 800d38c:	441f      	add	r7, r3
 800d38e:	464b      	mov	r3, r9
 800d390:	bfa8      	it	ge
 800d392:	4643      	movge	r3, r8
 800d394:	42bb      	cmp	r3, r7
 800d396:	bfa8      	it	ge
 800d398:	463b      	movge	r3, r7
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	bfc2      	ittt	gt
 800d39e:	eba8 0803 	subgt.w	r8, r8, r3
 800d3a2:	1aff      	subgt	r7, r7, r3
 800d3a4:	eba9 0903 	subgt.w	r9, r9, r3
 800d3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	dd17      	ble.n	800d3de <_strtod_l+0x75e>
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f002 f9e0 	bl	800f778 <__pow5mult>
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	f43f aea8 	beq.w	800d110 <_strtod_l+0x490>
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f002 f92d 	bl	800f624 <__multiply>
 800d3ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	f43f ae9f 	beq.w	800d110 <_strtod_l+0x490>
 800d3d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f002 f80d 	bl	800f3f4 <_Bfree>
 800d3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3dc:	9318      	str	r3, [sp, #96]	; 0x60
 800d3de:	f1b8 0f00 	cmp.w	r8, #0
 800d3e2:	f300 808c 	bgt.w	800d4fe <_strtod_l+0x87e>
 800d3e6:	9b06      	ldr	r3, [sp, #24]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	dd08      	ble.n	800d3fe <_strtod_l+0x77e>
 800d3ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3ee:	9905      	ldr	r1, [sp, #20]
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f002 f9c1 	bl	800f778 <__pow5mult>
 800d3f6:	9005      	str	r0, [sp, #20]
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	f43f ae89 	beq.w	800d110 <_strtod_l+0x490>
 800d3fe:	2f00      	cmp	r7, #0
 800d400:	dd08      	ble.n	800d414 <_strtod_l+0x794>
 800d402:	9905      	ldr	r1, [sp, #20]
 800d404:	463a      	mov	r2, r7
 800d406:	4620      	mov	r0, r4
 800d408:	f002 fa10 	bl	800f82c <__lshift>
 800d40c:	9005      	str	r0, [sp, #20]
 800d40e:	2800      	cmp	r0, #0
 800d410:	f43f ae7e 	beq.w	800d110 <_strtod_l+0x490>
 800d414:	f1b9 0f00 	cmp.w	r9, #0
 800d418:	dd08      	ble.n	800d42c <_strtod_l+0x7ac>
 800d41a:	4631      	mov	r1, r6
 800d41c:	464a      	mov	r2, r9
 800d41e:	4620      	mov	r0, r4
 800d420:	f002 fa04 	bl	800f82c <__lshift>
 800d424:	4606      	mov	r6, r0
 800d426:	2800      	cmp	r0, #0
 800d428:	f43f ae72 	beq.w	800d110 <_strtod_l+0x490>
 800d42c:	9a05      	ldr	r2, [sp, #20]
 800d42e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d430:	4620      	mov	r0, r4
 800d432:	f002 fa87 	bl	800f944 <__mdiff>
 800d436:	4605      	mov	r5, r0
 800d438:	2800      	cmp	r0, #0
 800d43a:	f43f ae69 	beq.w	800d110 <_strtod_l+0x490>
 800d43e:	68c3      	ldr	r3, [r0, #12]
 800d440:	930b      	str	r3, [sp, #44]	; 0x2c
 800d442:	2300      	movs	r3, #0
 800d444:	60c3      	str	r3, [r0, #12]
 800d446:	4631      	mov	r1, r6
 800d448:	f002 fa60 	bl	800f90c <__mcmp>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	da60      	bge.n	800d512 <_strtod_l+0x892>
 800d450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d452:	ea53 030a 	orrs.w	r3, r3, sl
 800d456:	f040 8082 	bne.w	800d55e <_strtod_l+0x8de>
 800d45a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d17d      	bne.n	800d55e <_strtod_l+0x8de>
 800d462:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d466:	0d1b      	lsrs	r3, r3, #20
 800d468:	051b      	lsls	r3, r3, #20
 800d46a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d46e:	d976      	bls.n	800d55e <_strtod_l+0x8de>
 800d470:	696b      	ldr	r3, [r5, #20]
 800d472:	b913      	cbnz	r3, 800d47a <_strtod_l+0x7fa>
 800d474:	692b      	ldr	r3, [r5, #16]
 800d476:	2b01      	cmp	r3, #1
 800d478:	dd71      	ble.n	800d55e <_strtod_l+0x8de>
 800d47a:	4629      	mov	r1, r5
 800d47c:	2201      	movs	r2, #1
 800d47e:	4620      	mov	r0, r4
 800d480:	f002 f9d4 	bl	800f82c <__lshift>
 800d484:	4631      	mov	r1, r6
 800d486:	4605      	mov	r5, r0
 800d488:	f002 fa40 	bl	800f90c <__mcmp>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	dd66      	ble.n	800d55e <_strtod_l+0x8de>
 800d490:	9904      	ldr	r1, [sp, #16]
 800d492:	4a53      	ldr	r2, [pc, #332]	; (800d5e0 <_strtod_l+0x960>)
 800d494:	465b      	mov	r3, fp
 800d496:	2900      	cmp	r1, #0
 800d498:	f000 8081 	beq.w	800d59e <_strtod_l+0x91e>
 800d49c:	ea02 010b 	and.w	r1, r2, fp
 800d4a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d4a4:	dc7b      	bgt.n	800d59e <_strtod_l+0x91e>
 800d4a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4aa:	f77f aea9 	ble.w	800d200 <_strtod_l+0x580>
 800d4ae:	4b4d      	ldr	r3, [pc, #308]	; (800d5e4 <_strtod_l+0x964>)
 800d4b0:	4650      	mov	r0, sl
 800d4b2:	4659      	mov	r1, fp
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f7f3 f89f 	bl	80005f8 <__aeabi_dmul>
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4303      	orrs	r3, r0
 800d4be:	bf08      	it	eq
 800d4c0:	2322      	moveq	r3, #34	; 0x22
 800d4c2:	4682      	mov	sl, r0
 800d4c4:	468b      	mov	fp, r1
 800d4c6:	bf08      	it	eq
 800d4c8:	6023      	streq	r3, [r4, #0]
 800d4ca:	e62b      	b.n	800d124 <_strtod_l+0x4a4>
 800d4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d4:	ea03 0a0a 	and.w	sl, r3, sl
 800d4d8:	e6e3      	b.n	800d2a2 <_strtod_l+0x622>
 800d4da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d4de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d4e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d4e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d4ea:	fa01 f308 	lsl.w	r3, r1, r8
 800d4ee:	9308      	str	r3, [sp, #32]
 800d4f0:	910d      	str	r1, [sp, #52]	; 0x34
 800d4f2:	e746      	b.n	800d382 <_strtod_l+0x702>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9308      	str	r3, [sp, #32]
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	930d      	str	r3, [sp, #52]	; 0x34
 800d4fc:	e741      	b.n	800d382 <_strtod_l+0x702>
 800d4fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d500:	4642      	mov	r2, r8
 800d502:	4620      	mov	r0, r4
 800d504:	f002 f992 	bl	800f82c <__lshift>
 800d508:	9018      	str	r0, [sp, #96]	; 0x60
 800d50a:	2800      	cmp	r0, #0
 800d50c:	f47f af6b 	bne.w	800d3e6 <_strtod_l+0x766>
 800d510:	e5fe      	b.n	800d110 <_strtod_l+0x490>
 800d512:	465f      	mov	r7, fp
 800d514:	d16e      	bne.n	800d5f4 <_strtod_l+0x974>
 800d516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d51c:	b342      	cbz	r2, 800d570 <_strtod_l+0x8f0>
 800d51e:	4a32      	ldr	r2, [pc, #200]	; (800d5e8 <_strtod_l+0x968>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d128      	bne.n	800d576 <_strtod_l+0x8f6>
 800d524:	9b04      	ldr	r3, [sp, #16]
 800d526:	4651      	mov	r1, sl
 800d528:	b1eb      	cbz	r3, 800d566 <_strtod_l+0x8e6>
 800d52a:	4b2d      	ldr	r3, [pc, #180]	; (800d5e0 <_strtod_l+0x960>)
 800d52c:	403b      	ands	r3, r7
 800d52e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d532:	f04f 32ff 	mov.w	r2, #4294967295
 800d536:	d819      	bhi.n	800d56c <_strtod_l+0x8ec>
 800d538:	0d1b      	lsrs	r3, r3, #20
 800d53a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d53e:	fa02 f303 	lsl.w	r3, r2, r3
 800d542:	4299      	cmp	r1, r3
 800d544:	d117      	bne.n	800d576 <_strtod_l+0x8f6>
 800d546:	4b29      	ldr	r3, [pc, #164]	; (800d5ec <_strtod_l+0x96c>)
 800d548:	429f      	cmp	r7, r3
 800d54a:	d102      	bne.n	800d552 <_strtod_l+0x8d2>
 800d54c:	3101      	adds	r1, #1
 800d54e:	f43f addf 	beq.w	800d110 <_strtod_l+0x490>
 800d552:	4b23      	ldr	r3, [pc, #140]	; (800d5e0 <_strtod_l+0x960>)
 800d554:	403b      	ands	r3, r7
 800d556:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d55a:	f04f 0a00 	mov.w	sl, #0
 800d55e:	9b04      	ldr	r3, [sp, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1a4      	bne.n	800d4ae <_strtod_l+0x82e>
 800d564:	e5de      	b.n	800d124 <_strtod_l+0x4a4>
 800d566:	f04f 33ff 	mov.w	r3, #4294967295
 800d56a:	e7ea      	b.n	800d542 <_strtod_l+0x8c2>
 800d56c:	4613      	mov	r3, r2
 800d56e:	e7e8      	b.n	800d542 <_strtod_l+0x8c2>
 800d570:	ea53 030a 	orrs.w	r3, r3, sl
 800d574:	d08c      	beq.n	800d490 <_strtod_l+0x810>
 800d576:	9b08      	ldr	r3, [sp, #32]
 800d578:	b1db      	cbz	r3, 800d5b2 <_strtod_l+0x932>
 800d57a:	423b      	tst	r3, r7
 800d57c:	d0ef      	beq.n	800d55e <_strtod_l+0x8de>
 800d57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d580:	9a04      	ldr	r2, [sp, #16]
 800d582:	4650      	mov	r0, sl
 800d584:	4659      	mov	r1, fp
 800d586:	b1c3      	cbz	r3, 800d5ba <_strtod_l+0x93a>
 800d588:	f7ff fb5d 	bl	800cc46 <sulp>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	ec51 0b18 	vmov	r0, r1, d8
 800d594:	f7f2 fe7a 	bl	800028c <__adddf3>
 800d598:	4682      	mov	sl, r0
 800d59a:	468b      	mov	fp, r1
 800d59c:	e7df      	b.n	800d55e <_strtod_l+0x8de>
 800d59e:	4013      	ands	r3, r2
 800d5a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d5a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d5a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d5ac:	f04f 3aff 	mov.w	sl, #4294967295
 800d5b0:	e7d5      	b.n	800d55e <_strtod_l+0x8de>
 800d5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5b4:	ea13 0f0a 	tst.w	r3, sl
 800d5b8:	e7e0      	b.n	800d57c <_strtod_l+0x8fc>
 800d5ba:	f7ff fb44 	bl	800cc46 <sulp>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	ec51 0b18 	vmov	r0, r1, d8
 800d5c6:	f7f2 fe5f 	bl	8000288 <__aeabi_dsub>
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	4682      	mov	sl, r0
 800d5d0:	468b      	mov	fp, r1
 800d5d2:	f7f3 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0c1      	beq.n	800d55e <_strtod_l+0x8de>
 800d5da:	e611      	b.n	800d200 <_strtod_l+0x580>
 800d5dc:	fffffc02 	.word	0xfffffc02
 800d5e0:	7ff00000 	.word	0x7ff00000
 800d5e4:	39500000 	.word	0x39500000
 800d5e8:	000fffff 	.word	0x000fffff
 800d5ec:	7fefffff 	.word	0x7fefffff
 800d5f0:	08010888 	.word	0x08010888
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f002 fb06 	bl	800fc08 <__ratio>
 800d5fc:	ec59 8b10 	vmov	r8, r9, d0
 800d600:	ee10 0a10 	vmov	r0, s0
 800d604:	2200      	movs	r2, #0
 800d606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d60a:	4649      	mov	r1, r9
 800d60c:	f7f3 fa70 	bl	8000af0 <__aeabi_dcmple>
 800d610:	2800      	cmp	r0, #0
 800d612:	d07a      	beq.n	800d70a <_strtod_l+0xa8a>
 800d614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d616:	2b00      	cmp	r3, #0
 800d618:	d04a      	beq.n	800d6b0 <_strtod_l+0xa30>
 800d61a:	4b95      	ldr	r3, [pc, #596]	; (800d870 <_strtod_l+0xbf0>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d622:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d870 <_strtod_l+0xbf0>
 800d626:	f04f 0800 	mov.w	r8, #0
 800d62a:	4b92      	ldr	r3, [pc, #584]	; (800d874 <_strtod_l+0xbf4>)
 800d62c:	403b      	ands	r3, r7
 800d62e:	930d      	str	r3, [sp, #52]	; 0x34
 800d630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d632:	4b91      	ldr	r3, [pc, #580]	; (800d878 <_strtod_l+0xbf8>)
 800d634:	429a      	cmp	r2, r3
 800d636:	f040 80b0 	bne.w	800d79a <_strtod_l+0xb1a>
 800d63a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d63e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d642:	ec4b ab10 	vmov	d0, sl, fp
 800d646:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d64a:	f002 fa05 	bl	800fa58 <__ulp>
 800d64e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d652:	ec53 2b10 	vmov	r2, r3, d0
 800d656:	f7f2 ffcf 	bl	80005f8 <__aeabi_dmul>
 800d65a:	4652      	mov	r2, sl
 800d65c:	465b      	mov	r3, fp
 800d65e:	f7f2 fe15 	bl	800028c <__adddf3>
 800d662:	460b      	mov	r3, r1
 800d664:	4983      	ldr	r1, [pc, #524]	; (800d874 <_strtod_l+0xbf4>)
 800d666:	4a85      	ldr	r2, [pc, #532]	; (800d87c <_strtod_l+0xbfc>)
 800d668:	4019      	ands	r1, r3
 800d66a:	4291      	cmp	r1, r2
 800d66c:	4682      	mov	sl, r0
 800d66e:	d960      	bls.n	800d732 <_strtod_l+0xab2>
 800d670:	ee18 3a90 	vmov	r3, s17
 800d674:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d678:	4293      	cmp	r3, r2
 800d67a:	d104      	bne.n	800d686 <_strtod_l+0xa06>
 800d67c:	ee18 3a10 	vmov	r3, s16
 800d680:	3301      	adds	r3, #1
 800d682:	f43f ad45 	beq.w	800d110 <_strtod_l+0x490>
 800d686:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d888 <_strtod_l+0xc08>
 800d68a:	f04f 3aff 	mov.w	sl, #4294967295
 800d68e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d690:	4620      	mov	r0, r4
 800d692:	f001 feaf 	bl	800f3f4 <_Bfree>
 800d696:	9905      	ldr	r1, [sp, #20]
 800d698:	4620      	mov	r0, r4
 800d69a:	f001 feab 	bl	800f3f4 <_Bfree>
 800d69e:	4631      	mov	r1, r6
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f001 fea7 	bl	800f3f4 <_Bfree>
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f001 fea3 	bl	800f3f4 <_Bfree>
 800d6ae:	e61a      	b.n	800d2e6 <_strtod_l+0x666>
 800d6b0:	f1ba 0f00 	cmp.w	sl, #0
 800d6b4:	d11b      	bne.n	800d6ee <_strtod_l+0xa6e>
 800d6b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6ba:	b9f3      	cbnz	r3, 800d6fa <_strtod_l+0xa7a>
 800d6bc:	4b6c      	ldr	r3, [pc, #432]	; (800d870 <_strtod_l+0xbf0>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4640      	mov	r0, r8
 800d6c2:	4649      	mov	r1, r9
 800d6c4:	f7f3 fa0a 	bl	8000adc <__aeabi_dcmplt>
 800d6c8:	b9d0      	cbnz	r0, 800d700 <_strtod_l+0xa80>
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	4b6c      	ldr	r3, [pc, #432]	; (800d880 <_strtod_l+0xc00>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f7f2 ff91 	bl	80005f8 <__aeabi_dmul>
 800d6d6:	4680      	mov	r8, r0
 800d6d8:	4689      	mov	r9, r1
 800d6da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d6de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d6e2:	9315      	str	r3, [sp, #84]	; 0x54
 800d6e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d6e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6ec:	e79d      	b.n	800d62a <_strtod_l+0x9aa>
 800d6ee:	f1ba 0f01 	cmp.w	sl, #1
 800d6f2:	d102      	bne.n	800d6fa <_strtod_l+0xa7a>
 800d6f4:	2f00      	cmp	r7, #0
 800d6f6:	f43f ad83 	beq.w	800d200 <_strtod_l+0x580>
 800d6fa:	4b62      	ldr	r3, [pc, #392]	; (800d884 <_strtod_l+0xc04>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	e78e      	b.n	800d61e <_strtod_l+0x99e>
 800d700:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d880 <_strtod_l+0xc00>
 800d704:	f04f 0800 	mov.w	r8, #0
 800d708:	e7e7      	b.n	800d6da <_strtod_l+0xa5a>
 800d70a:	4b5d      	ldr	r3, [pc, #372]	; (800d880 <_strtod_l+0xc00>)
 800d70c:	4640      	mov	r0, r8
 800d70e:	4649      	mov	r1, r9
 800d710:	2200      	movs	r2, #0
 800d712:	f7f2 ff71 	bl	80005f8 <__aeabi_dmul>
 800d716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d718:	4680      	mov	r8, r0
 800d71a:	4689      	mov	r9, r1
 800d71c:	b933      	cbnz	r3, 800d72c <_strtod_l+0xaac>
 800d71e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d722:	900e      	str	r0, [sp, #56]	; 0x38
 800d724:	930f      	str	r3, [sp, #60]	; 0x3c
 800d726:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d72a:	e7dd      	b.n	800d6e8 <_strtod_l+0xa68>
 800d72c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d730:	e7f9      	b.n	800d726 <_strtod_l+0xaa6>
 800d732:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1a8      	bne.n	800d68e <_strtod_l+0xa0e>
 800d73c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d742:	0d1b      	lsrs	r3, r3, #20
 800d744:	051b      	lsls	r3, r3, #20
 800d746:	429a      	cmp	r2, r3
 800d748:	d1a1      	bne.n	800d68e <_strtod_l+0xa0e>
 800d74a:	4640      	mov	r0, r8
 800d74c:	4649      	mov	r1, r9
 800d74e:	f7f3 fab3 	bl	8000cb8 <__aeabi_d2lz>
 800d752:	f7f2 ff23 	bl	800059c <__aeabi_l2d>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4640      	mov	r0, r8
 800d75c:	4649      	mov	r1, r9
 800d75e:	f7f2 fd93 	bl	8000288 <__aeabi_dsub>
 800d762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d768:	ea43 030a 	orr.w	r3, r3, sl
 800d76c:	4313      	orrs	r3, r2
 800d76e:	4680      	mov	r8, r0
 800d770:	4689      	mov	r9, r1
 800d772:	d055      	beq.n	800d820 <_strtod_l+0xba0>
 800d774:	a336      	add	r3, pc, #216	; (adr r3, 800d850 <_strtod_l+0xbd0>)
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f7f3 f9af 	bl	8000adc <__aeabi_dcmplt>
 800d77e:	2800      	cmp	r0, #0
 800d780:	f47f acd0 	bne.w	800d124 <_strtod_l+0x4a4>
 800d784:	a334      	add	r3, pc, #208	; (adr r3, 800d858 <_strtod_l+0xbd8>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	4640      	mov	r0, r8
 800d78c:	4649      	mov	r1, r9
 800d78e:	f7f3 f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 800d792:	2800      	cmp	r0, #0
 800d794:	f43f af7b 	beq.w	800d68e <_strtod_l+0xa0e>
 800d798:	e4c4      	b.n	800d124 <_strtod_l+0x4a4>
 800d79a:	9b04      	ldr	r3, [sp, #16]
 800d79c:	b333      	cbz	r3, 800d7ec <_strtod_l+0xb6c>
 800d79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7a4:	d822      	bhi.n	800d7ec <_strtod_l+0xb6c>
 800d7a6:	a32e      	add	r3, pc, #184	; (adr r3, 800d860 <_strtod_l+0xbe0>)
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	f7f3 f99e 	bl	8000af0 <__aeabi_dcmple>
 800d7b4:	b1a0      	cbz	r0, 800d7e0 <_strtod_l+0xb60>
 800d7b6:	4649      	mov	r1, r9
 800d7b8:	4640      	mov	r0, r8
 800d7ba:	f7f3 f9f5 	bl	8000ba8 <__aeabi_d2uiz>
 800d7be:	2801      	cmp	r0, #1
 800d7c0:	bf38      	it	cc
 800d7c2:	2001      	movcc	r0, #1
 800d7c4:	f7f2 fe9e 	bl	8000504 <__aeabi_ui2d>
 800d7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ca:	4680      	mov	r8, r0
 800d7cc:	4689      	mov	r9, r1
 800d7ce:	bb23      	cbnz	r3, 800d81a <_strtod_l+0xb9a>
 800d7d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7d4:	9010      	str	r0, [sp, #64]	; 0x40
 800d7d6:	9311      	str	r3, [sp, #68]	; 0x44
 800d7d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d7f4:	eef0 0a68 	vmov.f32	s1, s17
 800d7f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7fc:	f002 f92c 	bl	800fa58 <__ulp>
 800d800:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d804:	ec53 2b10 	vmov	r2, r3, d0
 800d808:	f7f2 fef6 	bl	80005f8 <__aeabi_dmul>
 800d80c:	ec53 2b18 	vmov	r2, r3, d8
 800d810:	f7f2 fd3c 	bl	800028c <__adddf3>
 800d814:	4682      	mov	sl, r0
 800d816:	468b      	mov	fp, r1
 800d818:	e78d      	b.n	800d736 <_strtod_l+0xab6>
 800d81a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d81e:	e7db      	b.n	800d7d8 <_strtod_l+0xb58>
 800d820:	a311      	add	r3, pc, #68	; (adr r3, 800d868 <_strtod_l+0xbe8>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f3 f959 	bl	8000adc <__aeabi_dcmplt>
 800d82a:	e7b2      	b.n	800d792 <_strtod_l+0xb12>
 800d82c:	2300      	movs	r3, #0
 800d82e:	930a      	str	r3, [sp, #40]	; 0x28
 800d830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	f7ff ba6b 	b.w	800cd10 <_strtod_l+0x90>
 800d83a:	2a65      	cmp	r2, #101	; 0x65
 800d83c:	f43f ab5f 	beq.w	800cefe <_strtod_l+0x27e>
 800d840:	2a45      	cmp	r2, #69	; 0x45
 800d842:	f43f ab5c 	beq.w	800cefe <_strtod_l+0x27e>
 800d846:	2301      	movs	r3, #1
 800d848:	f7ff bb94 	b.w	800cf74 <_strtod_l+0x2f4>
 800d84c:	f3af 8000 	nop.w
 800d850:	94a03595 	.word	0x94a03595
 800d854:	3fdfffff 	.word	0x3fdfffff
 800d858:	35afe535 	.word	0x35afe535
 800d85c:	3fe00000 	.word	0x3fe00000
 800d860:	ffc00000 	.word	0xffc00000
 800d864:	41dfffff 	.word	0x41dfffff
 800d868:	94a03595 	.word	0x94a03595
 800d86c:	3fcfffff 	.word	0x3fcfffff
 800d870:	3ff00000 	.word	0x3ff00000
 800d874:	7ff00000 	.word	0x7ff00000
 800d878:	7fe00000 	.word	0x7fe00000
 800d87c:	7c9fffff 	.word	0x7c9fffff
 800d880:	3fe00000 	.word	0x3fe00000
 800d884:	bff00000 	.word	0xbff00000
 800d888:	7fefffff 	.word	0x7fefffff

0800d88c <_strtod_r>:
 800d88c:	4b01      	ldr	r3, [pc, #4]	; (800d894 <_strtod_r+0x8>)
 800d88e:	f7ff b9f7 	b.w	800cc80 <_strtod_l>
 800d892:	bf00      	nop
 800d894:	200000ac 	.word	0x200000ac

0800d898 <_strtol_l.constprop.0>:
 800d898:	2b01      	cmp	r3, #1
 800d89a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d89e:	d001      	beq.n	800d8a4 <_strtol_l.constprop.0+0xc>
 800d8a0:	2b24      	cmp	r3, #36	; 0x24
 800d8a2:	d906      	bls.n	800d8b2 <_strtol_l.constprop.0+0x1a>
 800d8a4:	f7fe f8ea 	bl	800ba7c <__errno>
 800d8a8:	2316      	movs	r3, #22
 800d8aa:	6003      	str	r3, [r0, #0]
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d998 <_strtol_l.constprop.0+0x100>
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	462e      	mov	r6, r5
 800d8ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d8c2:	f017 0708 	ands.w	r7, r7, #8
 800d8c6:	d1f7      	bne.n	800d8b8 <_strtol_l.constprop.0+0x20>
 800d8c8:	2c2d      	cmp	r4, #45	; 0x2d
 800d8ca:	d132      	bne.n	800d932 <_strtol_l.constprop.0+0x9a>
 800d8cc:	782c      	ldrb	r4, [r5, #0]
 800d8ce:	2701      	movs	r7, #1
 800d8d0:	1cb5      	adds	r5, r6, #2
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d05b      	beq.n	800d98e <_strtol_l.constprop.0+0xf6>
 800d8d6:	2b10      	cmp	r3, #16
 800d8d8:	d109      	bne.n	800d8ee <_strtol_l.constprop.0+0x56>
 800d8da:	2c30      	cmp	r4, #48	; 0x30
 800d8dc:	d107      	bne.n	800d8ee <_strtol_l.constprop.0+0x56>
 800d8de:	782c      	ldrb	r4, [r5, #0]
 800d8e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d8e4:	2c58      	cmp	r4, #88	; 0x58
 800d8e6:	d14d      	bne.n	800d984 <_strtol_l.constprop.0+0xec>
 800d8e8:	786c      	ldrb	r4, [r5, #1]
 800d8ea:	2310      	movs	r3, #16
 800d8ec:	3502      	adds	r5, #2
 800d8ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d8f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8f6:	f04f 0c00 	mov.w	ip, #0
 800d8fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800d8fe:	4666      	mov	r6, ip
 800d900:	fb03 8a19 	mls	sl, r3, r9, r8
 800d904:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d908:	f1be 0f09 	cmp.w	lr, #9
 800d90c:	d816      	bhi.n	800d93c <_strtol_l.constprop.0+0xa4>
 800d90e:	4674      	mov	r4, lr
 800d910:	42a3      	cmp	r3, r4
 800d912:	dd24      	ble.n	800d95e <_strtol_l.constprop.0+0xc6>
 800d914:	f1bc 0f00 	cmp.w	ip, #0
 800d918:	db1e      	blt.n	800d958 <_strtol_l.constprop.0+0xc0>
 800d91a:	45b1      	cmp	r9, r6
 800d91c:	d31c      	bcc.n	800d958 <_strtol_l.constprop.0+0xc0>
 800d91e:	d101      	bne.n	800d924 <_strtol_l.constprop.0+0x8c>
 800d920:	45a2      	cmp	sl, r4
 800d922:	db19      	blt.n	800d958 <_strtol_l.constprop.0+0xc0>
 800d924:	fb06 4603 	mla	r6, r6, r3, r4
 800d928:	f04f 0c01 	mov.w	ip, #1
 800d92c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d930:	e7e8      	b.n	800d904 <_strtol_l.constprop.0+0x6c>
 800d932:	2c2b      	cmp	r4, #43	; 0x2b
 800d934:	bf04      	itt	eq
 800d936:	782c      	ldrbeq	r4, [r5, #0]
 800d938:	1cb5      	addeq	r5, r6, #2
 800d93a:	e7ca      	b.n	800d8d2 <_strtol_l.constprop.0+0x3a>
 800d93c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d940:	f1be 0f19 	cmp.w	lr, #25
 800d944:	d801      	bhi.n	800d94a <_strtol_l.constprop.0+0xb2>
 800d946:	3c37      	subs	r4, #55	; 0x37
 800d948:	e7e2      	b.n	800d910 <_strtol_l.constprop.0+0x78>
 800d94a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d94e:	f1be 0f19 	cmp.w	lr, #25
 800d952:	d804      	bhi.n	800d95e <_strtol_l.constprop.0+0xc6>
 800d954:	3c57      	subs	r4, #87	; 0x57
 800d956:	e7db      	b.n	800d910 <_strtol_l.constprop.0+0x78>
 800d958:	f04f 3cff 	mov.w	ip, #4294967295
 800d95c:	e7e6      	b.n	800d92c <_strtol_l.constprop.0+0x94>
 800d95e:	f1bc 0f00 	cmp.w	ip, #0
 800d962:	da05      	bge.n	800d970 <_strtol_l.constprop.0+0xd8>
 800d964:	2322      	movs	r3, #34	; 0x22
 800d966:	6003      	str	r3, [r0, #0]
 800d968:	4646      	mov	r6, r8
 800d96a:	b942      	cbnz	r2, 800d97e <_strtol_l.constprop.0+0xe6>
 800d96c:	4630      	mov	r0, r6
 800d96e:	e79e      	b.n	800d8ae <_strtol_l.constprop.0+0x16>
 800d970:	b107      	cbz	r7, 800d974 <_strtol_l.constprop.0+0xdc>
 800d972:	4276      	negs	r6, r6
 800d974:	2a00      	cmp	r2, #0
 800d976:	d0f9      	beq.n	800d96c <_strtol_l.constprop.0+0xd4>
 800d978:	f1bc 0f00 	cmp.w	ip, #0
 800d97c:	d000      	beq.n	800d980 <_strtol_l.constprop.0+0xe8>
 800d97e:	1e69      	subs	r1, r5, #1
 800d980:	6011      	str	r1, [r2, #0]
 800d982:	e7f3      	b.n	800d96c <_strtol_l.constprop.0+0xd4>
 800d984:	2430      	movs	r4, #48	; 0x30
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1b1      	bne.n	800d8ee <_strtol_l.constprop.0+0x56>
 800d98a:	2308      	movs	r3, #8
 800d98c:	e7af      	b.n	800d8ee <_strtol_l.constprop.0+0x56>
 800d98e:	2c30      	cmp	r4, #48	; 0x30
 800d990:	d0a5      	beq.n	800d8de <_strtol_l.constprop.0+0x46>
 800d992:	230a      	movs	r3, #10
 800d994:	e7ab      	b.n	800d8ee <_strtol_l.constprop.0+0x56>
 800d996:	bf00      	nop
 800d998:	080108b1 	.word	0x080108b1

0800d99c <_strtol_r>:
 800d99c:	f7ff bf7c 	b.w	800d898 <_strtol_l.constprop.0>

0800d9a0 <__swbuf_r>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	460e      	mov	r6, r1
 800d9a4:	4614      	mov	r4, r2
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	b118      	cbz	r0, 800d9b2 <__swbuf_r+0x12>
 800d9aa:	6983      	ldr	r3, [r0, #24]
 800d9ac:	b90b      	cbnz	r3, 800d9b2 <__swbuf_r+0x12>
 800d9ae:	f001 f84b 	bl	800ea48 <__sinit>
 800d9b2:	4b21      	ldr	r3, [pc, #132]	; (800da38 <__swbuf_r+0x98>)
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	d12b      	bne.n	800da10 <__swbuf_r+0x70>
 800d9b8:	686c      	ldr	r4, [r5, #4]
 800d9ba:	69a3      	ldr	r3, [r4, #24]
 800d9bc:	60a3      	str	r3, [r4, #8]
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	071a      	lsls	r2, r3, #28
 800d9c2:	d52f      	bpl.n	800da24 <__swbuf_r+0x84>
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	b36b      	cbz	r3, 800da24 <__swbuf_r+0x84>
 800d9c8:	6923      	ldr	r3, [r4, #16]
 800d9ca:	6820      	ldr	r0, [r4, #0]
 800d9cc:	1ac0      	subs	r0, r0, r3
 800d9ce:	6963      	ldr	r3, [r4, #20]
 800d9d0:	b2f6      	uxtb	r6, r6
 800d9d2:	4283      	cmp	r3, r0
 800d9d4:	4637      	mov	r7, r6
 800d9d6:	dc04      	bgt.n	800d9e2 <__swbuf_r+0x42>
 800d9d8:	4621      	mov	r1, r4
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f000 ffa0 	bl	800e920 <_fflush_r>
 800d9e0:	bb30      	cbnz	r0, 800da30 <__swbuf_r+0x90>
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	60a3      	str	r3, [r4, #8]
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	6022      	str	r2, [r4, #0]
 800d9ee:	701e      	strb	r6, [r3, #0]
 800d9f0:	6963      	ldr	r3, [r4, #20]
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	4283      	cmp	r3, r0
 800d9f6:	d004      	beq.n	800da02 <__swbuf_r+0x62>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	07db      	lsls	r3, r3, #31
 800d9fc:	d506      	bpl.n	800da0c <__swbuf_r+0x6c>
 800d9fe:	2e0a      	cmp	r6, #10
 800da00:	d104      	bne.n	800da0c <__swbuf_r+0x6c>
 800da02:	4621      	mov	r1, r4
 800da04:	4628      	mov	r0, r5
 800da06:	f000 ff8b 	bl	800e920 <_fflush_r>
 800da0a:	b988      	cbnz	r0, 800da30 <__swbuf_r+0x90>
 800da0c:	4638      	mov	r0, r7
 800da0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da10:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <__swbuf_r+0x9c>)
 800da12:	429c      	cmp	r4, r3
 800da14:	d101      	bne.n	800da1a <__swbuf_r+0x7a>
 800da16:	68ac      	ldr	r4, [r5, #8]
 800da18:	e7cf      	b.n	800d9ba <__swbuf_r+0x1a>
 800da1a:	4b09      	ldr	r3, [pc, #36]	; (800da40 <__swbuf_r+0xa0>)
 800da1c:	429c      	cmp	r4, r3
 800da1e:	bf08      	it	eq
 800da20:	68ec      	ldreq	r4, [r5, #12]
 800da22:	e7ca      	b.n	800d9ba <__swbuf_r+0x1a>
 800da24:	4621      	mov	r1, r4
 800da26:	4628      	mov	r0, r5
 800da28:	f000 f80c 	bl	800da44 <__swsetup_r>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d0cb      	beq.n	800d9c8 <__swbuf_r+0x28>
 800da30:	f04f 37ff 	mov.w	r7, #4294967295
 800da34:	e7ea      	b.n	800da0c <__swbuf_r+0x6c>
 800da36:	bf00      	nop
 800da38:	08010a64 	.word	0x08010a64
 800da3c:	08010a84 	.word	0x08010a84
 800da40:	08010a44 	.word	0x08010a44

0800da44 <__swsetup_r>:
 800da44:	4b32      	ldr	r3, [pc, #200]	; (800db10 <__swsetup_r+0xcc>)
 800da46:	b570      	push	{r4, r5, r6, lr}
 800da48:	681d      	ldr	r5, [r3, #0]
 800da4a:	4606      	mov	r6, r0
 800da4c:	460c      	mov	r4, r1
 800da4e:	b125      	cbz	r5, 800da5a <__swsetup_r+0x16>
 800da50:	69ab      	ldr	r3, [r5, #24]
 800da52:	b913      	cbnz	r3, 800da5a <__swsetup_r+0x16>
 800da54:	4628      	mov	r0, r5
 800da56:	f000 fff7 	bl	800ea48 <__sinit>
 800da5a:	4b2e      	ldr	r3, [pc, #184]	; (800db14 <__swsetup_r+0xd0>)
 800da5c:	429c      	cmp	r4, r3
 800da5e:	d10f      	bne.n	800da80 <__swsetup_r+0x3c>
 800da60:	686c      	ldr	r4, [r5, #4]
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da68:	0719      	lsls	r1, r3, #28
 800da6a:	d42c      	bmi.n	800dac6 <__swsetup_r+0x82>
 800da6c:	06dd      	lsls	r5, r3, #27
 800da6e:	d411      	bmi.n	800da94 <__swsetup_r+0x50>
 800da70:	2309      	movs	r3, #9
 800da72:	6033      	str	r3, [r6, #0]
 800da74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	e03e      	b.n	800dafe <__swsetup_r+0xba>
 800da80:	4b25      	ldr	r3, [pc, #148]	; (800db18 <__swsetup_r+0xd4>)
 800da82:	429c      	cmp	r4, r3
 800da84:	d101      	bne.n	800da8a <__swsetup_r+0x46>
 800da86:	68ac      	ldr	r4, [r5, #8]
 800da88:	e7eb      	b.n	800da62 <__swsetup_r+0x1e>
 800da8a:	4b24      	ldr	r3, [pc, #144]	; (800db1c <__swsetup_r+0xd8>)
 800da8c:	429c      	cmp	r4, r3
 800da8e:	bf08      	it	eq
 800da90:	68ec      	ldreq	r4, [r5, #12]
 800da92:	e7e6      	b.n	800da62 <__swsetup_r+0x1e>
 800da94:	0758      	lsls	r0, r3, #29
 800da96:	d512      	bpl.n	800dabe <__swsetup_r+0x7a>
 800da98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da9a:	b141      	cbz	r1, 800daae <__swsetup_r+0x6a>
 800da9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800daa0:	4299      	cmp	r1, r3
 800daa2:	d002      	beq.n	800daaa <__swsetup_r+0x66>
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7fe f839 	bl	800bb1c <_free_r>
 800daaa:	2300      	movs	r3, #0
 800daac:	6363      	str	r3, [r4, #52]	; 0x34
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dab4:	81a3      	strh	r3, [r4, #12]
 800dab6:	2300      	movs	r3, #0
 800dab8:	6063      	str	r3, [r4, #4]
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	f043 0308 	orr.w	r3, r3, #8
 800dac4:	81a3      	strh	r3, [r4, #12]
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	b94b      	cbnz	r3, 800dade <__swsetup_r+0x9a>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dad4:	d003      	beq.n	800dade <__swsetup_r+0x9a>
 800dad6:	4621      	mov	r1, r4
 800dad8:	4630      	mov	r0, r6
 800dada:	f001 fbed 	bl	800f2b8 <__smakebuf_r>
 800dade:	89a0      	ldrh	r0, [r4, #12]
 800dae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dae4:	f010 0301 	ands.w	r3, r0, #1
 800dae8:	d00a      	beq.n	800db00 <__swsetup_r+0xbc>
 800daea:	2300      	movs	r3, #0
 800daec:	60a3      	str	r3, [r4, #8]
 800daee:	6963      	ldr	r3, [r4, #20]
 800daf0:	425b      	negs	r3, r3
 800daf2:	61a3      	str	r3, [r4, #24]
 800daf4:	6923      	ldr	r3, [r4, #16]
 800daf6:	b943      	cbnz	r3, 800db0a <__swsetup_r+0xc6>
 800daf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dafc:	d1ba      	bne.n	800da74 <__swsetup_r+0x30>
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
 800db00:	0781      	lsls	r1, r0, #30
 800db02:	bf58      	it	pl
 800db04:	6963      	ldrpl	r3, [r4, #20]
 800db06:	60a3      	str	r3, [r4, #8]
 800db08:	e7f4      	b.n	800daf4 <__swsetup_r+0xb0>
 800db0a:	2000      	movs	r0, #0
 800db0c:	e7f7      	b.n	800dafe <__swsetup_r+0xba>
 800db0e:	bf00      	nop
 800db10:	20000044 	.word	0x20000044
 800db14:	08010a64 	.word	0x08010a64
 800db18:	08010a84 	.word	0x08010a84
 800db1c:	08010a44 	.word	0x08010a44

0800db20 <quorem>:
 800db20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	6903      	ldr	r3, [r0, #16]
 800db26:	690c      	ldr	r4, [r1, #16]
 800db28:	42a3      	cmp	r3, r4
 800db2a:	4607      	mov	r7, r0
 800db2c:	f2c0 8081 	blt.w	800dc32 <quorem+0x112>
 800db30:	3c01      	subs	r4, #1
 800db32:	f101 0814 	add.w	r8, r1, #20
 800db36:	f100 0514 	add.w	r5, r0, #20
 800db3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db48:	3301      	adds	r3, #1
 800db4a:	429a      	cmp	r2, r3
 800db4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db54:	fbb2 f6f3 	udiv	r6, r2, r3
 800db58:	d331      	bcc.n	800dbbe <quorem+0x9e>
 800db5a:	f04f 0e00 	mov.w	lr, #0
 800db5e:	4640      	mov	r0, r8
 800db60:	46ac      	mov	ip, r5
 800db62:	46f2      	mov	sl, lr
 800db64:	f850 2b04 	ldr.w	r2, [r0], #4
 800db68:	b293      	uxth	r3, r2
 800db6a:	fb06 e303 	mla	r3, r6, r3, lr
 800db6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800db72:	b29b      	uxth	r3, r3
 800db74:	ebaa 0303 	sub.w	r3, sl, r3
 800db78:	f8dc a000 	ldr.w	sl, [ip]
 800db7c:	0c12      	lsrs	r2, r2, #16
 800db7e:	fa13 f38a 	uxtah	r3, r3, sl
 800db82:	fb06 e202 	mla	r2, r6, r2, lr
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	9b00      	ldr	r3, [sp, #0]
 800db8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db8e:	b292      	uxth	r2, r2
 800db90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db98:	f8bd 3000 	ldrh.w	r3, [sp]
 800db9c:	4581      	cmp	r9, r0
 800db9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dba2:	f84c 3b04 	str.w	r3, [ip], #4
 800dba6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dbaa:	d2db      	bcs.n	800db64 <quorem+0x44>
 800dbac:	f855 300b 	ldr.w	r3, [r5, fp]
 800dbb0:	b92b      	cbnz	r3, 800dbbe <quorem+0x9e>
 800dbb2:	9b01      	ldr	r3, [sp, #4]
 800dbb4:	3b04      	subs	r3, #4
 800dbb6:	429d      	cmp	r5, r3
 800dbb8:	461a      	mov	r2, r3
 800dbba:	d32e      	bcc.n	800dc1a <quorem+0xfa>
 800dbbc:	613c      	str	r4, [r7, #16]
 800dbbe:	4638      	mov	r0, r7
 800dbc0:	f001 fea4 	bl	800f90c <__mcmp>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	db24      	blt.n	800dc12 <quorem+0xf2>
 800dbc8:	3601      	adds	r6, #1
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f04f 0c00 	mov.w	ip, #0
 800dbd0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbd4:	f8d0 e000 	ldr.w	lr, [r0]
 800dbd8:	b293      	uxth	r3, r2
 800dbda:	ebac 0303 	sub.w	r3, ip, r3
 800dbde:	0c12      	lsrs	r2, r2, #16
 800dbe0:	fa13 f38e 	uxtah	r3, r3, lr
 800dbe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dbe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbf2:	45c1      	cmp	r9, r8
 800dbf4:	f840 3b04 	str.w	r3, [r0], #4
 800dbf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dbfc:	d2e8      	bcs.n	800dbd0 <quorem+0xb0>
 800dbfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc06:	b922      	cbnz	r2, 800dc12 <quorem+0xf2>
 800dc08:	3b04      	subs	r3, #4
 800dc0a:	429d      	cmp	r5, r3
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	d30a      	bcc.n	800dc26 <quorem+0x106>
 800dc10:	613c      	str	r4, [r7, #16]
 800dc12:	4630      	mov	r0, r6
 800dc14:	b003      	add	sp, #12
 800dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1a:	6812      	ldr	r2, [r2, #0]
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	2a00      	cmp	r2, #0
 800dc20:	d1cc      	bne.n	800dbbc <quorem+0x9c>
 800dc22:	3c01      	subs	r4, #1
 800dc24:	e7c7      	b.n	800dbb6 <quorem+0x96>
 800dc26:	6812      	ldr	r2, [r2, #0]
 800dc28:	3b04      	subs	r3, #4
 800dc2a:	2a00      	cmp	r2, #0
 800dc2c:	d1f0      	bne.n	800dc10 <quorem+0xf0>
 800dc2e:	3c01      	subs	r4, #1
 800dc30:	e7eb      	b.n	800dc0a <quorem+0xea>
 800dc32:	2000      	movs	r0, #0
 800dc34:	e7ee      	b.n	800dc14 <quorem+0xf4>
	...

0800dc38 <_dtoa_r>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	ed2d 8b04 	vpush	{d8-d9}
 800dc40:	ec57 6b10 	vmov	r6, r7, d0
 800dc44:	b093      	sub	sp, #76	; 0x4c
 800dc46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc4c:	9106      	str	r1, [sp, #24]
 800dc4e:	ee10 aa10 	vmov	sl, s0
 800dc52:	4604      	mov	r4, r0
 800dc54:	9209      	str	r2, [sp, #36]	; 0x24
 800dc56:	930c      	str	r3, [sp, #48]	; 0x30
 800dc58:	46bb      	mov	fp, r7
 800dc5a:	b975      	cbnz	r5, 800dc7a <_dtoa_r+0x42>
 800dc5c:	2010      	movs	r0, #16
 800dc5e:	f7fd ff37 	bl	800bad0 <malloc>
 800dc62:	4602      	mov	r2, r0
 800dc64:	6260      	str	r0, [r4, #36]	; 0x24
 800dc66:	b920      	cbnz	r0, 800dc72 <_dtoa_r+0x3a>
 800dc68:	4ba7      	ldr	r3, [pc, #668]	; (800df08 <_dtoa_r+0x2d0>)
 800dc6a:	21ea      	movs	r1, #234	; 0xea
 800dc6c:	48a7      	ldr	r0, [pc, #668]	; (800df0c <_dtoa_r+0x2d4>)
 800dc6e:	f002 fb79 	bl	8010364 <__assert_func>
 800dc72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc76:	6005      	str	r5, [r0, #0]
 800dc78:	60c5      	str	r5, [r0, #12]
 800dc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc7c:	6819      	ldr	r1, [r3, #0]
 800dc7e:	b151      	cbz	r1, 800dc96 <_dtoa_r+0x5e>
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	604a      	str	r2, [r1, #4]
 800dc84:	2301      	movs	r3, #1
 800dc86:	4093      	lsls	r3, r2
 800dc88:	608b      	str	r3, [r1, #8]
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f001 fbb2 	bl	800f3f4 <_Bfree>
 800dc90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc92:	2200      	movs	r2, #0
 800dc94:	601a      	str	r2, [r3, #0]
 800dc96:	1e3b      	subs	r3, r7, #0
 800dc98:	bfaa      	itet	ge
 800dc9a:	2300      	movge	r3, #0
 800dc9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dca0:	f8c8 3000 	strge.w	r3, [r8]
 800dca4:	4b9a      	ldr	r3, [pc, #616]	; (800df10 <_dtoa_r+0x2d8>)
 800dca6:	bfbc      	itt	lt
 800dca8:	2201      	movlt	r2, #1
 800dcaa:	f8c8 2000 	strlt.w	r2, [r8]
 800dcae:	ea33 030b 	bics.w	r3, r3, fp
 800dcb2:	d11b      	bne.n	800dcec <_dtoa_r+0xb4>
 800dcb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcc0:	4333      	orrs	r3, r6
 800dcc2:	f000 8592 	beq.w	800e7ea <_dtoa_r+0xbb2>
 800dcc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcc8:	b963      	cbnz	r3, 800dce4 <_dtoa_r+0xac>
 800dcca:	4b92      	ldr	r3, [pc, #584]	; (800df14 <_dtoa_r+0x2dc>)
 800dccc:	e022      	b.n	800dd14 <_dtoa_r+0xdc>
 800dcce:	4b92      	ldr	r3, [pc, #584]	; (800df18 <_dtoa_r+0x2e0>)
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	9801      	ldr	r0, [sp, #4]
 800dcda:	b013      	add	sp, #76	; 0x4c
 800dcdc:	ecbd 8b04 	vpop	{d8-d9}
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	4b8b      	ldr	r3, [pc, #556]	; (800df14 <_dtoa_r+0x2dc>)
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	3303      	adds	r3, #3
 800dcea:	e7f3      	b.n	800dcd4 <_dtoa_r+0x9c>
 800dcec:	2200      	movs	r2, #0
 800dcee:	2300      	movs	r3, #0
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	4659      	mov	r1, fp
 800dcf4:	f7f2 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcf8:	ec4b ab19 	vmov	d9, sl, fp
 800dcfc:	4680      	mov	r8, r0
 800dcfe:	b158      	cbz	r0, 800dd18 <_dtoa_r+0xe0>
 800dd00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd02:	2301      	movs	r3, #1
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 856b 	beq.w	800e7e4 <_dtoa_r+0xbac>
 800dd0e:	4883      	ldr	r0, [pc, #524]	; (800df1c <_dtoa_r+0x2e4>)
 800dd10:	6018      	str	r0, [r3, #0]
 800dd12:	1e43      	subs	r3, r0, #1
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	e7df      	b.n	800dcd8 <_dtoa_r+0xa0>
 800dd18:	ec4b ab10 	vmov	d0, sl, fp
 800dd1c:	aa10      	add	r2, sp, #64	; 0x40
 800dd1e:	a911      	add	r1, sp, #68	; 0x44
 800dd20:	4620      	mov	r0, r4
 800dd22:	f001 ff15 	bl	800fb50 <__d2b>
 800dd26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dd2a:	ee08 0a10 	vmov	s16, r0
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	f000 8084 	beq.w	800de3c <_dtoa_r+0x204>
 800dd34:	ee19 3a90 	vmov	r3, s19
 800dd38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dd40:	4656      	mov	r6, sl
 800dd42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dd46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dd4e:	4b74      	ldr	r3, [pc, #464]	; (800df20 <_dtoa_r+0x2e8>)
 800dd50:	2200      	movs	r2, #0
 800dd52:	4630      	mov	r0, r6
 800dd54:	4639      	mov	r1, r7
 800dd56:	f7f2 fa97 	bl	8000288 <__aeabi_dsub>
 800dd5a:	a365      	add	r3, pc, #404	; (adr r3, 800def0 <_dtoa_r+0x2b8>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	f7f2 fc4a 	bl	80005f8 <__aeabi_dmul>
 800dd64:	a364      	add	r3, pc, #400	; (adr r3, 800def8 <_dtoa_r+0x2c0>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	f7f2 fa8f 	bl	800028c <__adddf3>
 800dd6e:	4606      	mov	r6, r0
 800dd70:	4628      	mov	r0, r5
 800dd72:	460f      	mov	r7, r1
 800dd74:	f7f2 fbd6 	bl	8000524 <__aeabi_i2d>
 800dd78:	a361      	add	r3, pc, #388	; (adr r3, 800df00 <_dtoa_r+0x2c8>)
 800dd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7e:	f7f2 fc3b 	bl	80005f8 <__aeabi_dmul>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4630      	mov	r0, r6
 800dd88:	4639      	mov	r1, r7
 800dd8a:	f7f2 fa7f 	bl	800028c <__adddf3>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	460f      	mov	r7, r1
 800dd92:	f7f2 fee1 	bl	8000b58 <__aeabi_d2iz>
 800dd96:	2200      	movs	r2, #0
 800dd98:	9000      	str	r0, [sp, #0]
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800dda4:	b150      	cbz	r0, 800ddbc <_dtoa_r+0x184>
 800dda6:	9800      	ldr	r0, [sp, #0]
 800dda8:	f7f2 fbbc 	bl	8000524 <__aeabi_i2d>
 800ddac:	4632      	mov	r2, r6
 800ddae:	463b      	mov	r3, r7
 800ddb0:	f7f2 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddb4:	b910      	cbnz	r0, 800ddbc <_dtoa_r+0x184>
 800ddb6:	9b00      	ldr	r3, [sp, #0]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	2b16      	cmp	r3, #22
 800ddc0:	d85a      	bhi.n	800de78 <_dtoa_r+0x240>
 800ddc2:	9a00      	ldr	r2, [sp, #0]
 800ddc4:	4b57      	ldr	r3, [pc, #348]	; (800df24 <_dtoa_r+0x2ec>)
 800ddc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddce:	ec51 0b19 	vmov	r0, r1, d9
 800ddd2:	f7f2 fe83 	bl	8000adc <__aeabi_dcmplt>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d050      	beq.n	800de7c <_dtoa_r+0x244>
 800ddda:	9b00      	ldr	r3, [sp, #0]
 800dddc:	3b01      	subs	r3, #1
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	2300      	movs	r3, #0
 800dde2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dde4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dde6:	1b5d      	subs	r5, r3, r5
 800dde8:	1e6b      	subs	r3, r5, #1
 800ddea:	9305      	str	r3, [sp, #20]
 800ddec:	bf45      	ittet	mi
 800ddee:	f1c5 0301 	rsbmi	r3, r5, #1
 800ddf2:	9304      	strmi	r3, [sp, #16]
 800ddf4:	2300      	movpl	r3, #0
 800ddf6:	2300      	movmi	r3, #0
 800ddf8:	bf4c      	ite	mi
 800ddfa:	9305      	strmi	r3, [sp, #20]
 800ddfc:	9304      	strpl	r3, [sp, #16]
 800ddfe:	9b00      	ldr	r3, [sp, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	db3d      	blt.n	800de80 <_dtoa_r+0x248>
 800de04:	9b05      	ldr	r3, [sp, #20]
 800de06:	9a00      	ldr	r2, [sp, #0]
 800de08:	920a      	str	r2, [sp, #40]	; 0x28
 800de0a:	4413      	add	r3, r2
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	2300      	movs	r3, #0
 800de10:	9307      	str	r3, [sp, #28]
 800de12:	9b06      	ldr	r3, [sp, #24]
 800de14:	2b09      	cmp	r3, #9
 800de16:	f200 8089 	bhi.w	800df2c <_dtoa_r+0x2f4>
 800de1a:	2b05      	cmp	r3, #5
 800de1c:	bfc4      	itt	gt
 800de1e:	3b04      	subgt	r3, #4
 800de20:	9306      	strgt	r3, [sp, #24]
 800de22:	9b06      	ldr	r3, [sp, #24]
 800de24:	f1a3 0302 	sub.w	r3, r3, #2
 800de28:	bfcc      	ite	gt
 800de2a:	2500      	movgt	r5, #0
 800de2c:	2501      	movle	r5, #1
 800de2e:	2b03      	cmp	r3, #3
 800de30:	f200 8087 	bhi.w	800df42 <_dtoa_r+0x30a>
 800de34:	e8df f003 	tbb	[pc, r3]
 800de38:	59383a2d 	.word	0x59383a2d
 800de3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800de40:	441d      	add	r5, r3
 800de42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800de46:	2b20      	cmp	r3, #32
 800de48:	bfc1      	itttt	gt
 800de4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800de52:	fa0b f303 	lslgt.w	r3, fp, r3
 800de56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800de5a:	bfda      	itte	le
 800de5c:	f1c3 0320 	rsble	r3, r3, #32
 800de60:	fa06 f003 	lslle.w	r0, r6, r3
 800de64:	4318      	orrgt	r0, r3
 800de66:	f7f2 fb4d 	bl	8000504 <__aeabi_ui2d>
 800de6a:	2301      	movs	r3, #1
 800de6c:	4606      	mov	r6, r0
 800de6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800de72:	3d01      	subs	r5, #1
 800de74:	930e      	str	r3, [sp, #56]	; 0x38
 800de76:	e76a      	b.n	800dd4e <_dtoa_r+0x116>
 800de78:	2301      	movs	r3, #1
 800de7a:	e7b2      	b.n	800dde2 <_dtoa_r+0x1aa>
 800de7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800de7e:	e7b1      	b.n	800dde4 <_dtoa_r+0x1ac>
 800de80:	9b04      	ldr	r3, [sp, #16]
 800de82:	9a00      	ldr	r2, [sp, #0]
 800de84:	1a9b      	subs	r3, r3, r2
 800de86:	9304      	str	r3, [sp, #16]
 800de88:	4253      	negs	r3, r2
 800de8a:	9307      	str	r3, [sp, #28]
 800de8c:	2300      	movs	r3, #0
 800de8e:	930a      	str	r3, [sp, #40]	; 0x28
 800de90:	e7bf      	b.n	800de12 <_dtoa_r+0x1da>
 800de92:	2300      	movs	r3, #0
 800de94:	9308      	str	r3, [sp, #32]
 800de96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de98:	2b00      	cmp	r3, #0
 800de9a:	dc55      	bgt.n	800df48 <_dtoa_r+0x310>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dea2:	461a      	mov	r2, r3
 800dea4:	9209      	str	r2, [sp, #36]	; 0x24
 800dea6:	e00c      	b.n	800dec2 <_dtoa_r+0x28a>
 800dea8:	2301      	movs	r3, #1
 800deaa:	e7f3      	b.n	800de94 <_dtoa_r+0x25c>
 800deac:	2300      	movs	r3, #0
 800deae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deb0:	9308      	str	r3, [sp, #32]
 800deb2:	9b00      	ldr	r3, [sp, #0]
 800deb4:	4413      	add	r3, r2
 800deb6:	9302      	str	r3, [sp, #8]
 800deb8:	3301      	adds	r3, #1
 800deba:	2b01      	cmp	r3, #1
 800debc:	9303      	str	r3, [sp, #12]
 800debe:	bfb8      	it	lt
 800dec0:	2301      	movlt	r3, #1
 800dec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dec4:	2200      	movs	r2, #0
 800dec6:	6042      	str	r2, [r0, #4]
 800dec8:	2204      	movs	r2, #4
 800deca:	f102 0614 	add.w	r6, r2, #20
 800dece:	429e      	cmp	r6, r3
 800ded0:	6841      	ldr	r1, [r0, #4]
 800ded2:	d93d      	bls.n	800df50 <_dtoa_r+0x318>
 800ded4:	4620      	mov	r0, r4
 800ded6:	f001 fa4d 	bl	800f374 <_Balloc>
 800deda:	9001      	str	r0, [sp, #4]
 800dedc:	2800      	cmp	r0, #0
 800dede:	d13b      	bne.n	800df58 <_dtoa_r+0x320>
 800dee0:	4b11      	ldr	r3, [pc, #68]	; (800df28 <_dtoa_r+0x2f0>)
 800dee2:	4602      	mov	r2, r0
 800dee4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dee8:	e6c0      	b.n	800dc6c <_dtoa_r+0x34>
 800deea:	2301      	movs	r3, #1
 800deec:	e7df      	b.n	800deae <_dtoa_r+0x276>
 800deee:	bf00      	nop
 800def0:	636f4361 	.word	0x636f4361
 800def4:	3fd287a7 	.word	0x3fd287a7
 800def8:	8b60c8b3 	.word	0x8b60c8b3
 800defc:	3fc68a28 	.word	0x3fc68a28
 800df00:	509f79fb 	.word	0x509f79fb
 800df04:	3fd34413 	.word	0x3fd34413
 800df08:	080109be 	.word	0x080109be
 800df0c:	080109d5 	.word	0x080109d5
 800df10:	7ff00000 	.word	0x7ff00000
 800df14:	080109ba 	.word	0x080109ba
 800df18:	080109b1 	.word	0x080109b1
 800df1c:	08010831 	.word	0x08010831
 800df20:	3ff80000 	.word	0x3ff80000
 800df24:	08010ba8 	.word	0x08010ba8
 800df28:	08010a30 	.word	0x08010a30
 800df2c:	2501      	movs	r5, #1
 800df2e:	2300      	movs	r3, #0
 800df30:	9306      	str	r3, [sp, #24]
 800df32:	9508      	str	r5, [sp, #32]
 800df34:	f04f 33ff 	mov.w	r3, #4294967295
 800df38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800df3c:	2200      	movs	r2, #0
 800df3e:	2312      	movs	r3, #18
 800df40:	e7b0      	b.n	800dea4 <_dtoa_r+0x26c>
 800df42:	2301      	movs	r3, #1
 800df44:	9308      	str	r3, [sp, #32]
 800df46:	e7f5      	b.n	800df34 <_dtoa_r+0x2fc>
 800df48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800df4e:	e7b8      	b.n	800dec2 <_dtoa_r+0x28a>
 800df50:	3101      	adds	r1, #1
 800df52:	6041      	str	r1, [r0, #4]
 800df54:	0052      	lsls	r2, r2, #1
 800df56:	e7b8      	b.n	800deca <_dtoa_r+0x292>
 800df58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df5a:	9a01      	ldr	r2, [sp, #4]
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	9b03      	ldr	r3, [sp, #12]
 800df60:	2b0e      	cmp	r3, #14
 800df62:	f200 809d 	bhi.w	800e0a0 <_dtoa_r+0x468>
 800df66:	2d00      	cmp	r5, #0
 800df68:	f000 809a 	beq.w	800e0a0 <_dtoa_r+0x468>
 800df6c:	9b00      	ldr	r3, [sp, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dd32      	ble.n	800dfd8 <_dtoa_r+0x3a0>
 800df72:	4ab7      	ldr	r2, [pc, #732]	; (800e250 <_dtoa_r+0x618>)
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df80:	9b00      	ldr	r3, [sp, #0]
 800df82:	05d8      	lsls	r0, r3, #23
 800df84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800df88:	d516      	bpl.n	800dfb8 <_dtoa_r+0x380>
 800df8a:	4bb2      	ldr	r3, [pc, #712]	; (800e254 <_dtoa_r+0x61c>)
 800df8c:	ec51 0b19 	vmov	r0, r1, d9
 800df90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df94:	f7f2 fc5a 	bl	800084c <__aeabi_ddiv>
 800df98:	f007 070f 	and.w	r7, r7, #15
 800df9c:	4682      	mov	sl, r0
 800df9e:	468b      	mov	fp, r1
 800dfa0:	2503      	movs	r5, #3
 800dfa2:	4eac      	ldr	r6, [pc, #688]	; (800e254 <_dtoa_r+0x61c>)
 800dfa4:	b957      	cbnz	r7, 800dfbc <_dtoa_r+0x384>
 800dfa6:	4642      	mov	r2, r8
 800dfa8:	464b      	mov	r3, r9
 800dfaa:	4650      	mov	r0, sl
 800dfac:	4659      	mov	r1, fp
 800dfae:	f7f2 fc4d 	bl	800084c <__aeabi_ddiv>
 800dfb2:	4682      	mov	sl, r0
 800dfb4:	468b      	mov	fp, r1
 800dfb6:	e028      	b.n	800e00a <_dtoa_r+0x3d2>
 800dfb8:	2502      	movs	r5, #2
 800dfba:	e7f2      	b.n	800dfa2 <_dtoa_r+0x36a>
 800dfbc:	07f9      	lsls	r1, r7, #31
 800dfbe:	d508      	bpl.n	800dfd2 <_dtoa_r+0x39a>
 800dfc0:	4640      	mov	r0, r8
 800dfc2:	4649      	mov	r1, r9
 800dfc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dfc8:	f7f2 fb16 	bl	80005f8 <__aeabi_dmul>
 800dfcc:	3501      	adds	r5, #1
 800dfce:	4680      	mov	r8, r0
 800dfd0:	4689      	mov	r9, r1
 800dfd2:	107f      	asrs	r7, r7, #1
 800dfd4:	3608      	adds	r6, #8
 800dfd6:	e7e5      	b.n	800dfa4 <_dtoa_r+0x36c>
 800dfd8:	f000 809b 	beq.w	800e112 <_dtoa_r+0x4da>
 800dfdc:	9b00      	ldr	r3, [sp, #0]
 800dfde:	4f9d      	ldr	r7, [pc, #628]	; (800e254 <_dtoa_r+0x61c>)
 800dfe0:	425e      	negs	r6, r3
 800dfe2:	4b9b      	ldr	r3, [pc, #620]	; (800e250 <_dtoa_r+0x618>)
 800dfe4:	f006 020f 	and.w	r2, r6, #15
 800dfe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	ec51 0b19 	vmov	r0, r1, d9
 800dff4:	f7f2 fb00 	bl	80005f8 <__aeabi_dmul>
 800dff8:	1136      	asrs	r6, r6, #4
 800dffa:	4682      	mov	sl, r0
 800dffc:	468b      	mov	fp, r1
 800dffe:	2300      	movs	r3, #0
 800e000:	2502      	movs	r5, #2
 800e002:	2e00      	cmp	r6, #0
 800e004:	d17a      	bne.n	800e0fc <_dtoa_r+0x4c4>
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1d3      	bne.n	800dfb2 <_dtoa_r+0x37a>
 800e00a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8082 	beq.w	800e116 <_dtoa_r+0x4de>
 800e012:	4b91      	ldr	r3, [pc, #580]	; (800e258 <_dtoa_r+0x620>)
 800e014:	2200      	movs	r2, #0
 800e016:	4650      	mov	r0, sl
 800e018:	4659      	mov	r1, fp
 800e01a:	f7f2 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	d079      	beq.n	800e116 <_dtoa_r+0x4de>
 800e022:	9b03      	ldr	r3, [sp, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d076      	beq.n	800e116 <_dtoa_r+0x4de>
 800e028:	9b02      	ldr	r3, [sp, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	dd36      	ble.n	800e09c <_dtoa_r+0x464>
 800e02e:	9b00      	ldr	r3, [sp, #0]
 800e030:	4650      	mov	r0, sl
 800e032:	4659      	mov	r1, fp
 800e034:	1e5f      	subs	r7, r3, #1
 800e036:	2200      	movs	r2, #0
 800e038:	4b88      	ldr	r3, [pc, #544]	; (800e25c <_dtoa_r+0x624>)
 800e03a:	f7f2 fadd 	bl	80005f8 <__aeabi_dmul>
 800e03e:	9e02      	ldr	r6, [sp, #8]
 800e040:	4682      	mov	sl, r0
 800e042:	468b      	mov	fp, r1
 800e044:	3501      	adds	r5, #1
 800e046:	4628      	mov	r0, r5
 800e048:	f7f2 fa6c 	bl	8000524 <__aeabi_i2d>
 800e04c:	4652      	mov	r2, sl
 800e04e:	465b      	mov	r3, fp
 800e050:	f7f2 fad2 	bl	80005f8 <__aeabi_dmul>
 800e054:	4b82      	ldr	r3, [pc, #520]	; (800e260 <_dtoa_r+0x628>)
 800e056:	2200      	movs	r2, #0
 800e058:	f7f2 f918 	bl	800028c <__adddf3>
 800e05c:	46d0      	mov	r8, sl
 800e05e:	46d9      	mov	r9, fp
 800e060:	4682      	mov	sl, r0
 800e062:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e066:	2e00      	cmp	r6, #0
 800e068:	d158      	bne.n	800e11c <_dtoa_r+0x4e4>
 800e06a:	4b7e      	ldr	r3, [pc, #504]	; (800e264 <_dtoa_r+0x62c>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	4640      	mov	r0, r8
 800e070:	4649      	mov	r1, r9
 800e072:	f7f2 f909 	bl	8000288 <__aeabi_dsub>
 800e076:	4652      	mov	r2, sl
 800e078:	465b      	mov	r3, fp
 800e07a:	4680      	mov	r8, r0
 800e07c:	4689      	mov	r9, r1
 800e07e:	f7f2 fd4b 	bl	8000b18 <__aeabi_dcmpgt>
 800e082:	2800      	cmp	r0, #0
 800e084:	f040 8295 	bne.w	800e5b2 <_dtoa_r+0x97a>
 800e088:	4652      	mov	r2, sl
 800e08a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e08e:	4640      	mov	r0, r8
 800e090:	4649      	mov	r1, r9
 800e092:	f7f2 fd23 	bl	8000adc <__aeabi_dcmplt>
 800e096:	2800      	cmp	r0, #0
 800e098:	f040 8289 	bne.w	800e5ae <_dtoa_r+0x976>
 800e09c:	ec5b ab19 	vmov	sl, fp, d9
 800e0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f2c0 8148 	blt.w	800e338 <_dtoa_r+0x700>
 800e0a8:	9a00      	ldr	r2, [sp, #0]
 800e0aa:	2a0e      	cmp	r2, #14
 800e0ac:	f300 8144 	bgt.w	800e338 <_dtoa_r+0x700>
 800e0b0:	4b67      	ldr	r3, [pc, #412]	; (800e250 <_dtoa_r+0x618>)
 800e0b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f280 80d5 	bge.w	800e26c <_dtoa_r+0x634>
 800e0c2:	9b03      	ldr	r3, [sp, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f300 80d1 	bgt.w	800e26c <_dtoa_r+0x634>
 800e0ca:	f040 826f 	bne.w	800e5ac <_dtoa_r+0x974>
 800e0ce:	4b65      	ldr	r3, [pc, #404]	; (800e264 <_dtoa_r+0x62c>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	f7f2 fa8f 	bl	80005f8 <__aeabi_dmul>
 800e0da:	4652      	mov	r2, sl
 800e0dc:	465b      	mov	r3, fp
 800e0de:	f7f2 fd11 	bl	8000b04 <__aeabi_dcmpge>
 800e0e2:	9e03      	ldr	r6, [sp, #12]
 800e0e4:	4637      	mov	r7, r6
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	f040 8245 	bne.w	800e576 <_dtoa_r+0x93e>
 800e0ec:	9d01      	ldr	r5, [sp, #4]
 800e0ee:	2331      	movs	r3, #49	; 0x31
 800e0f0:	f805 3b01 	strb.w	r3, [r5], #1
 800e0f4:	9b00      	ldr	r3, [sp, #0]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	e240      	b.n	800e57e <_dtoa_r+0x946>
 800e0fc:	07f2      	lsls	r2, r6, #31
 800e0fe:	d505      	bpl.n	800e10c <_dtoa_r+0x4d4>
 800e100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e104:	f7f2 fa78 	bl	80005f8 <__aeabi_dmul>
 800e108:	3501      	adds	r5, #1
 800e10a:	2301      	movs	r3, #1
 800e10c:	1076      	asrs	r6, r6, #1
 800e10e:	3708      	adds	r7, #8
 800e110:	e777      	b.n	800e002 <_dtoa_r+0x3ca>
 800e112:	2502      	movs	r5, #2
 800e114:	e779      	b.n	800e00a <_dtoa_r+0x3d2>
 800e116:	9f00      	ldr	r7, [sp, #0]
 800e118:	9e03      	ldr	r6, [sp, #12]
 800e11a:	e794      	b.n	800e046 <_dtoa_r+0x40e>
 800e11c:	9901      	ldr	r1, [sp, #4]
 800e11e:	4b4c      	ldr	r3, [pc, #304]	; (800e250 <_dtoa_r+0x618>)
 800e120:	4431      	add	r1, r6
 800e122:	910d      	str	r1, [sp, #52]	; 0x34
 800e124:	9908      	ldr	r1, [sp, #32]
 800e126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e12a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e12e:	2900      	cmp	r1, #0
 800e130:	d043      	beq.n	800e1ba <_dtoa_r+0x582>
 800e132:	494d      	ldr	r1, [pc, #308]	; (800e268 <_dtoa_r+0x630>)
 800e134:	2000      	movs	r0, #0
 800e136:	f7f2 fb89 	bl	800084c <__aeabi_ddiv>
 800e13a:	4652      	mov	r2, sl
 800e13c:	465b      	mov	r3, fp
 800e13e:	f7f2 f8a3 	bl	8000288 <__aeabi_dsub>
 800e142:	9d01      	ldr	r5, [sp, #4]
 800e144:	4682      	mov	sl, r0
 800e146:	468b      	mov	fp, r1
 800e148:	4649      	mov	r1, r9
 800e14a:	4640      	mov	r0, r8
 800e14c:	f7f2 fd04 	bl	8000b58 <__aeabi_d2iz>
 800e150:	4606      	mov	r6, r0
 800e152:	f7f2 f9e7 	bl	8000524 <__aeabi_i2d>
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	4640      	mov	r0, r8
 800e15c:	4649      	mov	r1, r9
 800e15e:	f7f2 f893 	bl	8000288 <__aeabi_dsub>
 800e162:	3630      	adds	r6, #48	; 0x30
 800e164:	f805 6b01 	strb.w	r6, [r5], #1
 800e168:	4652      	mov	r2, sl
 800e16a:	465b      	mov	r3, fp
 800e16c:	4680      	mov	r8, r0
 800e16e:	4689      	mov	r9, r1
 800e170:	f7f2 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800e174:	2800      	cmp	r0, #0
 800e176:	d163      	bne.n	800e240 <_dtoa_r+0x608>
 800e178:	4642      	mov	r2, r8
 800e17a:	464b      	mov	r3, r9
 800e17c:	4936      	ldr	r1, [pc, #216]	; (800e258 <_dtoa_r+0x620>)
 800e17e:	2000      	movs	r0, #0
 800e180:	f7f2 f882 	bl	8000288 <__aeabi_dsub>
 800e184:	4652      	mov	r2, sl
 800e186:	465b      	mov	r3, fp
 800e188:	f7f2 fca8 	bl	8000adc <__aeabi_dcmplt>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f040 80b5 	bne.w	800e2fc <_dtoa_r+0x6c4>
 800e192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e194:	429d      	cmp	r5, r3
 800e196:	d081      	beq.n	800e09c <_dtoa_r+0x464>
 800e198:	4b30      	ldr	r3, [pc, #192]	; (800e25c <_dtoa_r+0x624>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	4650      	mov	r0, sl
 800e19e:	4659      	mov	r1, fp
 800e1a0:	f7f2 fa2a 	bl	80005f8 <__aeabi_dmul>
 800e1a4:	4b2d      	ldr	r3, [pc, #180]	; (800e25c <_dtoa_r+0x624>)
 800e1a6:	4682      	mov	sl, r0
 800e1a8:	468b      	mov	fp, r1
 800e1aa:	4640      	mov	r0, r8
 800e1ac:	4649      	mov	r1, r9
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f7f2 fa22 	bl	80005f8 <__aeabi_dmul>
 800e1b4:	4680      	mov	r8, r0
 800e1b6:	4689      	mov	r9, r1
 800e1b8:	e7c6      	b.n	800e148 <_dtoa_r+0x510>
 800e1ba:	4650      	mov	r0, sl
 800e1bc:	4659      	mov	r1, fp
 800e1be:	f7f2 fa1b 	bl	80005f8 <__aeabi_dmul>
 800e1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1c4:	9d01      	ldr	r5, [sp, #4]
 800e1c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1c8:	4682      	mov	sl, r0
 800e1ca:	468b      	mov	fp, r1
 800e1cc:	4649      	mov	r1, r9
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	f7f2 fcc2 	bl	8000b58 <__aeabi_d2iz>
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	f7f2 f9a5 	bl	8000524 <__aeabi_i2d>
 800e1da:	3630      	adds	r6, #48	; 0x30
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4640      	mov	r0, r8
 800e1e2:	4649      	mov	r1, r9
 800e1e4:	f7f2 f850 	bl	8000288 <__aeabi_dsub>
 800e1e8:	f805 6b01 	strb.w	r6, [r5], #1
 800e1ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1ee:	429d      	cmp	r5, r3
 800e1f0:	4680      	mov	r8, r0
 800e1f2:	4689      	mov	r9, r1
 800e1f4:	f04f 0200 	mov.w	r2, #0
 800e1f8:	d124      	bne.n	800e244 <_dtoa_r+0x60c>
 800e1fa:	4b1b      	ldr	r3, [pc, #108]	; (800e268 <_dtoa_r+0x630>)
 800e1fc:	4650      	mov	r0, sl
 800e1fe:	4659      	mov	r1, fp
 800e200:	f7f2 f844 	bl	800028c <__adddf3>
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	4640      	mov	r0, r8
 800e20a:	4649      	mov	r1, r9
 800e20c:	f7f2 fc84 	bl	8000b18 <__aeabi_dcmpgt>
 800e210:	2800      	cmp	r0, #0
 800e212:	d173      	bne.n	800e2fc <_dtoa_r+0x6c4>
 800e214:	4652      	mov	r2, sl
 800e216:	465b      	mov	r3, fp
 800e218:	4913      	ldr	r1, [pc, #76]	; (800e268 <_dtoa_r+0x630>)
 800e21a:	2000      	movs	r0, #0
 800e21c:	f7f2 f834 	bl	8000288 <__aeabi_dsub>
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	4640      	mov	r0, r8
 800e226:	4649      	mov	r1, r9
 800e228:	f7f2 fc58 	bl	8000adc <__aeabi_dcmplt>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f43f af35 	beq.w	800e09c <_dtoa_r+0x464>
 800e232:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e234:	1e6b      	subs	r3, r5, #1
 800e236:	930f      	str	r3, [sp, #60]	; 0x3c
 800e238:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e23c:	2b30      	cmp	r3, #48	; 0x30
 800e23e:	d0f8      	beq.n	800e232 <_dtoa_r+0x5fa>
 800e240:	9700      	str	r7, [sp, #0]
 800e242:	e049      	b.n	800e2d8 <_dtoa_r+0x6a0>
 800e244:	4b05      	ldr	r3, [pc, #20]	; (800e25c <_dtoa_r+0x624>)
 800e246:	f7f2 f9d7 	bl	80005f8 <__aeabi_dmul>
 800e24a:	4680      	mov	r8, r0
 800e24c:	4689      	mov	r9, r1
 800e24e:	e7bd      	b.n	800e1cc <_dtoa_r+0x594>
 800e250:	08010ba8 	.word	0x08010ba8
 800e254:	08010b80 	.word	0x08010b80
 800e258:	3ff00000 	.word	0x3ff00000
 800e25c:	40240000 	.word	0x40240000
 800e260:	401c0000 	.word	0x401c0000
 800e264:	40140000 	.word	0x40140000
 800e268:	3fe00000 	.word	0x3fe00000
 800e26c:	9d01      	ldr	r5, [sp, #4]
 800e26e:	4656      	mov	r6, sl
 800e270:	465f      	mov	r7, fp
 800e272:	4642      	mov	r2, r8
 800e274:	464b      	mov	r3, r9
 800e276:	4630      	mov	r0, r6
 800e278:	4639      	mov	r1, r7
 800e27a:	f7f2 fae7 	bl	800084c <__aeabi_ddiv>
 800e27e:	f7f2 fc6b 	bl	8000b58 <__aeabi_d2iz>
 800e282:	4682      	mov	sl, r0
 800e284:	f7f2 f94e 	bl	8000524 <__aeabi_i2d>
 800e288:	4642      	mov	r2, r8
 800e28a:	464b      	mov	r3, r9
 800e28c:	f7f2 f9b4 	bl	80005f8 <__aeabi_dmul>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4630      	mov	r0, r6
 800e296:	4639      	mov	r1, r7
 800e298:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	f805 6b01 	strb.w	r6, [r5], #1
 800e2a4:	9e01      	ldr	r6, [sp, #4]
 800e2a6:	9f03      	ldr	r7, [sp, #12]
 800e2a8:	1bae      	subs	r6, r5, r6
 800e2aa:	42b7      	cmp	r7, r6
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	d135      	bne.n	800e31e <_dtoa_r+0x6e6>
 800e2b2:	f7f1 ffeb 	bl	800028c <__adddf3>
 800e2b6:	4642      	mov	r2, r8
 800e2b8:	464b      	mov	r3, r9
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	460f      	mov	r7, r1
 800e2be:	f7f2 fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 800e2c2:	b9d0      	cbnz	r0, 800e2fa <_dtoa_r+0x6c2>
 800e2c4:	4642      	mov	r2, r8
 800e2c6:	464b      	mov	r3, r9
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f2 fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2d0:	b110      	cbz	r0, 800e2d8 <_dtoa_r+0x6a0>
 800e2d2:	f01a 0f01 	tst.w	sl, #1
 800e2d6:	d110      	bne.n	800e2fa <_dtoa_r+0x6c2>
 800e2d8:	4620      	mov	r0, r4
 800e2da:	ee18 1a10 	vmov	r1, s16
 800e2de:	f001 f889 	bl	800f3f4 <_Bfree>
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	9800      	ldr	r0, [sp, #0]
 800e2e6:	702b      	strb	r3, [r5, #0]
 800e2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	6018      	str	r0, [r3, #0]
 800e2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f43f acf1 	beq.w	800dcd8 <_dtoa_r+0xa0>
 800e2f6:	601d      	str	r5, [r3, #0]
 800e2f8:	e4ee      	b.n	800dcd8 <_dtoa_r+0xa0>
 800e2fa:	9f00      	ldr	r7, [sp, #0]
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	461d      	mov	r5, r3
 800e300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e304:	2a39      	cmp	r2, #57	; 0x39
 800e306:	d106      	bne.n	800e316 <_dtoa_r+0x6de>
 800e308:	9a01      	ldr	r2, [sp, #4]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d1f7      	bne.n	800e2fe <_dtoa_r+0x6c6>
 800e30e:	9901      	ldr	r1, [sp, #4]
 800e310:	2230      	movs	r2, #48	; 0x30
 800e312:	3701      	adds	r7, #1
 800e314:	700a      	strb	r2, [r1, #0]
 800e316:	781a      	ldrb	r2, [r3, #0]
 800e318:	3201      	adds	r2, #1
 800e31a:	701a      	strb	r2, [r3, #0]
 800e31c:	e790      	b.n	800e240 <_dtoa_r+0x608>
 800e31e:	4ba6      	ldr	r3, [pc, #664]	; (800e5b8 <_dtoa_r+0x980>)
 800e320:	2200      	movs	r2, #0
 800e322:	f7f2 f969 	bl	80005f8 <__aeabi_dmul>
 800e326:	2200      	movs	r2, #0
 800e328:	2300      	movs	r3, #0
 800e32a:	4606      	mov	r6, r0
 800e32c:	460f      	mov	r7, r1
 800e32e:	f7f2 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e332:	2800      	cmp	r0, #0
 800e334:	d09d      	beq.n	800e272 <_dtoa_r+0x63a>
 800e336:	e7cf      	b.n	800e2d8 <_dtoa_r+0x6a0>
 800e338:	9a08      	ldr	r2, [sp, #32]
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	f000 80d7 	beq.w	800e4ee <_dtoa_r+0x8b6>
 800e340:	9a06      	ldr	r2, [sp, #24]
 800e342:	2a01      	cmp	r2, #1
 800e344:	f300 80ba 	bgt.w	800e4bc <_dtoa_r+0x884>
 800e348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e34a:	2a00      	cmp	r2, #0
 800e34c:	f000 80b2 	beq.w	800e4b4 <_dtoa_r+0x87c>
 800e350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e354:	9e07      	ldr	r6, [sp, #28]
 800e356:	9d04      	ldr	r5, [sp, #16]
 800e358:	9a04      	ldr	r2, [sp, #16]
 800e35a:	441a      	add	r2, r3
 800e35c:	9204      	str	r2, [sp, #16]
 800e35e:	9a05      	ldr	r2, [sp, #20]
 800e360:	2101      	movs	r1, #1
 800e362:	441a      	add	r2, r3
 800e364:	4620      	mov	r0, r4
 800e366:	9205      	str	r2, [sp, #20]
 800e368:	f001 f946 	bl	800f5f8 <__i2b>
 800e36c:	4607      	mov	r7, r0
 800e36e:	2d00      	cmp	r5, #0
 800e370:	dd0c      	ble.n	800e38c <_dtoa_r+0x754>
 800e372:	9b05      	ldr	r3, [sp, #20]
 800e374:	2b00      	cmp	r3, #0
 800e376:	dd09      	ble.n	800e38c <_dtoa_r+0x754>
 800e378:	42ab      	cmp	r3, r5
 800e37a:	9a04      	ldr	r2, [sp, #16]
 800e37c:	bfa8      	it	ge
 800e37e:	462b      	movge	r3, r5
 800e380:	1ad2      	subs	r2, r2, r3
 800e382:	9204      	str	r2, [sp, #16]
 800e384:	9a05      	ldr	r2, [sp, #20]
 800e386:	1aed      	subs	r5, r5, r3
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	9305      	str	r3, [sp, #20]
 800e38c:	9b07      	ldr	r3, [sp, #28]
 800e38e:	b31b      	cbz	r3, 800e3d8 <_dtoa_r+0x7a0>
 800e390:	9b08      	ldr	r3, [sp, #32]
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 80af 	beq.w	800e4f6 <_dtoa_r+0x8be>
 800e398:	2e00      	cmp	r6, #0
 800e39a:	dd13      	ble.n	800e3c4 <_dtoa_r+0x78c>
 800e39c:	4639      	mov	r1, r7
 800e39e:	4632      	mov	r2, r6
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f001 f9e9 	bl	800f778 <__pow5mult>
 800e3a6:	ee18 2a10 	vmov	r2, s16
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f001 f938 	bl	800f624 <__multiply>
 800e3b4:	ee18 1a10 	vmov	r1, s16
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f001 f81a 	bl	800f3f4 <_Bfree>
 800e3c0:	ee08 8a10 	vmov	s16, r8
 800e3c4:	9b07      	ldr	r3, [sp, #28]
 800e3c6:	1b9a      	subs	r2, r3, r6
 800e3c8:	d006      	beq.n	800e3d8 <_dtoa_r+0x7a0>
 800e3ca:	ee18 1a10 	vmov	r1, s16
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f001 f9d2 	bl	800f778 <__pow5mult>
 800e3d4:	ee08 0a10 	vmov	s16, r0
 800e3d8:	2101      	movs	r1, #1
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f001 f90c 	bl	800f5f8 <__i2b>
 800e3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	f340 8088 	ble.w	800e4fa <_dtoa_r+0x8c2>
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4601      	mov	r1, r0
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f001 f9c2 	bl	800f778 <__pow5mult>
 800e3f4:	9b06      	ldr	r3, [sp, #24]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	4606      	mov	r6, r0
 800e3fa:	f340 8081 	ble.w	800e500 <_dtoa_r+0x8c8>
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	6933      	ldr	r3, [r6, #16]
 800e404:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e408:	6918      	ldr	r0, [r3, #16]
 800e40a:	f001 f8a5 	bl	800f558 <__hi0bits>
 800e40e:	f1c0 0020 	rsb	r0, r0, #32
 800e412:	9b05      	ldr	r3, [sp, #20]
 800e414:	4418      	add	r0, r3
 800e416:	f010 001f 	ands.w	r0, r0, #31
 800e41a:	f000 8092 	beq.w	800e542 <_dtoa_r+0x90a>
 800e41e:	f1c0 0320 	rsb	r3, r0, #32
 800e422:	2b04      	cmp	r3, #4
 800e424:	f340 808a 	ble.w	800e53c <_dtoa_r+0x904>
 800e428:	f1c0 001c 	rsb	r0, r0, #28
 800e42c:	9b04      	ldr	r3, [sp, #16]
 800e42e:	4403      	add	r3, r0
 800e430:	9304      	str	r3, [sp, #16]
 800e432:	9b05      	ldr	r3, [sp, #20]
 800e434:	4403      	add	r3, r0
 800e436:	4405      	add	r5, r0
 800e438:	9305      	str	r3, [sp, #20]
 800e43a:	9b04      	ldr	r3, [sp, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	dd07      	ble.n	800e450 <_dtoa_r+0x818>
 800e440:	ee18 1a10 	vmov	r1, s16
 800e444:	461a      	mov	r2, r3
 800e446:	4620      	mov	r0, r4
 800e448:	f001 f9f0 	bl	800f82c <__lshift>
 800e44c:	ee08 0a10 	vmov	s16, r0
 800e450:	9b05      	ldr	r3, [sp, #20]
 800e452:	2b00      	cmp	r3, #0
 800e454:	dd05      	ble.n	800e462 <_dtoa_r+0x82a>
 800e456:	4631      	mov	r1, r6
 800e458:	461a      	mov	r2, r3
 800e45a:	4620      	mov	r0, r4
 800e45c:	f001 f9e6 	bl	800f82c <__lshift>
 800e460:	4606      	mov	r6, r0
 800e462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e464:	2b00      	cmp	r3, #0
 800e466:	d06e      	beq.n	800e546 <_dtoa_r+0x90e>
 800e468:	ee18 0a10 	vmov	r0, s16
 800e46c:	4631      	mov	r1, r6
 800e46e:	f001 fa4d 	bl	800f90c <__mcmp>
 800e472:	2800      	cmp	r0, #0
 800e474:	da67      	bge.n	800e546 <_dtoa_r+0x90e>
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	3b01      	subs	r3, #1
 800e47a:	ee18 1a10 	vmov	r1, s16
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	220a      	movs	r2, #10
 800e482:	2300      	movs	r3, #0
 800e484:	4620      	mov	r0, r4
 800e486:	f000 ffd7 	bl	800f438 <__multadd>
 800e48a:	9b08      	ldr	r3, [sp, #32]
 800e48c:	ee08 0a10 	vmov	s16, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 81b1 	beq.w	800e7f8 <_dtoa_r+0xbc0>
 800e496:	2300      	movs	r3, #0
 800e498:	4639      	mov	r1, r7
 800e49a:	220a      	movs	r2, #10
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 ffcb 	bl	800f438 <__multadd>
 800e4a2:	9b02      	ldr	r3, [sp, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	4607      	mov	r7, r0
 800e4a8:	f300 808e 	bgt.w	800e5c8 <_dtoa_r+0x990>
 800e4ac:	9b06      	ldr	r3, [sp, #24]
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	dc51      	bgt.n	800e556 <_dtoa_r+0x91e>
 800e4b2:	e089      	b.n	800e5c8 <_dtoa_r+0x990>
 800e4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e4ba:	e74b      	b.n	800e354 <_dtoa_r+0x71c>
 800e4bc:	9b03      	ldr	r3, [sp, #12]
 800e4be:	1e5e      	subs	r6, r3, #1
 800e4c0:	9b07      	ldr	r3, [sp, #28]
 800e4c2:	42b3      	cmp	r3, r6
 800e4c4:	bfbf      	itttt	lt
 800e4c6:	9b07      	ldrlt	r3, [sp, #28]
 800e4c8:	9607      	strlt	r6, [sp, #28]
 800e4ca:	1af2      	sublt	r2, r6, r3
 800e4cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e4ce:	bfb6      	itet	lt
 800e4d0:	189b      	addlt	r3, r3, r2
 800e4d2:	1b9e      	subge	r6, r3, r6
 800e4d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e4d6:	9b03      	ldr	r3, [sp, #12]
 800e4d8:	bfb8      	it	lt
 800e4da:	2600      	movlt	r6, #0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	bfb7      	itett	lt
 800e4e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e4e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e4e8:	1a9d      	sublt	r5, r3, r2
 800e4ea:	2300      	movlt	r3, #0
 800e4ec:	e734      	b.n	800e358 <_dtoa_r+0x720>
 800e4ee:	9e07      	ldr	r6, [sp, #28]
 800e4f0:	9d04      	ldr	r5, [sp, #16]
 800e4f2:	9f08      	ldr	r7, [sp, #32]
 800e4f4:	e73b      	b.n	800e36e <_dtoa_r+0x736>
 800e4f6:	9a07      	ldr	r2, [sp, #28]
 800e4f8:	e767      	b.n	800e3ca <_dtoa_r+0x792>
 800e4fa:	9b06      	ldr	r3, [sp, #24]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	dc18      	bgt.n	800e532 <_dtoa_r+0x8fa>
 800e500:	f1ba 0f00 	cmp.w	sl, #0
 800e504:	d115      	bne.n	800e532 <_dtoa_r+0x8fa>
 800e506:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e50a:	b993      	cbnz	r3, 800e532 <_dtoa_r+0x8fa>
 800e50c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e510:	0d1b      	lsrs	r3, r3, #20
 800e512:	051b      	lsls	r3, r3, #20
 800e514:	b183      	cbz	r3, 800e538 <_dtoa_r+0x900>
 800e516:	9b04      	ldr	r3, [sp, #16]
 800e518:	3301      	adds	r3, #1
 800e51a:	9304      	str	r3, [sp, #16]
 800e51c:	9b05      	ldr	r3, [sp, #20]
 800e51e:	3301      	adds	r3, #1
 800e520:	9305      	str	r3, [sp, #20]
 800e522:	f04f 0801 	mov.w	r8, #1
 800e526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f47f af6a 	bne.w	800e402 <_dtoa_r+0x7ca>
 800e52e:	2001      	movs	r0, #1
 800e530:	e76f      	b.n	800e412 <_dtoa_r+0x7da>
 800e532:	f04f 0800 	mov.w	r8, #0
 800e536:	e7f6      	b.n	800e526 <_dtoa_r+0x8ee>
 800e538:	4698      	mov	r8, r3
 800e53a:	e7f4      	b.n	800e526 <_dtoa_r+0x8ee>
 800e53c:	f43f af7d 	beq.w	800e43a <_dtoa_r+0x802>
 800e540:	4618      	mov	r0, r3
 800e542:	301c      	adds	r0, #28
 800e544:	e772      	b.n	800e42c <_dtoa_r+0x7f4>
 800e546:	9b03      	ldr	r3, [sp, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	dc37      	bgt.n	800e5bc <_dtoa_r+0x984>
 800e54c:	9b06      	ldr	r3, [sp, #24]
 800e54e:	2b02      	cmp	r3, #2
 800e550:	dd34      	ble.n	800e5bc <_dtoa_r+0x984>
 800e552:	9b03      	ldr	r3, [sp, #12]
 800e554:	9302      	str	r3, [sp, #8]
 800e556:	9b02      	ldr	r3, [sp, #8]
 800e558:	b96b      	cbnz	r3, 800e576 <_dtoa_r+0x93e>
 800e55a:	4631      	mov	r1, r6
 800e55c:	2205      	movs	r2, #5
 800e55e:	4620      	mov	r0, r4
 800e560:	f000 ff6a 	bl	800f438 <__multadd>
 800e564:	4601      	mov	r1, r0
 800e566:	4606      	mov	r6, r0
 800e568:	ee18 0a10 	vmov	r0, s16
 800e56c:	f001 f9ce 	bl	800f90c <__mcmp>
 800e570:	2800      	cmp	r0, #0
 800e572:	f73f adbb 	bgt.w	800e0ec <_dtoa_r+0x4b4>
 800e576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e578:	9d01      	ldr	r5, [sp, #4]
 800e57a:	43db      	mvns	r3, r3
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	f04f 0800 	mov.w	r8, #0
 800e582:	4631      	mov	r1, r6
 800e584:	4620      	mov	r0, r4
 800e586:	f000 ff35 	bl	800f3f4 <_Bfree>
 800e58a:	2f00      	cmp	r7, #0
 800e58c:	f43f aea4 	beq.w	800e2d8 <_dtoa_r+0x6a0>
 800e590:	f1b8 0f00 	cmp.w	r8, #0
 800e594:	d005      	beq.n	800e5a2 <_dtoa_r+0x96a>
 800e596:	45b8      	cmp	r8, r7
 800e598:	d003      	beq.n	800e5a2 <_dtoa_r+0x96a>
 800e59a:	4641      	mov	r1, r8
 800e59c:	4620      	mov	r0, r4
 800e59e:	f000 ff29 	bl	800f3f4 <_Bfree>
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f000 ff25 	bl	800f3f4 <_Bfree>
 800e5aa:	e695      	b.n	800e2d8 <_dtoa_r+0x6a0>
 800e5ac:	2600      	movs	r6, #0
 800e5ae:	4637      	mov	r7, r6
 800e5b0:	e7e1      	b.n	800e576 <_dtoa_r+0x93e>
 800e5b2:	9700      	str	r7, [sp, #0]
 800e5b4:	4637      	mov	r7, r6
 800e5b6:	e599      	b.n	800e0ec <_dtoa_r+0x4b4>
 800e5b8:	40240000 	.word	0x40240000
 800e5bc:	9b08      	ldr	r3, [sp, #32]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f000 80ca 	beq.w	800e758 <_dtoa_r+0xb20>
 800e5c4:	9b03      	ldr	r3, [sp, #12]
 800e5c6:	9302      	str	r3, [sp, #8]
 800e5c8:	2d00      	cmp	r5, #0
 800e5ca:	dd05      	ble.n	800e5d8 <_dtoa_r+0x9a0>
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	462a      	mov	r2, r5
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f001 f92b 	bl	800f82c <__lshift>
 800e5d6:	4607      	mov	r7, r0
 800e5d8:	f1b8 0f00 	cmp.w	r8, #0
 800e5dc:	d05b      	beq.n	800e696 <_dtoa_r+0xa5e>
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f000 fec7 	bl	800f374 <_Balloc>
 800e5e6:	4605      	mov	r5, r0
 800e5e8:	b928      	cbnz	r0, 800e5f6 <_dtoa_r+0x9be>
 800e5ea:	4b87      	ldr	r3, [pc, #540]	; (800e808 <_dtoa_r+0xbd0>)
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e5f2:	f7ff bb3b 	b.w	800dc6c <_dtoa_r+0x34>
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	3202      	adds	r2, #2
 800e5fa:	0092      	lsls	r2, r2, #2
 800e5fc:	f107 010c 	add.w	r1, r7, #12
 800e600:	300c      	adds	r0, #12
 800e602:	f7fd fa75 	bl	800baf0 <memcpy>
 800e606:	2201      	movs	r2, #1
 800e608:	4629      	mov	r1, r5
 800e60a:	4620      	mov	r0, r4
 800e60c:	f001 f90e 	bl	800f82c <__lshift>
 800e610:	9b01      	ldr	r3, [sp, #4]
 800e612:	f103 0901 	add.w	r9, r3, #1
 800e616:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e61a:	4413      	add	r3, r2
 800e61c:	9305      	str	r3, [sp, #20]
 800e61e:	f00a 0301 	and.w	r3, sl, #1
 800e622:	46b8      	mov	r8, r7
 800e624:	9304      	str	r3, [sp, #16]
 800e626:	4607      	mov	r7, r0
 800e628:	4631      	mov	r1, r6
 800e62a:	ee18 0a10 	vmov	r0, s16
 800e62e:	f7ff fa77 	bl	800db20 <quorem>
 800e632:	4641      	mov	r1, r8
 800e634:	9002      	str	r0, [sp, #8]
 800e636:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e63a:	ee18 0a10 	vmov	r0, s16
 800e63e:	f001 f965 	bl	800f90c <__mcmp>
 800e642:	463a      	mov	r2, r7
 800e644:	9003      	str	r0, [sp, #12]
 800e646:	4631      	mov	r1, r6
 800e648:	4620      	mov	r0, r4
 800e64a:	f001 f97b 	bl	800f944 <__mdiff>
 800e64e:	68c2      	ldr	r2, [r0, #12]
 800e650:	f109 3bff 	add.w	fp, r9, #4294967295
 800e654:	4605      	mov	r5, r0
 800e656:	bb02      	cbnz	r2, 800e69a <_dtoa_r+0xa62>
 800e658:	4601      	mov	r1, r0
 800e65a:	ee18 0a10 	vmov	r0, s16
 800e65e:	f001 f955 	bl	800f90c <__mcmp>
 800e662:	4602      	mov	r2, r0
 800e664:	4629      	mov	r1, r5
 800e666:	4620      	mov	r0, r4
 800e668:	9207      	str	r2, [sp, #28]
 800e66a:	f000 fec3 	bl	800f3f4 <_Bfree>
 800e66e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e672:	ea43 0102 	orr.w	r1, r3, r2
 800e676:	9b04      	ldr	r3, [sp, #16]
 800e678:	430b      	orrs	r3, r1
 800e67a:	464d      	mov	r5, r9
 800e67c:	d10f      	bne.n	800e69e <_dtoa_r+0xa66>
 800e67e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e682:	d02a      	beq.n	800e6da <_dtoa_r+0xaa2>
 800e684:	9b03      	ldr	r3, [sp, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	dd02      	ble.n	800e690 <_dtoa_r+0xa58>
 800e68a:	9b02      	ldr	r3, [sp, #8]
 800e68c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e690:	f88b a000 	strb.w	sl, [fp]
 800e694:	e775      	b.n	800e582 <_dtoa_r+0x94a>
 800e696:	4638      	mov	r0, r7
 800e698:	e7ba      	b.n	800e610 <_dtoa_r+0x9d8>
 800e69a:	2201      	movs	r2, #1
 800e69c:	e7e2      	b.n	800e664 <_dtoa_r+0xa2c>
 800e69e:	9b03      	ldr	r3, [sp, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	db04      	blt.n	800e6ae <_dtoa_r+0xa76>
 800e6a4:	9906      	ldr	r1, [sp, #24]
 800e6a6:	430b      	orrs	r3, r1
 800e6a8:	9904      	ldr	r1, [sp, #16]
 800e6aa:	430b      	orrs	r3, r1
 800e6ac:	d122      	bne.n	800e6f4 <_dtoa_r+0xabc>
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	ddee      	ble.n	800e690 <_dtoa_r+0xa58>
 800e6b2:	ee18 1a10 	vmov	r1, s16
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f001 f8b7 	bl	800f82c <__lshift>
 800e6be:	4631      	mov	r1, r6
 800e6c0:	ee08 0a10 	vmov	s16, r0
 800e6c4:	f001 f922 	bl	800f90c <__mcmp>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	dc03      	bgt.n	800e6d4 <_dtoa_r+0xa9c>
 800e6cc:	d1e0      	bne.n	800e690 <_dtoa_r+0xa58>
 800e6ce:	f01a 0f01 	tst.w	sl, #1
 800e6d2:	d0dd      	beq.n	800e690 <_dtoa_r+0xa58>
 800e6d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e6d8:	d1d7      	bne.n	800e68a <_dtoa_r+0xa52>
 800e6da:	2339      	movs	r3, #57	; 0x39
 800e6dc:	f88b 3000 	strb.w	r3, [fp]
 800e6e0:	462b      	mov	r3, r5
 800e6e2:	461d      	mov	r5, r3
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e6ea:	2a39      	cmp	r2, #57	; 0x39
 800e6ec:	d071      	beq.n	800e7d2 <_dtoa_r+0xb9a>
 800e6ee:	3201      	adds	r2, #1
 800e6f0:	701a      	strb	r2, [r3, #0]
 800e6f2:	e746      	b.n	800e582 <_dtoa_r+0x94a>
 800e6f4:	2a00      	cmp	r2, #0
 800e6f6:	dd07      	ble.n	800e708 <_dtoa_r+0xad0>
 800e6f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e6fc:	d0ed      	beq.n	800e6da <_dtoa_r+0xaa2>
 800e6fe:	f10a 0301 	add.w	r3, sl, #1
 800e702:	f88b 3000 	strb.w	r3, [fp]
 800e706:	e73c      	b.n	800e582 <_dtoa_r+0x94a>
 800e708:	9b05      	ldr	r3, [sp, #20]
 800e70a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e70e:	4599      	cmp	r9, r3
 800e710:	d047      	beq.n	800e7a2 <_dtoa_r+0xb6a>
 800e712:	ee18 1a10 	vmov	r1, s16
 800e716:	2300      	movs	r3, #0
 800e718:	220a      	movs	r2, #10
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 fe8c 	bl	800f438 <__multadd>
 800e720:	45b8      	cmp	r8, r7
 800e722:	ee08 0a10 	vmov	s16, r0
 800e726:	f04f 0300 	mov.w	r3, #0
 800e72a:	f04f 020a 	mov.w	r2, #10
 800e72e:	4641      	mov	r1, r8
 800e730:	4620      	mov	r0, r4
 800e732:	d106      	bne.n	800e742 <_dtoa_r+0xb0a>
 800e734:	f000 fe80 	bl	800f438 <__multadd>
 800e738:	4680      	mov	r8, r0
 800e73a:	4607      	mov	r7, r0
 800e73c:	f109 0901 	add.w	r9, r9, #1
 800e740:	e772      	b.n	800e628 <_dtoa_r+0x9f0>
 800e742:	f000 fe79 	bl	800f438 <__multadd>
 800e746:	4639      	mov	r1, r7
 800e748:	4680      	mov	r8, r0
 800e74a:	2300      	movs	r3, #0
 800e74c:	220a      	movs	r2, #10
 800e74e:	4620      	mov	r0, r4
 800e750:	f000 fe72 	bl	800f438 <__multadd>
 800e754:	4607      	mov	r7, r0
 800e756:	e7f1      	b.n	800e73c <_dtoa_r+0xb04>
 800e758:	9b03      	ldr	r3, [sp, #12]
 800e75a:	9302      	str	r3, [sp, #8]
 800e75c:	9d01      	ldr	r5, [sp, #4]
 800e75e:	ee18 0a10 	vmov	r0, s16
 800e762:	4631      	mov	r1, r6
 800e764:	f7ff f9dc 	bl	800db20 <quorem>
 800e768:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e76c:	9b01      	ldr	r3, [sp, #4]
 800e76e:	f805 ab01 	strb.w	sl, [r5], #1
 800e772:	1aea      	subs	r2, r5, r3
 800e774:	9b02      	ldr	r3, [sp, #8]
 800e776:	4293      	cmp	r3, r2
 800e778:	dd09      	ble.n	800e78e <_dtoa_r+0xb56>
 800e77a:	ee18 1a10 	vmov	r1, s16
 800e77e:	2300      	movs	r3, #0
 800e780:	220a      	movs	r2, #10
 800e782:	4620      	mov	r0, r4
 800e784:	f000 fe58 	bl	800f438 <__multadd>
 800e788:	ee08 0a10 	vmov	s16, r0
 800e78c:	e7e7      	b.n	800e75e <_dtoa_r+0xb26>
 800e78e:	9b02      	ldr	r3, [sp, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	bfc8      	it	gt
 800e794:	461d      	movgt	r5, r3
 800e796:	9b01      	ldr	r3, [sp, #4]
 800e798:	bfd8      	it	le
 800e79a:	2501      	movle	r5, #1
 800e79c:	441d      	add	r5, r3
 800e79e:	f04f 0800 	mov.w	r8, #0
 800e7a2:	ee18 1a10 	vmov	r1, s16
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f001 f83f 	bl	800f82c <__lshift>
 800e7ae:	4631      	mov	r1, r6
 800e7b0:	ee08 0a10 	vmov	s16, r0
 800e7b4:	f001 f8aa 	bl	800f90c <__mcmp>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	dc91      	bgt.n	800e6e0 <_dtoa_r+0xaa8>
 800e7bc:	d102      	bne.n	800e7c4 <_dtoa_r+0xb8c>
 800e7be:	f01a 0f01 	tst.w	sl, #1
 800e7c2:	d18d      	bne.n	800e6e0 <_dtoa_r+0xaa8>
 800e7c4:	462b      	mov	r3, r5
 800e7c6:	461d      	mov	r5, r3
 800e7c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7cc:	2a30      	cmp	r2, #48	; 0x30
 800e7ce:	d0fa      	beq.n	800e7c6 <_dtoa_r+0xb8e>
 800e7d0:	e6d7      	b.n	800e582 <_dtoa_r+0x94a>
 800e7d2:	9a01      	ldr	r2, [sp, #4]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d184      	bne.n	800e6e2 <_dtoa_r+0xaaa>
 800e7d8:	9b00      	ldr	r3, [sp, #0]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	2331      	movs	r3, #49	; 0x31
 800e7e0:	7013      	strb	r3, [r2, #0]
 800e7e2:	e6ce      	b.n	800e582 <_dtoa_r+0x94a>
 800e7e4:	4b09      	ldr	r3, [pc, #36]	; (800e80c <_dtoa_r+0xbd4>)
 800e7e6:	f7ff ba95 	b.w	800dd14 <_dtoa_r+0xdc>
 800e7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f47f aa6e 	bne.w	800dcce <_dtoa_r+0x96>
 800e7f2:	4b07      	ldr	r3, [pc, #28]	; (800e810 <_dtoa_r+0xbd8>)
 800e7f4:	f7ff ba8e 	b.w	800dd14 <_dtoa_r+0xdc>
 800e7f8:	9b02      	ldr	r3, [sp, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	dcae      	bgt.n	800e75c <_dtoa_r+0xb24>
 800e7fe:	9b06      	ldr	r3, [sp, #24]
 800e800:	2b02      	cmp	r3, #2
 800e802:	f73f aea8 	bgt.w	800e556 <_dtoa_r+0x91e>
 800e806:	e7a9      	b.n	800e75c <_dtoa_r+0xb24>
 800e808:	08010a30 	.word	0x08010a30
 800e80c:	08010830 	.word	0x08010830
 800e810:	080109b1 	.word	0x080109b1

0800e814 <__sflush_r>:
 800e814:	898a      	ldrh	r2, [r1, #12]
 800e816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e81a:	4605      	mov	r5, r0
 800e81c:	0710      	lsls	r0, r2, #28
 800e81e:	460c      	mov	r4, r1
 800e820:	d458      	bmi.n	800e8d4 <__sflush_r+0xc0>
 800e822:	684b      	ldr	r3, [r1, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	dc05      	bgt.n	800e834 <__sflush_r+0x20>
 800e828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dc02      	bgt.n	800e834 <__sflush_r+0x20>
 800e82e:	2000      	movs	r0, #0
 800e830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e836:	2e00      	cmp	r6, #0
 800e838:	d0f9      	beq.n	800e82e <__sflush_r+0x1a>
 800e83a:	2300      	movs	r3, #0
 800e83c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e840:	682f      	ldr	r7, [r5, #0]
 800e842:	602b      	str	r3, [r5, #0]
 800e844:	d032      	beq.n	800e8ac <__sflush_r+0x98>
 800e846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	075a      	lsls	r2, r3, #29
 800e84c:	d505      	bpl.n	800e85a <__sflush_r+0x46>
 800e84e:	6863      	ldr	r3, [r4, #4]
 800e850:	1ac0      	subs	r0, r0, r3
 800e852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e854:	b10b      	cbz	r3, 800e85a <__sflush_r+0x46>
 800e856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e858:	1ac0      	subs	r0, r0, r3
 800e85a:	2300      	movs	r3, #0
 800e85c:	4602      	mov	r2, r0
 800e85e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	4628      	mov	r0, r5
 800e864:	47b0      	blx	r6
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	d106      	bne.n	800e87a <__sflush_r+0x66>
 800e86c:	6829      	ldr	r1, [r5, #0]
 800e86e:	291d      	cmp	r1, #29
 800e870:	d82c      	bhi.n	800e8cc <__sflush_r+0xb8>
 800e872:	4a2a      	ldr	r2, [pc, #168]	; (800e91c <__sflush_r+0x108>)
 800e874:	40ca      	lsrs	r2, r1
 800e876:	07d6      	lsls	r6, r2, #31
 800e878:	d528      	bpl.n	800e8cc <__sflush_r+0xb8>
 800e87a:	2200      	movs	r2, #0
 800e87c:	6062      	str	r2, [r4, #4]
 800e87e:	04d9      	lsls	r1, r3, #19
 800e880:	6922      	ldr	r2, [r4, #16]
 800e882:	6022      	str	r2, [r4, #0]
 800e884:	d504      	bpl.n	800e890 <__sflush_r+0x7c>
 800e886:	1c42      	adds	r2, r0, #1
 800e888:	d101      	bne.n	800e88e <__sflush_r+0x7a>
 800e88a:	682b      	ldr	r3, [r5, #0]
 800e88c:	b903      	cbnz	r3, 800e890 <__sflush_r+0x7c>
 800e88e:	6560      	str	r0, [r4, #84]	; 0x54
 800e890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e892:	602f      	str	r7, [r5, #0]
 800e894:	2900      	cmp	r1, #0
 800e896:	d0ca      	beq.n	800e82e <__sflush_r+0x1a>
 800e898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e89c:	4299      	cmp	r1, r3
 800e89e:	d002      	beq.n	800e8a6 <__sflush_r+0x92>
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f7fd f93b 	bl	800bb1c <_free_r>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	6360      	str	r0, [r4, #52]	; 0x34
 800e8aa:	e7c1      	b.n	800e830 <__sflush_r+0x1c>
 800e8ac:	6a21      	ldr	r1, [r4, #32]
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	47b0      	blx	r6
 800e8b4:	1c41      	adds	r1, r0, #1
 800e8b6:	d1c7      	bne.n	800e848 <__sflush_r+0x34>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d0c4      	beq.n	800e848 <__sflush_r+0x34>
 800e8be:	2b1d      	cmp	r3, #29
 800e8c0:	d001      	beq.n	800e8c6 <__sflush_r+0xb2>
 800e8c2:	2b16      	cmp	r3, #22
 800e8c4:	d101      	bne.n	800e8ca <__sflush_r+0xb6>
 800e8c6:	602f      	str	r7, [r5, #0]
 800e8c8:	e7b1      	b.n	800e82e <__sflush_r+0x1a>
 800e8ca:	89a3      	ldrh	r3, [r4, #12]
 800e8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d0:	81a3      	strh	r3, [r4, #12]
 800e8d2:	e7ad      	b.n	800e830 <__sflush_r+0x1c>
 800e8d4:	690f      	ldr	r7, [r1, #16]
 800e8d6:	2f00      	cmp	r7, #0
 800e8d8:	d0a9      	beq.n	800e82e <__sflush_r+0x1a>
 800e8da:	0793      	lsls	r3, r2, #30
 800e8dc:	680e      	ldr	r6, [r1, #0]
 800e8de:	bf08      	it	eq
 800e8e0:	694b      	ldreq	r3, [r1, #20]
 800e8e2:	600f      	str	r7, [r1, #0]
 800e8e4:	bf18      	it	ne
 800e8e6:	2300      	movne	r3, #0
 800e8e8:	eba6 0807 	sub.w	r8, r6, r7
 800e8ec:	608b      	str	r3, [r1, #8]
 800e8ee:	f1b8 0f00 	cmp.w	r8, #0
 800e8f2:	dd9c      	ble.n	800e82e <__sflush_r+0x1a>
 800e8f4:	6a21      	ldr	r1, [r4, #32]
 800e8f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8f8:	4643      	mov	r3, r8
 800e8fa:	463a      	mov	r2, r7
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	47b0      	blx	r6
 800e900:	2800      	cmp	r0, #0
 800e902:	dc06      	bgt.n	800e912 <__sflush_r+0xfe>
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90a:	81a3      	strh	r3, [r4, #12]
 800e90c:	f04f 30ff 	mov.w	r0, #4294967295
 800e910:	e78e      	b.n	800e830 <__sflush_r+0x1c>
 800e912:	4407      	add	r7, r0
 800e914:	eba8 0800 	sub.w	r8, r8, r0
 800e918:	e7e9      	b.n	800e8ee <__sflush_r+0xda>
 800e91a:	bf00      	nop
 800e91c:	20400001 	.word	0x20400001

0800e920 <_fflush_r>:
 800e920:	b538      	push	{r3, r4, r5, lr}
 800e922:	690b      	ldr	r3, [r1, #16]
 800e924:	4605      	mov	r5, r0
 800e926:	460c      	mov	r4, r1
 800e928:	b913      	cbnz	r3, 800e930 <_fflush_r+0x10>
 800e92a:	2500      	movs	r5, #0
 800e92c:	4628      	mov	r0, r5
 800e92e:	bd38      	pop	{r3, r4, r5, pc}
 800e930:	b118      	cbz	r0, 800e93a <_fflush_r+0x1a>
 800e932:	6983      	ldr	r3, [r0, #24]
 800e934:	b90b      	cbnz	r3, 800e93a <_fflush_r+0x1a>
 800e936:	f000 f887 	bl	800ea48 <__sinit>
 800e93a:	4b14      	ldr	r3, [pc, #80]	; (800e98c <_fflush_r+0x6c>)
 800e93c:	429c      	cmp	r4, r3
 800e93e:	d11b      	bne.n	800e978 <_fflush_r+0x58>
 800e940:	686c      	ldr	r4, [r5, #4]
 800e942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0ef      	beq.n	800e92a <_fflush_r+0xa>
 800e94a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e94c:	07d0      	lsls	r0, r2, #31
 800e94e:	d404      	bmi.n	800e95a <_fflush_r+0x3a>
 800e950:	0599      	lsls	r1, r3, #22
 800e952:	d402      	bmi.n	800e95a <_fflush_r+0x3a>
 800e954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e956:	f000 fc88 	bl	800f26a <__retarget_lock_acquire_recursive>
 800e95a:	4628      	mov	r0, r5
 800e95c:	4621      	mov	r1, r4
 800e95e:	f7ff ff59 	bl	800e814 <__sflush_r>
 800e962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e964:	07da      	lsls	r2, r3, #31
 800e966:	4605      	mov	r5, r0
 800e968:	d4e0      	bmi.n	800e92c <_fflush_r+0xc>
 800e96a:	89a3      	ldrh	r3, [r4, #12]
 800e96c:	059b      	lsls	r3, r3, #22
 800e96e:	d4dd      	bmi.n	800e92c <_fflush_r+0xc>
 800e970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e972:	f000 fc7b 	bl	800f26c <__retarget_lock_release_recursive>
 800e976:	e7d9      	b.n	800e92c <_fflush_r+0xc>
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <_fflush_r+0x70>)
 800e97a:	429c      	cmp	r4, r3
 800e97c:	d101      	bne.n	800e982 <_fflush_r+0x62>
 800e97e:	68ac      	ldr	r4, [r5, #8]
 800e980:	e7df      	b.n	800e942 <_fflush_r+0x22>
 800e982:	4b04      	ldr	r3, [pc, #16]	; (800e994 <_fflush_r+0x74>)
 800e984:	429c      	cmp	r4, r3
 800e986:	bf08      	it	eq
 800e988:	68ec      	ldreq	r4, [r5, #12]
 800e98a:	e7da      	b.n	800e942 <_fflush_r+0x22>
 800e98c:	08010a64 	.word	0x08010a64
 800e990:	08010a84 	.word	0x08010a84
 800e994:	08010a44 	.word	0x08010a44

0800e998 <std>:
 800e998:	2300      	movs	r3, #0
 800e99a:	b510      	push	{r4, lr}
 800e99c:	4604      	mov	r4, r0
 800e99e:	e9c0 3300 	strd	r3, r3, [r0]
 800e9a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9a6:	6083      	str	r3, [r0, #8]
 800e9a8:	8181      	strh	r1, [r0, #12]
 800e9aa:	6643      	str	r3, [r0, #100]	; 0x64
 800e9ac:	81c2      	strh	r2, [r0, #14]
 800e9ae:	6183      	str	r3, [r0, #24]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	2208      	movs	r2, #8
 800e9b4:	305c      	adds	r0, #92	; 0x5c
 800e9b6:	f7fd f8a9 	bl	800bb0c <memset>
 800e9ba:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <std+0x38>)
 800e9bc:	6263      	str	r3, [r4, #36]	; 0x24
 800e9be:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <std+0x3c>)
 800e9c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9c2:	4b05      	ldr	r3, [pc, #20]	; (800e9d8 <std+0x40>)
 800e9c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9c6:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <std+0x44>)
 800e9c8:	6224      	str	r4, [r4, #32]
 800e9ca:	6323      	str	r3, [r4, #48]	; 0x30
 800e9cc:	bd10      	pop	{r4, pc}
 800e9ce:	bf00      	nop
 800e9d0:	080102a1 	.word	0x080102a1
 800e9d4:	080102c3 	.word	0x080102c3
 800e9d8:	080102fb 	.word	0x080102fb
 800e9dc:	0801031f 	.word	0x0801031f

0800e9e0 <_cleanup_r>:
 800e9e0:	4901      	ldr	r1, [pc, #4]	; (800e9e8 <_cleanup_r+0x8>)
 800e9e2:	f000 b8af 	b.w	800eb44 <_fwalk_reent>
 800e9e6:	bf00      	nop
 800e9e8:	0800e921 	.word	0x0800e921

0800e9ec <__sfmoreglue>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	2268      	movs	r2, #104	; 0x68
 800e9f0:	1e4d      	subs	r5, r1, #1
 800e9f2:	4355      	muls	r5, r2
 800e9f4:	460e      	mov	r6, r1
 800e9f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9fa:	f7fd f8fb 	bl	800bbf4 <_malloc_r>
 800e9fe:	4604      	mov	r4, r0
 800ea00:	b140      	cbz	r0, 800ea14 <__sfmoreglue+0x28>
 800ea02:	2100      	movs	r1, #0
 800ea04:	e9c0 1600 	strd	r1, r6, [r0]
 800ea08:	300c      	adds	r0, #12
 800ea0a:	60a0      	str	r0, [r4, #8]
 800ea0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea10:	f7fd f87c 	bl	800bb0c <memset>
 800ea14:	4620      	mov	r0, r4
 800ea16:	bd70      	pop	{r4, r5, r6, pc}

0800ea18 <__sfp_lock_acquire>:
 800ea18:	4801      	ldr	r0, [pc, #4]	; (800ea20 <__sfp_lock_acquire+0x8>)
 800ea1a:	f000 bc26 	b.w	800f26a <__retarget_lock_acquire_recursive>
 800ea1e:	bf00      	nop
 800ea20:	20013499 	.word	0x20013499

0800ea24 <__sfp_lock_release>:
 800ea24:	4801      	ldr	r0, [pc, #4]	; (800ea2c <__sfp_lock_release+0x8>)
 800ea26:	f000 bc21 	b.w	800f26c <__retarget_lock_release_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20013499 	.word	0x20013499

0800ea30 <__sinit_lock_acquire>:
 800ea30:	4801      	ldr	r0, [pc, #4]	; (800ea38 <__sinit_lock_acquire+0x8>)
 800ea32:	f000 bc1a 	b.w	800f26a <__retarget_lock_acquire_recursive>
 800ea36:	bf00      	nop
 800ea38:	2001349a 	.word	0x2001349a

0800ea3c <__sinit_lock_release>:
 800ea3c:	4801      	ldr	r0, [pc, #4]	; (800ea44 <__sinit_lock_release+0x8>)
 800ea3e:	f000 bc15 	b.w	800f26c <__retarget_lock_release_recursive>
 800ea42:	bf00      	nop
 800ea44:	2001349a 	.word	0x2001349a

0800ea48 <__sinit>:
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	f7ff fff0 	bl	800ea30 <__sinit_lock_acquire>
 800ea50:	69a3      	ldr	r3, [r4, #24]
 800ea52:	b11b      	cbz	r3, 800ea5c <__sinit+0x14>
 800ea54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea58:	f7ff bff0 	b.w	800ea3c <__sinit_lock_release>
 800ea5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea60:	6523      	str	r3, [r4, #80]	; 0x50
 800ea62:	4b13      	ldr	r3, [pc, #76]	; (800eab0 <__sinit+0x68>)
 800ea64:	4a13      	ldr	r2, [pc, #76]	; (800eab4 <__sinit+0x6c>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	bf04      	itt	eq
 800ea6e:	2301      	moveq	r3, #1
 800ea70:	61a3      	streq	r3, [r4, #24]
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 f820 	bl	800eab8 <__sfp>
 800ea78:	6060      	str	r0, [r4, #4]
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 f81c 	bl	800eab8 <__sfp>
 800ea80:	60a0      	str	r0, [r4, #8]
 800ea82:	4620      	mov	r0, r4
 800ea84:	f000 f818 	bl	800eab8 <__sfp>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	60e0      	str	r0, [r4, #12]
 800ea8c:	2104      	movs	r1, #4
 800ea8e:	6860      	ldr	r0, [r4, #4]
 800ea90:	f7ff ff82 	bl	800e998 <std>
 800ea94:	68a0      	ldr	r0, [r4, #8]
 800ea96:	2201      	movs	r2, #1
 800ea98:	2109      	movs	r1, #9
 800ea9a:	f7ff ff7d 	bl	800e998 <std>
 800ea9e:	68e0      	ldr	r0, [r4, #12]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	2112      	movs	r1, #18
 800eaa4:	f7ff ff78 	bl	800e998 <std>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	61a3      	str	r3, [r4, #24]
 800eaac:	e7d2      	b.n	800ea54 <__sinit+0xc>
 800eaae:	bf00      	nop
 800eab0:	0801081c 	.word	0x0801081c
 800eab4:	0800e9e1 	.word	0x0800e9e1

0800eab8 <__sfp>:
 800eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaba:	4607      	mov	r7, r0
 800eabc:	f7ff ffac 	bl	800ea18 <__sfp_lock_acquire>
 800eac0:	4b1e      	ldr	r3, [pc, #120]	; (800eb3c <__sfp+0x84>)
 800eac2:	681e      	ldr	r6, [r3, #0]
 800eac4:	69b3      	ldr	r3, [r6, #24]
 800eac6:	b913      	cbnz	r3, 800eace <__sfp+0x16>
 800eac8:	4630      	mov	r0, r6
 800eaca:	f7ff ffbd 	bl	800ea48 <__sinit>
 800eace:	3648      	adds	r6, #72	; 0x48
 800ead0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ead4:	3b01      	subs	r3, #1
 800ead6:	d503      	bpl.n	800eae0 <__sfp+0x28>
 800ead8:	6833      	ldr	r3, [r6, #0]
 800eada:	b30b      	cbz	r3, 800eb20 <__sfp+0x68>
 800eadc:	6836      	ldr	r6, [r6, #0]
 800eade:	e7f7      	b.n	800ead0 <__sfp+0x18>
 800eae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eae4:	b9d5      	cbnz	r5, 800eb1c <__sfp+0x64>
 800eae6:	4b16      	ldr	r3, [pc, #88]	; (800eb40 <__sfp+0x88>)
 800eae8:	60e3      	str	r3, [r4, #12]
 800eaea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eaee:	6665      	str	r5, [r4, #100]	; 0x64
 800eaf0:	f000 fbba 	bl	800f268 <__retarget_lock_init_recursive>
 800eaf4:	f7ff ff96 	bl	800ea24 <__sfp_lock_release>
 800eaf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eafc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb00:	6025      	str	r5, [r4, #0]
 800eb02:	61a5      	str	r5, [r4, #24]
 800eb04:	2208      	movs	r2, #8
 800eb06:	4629      	mov	r1, r5
 800eb08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb0c:	f7fc fffe 	bl	800bb0c <memset>
 800eb10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb18:	4620      	mov	r0, r4
 800eb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb1c:	3468      	adds	r4, #104	; 0x68
 800eb1e:	e7d9      	b.n	800ead4 <__sfp+0x1c>
 800eb20:	2104      	movs	r1, #4
 800eb22:	4638      	mov	r0, r7
 800eb24:	f7ff ff62 	bl	800e9ec <__sfmoreglue>
 800eb28:	4604      	mov	r4, r0
 800eb2a:	6030      	str	r0, [r6, #0]
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d1d5      	bne.n	800eadc <__sfp+0x24>
 800eb30:	f7ff ff78 	bl	800ea24 <__sfp_lock_release>
 800eb34:	230c      	movs	r3, #12
 800eb36:	603b      	str	r3, [r7, #0]
 800eb38:	e7ee      	b.n	800eb18 <__sfp+0x60>
 800eb3a:	bf00      	nop
 800eb3c:	0801081c 	.word	0x0801081c
 800eb40:	ffff0001 	.word	0xffff0001

0800eb44 <_fwalk_reent>:
 800eb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb48:	4606      	mov	r6, r0
 800eb4a:	4688      	mov	r8, r1
 800eb4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb50:	2700      	movs	r7, #0
 800eb52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb56:	f1b9 0901 	subs.w	r9, r9, #1
 800eb5a:	d505      	bpl.n	800eb68 <_fwalk_reent+0x24>
 800eb5c:	6824      	ldr	r4, [r4, #0]
 800eb5e:	2c00      	cmp	r4, #0
 800eb60:	d1f7      	bne.n	800eb52 <_fwalk_reent+0xe>
 800eb62:	4638      	mov	r0, r7
 800eb64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb68:	89ab      	ldrh	r3, [r5, #12]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d907      	bls.n	800eb7e <_fwalk_reent+0x3a>
 800eb6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb72:	3301      	adds	r3, #1
 800eb74:	d003      	beq.n	800eb7e <_fwalk_reent+0x3a>
 800eb76:	4629      	mov	r1, r5
 800eb78:	4630      	mov	r0, r6
 800eb7a:	47c0      	blx	r8
 800eb7c:	4307      	orrs	r7, r0
 800eb7e:	3568      	adds	r5, #104	; 0x68
 800eb80:	e7e9      	b.n	800eb56 <_fwalk_reent+0x12>

0800eb82 <rshift>:
 800eb82:	6903      	ldr	r3, [r0, #16]
 800eb84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eb88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eb90:	f100 0414 	add.w	r4, r0, #20
 800eb94:	dd45      	ble.n	800ec22 <rshift+0xa0>
 800eb96:	f011 011f 	ands.w	r1, r1, #31
 800eb9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eba2:	d10c      	bne.n	800ebbe <rshift+0x3c>
 800eba4:	f100 0710 	add.w	r7, r0, #16
 800eba8:	4629      	mov	r1, r5
 800ebaa:	42b1      	cmp	r1, r6
 800ebac:	d334      	bcc.n	800ec18 <rshift+0x96>
 800ebae:	1a9b      	subs	r3, r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	1eea      	subs	r2, r5, #3
 800ebb4:	4296      	cmp	r6, r2
 800ebb6:	bf38      	it	cc
 800ebb8:	2300      	movcc	r3, #0
 800ebba:	4423      	add	r3, r4
 800ebbc:	e015      	b.n	800ebea <rshift+0x68>
 800ebbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ebc2:	f1c1 0820 	rsb	r8, r1, #32
 800ebc6:	40cf      	lsrs	r7, r1
 800ebc8:	f105 0e04 	add.w	lr, r5, #4
 800ebcc:	46a1      	mov	r9, r4
 800ebce:	4576      	cmp	r6, lr
 800ebd0:	46f4      	mov	ip, lr
 800ebd2:	d815      	bhi.n	800ec00 <rshift+0x7e>
 800ebd4:	1a9a      	subs	r2, r3, r2
 800ebd6:	0092      	lsls	r2, r2, #2
 800ebd8:	3a04      	subs	r2, #4
 800ebda:	3501      	adds	r5, #1
 800ebdc:	42ae      	cmp	r6, r5
 800ebde:	bf38      	it	cc
 800ebe0:	2200      	movcc	r2, #0
 800ebe2:	18a3      	adds	r3, r4, r2
 800ebe4:	50a7      	str	r7, [r4, r2]
 800ebe6:	b107      	cbz	r7, 800ebea <rshift+0x68>
 800ebe8:	3304      	adds	r3, #4
 800ebea:	1b1a      	subs	r2, r3, r4
 800ebec:	42a3      	cmp	r3, r4
 800ebee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ebf2:	bf08      	it	eq
 800ebf4:	2300      	moveq	r3, #0
 800ebf6:	6102      	str	r2, [r0, #16]
 800ebf8:	bf08      	it	eq
 800ebfa:	6143      	streq	r3, [r0, #20]
 800ebfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec00:	f8dc c000 	ldr.w	ip, [ip]
 800ec04:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec08:	ea4c 0707 	orr.w	r7, ip, r7
 800ec0c:	f849 7b04 	str.w	r7, [r9], #4
 800ec10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec14:	40cf      	lsrs	r7, r1
 800ec16:	e7da      	b.n	800ebce <rshift+0x4c>
 800ec18:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec20:	e7c3      	b.n	800ebaa <rshift+0x28>
 800ec22:	4623      	mov	r3, r4
 800ec24:	e7e1      	b.n	800ebea <rshift+0x68>

0800ec26 <__hexdig_fun>:
 800ec26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ec2a:	2b09      	cmp	r3, #9
 800ec2c:	d802      	bhi.n	800ec34 <__hexdig_fun+0xe>
 800ec2e:	3820      	subs	r0, #32
 800ec30:	b2c0      	uxtb	r0, r0
 800ec32:	4770      	bx	lr
 800ec34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ec38:	2b05      	cmp	r3, #5
 800ec3a:	d801      	bhi.n	800ec40 <__hexdig_fun+0x1a>
 800ec3c:	3847      	subs	r0, #71	; 0x47
 800ec3e:	e7f7      	b.n	800ec30 <__hexdig_fun+0xa>
 800ec40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ec44:	2b05      	cmp	r3, #5
 800ec46:	d801      	bhi.n	800ec4c <__hexdig_fun+0x26>
 800ec48:	3827      	subs	r0, #39	; 0x27
 800ec4a:	e7f1      	b.n	800ec30 <__hexdig_fun+0xa>
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	4770      	bx	lr

0800ec50 <__gethex>:
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	ed2d 8b02 	vpush	{d8}
 800ec58:	b089      	sub	sp, #36	; 0x24
 800ec5a:	ee08 0a10 	vmov	s16, r0
 800ec5e:	9304      	str	r3, [sp, #16]
 800ec60:	4bb4      	ldr	r3, [pc, #720]	; (800ef34 <__gethex+0x2e4>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	4618      	mov	r0, r3
 800ec68:	468b      	mov	fp, r1
 800ec6a:	4690      	mov	r8, r2
 800ec6c:	f7f1 fab0 	bl	80001d0 <strlen>
 800ec70:	9b01      	ldr	r3, [sp, #4]
 800ec72:	f8db 2000 	ldr.w	r2, [fp]
 800ec76:	4403      	add	r3, r0
 800ec78:	4682      	mov	sl, r0
 800ec7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ec7e:	9305      	str	r3, [sp, #20]
 800ec80:	1c93      	adds	r3, r2, #2
 800ec82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ec86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ec8a:	32fe      	adds	r2, #254	; 0xfe
 800ec8c:	18d1      	adds	r1, r2, r3
 800ec8e:	461f      	mov	r7, r3
 800ec90:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ec94:	9100      	str	r1, [sp, #0]
 800ec96:	2830      	cmp	r0, #48	; 0x30
 800ec98:	d0f8      	beq.n	800ec8c <__gethex+0x3c>
 800ec9a:	f7ff ffc4 	bl	800ec26 <__hexdig_fun>
 800ec9e:	4604      	mov	r4, r0
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d13a      	bne.n	800ed1a <__gethex+0xca>
 800eca4:	9901      	ldr	r1, [sp, #4]
 800eca6:	4652      	mov	r2, sl
 800eca8:	4638      	mov	r0, r7
 800ecaa:	f7fd ffb8 	bl	800cc1e <strncmp>
 800ecae:	4605      	mov	r5, r0
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d168      	bne.n	800ed86 <__gethex+0x136>
 800ecb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ecb8:	eb07 060a 	add.w	r6, r7, sl
 800ecbc:	f7ff ffb3 	bl	800ec26 <__hexdig_fun>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d062      	beq.n	800ed8a <__gethex+0x13a>
 800ecc4:	4633      	mov	r3, r6
 800ecc6:	7818      	ldrb	r0, [r3, #0]
 800ecc8:	2830      	cmp	r0, #48	; 0x30
 800ecca:	461f      	mov	r7, r3
 800eccc:	f103 0301 	add.w	r3, r3, #1
 800ecd0:	d0f9      	beq.n	800ecc6 <__gethex+0x76>
 800ecd2:	f7ff ffa8 	bl	800ec26 <__hexdig_fun>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	fab0 f480 	clz	r4, r0
 800ecdc:	0964      	lsrs	r4, r4, #5
 800ecde:	4635      	mov	r5, r6
 800ece0:	9300      	str	r3, [sp, #0]
 800ece2:	463a      	mov	r2, r7
 800ece4:	4616      	mov	r6, r2
 800ece6:	3201      	adds	r2, #1
 800ece8:	7830      	ldrb	r0, [r6, #0]
 800ecea:	f7ff ff9c 	bl	800ec26 <__hexdig_fun>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d1f8      	bne.n	800ece4 <__gethex+0x94>
 800ecf2:	9901      	ldr	r1, [sp, #4]
 800ecf4:	4652      	mov	r2, sl
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	f7fd ff91 	bl	800cc1e <strncmp>
 800ecfc:	b980      	cbnz	r0, 800ed20 <__gethex+0xd0>
 800ecfe:	b94d      	cbnz	r5, 800ed14 <__gethex+0xc4>
 800ed00:	eb06 050a 	add.w	r5, r6, sl
 800ed04:	462a      	mov	r2, r5
 800ed06:	4616      	mov	r6, r2
 800ed08:	3201      	adds	r2, #1
 800ed0a:	7830      	ldrb	r0, [r6, #0]
 800ed0c:	f7ff ff8b 	bl	800ec26 <__hexdig_fun>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d1f8      	bne.n	800ed06 <__gethex+0xb6>
 800ed14:	1bad      	subs	r5, r5, r6
 800ed16:	00ad      	lsls	r5, r5, #2
 800ed18:	e004      	b.n	800ed24 <__gethex+0xd4>
 800ed1a:	2400      	movs	r4, #0
 800ed1c:	4625      	mov	r5, r4
 800ed1e:	e7e0      	b.n	800ece2 <__gethex+0x92>
 800ed20:	2d00      	cmp	r5, #0
 800ed22:	d1f7      	bne.n	800ed14 <__gethex+0xc4>
 800ed24:	7833      	ldrb	r3, [r6, #0]
 800ed26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed2a:	2b50      	cmp	r3, #80	; 0x50
 800ed2c:	d13b      	bne.n	800eda6 <__gethex+0x156>
 800ed2e:	7873      	ldrb	r3, [r6, #1]
 800ed30:	2b2b      	cmp	r3, #43	; 0x2b
 800ed32:	d02c      	beq.n	800ed8e <__gethex+0x13e>
 800ed34:	2b2d      	cmp	r3, #45	; 0x2d
 800ed36:	d02e      	beq.n	800ed96 <__gethex+0x146>
 800ed38:	1c71      	adds	r1, r6, #1
 800ed3a:	f04f 0900 	mov.w	r9, #0
 800ed3e:	7808      	ldrb	r0, [r1, #0]
 800ed40:	f7ff ff71 	bl	800ec26 <__hexdig_fun>
 800ed44:	1e43      	subs	r3, r0, #1
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b18      	cmp	r3, #24
 800ed4a:	d82c      	bhi.n	800eda6 <__gethex+0x156>
 800ed4c:	f1a0 0210 	sub.w	r2, r0, #16
 800ed50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed54:	f7ff ff67 	bl	800ec26 <__hexdig_fun>
 800ed58:	1e43      	subs	r3, r0, #1
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b18      	cmp	r3, #24
 800ed5e:	d91d      	bls.n	800ed9c <__gethex+0x14c>
 800ed60:	f1b9 0f00 	cmp.w	r9, #0
 800ed64:	d000      	beq.n	800ed68 <__gethex+0x118>
 800ed66:	4252      	negs	r2, r2
 800ed68:	4415      	add	r5, r2
 800ed6a:	f8cb 1000 	str.w	r1, [fp]
 800ed6e:	b1e4      	cbz	r4, 800edaa <__gethex+0x15a>
 800ed70:	9b00      	ldr	r3, [sp, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	bf14      	ite	ne
 800ed76:	2700      	movne	r7, #0
 800ed78:	2706      	moveq	r7, #6
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	b009      	add	sp, #36	; 0x24
 800ed7e:	ecbd 8b02 	vpop	{d8}
 800ed82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed86:	463e      	mov	r6, r7
 800ed88:	4625      	mov	r5, r4
 800ed8a:	2401      	movs	r4, #1
 800ed8c:	e7ca      	b.n	800ed24 <__gethex+0xd4>
 800ed8e:	f04f 0900 	mov.w	r9, #0
 800ed92:	1cb1      	adds	r1, r6, #2
 800ed94:	e7d3      	b.n	800ed3e <__gethex+0xee>
 800ed96:	f04f 0901 	mov.w	r9, #1
 800ed9a:	e7fa      	b.n	800ed92 <__gethex+0x142>
 800ed9c:	230a      	movs	r3, #10
 800ed9e:	fb03 0202 	mla	r2, r3, r2, r0
 800eda2:	3a10      	subs	r2, #16
 800eda4:	e7d4      	b.n	800ed50 <__gethex+0x100>
 800eda6:	4631      	mov	r1, r6
 800eda8:	e7df      	b.n	800ed6a <__gethex+0x11a>
 800edaa:	1bf3      	subs	r3, r6, r7
 800edac:	3b01      	subs	r3, #1
 800edae:	4621      	mov	r1, r4
 800edb0:	2b07      	cmp	r3, #7
 800edb2:	dc0b      	bgt.n	800edcc <__gethex+0x17c>
 800edb4:	ee18 0a10 	vmov	r0, s16
 800edb8:	f000 fadc 	bl	800f374 <_Balloc>
 800edbc:	4604      	mov	r4, r0
 800edbe:	b940      	cbnz	r0, 800edd2 <__gethex+0x182>
 800edc0:	4b5d      	ldr	r3, [pc, #372]	; (800ef38 <__gethex+0x2e8>)
 800edc2:	4602      	mov	r2, r0
 800edc4:	21de      	movs	r1, #222	; 0xde
 800edc6:	485d      	ldr	r0, [pc, #372]	; (800ef3c <__gethex+0x2ec>)
 800edc8:	f001 facc 	bl	8010364 <__assert_func>
 800edcc:	3101      	adds	r1, #1
 800edce:	105b      	asrs	r3, r3, #1
 800edd0:	e7ee      	b.n	800edb0 <__gethex+0x160>
 800edd2:	f100 0914 	add.w	r9, r0, #20
 800edd6:	f04f 0b00 	mov.w	fp, #0
 800edda:	f1ca 0301 	rsb	r3, sl, #1
 800edde:	f8cd 9008 	str.w	r9, [sp, #8]
 800ede2:	f8cd b000 	str.w	fp, [sp]
 800ede6:	9306      	str	r3, [sp, #24]
 800ede8:	42b7      	cmp	r7, r6
 800edea:	d340      	bcc.n	800ee6e <__gethex+0x21e>
 800edec:	9802      	ldr	r0, [sp, #8]
 800edee:	9b00      	ldr	r3, [sp, #0]
 800edf0:	f840 3b04 	str.w	r3, [r0], #4
 800edf4:	eba0 0009 	sub.w	r0, r0, r9
 800edf8:	1080      	asrs	r0, r0, #2
 800edfa:	0146      	lsls	r6, r0, #5
 800edfc:	6120      	str	r0, [r4, #16]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 fbaa 	bl	800f558 <__hi0bits>
 800ee04:	1a30      	subs	r0, r6, r0
 800ee06:	f8d8 6000 	ldr.w	r6, [r8]
 800ee0a:	42b0      	cmp	r0, r6
 800ee0c:	dd63      	ble.n	800eed6 <__gethex+0x286>
 800ee0e:	1b87      	subs	r7, r0, r6
 800ee10:	4639      	mov	r1, r7
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 ff4e 	bl	800fcb4 <__any_on>
 800ee18:	4682      	mov	sl, r0
 800ee1a:	b1a8      	cbz	r0, 800ee48 <__gethex+0x1f8>
 800ee1c:	1e7b      	subs	r3, r7, #1
 800ee1e:	1159      	asrs	r1, r3, #5
 800ee20:	f003 021f 	and.w	r2, r3, #31
 800ee24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ee28:	f04f 0a01 	mov.w	sl, #1
 800ee2c:	fa0a f202 	lsl.w	r2, sl, r2
 800ee30:	420a      	tst	r2, r1
 800ee32:	d009      	beq.n	800ee48 <__gethex+0x1f8>
 800ee34:	4553      	cmp	r3, sl
 800ee36:	dd05      	ble.n	800ee44 <__gethex+0x1f4>
 800ee38:	1eb9      	subs	r1, r7, #2
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 ff3a 	bl	800fcb4 <__any_on>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d145      	bne.n	800eed0 <__gethex+0x280>
 800ee44:	f04f 0a02 	mov.w	sl, #2
 800ee48:	4639      	mov	r1, r7
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f7ff fe99 	bl	800eb82 <rshift>
 800ee50:	443d      	add	r5, r7
 800ee52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee56:	42ab      	cmp	r3, r5
 800ee58:	da4c      	bge.n	800eef4 <__gethex+0x2a4>
 800ee5a:	ee18 0a10 	vmov	r0, s16
 800ee5e:	4621      	mov	r1, r4
 800ee60:	f000 fac8 	bl	800f3f4 <_Bfree>
 800ee64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee66:	2300      	movs	r3, #0
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	27a3      	movs	r7, #163	; 0xa3
 800ee6c:	e785      	b.n	800ed7a <__gethex+0x12a>
 800ee6e:	1e73      	subs	r3, r6, #1
 800ee70:	9a05      	ldr	r2, [sp, #20]
 800ee72:	9303      	str	r3, [sp, #12]
 800ee74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d019      	beq.n	800eeb0 <__gethex+0x260>
 800ee7c:	f1bb 0f20 	cmp.w	fp, #32
 800ee80:	d107      	bne.n	800ee92 <__gethex+0x242>
 800ee82:	9b02      	ldr	r3, [sp, #8]
 800ee84:	9a00      	ldr	r2, [sp, #0]
 800ee86:	f843 2b04 	str.w	r2, [r3], #4
 800ee8a:	9302      	str	r3, [sp, #8]
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	469b      	mov	fp, r3
 800ee92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ee96:	f7ff fec6 	bl	800ec26 <__hexdig_fun>
 800ee9a:	9b00      	ldr	r3, [sp, #0]
 800ee9c:	f000 000f 	and.w	r0, r0, #15
 800eea0:	fa00 f00b 	lsl.w	r0, r0, fp
 800eea4:	4303      	orrs	r3, r0
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	f10b 0b04 	add.w	fp, fp, #4
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	e00d      	b.n	800eecc <__gethex+0x27c>
 800eeb0:	9b03      	ldr	r3, [sp, #12]
 800eeb2:	9a06      	ldr	r2, [sp, #24]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	42bb      	cmp	r3, r7
 800eeb8:	d3e0      	bcc.n	800ee7c <__gethex+0x22c>
 800eeba:	4618      	mov	r0, r3
 800eebc:	9901      	ldr	r1, [sp, #4]
 800eebe:	9307      	str	r3, [sp, #28]
 800eec0:	4652      	mov	r2, sl
 800eec2:	f7fd feac 	bl	800cc1e <strncmp>
 800eec6:	9b07      	ldr	r3, [sp, #28]
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d1d7      	bne.n	800ee7c <__gethex+0x22c>
 800eecc:	461e      	mov	r6, r3
 800eece:	e78b      	b.n	800ede8 <__gethex+0x198>
 800eed0:	f04f 0a03 	mov.w	sl, #3
 800eed4:	e7b8      	b.n	800ee48 <__gethex+0x1f8>
 800eed6:	da0a      	bge.n	800eeee <__gethex+0x29e>
 800eed8:	1a37      	subs	r7, r6, r0
 800eeda:	4621      	mov	r1, r4
 800eedc:	ee18 0a10 	vmov	r0, s16
 800eee0:	463a      	mov	r2, r7
 800eee2:	f000 fca3 	bl	800f82c <__lshift>
 800eee6:	1bed      	subs	r5, r5, r7
 800eee8:	4604      	mov	r4, r0
 800eeea:	f100 0914 	add.w	r9, r0, #20
 800eeee:	f04f 0a00 	mov.w	sl, #0
 800eef2:	e7ae      	b.n	800ee52 <__gethex+0x202>
 800eef4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eef8:	42a8      	cmp	r0, r5
 800eefa:	dd72      	ble.n	800efe2 <__gethex+0x392>
 800eefc:	1b45      	subs	r5, r0, r5
 800eefe:	42ae      	cmp	r6, r5
 800ef00:	dc36      	bgt.n	800ef70 <__gethex+0x320>
 800ef02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d02a      	beq.n	800ef60 <__gethex+0x310>
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d02c      	beq.n	800ef68 <__gethex+0x318>
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d11c      	bne.n	800ef4c <__gethex+0x2fc>
 800ef12:	42ae      	cmp	r6, r5
 800ef14:	d11a      	bne.n	800ef4c <__gethex+0x2fc>
 800ef16:	2e01      	cmp	r6, #1
 800ef18:	d112      	bne.n	800ef40 <__gethex+0x2f0>
 800ef1a:	9a04      	ldr	r2, [sp, #16]
 800ef1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef20:	6013      	str	r3, [r2, #0]
 800ef22:	2301      	movs	r3, #1
 800ef24:	6123      	str	r3, [r4, #16]
 800ef26:	f8c9 3000 	str.w	r3, [r9]
 800ef2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef2c:	2762      	movs	r7, #98	; 0x62
 800ef2e:	601c      	str	r4, [r3, #0]
 800ef30:	e723      	b.n	800ed7a <__gethex+0x12a>
 800ef32:	bf00      	nop
 800ef34:	08010b0c 	.word	0x08010b0c
 800ef38:	08010a30 	.word	0x08010a30
 800ef3c:	08010aa4 	.word	0x08010aa4
 800ef40:	1e71      	subs	r1, r6, #1
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 feb6 	bl	800fcb4 <__any_on>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d1e6      	bne.n	800ef1a <__gethex+0x2ca>
 800ef4c:	ee18 0a10 	vmov	r0, s16
 800ef50:	4621      	mov	r1, r4
 800ef52:	f000 fa4f 	bl	800f3f4 <_Bfree>
 800ef56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef58:	2300      	movs	r3, #0
 800ef5a:	6013      	str	r3, [r2, #0]
 800ef5c:	2750      	movs	r7, #80	; 0x50
 800ef5e:	e70c      	b.n	800ed7a <__gethex+0x12a>
 800ef60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1f2      	bne.n	800ef4c <__gethex+0x2fc>
 800ef66:	e7d8      	b.n	800ef1a <__gethex+0x2ca>
 800ef68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1d5      	bne.n	800ef1a <__gethex+0x2ca>
 800ef6e:	e7ed      	b.n	800ef4c <__gethex+0x2fc>
 800ef70:	1e6f      	subs	r7, r5, #1
 800ef72:	f1ba 0f00 	cmp.w	sl, #0
 800ef76:	d131      	bne.n	800efdc <__gethex+0x38c>
 800ef78:	b127      	cbz	r7, 800ef84 <__gethex+0x334>
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f000 fe99 	bl	800fcb4 <__any_on>
 800ef82:	4682      	mov	sl, r0
 800ef84:	117b      	asrs	r3, r7, #5
 800ef86:	2101      	movs	r1, #1
 800ef88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ef8c:	f007 071f 	and.w	r7, r7, #31
 800ef90:	fa01 f707 	lsl.w	r7, r1, r7
 800ef94:	421f      	tst	r7, r3
 800ef96:	4629      	mov	r1, r5
 800ef98:	4620      	mov	r0, r4
 800ef9a:	bf18      	it	ne
 800ef9c:	f04a 0a02 	orrne.w	sl, sl, #2
 800efa0:	1b76      	subs	r6, r6, r5
 800efa2:	f7ff fdee 	bl	800eb82 <rshift>
 800efa6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800efaa:	2702      	movs	r7, #2
 800efac:	f1ba 0f00 	cmp.w	sl, #0
 800efb0:	d048      	beq.n	800f044 <__gethex+0x3f4>
 800efb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d015      	beq.n	800efe6 <__gethex+0x396>
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d017      	beq.n	800efee <__gethex+0x39e>
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d109      	bne.n	800efd6 <__gethex+0x386>
 800efc2:	f01a 0f02 	tst.w	sl, #2
 800efc6:	d006      	beq.n	800efd6 <__gethex+0x386>
 800efc8:	f8d9 0000 	ldr.w	r0, [r9]
 800efcc:	ea4a 0a00 	orr.w	sl, sl, r0
 800efd0:	f01a 0f01 	tst.w	sl, #1
 800efd4:	d10e      	bne.n	800eff4 <__gethex+0x3a4>
 800efd6:	f047 0710 	orr.w	r7, r7, #16
 800efda:	e033      	b.n	800f044 <__gethex+0x3f4>
 800efdc:	f04f 0a01 	mov.w	sl, #1
 800efe0:	e7d0      	b.n	800ef84 <__gethex+0x334>
 800efe2:	2701      	movs	r7, #1
 800efe4:	e7e2      	b.n	800efac <__gethex+0x35c>
 800efe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efe8:	f1c3 0301 	rsb	r3, r3, #1
 800efec:	9315      	str	r3, [sp, #84]	; 0x54
 800efee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d0f0      	beq.n	800efd6 <__gethex+0x386>
 800eff4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eff8:	f104 0314 	add.w	r3, r4, #20
 800effc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f000:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f004:	f04f 0c00 	mov.w	ip, #0
 800f008:	4618      	mov	r0, r3
 800f00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f00e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f012:	d01c      	beq.n	800f04e <__gethex+0x3fe>
 800f014:	3201      	adds	r2, #1
 800f016:	6002      	str	r2, [r0, #0]
 800f018:	2f02      	cmp	r7, #2
 800f01a:	f104 0314 	add.w	r3, r4, #20
 800f01e:	d13f      	bne.n	800f0a0 <__gethex+0x450>
 800f020:	f8d8 2000 	ldr.w	r2, [r8]
 800f024:	3a01      	subs	r2, #1
 800f026:	42b2      	cmp	r2, r6
 800f028:	d10a      	bne.n	800f040 <__gethex+0x3f0>
 800f02a:	1171      	asrs	r1, r6, #5
 800f02c:	2201      	movs	r2, #1
 800f02e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f032:	f006 061f 	and.w	r6, r6, #31
 800f036:	fa02 f606 	lsl.w	r6, r2, r6
 800f03a:	421e      	tst	r6, r3
 800f03c:	bf18      	it	ne
 800f03e:	4617      	movne	r7, r2
 800f040:	f047 0720 	orr.w	r7, r7, #32
 800f044:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f046:	601c      	str	r4, [r3, #0]
 800f048:	9b04      	ldr	r3, [sp, #16]
 800f04a:	601d      	str	r5, [r3, #0]
 800f04c:	e695      	b.n	800ed7a <__gethex+0x12a>
 800f04e:	4299      	cmp	r1, r3
 800f050:	f843 cc04 	str.w	ip, [r3, #-4]
 800f054:	d8d8      	bhi.n	800f008 <__gethex+0x3b8>
 800f056:	68a3      	ldr	r3, [r4, #8]
 800f058:	459b      	cmp	fp, r3
 800f05a:	db19      	blt.n	800f090 <__gethex+0x440>
 800f05c:	6861      	ldr	r1, [r4, #4]
 800f05e:	ee18 0a10 	vmov	r0, s16
 800f062:	3101      	adds	r1, #1
 800f064:	f000 f986 	bl	800f374 <_Balloc>
 800f068:	4681      	mov	r9, r0
 800f06a:	b918      	cbnz	r0, 800f074 <__gethex+0x424>
 800f06c:	4b1a      	ldr	r3, [pc, #104]	; (800f0d8 <__gethex+0x488>)
 800f06e:	4602      	mov	r2, r0
 800f070:	2184      	movs	r1, #132	; 0x84
 800f072:	e6a8      	b.n	800edc6 <__gethex+0x176>
 800f074:	6922      	ldr	r2, [r4, #16]
 800f076:	3202      	adds	r2, #2
 800f078:	f104 010c 	add.w	r1, r4, #12
 800f07c:	0092      	lsls	r2, r2, #2
 800f07e:	300c      	adds	r0, #12
 800f080:	f7fc fd36 	bl	800baf0 <memcpy>
 800f084:	4621      	mov	r1, r4
 800f086:	ee18 0a10 	vmov	r0, s16
 800f08a:	f000 f9b3 	bl	800f3f4 <_Bfree>
 800f08e:	464c      	mov	r4, r9
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f098:	6122      	str	r2, [r4, #16]
 800f09a:	2201      	movs	r2, #1
 800f09c:	615a      	str	r2, [r3, #20]
 800f09e:	e7bb      	b.n	800f018 <__gethex+0x3c8>
 800f0a0:	6922      	ldr	r2, [r4, #16]
 800f0a2:	455a      	cmp	r2, fp
 800f0a4:	dd0b      	ble.n	800f0be <__gethex+0x46e>
 800f0a6:	2101      	movs	r1, #1
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f7ff fd6a 	bl	800eb82 <rshift>
 800f0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0b2:	3501      	adds	r5, #1
 800f0b4:	42ab      	cmp	r3, r5
 800f0b6:	f6ff aed0 	blt.w	800ee5a <__gethex+0x20a>
 800f0ba:	2701      	movs	r7, #1
 800f0bc:	e7c0      	b.n	800f040 <__gethex+0x3f0>
 800f0be:	f016 061f 	ands.w	r6, r6, #31
 800f0c2:	d0fa      	beq.n	800f0ba <__gethex+0x46a>
 800f0c4:	4453      	add	r3, sl
 800f0c6:	f1c6 0620 	rsb	r6, r6, #32
 800f0ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f0ce:	f000 fa43 	bl	800f558 <__hi0bits>
 800f0d2:	42b0      	cmp	r0, r6
 800f0d4:	dbe7      	blt.n	800f0a6 <__gethex+0x456>
 800f0d6:	e7f0      	b.n	800f0ba <__gethex+0x46a>
 800f0d8:	08010a30 	.word	0x08010a30

0800f0dc <L_shift>:
 800f0dc:	f1c2 0208 	rsb	r2, r2, #8
 800f0e0:	0092      	lsls	r2, r2, #2
 800f0e2:	b570      	push	{r4, r5, r6, lr}
 800f0e4:	f1c2 0620 	rsb	r6, r2, #32
 800f0e8:	6843      	ldr	r3, [r0, #4]
 800f0ea:	6804      	ldr	r4, [r0, #0]
 800f0ec:	fa03 f506 	lsl.w	r5, r3, r6
 800f0f0:	432c      	orrs	r4, r5
 800f0f2:	40d3      	lsrs	r3, r2
 800f0f4:	6004      	str	r4, [r0, #0]
 800f0f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f0fa:	4288      	cmp	r0, r1
 800f0fc:	d3f4      	bcc.n	800f0e8 <L_shift+0xc>
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}

0800f100 <__match>:
 800f100:	b530      	push	{r4, r5, lr}
 800f102:	6803      	ldr	r3, [r0, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f10a:	b914      	cbnz	r4, 800f112 <__match+0x12>
 800f10c:	6003      	str	r3, [r0, #0]
 800f10e:	2001      	movs	r0, #1
 800f110:	bd30      	pop	{r4, r5, pc}
 800f112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f116:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f11a:	2d19      	cmp	r5, #25
 800f11c:	bf98      	it	ls
 800f11e:	3220      	addls	r2, #32
 800f120:	42a2      	cmp	r2, r4
 800f122:	d0f0      	beq.n	800f106 <__match+0x6>
 800f124:	2000      	movs	r0, #0
 800f126:	e7f3      	b.n	800f110 <__match+0x10>

0800f128 <__hexnan>:
 800f128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f12c:	680b      	ldr	r3, [r1, #0]
 800f12e:	115e      	asrs	r6, r3, #5
 800f130:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f134:	f013 031f 	ands.w	r3, r3, #31
 800f138:	b087      	sub	sp, #28
 800f13a:	bf18      	it	ne
 800f13c:	3604      	addne	r6, #4
 800f13e:	2500      	movs	r5, #0
 800f140:	1f37      	subs	r7, r6, #4
 800f142:	4690      	mov	r8, r2
 800f144:	6802      	ldr	r2, [r0, #0]
 800f146:	9301      	str	r3, [sp, #4]
 800f148:	4682      	mov	sl, r0
 800f14a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f14e:	46b9      	mov	r9, r7
 800f150:	463c      	mov	r4, r7
 800f152:	9502      	str	r5, [sp, #8]
 800f154:	46ab      	mov	fp, r5
 800f156:	7851      	ldrb	r1, [r2, #1]
 800f158:	1c53      	adds	r3, r2, #1
 800f15a:	9303      	str	r3, [sp, #12]
 800f15c:	b341      	cbz	r1, 800f1b0 <__hexnan+0x88>
 800f15e:	4608      	mov	r0, r1
 800f160:	9205      	str	r2, [sp, #20]
 800f162:	9104      	str	r1, [sp, #16]
 800f164:	f7ff fd5f 	bl	800ec26 <__hexdig_fun>
 800f168:	2800      	cmp	r0, #0
 800f16a:	d14f      	bne.n	800f20c <__hexnan+0xe4>
 800f16c:	9904      	ldr	r1, [sp, #16]
 800f16e:	9a05      	ldr	r2, [sp, #20]
 800f170:	2920      	cmp	r1, #32
 800f172:	d818      	bhi.n	800f1a6 <__hexnan+0x7e>
 800f174:	9b02      	ldr	r3, [sp, #8]
 800f176:	459b      	cmp	fp, r3
 800f178:	dd13      	ble.n	800f1a2 <__hexnan+0x7a>
 800f17a:	454c      	cmp	r4, r9
 800f17c:	d206      	bcs.n	800f18c <__hexnan+0x64>
 800f17e:	2d07      	cmp	r5, #7
 800f180:	dc04      	bgt.n	800f18c <__hexnan+0x64>
 800f182:	462a      	mov	r2, r5
 800f184:	4649      	mov	r1, r9
 800f186:	4620      	mov	r0, r4
 800f188:	f7ff ffa8 	bl	800f0dc <L_shift>
 800f18c:	4544      	cmp	r4, r8
 800f18e:	d950      	bls.n	800f232 <__hexnan+0x10a>
 800f190:	2300      	movs	r3, #0
 800f192:	f1a4 0904 	sub.w	r9, r4, #4
 800f196:	f844 3c04 	str.w	r3, [r4, #-4]
 800f19a:	f8cd b008 	str.w	fp, [sp, #8]
 800f19e:	464c      	mov	r4, r9
 800f1a0:	461d      	mov	r5, r3
 800f1a2:	9a03      	ldr	r2, [sp, #12]
 800f1a4:	e7d7      	b.n	800f156 <__hexnan+0x2e>
 800f1a6:	2929      	cmp	r1, #41	; 0x29
 800f1a8:	d156      	bne.n	800f258 <__hexnan+0x130>
 800f1aa:	3202      	adds	r2, #2
 800f1ac:	f8ca 2000 	str.w	r2, [sl]
 800f1b0:	f1bb 0f00 	cmp.w	fp, #0
 800f1b4:	d050      	beq.n	800f258 <__hexnan+0x130>
 800f1b6:	454c      	cmp	r4, r9
 800f1b8:	d206      	bcs.n	800f1c8 <__hexnan+0xa0>
 800f1ba:	2d07      	cmp	r5, #7
 800f1bc:	dc04      	bgt.n	800f1c8 <__hexnan+0xa0>
 800f1be:	462a      	mov	r2, r5
 800f1c0:	4649      	mov	r1, r9
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7ff ff8a 	bl	800f0dc <L_shift>
 800f1c8:	4544      	cmp	r4, r8
 800f1ca:	d934      	bls.n	800f236 <__hexnan+0x10e>
 800f1cc:	f1a8 0204 	sub.w	r2, r8, #4
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f1d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f1da:	429f      	cmp	r7, r3
 800f1dc:	d2f9      	bcs.n	800f1d2 <__hexnan+0xaa>
 800f1de:	1b3b      	subs	r3, r7, r4
 800f1e0:	f023 0303 	bic.w	r3, r3, #3
 800f1e4:	3304      	adds	r3, #4
 800f1e6:	3401      	adds	r4, #1
 800f1e8:	3e03      	subs	r6, #3
 800f1ea:	42b4      	cmp	r4, r6
 800f1ec:	bf88      	it	hi
 800f1ee:	2304      	movhi	r3, #4
 800f1f0:	4443      	add	r3, r8
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f843 2b04 	str.w	r2, [r3], #4
 800f1f8:	429f      	cmp	r7, r3
 800f1fa:	d2fb      	bcs.n	800f1f4 <__hexnan+0xcc>
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	b91b      	cbnz	r3, 800f208 <__hexnan+0xe0>
 800f200:	4547      	cmp	r7, r8
 800f202:	d127      	bne.n	800f254 <__hexnan+0x12c>
 800f204:	2301      	movs	r3, #1
 800f206:	603b      	str	r3, [r7, #0]
 800f208:	2005      	movs	r0, #5
 800f20a:	e026      	b.n	800f25a <__hexnan+0x132>
 800f20c:	3501      	adds	r5, #1
 800f20e:	2d08      	cmp	r5, #8
 800f210:	f10b 0b01 	add.w	fp, fp, #1
 800f214:	dd06      	ble.n	800f224 <__hexnan+0xfc>
 800f216:	4544      	cmp	r4, r8
 800f218:	d9c3      	bls.n	800f1a2 <__hexnan+0x7a>
 800f21a:	2300      	movs	r3, #0
 800f21c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f220:	2501      	movs	r5, #1
 800f222:	3c04      	subs	r4, #4
 800f224:	6822      	ldr	r2, [r4, #0]
 800f226:	f000 000f 	and.w	r0, r0, #15
 800f22a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f22e:	6022      	str	r2, [r4, #0]
 800f230:	e7b7      	b.n	800f1a2 <__hexnan+0x7a>
 800f232:	2508      	movs	r5, #8
 800f234:	e7b5      	b.n	800f1a2 <__hexnan+0x7a>
 800f236:	9b01      	ldr	r3, [sp, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d0df      	beq.n	800f1fc <__hexnan+0xd4>
 800f23c:	f04f 32ff 	mov.w	r2, #4294967295
 800f240:	f1c3 0320 	rsb	r3, r3, #32
 800f244:	fa22 f303 	lsr.w	r3, r2, r3
 800f248:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f24c:	401a      	ands	r2, r3
 800f24e:	f846 2c04 	str.w	r2, [r6, #-4]
 800f252:	e7d3      	b.n	800f1fc <__hexnan+0xd4>
 800f254:	3f04      	subs	r7, #4
 800f256:	e7d1      	b.n	800f1fc <__hexnan+0xd4>
 800f258:	2004      	movs	r0, #4
 800f25a:	b007      	add	sp, #28
 800f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f260 <_localeconv_r>:
 800f260:	4800      	ldr	r0, [pc, #0]	; (800f264 <_localeconv_r+0x4>)
 800f262:	4770      	bx	lr
 800f264:	2000019c 	.word	0x2000019c

0800f268 <__retarget_lock_init_recursive>:
 800f268:	4770      	bx	lr

0800f26a <__retarget_lock_acquire_recursive>:
 800f26a:	4770      	bx	lr

0800f26c <__retarget_lock_release_recursive>:
 800f26c:	4770      	bx	lr

0800f26e <__swhatbuf_r>:
 800f26e:	b570      	push	{r4, r5, r6, lr}
 800f270:	460e      	mov	r6, r1
 800f272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f276:	2900      	cmp	r1, #0
 800f278:	b096      	sub	sp, #88	; 0x58
 800f27a:	4614      	mov	r4, r2
 800f27c:	461d      	mov	r5, r3
 800f27e:	da08      	bge.n	800f292 <__swhatbuf_r+0x24>
 800f280:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	602a      	str	r2, [r5, #0]
 800f288:	061a      	lsls	r2, r3, #24
 800f28a:	d410      	bmi.n	800f2ae <__swhatbuf_r+0x40>
 800f28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f290:	e00e      	b.n	800f2b0 <__swhatbuf_r+0x42>
 800f292:	466a      	mov	r2, sp
 800f294:	f001 f8a6 	bl	80103e4 <_fstat_r>
 800f298:	2800      	cmp	r0, #0
 800f29a:	dbf1      	blt.n	800f280 <__swhatbuf_r+0x12>
 800f29c:	9a01      	ldr	r2, [sp, #4]
 800f29e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2a6:	425a      	negs	r2, r3
 800f2a8:	415a      	adcs	r2, r3
 800f2aa:	602a      	str	r2, [r5, #0]
 800f2ac:	e7ee      	b.n	800f28c <__swhatbuf_r+0x1e>
 800f2ae:	2340      	movs	r3, #64	; 0x40
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	b016      	add	sp, #88	; 0x58
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}

0800f2b8 <__smakebuf_r>:
 800f2b8:	898b      	ldrh	r3, [r1, #12]
 800f2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2bc:	079d      	lsls	r5, r3, #30
 800f2be:	4606      	mov	r6, r0
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	d507      	bpl.n	800f2d4 <__smakebuf_r+0x1c>
 800f2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	6163      	str	r3, [r4, #20]
 800f2d0:	b002      	add	sp, #8
 800f2d2:	bd70      	pop	{r4, r5, r6, pc}
 800f2d4:	ab01      	add	r3, sp, #4
 800f2d6:	466a      	mov	r2, sp
 800f2d8:	f7ff ffc9 	bl	800f26e <__swhatbuf_r>
 800f2dc:	9900      	ldr	r1, [sp, #0]
 800f2de:	4605      	mov	r5, r0
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f7fc fc87 	bl	800bbf4 <_malloc_r>
 800f2e6:	b948      	cbnz	r0, 800f2fc <__smakebuf_r+0x44>
 800f2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ec:	059a      	lsls	r2, r3, #22
 800f2ee:	d4ef      	bmi.n	800f2d0 <__smakebuf_r+0x18>
 800f2f0:	f023 0303 	bic.w	r3, r3, #3
 800f2f4:	f043 0302 	orr.w	r3, r3, #2
 800f2f8:	81a3      	strh	r3, [r4, #12]
 800f2fa:	e7e3      	b.n	800f2c4 <__smakebuf_r+0xc>
 800f2fc:	4b0d      	ldr	r3, [pc, #52]	; (800f334 <__smakebuf_r+0x7c>)
 800f2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	6020      	str	r0, [r4, #0]
 800f304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f308:	81a3      	strh	r3, [r4, #12]
 800f30a:	9b00      	ldr	r3, [sp, #0]
 800f30c:	6163      	str	r3, [r4, #20]
 800f30e:	9b01      	ldr	r3, [sp, #4]
 800f310:	6120      	str	r0, [r4, #16]
 800f312:	b15b      	cbz	r3, 800f32c <__smakebuf_r+0x74>
 800f314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f318:	4630      	mov	r0, r6
 800f31a:	f001 f875 	bl	8010408 <_isatty_r>
 800f31e:	b128      	cbz	r0, 800f32c <__smakebuf_r+0x74>
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	f023 0303 	bic.w	r3, r3, #3
 800f326:	f043 0301 	orr.w	r3, r3, #1
 800f32a:	81a3      	strh	r3, [r4, #12]
 800f32c:	89a0      	ldrh	r0, [r4, #12]
 800f32e:	4305      	orrs	r5, r0
 800f330:	81a5      	strh	r5, [r4, #12]
 800f332:	e7cd      	b.n	800f2d0 <__smakebuf_r+0x18>
 800f334:	0800e9e1 	.word	0x0800e9e1

0800f338 <__ascii_mbtowc>:
 800f338:	b082      	sub	sp, #8
 800f33a:	b901      	cbnz	r1, 800f33e <__ascii_mbtowc+0x6>
 800f33c:	a901      	add	r1, sp, #4
 800f33e:	b142      	cbz	r2, 800f352 <__ascii_mbtowc+0x1a>
 800f340:	b14b      	cbz	r3, 800f356 <__ascii_mbtowc+0x1e>
 800f342:	7813      	ldrb	r3, [r2, #0]
 800f344:	600b      	str	r3, [r1, #0]
 800f346:	7812      	ldrb	r2, [r2, #0]
 800f348:	1e10      	subs	r0, r2, #0
 800f34a:	bf18      	it	ne
 800f34c:	2001      	movne	r0, #1
 800f34e:	b002      	add	sp, #8
 800f350:	4770      	bx	lr
 800f352:	4610      	mov	r0, r2
 800f354:	e7fb      	b.n	800f34e <__ascii_mbtowc+0x16>
 800f356:	f06f 0001 	mvn.w	r0, #1
 800f35a:	e7f8      	b.n	800f34e <__ascii_mbtowc+0x16>

0800f35c <__malloc_lock>:
 800f35c:	4801      	ldr	r0, [pc, #4]	; (800f364 <__malloc_lock+0x8>)
 800f35e:	f7ff bf84 	b.w	800f26a <__retarget_lock_acquire_recursive>
 800f362:	bf00      	nop
 800f364:	20013498 	.word	0x20013498

0800f368 <__malloc_unlock>:
 800f368:	4801      	ldr	r0, [pc, #4]	; (800f370 <__malloc_unlock+0x8>)
 800f36a:	f7ff bf7f 	b.w	800f26c <__retarget_lock_release_recursive>
 800f36e:	bf00      	nop
 800f370:	20013498 	.word	0x20013498

0800f374 <_Balloc>:
 800f374:	b570      	push	{r4, r5, r6, lr}
 800f376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f378:	4604      	mov	r4, r0
 800f37a:	460d      	mov	r5, r1
 800f37c:	b976      	cbnz	r6, 800f39c <_Balloc+0x28>
 800f37e:	2010      	movs	r0, #16
 800f380:	f7fc fba6 	bl	800bad0 <malloc>
 800f384:	4602      	mov	r2, r0
 800f386:	6260      	str	r0, [r4, #36]	; 0x24
 800f388:	b920      	cbnz	r0, 800f394 <_Balloc+0x20>
 800f38a:	4b18      	ldr	r3, [pc, #96]	; (800f3ec <_Balloc+0x78>)
 800f38c:	4818      	ldr	r0, [pc, #96]	; (800f3f0 <_Balloc+0x7c>)
 800f38e:	2166      	movs	r1, #102	; 0x66
 800f390:	f000 ffe8 	bl	8010364 <__assert_func>
 800f394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f398:	6006      	str	r6, [r0, #0]
 800f39a:	60c6      	str	r6, [r0, #12]
 800f39c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f39e:	68f3      	ldr	r3, [r6, #12]
 800f3a0:	b183      	cbz	r3, 800f3c4 <_Balloc+0x50>
 800f3a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3aa:	b9b8      	cbnz	r0, 800f3dc <_Balloc+0x68>
 800f3ac:	2101      	movs	r1, #1
 800f3ae:	fa01 f605 	lsl.w	r6, r1, r5
 800f3b2:	1d72      	adds	r2, r6, #5
 800f3b4:	0092      	lsls	r2, r2, #2
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f000 fc9d 	bl	800fcf6 <_calloc_r>
 800f3bc:	b160      	cbz	r0, 800f3d8 <_Balloc+0x64>
 800f3be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f3c2:	e00e      	b.n	800f3e2 <_Balloc+0x6e>
 800f3c4:	2221      	movs	r2, #33	; 0x21
 800f3c6:	2104      	movs	r1, #4
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f000 fc94 	bl	800fcf6 <_calloc_r>
 800f3ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3d0:	60f0      	str	r0, [r6, #12]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1e4      	bne.n	800f3a2 <_Balloc+0x2e>
 800f3d8:	2000      	movs	r0, #0
 800f3da:	bd70      	pop	{r4, r5, r6, pc}
 800f3dc:	6802      	ldr	r2, [r0, #0]
 800f3de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3e8:	e7f7      	b.n	800f3da <_Balloc+0x66>
 800f3ea:	bf00      	nop
 800f3ec:	080109be 	.word	0x080109be
 800f3f0:	08010b20 	.word	0x08010b20

0800f3f4 <_Bfree>:
 800f3f4:	b570      	push	{r4, r5, r6, lr}
 800f3f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	b976      	cbnz	r6, 800f41c <_Bfree+0x28>
 800f3fe:	2010      	movs	r0, #16
 800f400:	f7fc fb66 	bl	800bad0 <malloc>
 800f404:	4602      	mov	r2, r0
 800f406:	6268      	str	r0, [r5, #36]	; 0x24
 800f408:	b920      	cbnz	r0, 800f414 <_Bfree+0x20>
 800f40a:	4b09      	ldr	r3, [pc, #36]	; (800f430 <_Bfree+0x3c>)
 800f40c:	4809      	ldr	r0, [pc, #36]	; (800f434 <_Bfree+0x40>)
 800f40e:	218a      	movs	r1, #138	; 0x8a
 800f410:	f000 ffa8 	bl	8010364 <__assert_func>
 800f414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f418:	6006      	str	r6, [r0, #0]
 800f41a:	60c6      	str	r6, [r0, #12]
 800f41c:	b13c      	cbz	r4, 800f42e <_Bfree+0x3a>
 800f41e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f420:	6862      	ldr	r2, [r4, #4]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f428:	6021      	str	r1, [r4, #0]
 800f42a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	080109be 	.word	0x080109be
 800f434:	08010b20 	.word	0x08010b20

0800f438 <__multadd>:
 800f438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f43c:	690d      	ldr	r5, [r1, #16]
 800f43e:	4607      	mov	r7, r0
 800f440:	460c      	mov	r4, r1
 800f442:	461e      	mov	r6, r3
 800f444:	f101 0c14 	add.w	ip, r1, #20
 800f448:	2000      	movs	r0, #0
 800f44a:	f8dc 3000 	ldr.w	r3, [ip]
 800f44e:	b299      	uxth	r1, r3
 800f450:	fb02 6101 	mla	r1, r2, r1, r6
 800f454:	0c1e      	lsrs	r6, r3, #16
 800f456:	0c0b      	lsrs	r3, r1, #16
 800f458:	fb02 3306 	mla	r3, r2, r6, r3
 800f45c:	b289      	uxth	r1, r1
 800f45e:	3001      	adds	r0, #1
 800f460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f464:	4285      	cmp	r5, r0
 800f466:	f84c 1b04 	str.w	r1, [ip], #4
 800f46a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f46e:	dcec      	bgt.n	800f44a <__multadd+0x12>
 800f470:	b30e      	cbz	r6, 800f4b6 <__multadd+0x7e>
 800f472:	68a3      	ldr	r3, [r4, #8]
 800f474:	42ab      	cmp	r3, r5
 800f476:	dc19      	bgt.n	800f4ac <__multadd+0x74>
 800f478:	6861      	ldr	r1, [r4, #4]
 800f47a:	4638      	mov	r0, r7
 800f47c:	3101      	adds	r1, #1
 800f47e:	f7ff ff79 	bl	800f374 <_Balloc>
 800f482:	4680      	mov	r8, r0
 800f484:	b928      	cbnz	r0, 800f492 <__multadd+0x5a>
 800f486:	4602      	mov	r2, r0
 800f488:	4b0c      	ldr	r3, [pc, #48]	; (800f4bc <__multadd+0x84>)
 800f48a:	480d      	ldr	r0, [pc, #52]	; (800f4c0 <__multadd+0x88>)
 800f48c:	21b5      	movs	r1, #181	; 0xb5
 800f48e:	f000 ff69 	bl	8010364 <__assert_func>
 800f492:	6922      	ldr	r2, [r4, #16]
 800f494:	3202      	adds	r2, #2
 800f496:	f104 010c 	add.w	r1, r4, #12
 800f49a:	0092      	lsls	r2, r2, #2
 800f49c:	300c      	adds	r0, #12
 800f49e:	f7fc fb27 	bl	800baf0 <memcpy>
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	f7ff ffa5 	bl	800f3f4 <_Bfree>
 800f4aa:	4644      	mov	r4, r8
 800f4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f4b0:	3501      	adds	r5, #1
 800f4b2:	615e      	str	r6, [r3, #20]
 800f4b4:	6125      	str	r5, [r4, #16]
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4bc:	08010a30 	.word	0x08010a30
 800f4c0:	08010b20 	.word	0x08010b20

0800f4c4 <__s2b>:
 800f4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	4615      	mov	r5, r2
 800f4cc:	461f      	mov	r7, r3
 800f4ce:	2209      	movs	r2, #9
 800f4d0:	3308      	adds	r3, #8
 800f4d2:	4606      	mov	r6, r0
 800f4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4d8:	2100      	movs	r1, #0
 800f4da:	2201      	movs	r2, #1
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	db09      	blt.n	800f4f4 <__s2b+0x30>
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f7ff ff47 	bl	800f374 <_Balloc>
 800f4e6:	b940      	cbnz	r0, 800f4fa <__s2b+0x36>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	4b19      	ldr	r3, [pc, #100]	; (800f550 <__s2b+0x8c>)
 800f4ec:	4819      	ldr	r0, [pc, #100]	; (800f554 <__s2b+0x90>)
 800f4ee:	21ce      	movs	r1, #206	; 0xce
 800f4f0:	f000 ff38 	bl	8010364 <__assert_func>
 800f4f4:	0052      	lsls	r2, r2, #1
 800f4f6:	3101      	adds	r1, #1
 800f4f8:	e7f0      	b.n	800f4dc <__s2b+0x18>
 800f4fa:	9b08      	ldr	r3, [sp, #32]
 800f4fc:	6143      	str	r3, [r0, #20]
 800f4fe:	2d09      	cmp	r5, #9
 800f500:	f04f 0301 	mov.w	r3, #1
 800f504:	6103      	str	r3, [r0, #16]
 800f506:	dd16      	ble.n	800f536 <__s2b+0x72>
 800f508:	f104 0909 	add.w	r9, r4, #9
 800f50c:	46c8      	mov	r8, r9
 800f50e:	442c      	add	r4, r5
 800f510:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f514:	4601      	mov	r1, r0
 800f516:	3b30      	subs	r3, #48	; 0x30
 800f518:	220a      	movs	r2, #10
 800f51a:	4630      	mov	r0, r6
 800f51c:	f7ff ff8c 	bl	800f438 <__multadd>
 800f520:	45a0      	cmp	r8, r4
 800f522:	d1f5      	bne.n	800f510 <__s2b+0x4c>
 800f524:	f1a5 0408 	sub.w	r4, r5, #8
 800f528:	444c      	add	r4, r9
 800f52a:	1b2d      	subs	r5, r5, r4
 800f52c:	1963      	adds	r3, r4, r5
 800f52e:	42bb      	cmp	r3, r7
 800f530:	db04      	blt.n	800f53c <__s2b+0x78>
 800f532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f536:	340a      	adds	r4, #10
 800f538:	2509      	movs	r5, #9
 800f53a:	e7f6      	b.n	800f52a <__s2b+0x66>
 800f53c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f540:	4601      	mov	r1, r0
 800f542:	3b30      	subs	r3, #48	; 0x30
 800f544:	220a      	movs	r2, #10
 800f546:	4630      	mov	r0, r6
 800f548:	f7ff ff76 	bl	800f438 <__multadd>
 800f54c:	e7ee      	b.n	800f52c <__s2b+0x68>
 800f54e:	bf00      	nop
 800f550:	08010a30 	.word	0x08010a30
 800f554:	08010b20 	.word	0x08010b20

0800f558 <__hi0bits>:
 800f558:	0c03      	lsrs	r3, r0, #16
 800f55a:	041b      	lsls	r3, r3, #16
 800f55c:	b9d3      	cbnz	r3, 800f594 <__hi0bits+0x3c>
 800f55e:	0400      	lsls	r0, r0, #16
 800f560:	2310      	movs	r3, #16
 800f562:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f566:	bf04      	itt	eq
 800f568:	0200      	lsleq	r0, r0, #8
 800f56a:	3308      	addeq	r3, #8
 800f56c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f570:	bf04      	itt	eq
 800f572:	0100      	lsleq	r0, r0, #4
 800f574:	3304      	addeq	r3, #4
 800f576:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f57a:	bf04      	itt	eq
 800f57c:	0080      	lsleq	r0, r0, #2
 800f57e:	3302      	addeq	r3, #2
 800f580:	2800      	cmp	r0, #0
 800f582:	db05      	blt.n	800f590 <__hi0bits+0x38>
 800f584:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f588:	f103 0301 	add.w	r3, r3, #1
 800f58c:	bf08      	it	eq
 800f58e:	2320      	moveq	r3, #32
 800f590:	4618      	mov	r0, r3
 800f592:	4770      	bx	lr
 800f594:	2300      	movs	r3, #0
 800f596:	e7e4      	b.n	800f562 <__hi0bits+0xa>

0800f598 <__lo0bits>:
 800f598:	6803      	ldr	r3, [r0, #0]
 800f59a:	f013 0207 	ands.w	r2, r3, #7
 800f59e:	4601      	mov	r1, r0
 800f5a0:	d00b      	beq.n	800f5ba <__lo0bits+0x22>
 800f5a2:	07da      	lsls	r2, r3, #31
 800f5a4:	d423      	bmi.n	800f5ee <__lo0bits+0x56>
 800f5a6:	0798      	lsls	r0, r3, #30
 800f5a8:	bf49      	itett	mi
 800f5aa:	085b      	lsrmi	r3, r3, #1
 800f5ac:	089b      	lsrpl	r3, r3, #2
 800f5ae:	2001      	movmi	r0, #1
 800f5b0:	600b      	strmi	r3, [r1, #0]
 800f5b2:	bf5c      	itt	pl
 800f5b4:	600b      	strpl	r3, [r1, #0]
 800f5b6:	2002      	movpl	r0, #2
 800f5b8:	4770      	bx	lr
 800f5ba:	b298      	uxth	r0, r3
 800f5bc:	b9a8      	cbnz	r0, 800f5ea <__lo0bits+0x52>
 800f5be:	0c1b      	lsrs	r3, r3, #16
 800f5c0:	2010      	movs	r0, #16
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	b90a      	cbnz	r2, 800f5ca <__lo0bits+0x32>
 800f5c6:	3008      	adds	r0, #8
 800f5c8:	0a1b      	lsrs	r3, r3, #8
 800f5ca:	071a      	lsls	r2, r3, #28
 800f5cc:	bf04      	itt	eq
 800f5ce:	091b      	lsreq	r3, r3, #4
 800f5d0:	3004      	addeq	r0, #4
 800f5d2:	079a      	lsls	r2, r3, #30
 800f5d4:	bf04      	itt	eq
 800f5d6:	089b      	lsreq	r3, r3, #2
 800f5d8:	3002      	addeq	r0, #2
 800f5da:	07da      	lsls	r2, r3, #31
 800f5dc:	d403      	bmi.n	800f5e6 <__lo0bits+0x4e>
 800f5de:	085b      	lsrs	r3, r3, #1
 800f5e0:	f100 0001 	add.w	r0, r0, #1
 800f5e4:	d005      	beq.n	800f5f2 <__lo0bits+0x5a>
 800f5e6:	600b      	str	r3, [r1, #0]
 800f5e8:	4770      	bx	lr
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	e7e9      	b.n	800f5c2 <__lo0bits+0x2a>
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	4770      	bx	lr
 800f5f2:	2020      	movs	r0, #32
 800f5f4:	4770      	bx	lr
	...

0800f5f8 <__i2b>:
 800f5f8:	b510      	push	{r4, lr}
 800f5fa:	460c      	mov	r4, r1
 800f5fc:	2101      	movs	r1, #1
 800f5fe:	f7ff feb9 	bl	800f374 <_Balloc>
 800f602:	4602      	mov	r2, r0
 800f604:	b928      	cbnz	r0, 800f612 <__i2b+0x1a>
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <__i2b+0x24>)
 800f608:	4805      	ldr	r0, [pc, #20]	; (800f620 <__i2b+0x28>)
 800f60a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f60e:	f000 fea9 	bl	8010364 <__assert_func>
 800f612:	2301      	movs	r3, #1
 800f614:	6144      	str	r4, [r0, #20]
 800f616:	6103      	str	r3, [r0, #16]
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	bf00      	nop
 800f61c:	08010a30 	.word	0x08010a30
 800f620:	08010b20 	.word	0x08010b20

0800f624 <__multiply>:
 800f624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f628:	4691      	mov	r9, r2
 800f62a:	690a      	ldr	r2, [r1, #16]
 800f62c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f630:	429a      	cmp	r2, r3
 800f632:	bfb8      	it	lt
 800f634:	460b      	movlt	r3, r1
 800f636:	460c      	mov	r4, r1
 800f638:	bfbc      	itt	lt
 800f63a:	464c      	movlt	r4, r9
 800f63c:	4699      	movlt	r9, r3
 800f63e:	6927      	ldr	r7, [r4, #16]
 800f640:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f644:	68a3      	ldr	r3, [r4, #8]
 800f646:	6861      	ldr	r1, [r4, #4]
 800f648:	eb07 060a 	add.w	r6, r7, sl
 800f64c:	42b3      	cmp	r3, r6
 800f64e:	b085      	sub	sp, #20
 800f650:	bfb8      	it	lt
 800f652:	3101      	addlt	r1, #1
 800f654:	f7ff fe8e 	bl	800f374 <_Balloc>
 800f658:	b930      	cbnz	r0, 800f668 <__multiply+0x44>
 800f65a:	4602      	mov	r2, r0
 800f65c:	4b44      	ldr	r3, [pc, #272]	; (800f770 <__multiply+0x14c>)
 800f65e:	4845      	ldr	r0, [pc, #276]	; (800f774 <__multiply+0x150>)
 800f660:	f240 115d 	movw	r1, #349	; 0x15d
 800f664:	f000 fe7e 	bl	8010364 <__assert_func>
 800f668:	f100 0514 	add.w	r5, r0, #20
 800f66c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f670:	462b      	mov	r3, r5
 800f672:	2200      	movs	r2, #0
 800f674:	4543      	cmp	r3, r8
 800f676:	d321      	bcc.n	800f6bc <__multiply+0x98>
 800f678:	f104 0314 	add.w	r3, r4, #20
 800f67c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f680:	f109 0314 	add.w	r3, r9, #20
 800f684:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f688:	9202      	str	r2, [sp, #8]
 800f68a:	1b3a      	subs	r2, r7, r4
 800f68c:	3a15      	subs	r2, #21
 800f68e:	f022 0203 	bic.w	r2, r2, #3
 800f692:	3204      	adds	r2, #4
 800f694:	f104 0115 	add.w	r1, r4, #21
 800f698:	428f      	cmp	r7, r1
 800f69a:	bf38      	it	cc
 800f69c:	2204      	movcc	r2, #4
 800f69e:	9201      	str	r2, [sp, #4]
 800f6a0:	9a02      	ldr	r2, [sp, #8]
 800f6a2:	9303      	str	r3, [sp, #12]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d80c      	bhi.n	800f6c2 <__multiply+0x9e>
 800f6a8:	2e00      	cmp	r6, #0
 800f6aa:	dd03      	ble.n	800f6b4 <__multiply+0x90>
 800f6ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d05a      	beq.n	800f76a <__multiply+0x146>
 800f6b4:	6106      	str	r6, [r0, #16]
 800f6b6:	b005      	add	sp, #20
 800f6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6bc:	f843 2b04 	str.w	r2, [r3], #4
 800f6c0:	e7d8      	b.n	800f674 <__multiply+0x50>
 800f6c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f6c6:	f1ba 0f00 	cmp.w	sl, #0
 800f6ca:	d024      	beq.n	800f716 <__multiply+0xf2>
 800f6cc:	f104 0e14 	add.w	lr, r4, #20
 800f6d0:	46a9      	mov	r9, r5
 800f6d2:	f04f 0c00 	mov.w	ip, #0
 800f6d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f6da:	f8d9 1000 	ldr.w	r1, [r9]
 800f6de:	fa1f fb82 	uxth.w	fp, r2
 800f6e2:	b289      	uxth	r1, r1
 800f6e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f6e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f6ec:	f8d9 2000 	ldr.w	r2, [r9]
 800f6f0:	4461      	add	r1, ip
 800f6f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f6fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f6fe:	b289      	uxth	r1, r1
 800f700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f704:	4577      	cmp	r7, lr
 800f706:	f849 1b04 	str.w	r1, [r9], #4
 800f70a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f70e:	d8e2      	bhi.n	800f6d6 <__multiply+0xb2>
 800f710:	9a01      	ldr	r2, [sp, #4]
 800f712:	f845 c002 	str.w	ip, [r5, r2]
 800f716:	9a03      	ldr	r2, [sp, #12]
 800f718:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f71c:	3304      	adds	r3, #4
 800f71e:	f1b9 0f00 	cmp.w	r9, #0
 800f722:	d020      	beq.n	800f766 <__multiply+0x142>
 800f724:	6829      	ldr	r1, [r5, #0]
 800f726:	f104 0c14 	add.w	ip, r4, #20
 800f72a:	46ae      	mov	lr, r5
 800f72c:	f04f 0a00 	mov.w	sl, #0
 800f730:	f8bc b000 	ldrh.w	fp, [ip]
 800f734:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f738:	fb09 220b 	mla	r2, r9, fp, r2
 800f73c:	4492      	add	sl, r2
 800f73e:	b289      	uxth	r1, r1
 800f740:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f744:	f84e 1b04 	str.w	r1, [lr], #4
 800f748:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f74c:	f8be 1000 	ldrh.w	r1, [lr]
 800f750:	0c12      	lsrs	r2, r2, #16
 800f752:	fb09 1102 	mla	r1, r9, r2, r1
 800f756:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f75a:	4567      	cmp	r7, ip
 800f75c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f760:	d8e6      	bhi.n	800f730 <__multiply+0x10c>
 800f762:	9a01      	ldr	r2, [sp, #4]
 800f764:	50a9      	str	r1, [r5, r2]
 800f766:	3504      	adds	r5, #4
 800f768:	e79a      	b.n	800f6a0 <__multiply+0x7c>
 800f76a:	3e01      	subs	r6, #1
 800f76c:	e79c      	b.n	800f6a8 <__multiply+0x84>
 800f76e:	bf00      	nop
 800f770:	08010a30 	.word	0x08010a30
 800f774:	08010b20 	.word	0x08010b20

0800f778 <__pow5mult>:
 800f778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f77c:	4615      	mov	r5, r2
 800f77e:	f012 0203 	ands.w	r2, r2, #3
 800f782:	4606      	mov	r6, r0
 800f784:	460f      	mov	r7, r1
 800f786:	d007      	beq.n	800f798 <__pow5mult+0x20>
 800f788:	4c25      	ldr	r4, [pc, #148]	; (800f820 <__pow5mult+0xa8>)
 800f78a:	3a01      	subs	r2, #1
 800f78c:	2300      	movs	r3, #0
 800f78e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f792:	f7ff fe51 	bl	800f438 <__multadd>
 800f796:	4607      	mov	r7, r0
 800f798:	10ad      	asrs	r5, r5, #2
 800f79a:	d03d      	beq.n	800f818 <__pow5mult+0xa0>
 800f79c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f79e:	b97c      	cbnz	r4, 800f7c0 <__pow5mult+0x48>
 800f7a0:	2010      	movs	r0, #16
 800f7a2:	f7fc f995 	bl	800bad0 <malloc>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	6270      	str	r0, [r6, #36]	; 0x24
 800f7aa:	b928      	cbnz	r0, 800f7b8 <__pow5mult+0x40>
 800f7ac:	4b1d      	ldr	r3, [pc, #116]	; (800f824 <__pow5mult+0xac>)
 800f7ae:	481e      	ldr	r0, [pc, #120]	; (800f828 <__pow5mult+0xb0>)
 800f7b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f7b4:	f000 fdd6 	bl	8010364 <__assert_func>
 800f7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7bc:	6004      	str	r4, [r0, #0]
 800f7be:	60c4      	str	r4, [r0, #12]
 800f7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7c8:	b94c      	cbnz	r4, 800f7de <__pow5mult+0x66>
 800f7ca:	f240 2171 	movw	r1, #625	; 0x271
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f7ff ff12 	bl	800f5f8 <__i2b>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7da:	4604      	mov	r4, r0
 800f7dc:	6003      	str	r3, [r0, #0]
 800f7de:	f04f 0900 	mov.w	r9, #0
 800f7e2:	07eb      	lsls	r3, r5, #31
 800f7e4:	d50a      	bpl.n	800f7fc <__pow5mult+0x84>
 800f7e6:	4639      	mov	r1, r7
 800f7e8:	4622      	mov	r2, r4
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f7ff ff1a 	bl	800f624 <__multiply>
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f7ff fdfd 	bl	800f3f4 <_Bfree>
 800f7fa:	4647      	mov	r7, r8
 800f7fc:	106d      	asrs	r5, r5, #1
 800f7fe:	d00b      	beq.n	800f818 <__pow5mult+0xa0>
 800f800:	6820      	ldr	r0, [r4, #0]
 800f802:	b938      	cbnz	r0, 800f814 <__pow5mult+0x9c>
 800f804:	4622      	mov	r2, r4
 800f806:	4621      	mov	r1, r4
 800f808:	4630      	mov	r0, r6
 800f80a:	f7ff ff0b 	bl	800f624 <__multiply>
 800f80e:	6020      	str	r0, [r4, #0]
 800f810:	f8c0 9000 	str.w	r9, [r0]
 800f814:	4604      	mov	r4, r0
 800f816:	e7e4      	b.n	800f7e2 <__pow5mult+0x6a>
 800f818:	4638      	mov	r0, r7
 800f81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f81e:	bf00      	nop
 800f820:	08010c70 	.word	0x08010c70
 800f824:	080109be 	.word	0x080109be
 800f828:	08010b20 	.word	0x08010b20

0800f82c <__lshift>:
 800f82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f830:	460c      	mov	r4, r1
 800f832:	6849      	ldr	r1, [r1, #4]
 800f834:	6923      	ldr	r3, [r4, #16]
 800f836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f83a:	68a3      	ldr	r3, [r4, #8]
 800f83c:	4607      	mov	r7, r0
 800f83e:	4691      	mov	r9, r2
 800f840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f844:	f108 0601 	add.w	r6, r8, #1
 800f848:	42b3      	cmp	r3, r6
 800f84a:	db0b      	blt.n	800f864 <__lshift+0x38>
 800f84c:	4638      	mov	r0, r7
 800f84e:	f7ff fd91 	bl	800f374 <_Balloc>
 800f852:	4605      	mov	r5, r0
 800f854:	b948      	cbnz	r0, 800f86a <__lshift+0x3e>
 800f856:	4602      	mov	r2, r0
 800f858:	4b2a      	ldr	r3, [pc, #168]	; (800f904 <__lshift+0xd8>)
 800f85a:	482b      	ldr	r0, [pc, #172]	; (800f908 <__lshift+0xdc>)
 800f85c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f860:	f000 fd80 	bl	8010364 <__assert_func>
 800f864:	3101      	adds	r1, #1
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	e7ee      	b.n	800f848 <__lshift+0x1c>
 800f86a:	2300      	movs	r3, #0
 800f86c:	f100 0114 	add.w	r1, r0, #20
 800f870:	f100 0210 	add.w	r2, r0, #16
 800f874:	4618      	mov	r0, r3
 800f876:	4553      	cmp	r3, sl
 800f878:	db37      	blt.n	800f8ea <__lshift+0xbe>
 800f87a:	6920      	ldr	r0, [r4, #16]
 800f87c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f880:	f104 0314 	add.w	r3, r4, #20
 800f884:	f019 091f 	ands.w	r9, r9, #31
 800f888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f88c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f890:	d02f      	beq.n	800f8f2 <__lshift+0xc6>
 800f892:	f1c9 0e20 	rsb	lr, r9, #32
 800f896:	468a      	mov	sl, r1
 800f898:	f04f 0c00 	mov.w	ip, #0
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	fa02 f209 	lsl.w	r2, r2, r9
 800f8a2:	ea42 020c 	orr.w	r2, r2, ip
 800f8a6:	f84a 2b04 	str.w	r2, [sl], #4
 800f8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ae:	4298      	cmp	r0, r3
 800f8b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f8b4:	d8f2      	bhi.n	800f89c <__lshift+0x70>
 800f8b6:	1b03      	subs	r3, r0, r4
 800f8b8:	3b15      	subs	r3, #21
 800f8ba:	f023 0303 	bic.w	r3, r3, #3
 800f8be:	3304      	adds	r3, #4
 800f8c0:	f104 0215 	add.w	r2, r4, #21
 800f8c4:	4290      	cmp	r0, r2
 800f8c6:	bf38      	it	cc
 800f8c8:	2304      	movcc	r3, #4
 800f8ca:	f841 c003 	str.w	ip, [r1, r3]
 800f8ce:	f1bc 0f00 	cmp.w	ip, #0
 800f8d2:	d001      	beq.n	800f8d8 <__lshift+0xac>
 800f8d4:	f108 0602 	add.w	r6, r8, #2
 800f8d8:	3e01      	subs	r6, #1
 800f8da:	4638      	mov	r0, r7
 800f8dc:	612e      	str	r6, [r5, #16]
 800f8de:	4621      	mov	r1, r4
 800f8e0:	f7ff fd88 	bl	800f3f4 <_Bfree>
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	e7c1      	b.n	800f876 <__lshift+0x4a>
 800f8f2:	3904      	subs	r1, #4
 800f8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f8fc:	4298      	cmp	r0, r3
 800f8fe:	d8f9      	bhi.n	800f8f4 <__lshift+0xc8>
 800f900:	e7ea      	b.n	800f8d8 <__lshift+0xac>
 800f902:	bf00      	nop
 800f904:	08010a30 	.word	0x08010a30
 800f908:	08010b20 	.word	0x08010b20

0800f90c <__mcmp>:
 800f90c:	b530      	push	{r4, r5, lr}
 800f90e:	6902      	ldr	r2, [r0, #16]
 800f910:	690c      	ldr	r4, [r1, #16]
 800f912:	1b12      	subs	r2, r2, r4
 800f914:	d10e      	bne.n	800f934 <__mcmp+0x28>
 800f916:	f100 0314 	add.w	r3, r0, #20
 800f91a:	3114      	adds	r1, #20
 800f91c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f92c:	42a5      	cmp	r5, r4
 800f92e:	d003      	beq.n	800f938 <__mcmp+0x2c>
 800f930:	d305      	bcc.n	800f93e <__mcmp+0x32>
 800f932:	2201      	movs	r2, #1
 800f934:	4610      	mov	r0, r2
 800f936:	bd30      	pop	{r4, r5, pc}
 800f938:	4283      	cmp	r3, r0
 800f93a:	d3f3      	bcc.n	800f924 <__mcmp+0x18>
 800f93c:	e7fa      	b.n	800f934 <__mcmp+0x28>
 800f93e:	f04f 32ff 	mov.w	r2, #4294967295
 800f942:	e7f7      	b.n	800f934 <__mcmp+0x28>

0800f944 <__mdiff>:
 800f944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f948:	460c      	mov	r4, r1
 800f94a:	4606      	mov	r6, r0
 800f94c:	4611      	mov	r1, r2
 800f94e:	4620      	mov	r0, r4
 800f950:	4690      	mov	r8, r2
 800f952:	f7ff ffdb 	bl	800f90c <__mcmp>
 800f956:	1e05      	subs	r5, r0, #0
 800f958:	d110      	bne.n	800f97c <__mdiff+0x38>
 800f95a:	4629      	mov	r1, r5
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff fd09 	bl	800f374 <_Balloc>
 800f962:	b930      	cbnz	r0, 800f972 <__mdiff+0x2e>
 800f964:	4b3a      	ldr	r3, [pc, #232]	; (800fa50 <__mdiff+0x10c>)
 800f966:	4602      	mov	r2, r0
 800f968:	f240 2132 	movw	r1, #562	; 0x232
 800f96c:	4839      	ldr	r0, [pc, #228]	; (800fa54 <__mdiff+0x110>)
 800f96e:	f000 fcf9 	bl	8010364 <__assert_func>
 800f972:	2301      	movs	r3, #1
 800f974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97c:	bfa4      	itt	ge
 800f97e:	4643      	movge	r3, r8
 800f980:	46a0      	movge	r8, r4
 800f982:	4630      	mov	r0, r6
 800f984:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f988:	bfa6      	itte	ge
 800f98a:	461c      	movge	r4, r3
 800f98c:	2500      	movge	r5, #0
 800f98e:	2501      	movlt	r5, #1
 800f990:	f7ff fcf0 	bl	800f374 <_Balloc>
 800f994:	b920      	cbnz	r0, 800f9a0 <__mdiff+0x5c>
 800f996:	4b2e      	ldr	r3, [pc, #184]	; (800fa50 <__mdiff+0x10c>)
 800f998:	4602      	mov	r2, r0
 800f99a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f99e:	e7e5      	b.n	800f96c <__mdiff+0x28>
 800f9a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9a4:	6926      	ldr	r6, [r4, #16]
 800f9a6:	60c5      	str	r5, [r0, #12]
 800f9a8:	f104 0914 	add.w	r9, r4, #20
 800f9ac:	f108 0514 	add.w	r5, r8, #20
 800f9b0:	f100 0e14 	add.w	lr, r0, #20
 800f9b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f9b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f9bc:	f108 0210 	add.w	r2, r8, #16
 800f9c0:	46f2      	mov	sl, lr
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f9c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f9cc:	fa1f f883 	uxth.w	r8, r3
 800f9d0:	fa11 f18b 	uxtah	r1, r1, fp
 800f9d4:	0c1b      	lsrs	r3, r3, #16
 800f9d6:	eba1 0808 	sub.w	r8, r1, r8
 800f9da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f9de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f9e2:	fa1f f888 	uxth.w	r8, r8
 800f9e6:	1419      	asrs	r1, r3, #16
 800f9e8:	454e      	cmp	r6, r9
 800f9ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f9ee:	f84a 3b04 	str.w	r3, [sl], #4
 800f9f2:	d8e7      	bhi.n	800f9c4 <__mdiff+0x80>
 800f9f4:	1b33      	subs	r3, r6, r4
 800f9f6:	3b15      	subs	r3, #21
 800f9f8:	f023 0303 	bic.w	r3, r3, #3
 800f9fc:	3304      	adds	r3, #4
 800f9fe:	3415      	adds	r4, #21
 800fa00:	42a6      	cmp	r6, r4
 800fa02:	bf38      	it	cc
 800fa04:	2304      	movcc	r3, #4
 800fa06:	441d      	add	r5, r3
 800fa08:	4473      	add	r3, lr
 800fa0a:	469e      	mov	lr, r3
 800fa0c:	462e      	mov	r6, r5
 800fa0e:	4566      	cmp	r6, ip
 800fa10:	d30e      	bcc.n	800fa30 <__mdiff+0xec>
 800fa12:	f10c 0203 	add.w	r2, ip, #3
 800fa16:	1b52      	subs	r2, r2, r5
 800fa18:	f022 0203 	bic.w	r2, r2, #3
 800fa1c:	3d03      	subs	r5, #3
 800fa1e:	45ac      	cmp	ip, r5
 800fa20:	bf38      	it	cc
 800fa22:	2200      	movcc	r2, #0
 800fa24:	441a      	add	r2, r3
 800fa26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa2a:	b17b      	cbz	r3, 800fa4c <__mdiff+0x108>
 800fa2c:	6107      	str	r7, [r0, #16]
 800fa2e:	e7a3      	b.n	800f978 <__mdiff+0x34>
 800fa30:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa34:	fa11 f288 	uxtah	r2, r1, r8
 800fa38:	1414      	asrs	r4, r2, #16
 800fa3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fa3e:	b292      	uxth	r2, r2
 800fa40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fa44:	f84e 2b04 	str.w	r2, [lr], #4
 800fa48:	1421      	asrs	r1, r4, #16
 800fa4a:	e7e0      	b.n	800fa0e <__mdiff+0xca>
 800fa4c:	3f01      	subs	r7, #1
 800fa4e:	e7ea      	b.n	800fa26 <__mdiff+0xe2>
 800fa50:	08010a30 	.word	0x08010a30
 800fa54:	08010b20 	.word	0x08010b20

0800fa58 <__ulp>:
 800fa58:	b082      	sub	sp, #8
 800fa5a:	ed8d 0b00 	vstr	d0, [sp]
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	4912      	ldr	r1, [pc, #72]	; (800faac <__ulp+0x54>)
 800fa62:	4019      	ands	r1, r3
 800fa64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fa68:	2900      	cmp	r1, #0
 800fa6a:	dd05      	ble.n	800fa78 <__ulp+0x20>
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	ec43 2b10 	vmov	d0, r2, r3
 800fa74:	b002      	add	sp, #8
 800fa76:	4770      	bx	lr
 800fa78:	4249      	negs	r1, r1
 800fa7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fa7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	f04f 0300 	mov.w	r3, #0
 800fa8a:	da04      	bge.n	800fa96 <__ulp+0x3e>
 800fa8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fa90:	fa41 f300 	asr.w	r3, r1, r0
 800fa94:	e7ec      	b.n	800fa70 <__ulp+0x18>
 800fa96:	f1a0 0114 	sub.w	r1, r0, #20
 800fa9a:	291e      	cmp	r1, #30
 800fa9c:	bfda      	itte	le
 800fa9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800faa2:	fa20 f101 	lsrle.w	r1, r0, r1
 800faa6:	2101      	movgt	r1, #1
 800faa8:	460a      	mov	r2, r1
 800faaa:	e7e1      	b.n	800fa70 <__ulp+0x18>
 800faac:	7ff00000 	.word	0x7ff00000

0800fab0 <__b2d>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	6905      	ldr	r5, [r0, #16]
 800fab4:	f100 0714 	add.w	r7, r0, #20
 800fab8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fabc:	1f2e      	subs	r6, r5, #4
 800fabe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fac2:	4620      	mov	r0, r4
 800fac4:	f7ff fd48 	bl	800f558 <__hi0bits>
 800fac8:	f1c0 0320 	rsb	r3, r0, #32
 800facc:	280a      	cmp	r0, #10
 800face:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fb4c <__b2d+0x9c>
 800fad2:	600b      	str	r3, [r1, #0]
 800fad4:	dc14      	bgt.n	800fb00 <__b2d+0x50>
 800fad6:	f1c0 0e0b 	rsb	lr, r0, #11
 800fada:	fa24 f10e 	lsr.w	r1, r4, lr
 800fade:	42b7      	cmp	r7, r6
 800fae0:	ea41 030c 	orr.w	r3, r1, ip
 800fae4:	bf34      	ite	cc
 800fae6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800faea:	2100      	movcs	r1, #0
 800faec:	3015      	adds	r0, #21
 800faee:	fa04 f000 	lsl.w	r0, r4, r0
 800faf2:	fa21 f10e 	lsr.w	r1, r1, lr
 800faf6:	ea40 0201 	orr.w	r2, r0, r1
 800fafa:	ec43 2b10 	vmov	d0, r2, r3
 800fafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb00:	42b7      	cmp	r7, r6
 800fb02:	bf3a      	itte	cc
 800fb04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb08:	f1a5 0608 	subcc.w	r6, r5, #8
 800fb0c:	2100      	movcs	r1, #0
 800fb0e:	380b      	subs	r0, #11
 800fb10:	d017      	beq.n	800fb42 <__b2d+0x92>
 800fb12:	f1c0 0c20 	rsb	ip, r0, #32
 800fb16:	fa04 f500 	lsl.w	r5, r4, r0
 800fb1a:	42be      	cmp	r6, r7
 800fb1c:	fa21 f40c 	lsr.w	r4, r1, ip
 800fb20:	ea45 0504 	orr.w	r5, r5, r4
 800fb24:	bf8c      	ite	hi
 800fb26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fb2a:	2400      	movls	r4, #0
 800fb2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fb30:	fa01 f000 	lsl.w	r0, r1, r0
 800fb34:	fa24 f40c 	lsr.w	r4, r4, ip
 800fb38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fb3c:	ea40 0204 	orr.w	r2, r0, r4
 800fb40:	e7db      	b.n	800fafa <__b2d+0x4a>
 800fb42:	ea44 030c 	orr.w	r3, r4, ip
 800fb46:	460a      	mov	r2, r1
 800fb48:	e7d7      	b.n	800fafa <__b2d+0x4a>
 800fb4a:	bf00      	nop
 800fb4c:	3ff00000 	.word	0x3ff00000

0800fb50 <__d2b>:
 800fb50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	4689      	mov	r9, r1
 800fb56:	2101      	movs	r1, #1
 800fb58:	ec57 6b10 	vmov	r6, r7, d0
 800fb5c:	4690      	mov	r8, r2
 800fb5e:	f7ff fc09 	bl	800f374 <_Balloc>
 800fb62:	4604      	mov	r4, r0
 800fb64:	b930      	cbnz	r0, 800fb74 <__d2b+0x24>
 800fb66:	4602      	mov	r2, r0
 800fb68:	4b25      	ldr	r3, [pc, #148]	; (800fc00 <__d2b+0xb0>)
 800fb6a:	4826      	ldr	r0, [pc, #152]	; (800fc04 <__d2b+0xb4>)
 800fb6c:	f240 310a 	movw	r1, #778	; 0x30a
 800fb70:	f000 fbf8 	bl	8010364 <__assert_func>
 800fb74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fb78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb7c:	bb35      	cbnz	r5, 800fbcc <__d2b+0x7c>
 800fb7e:	2e00      	cmp	r6, #0
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	d028      	beq.n	800fbd6 <__d2b+0x86>
 800fb84:	4668      	mov	r0, sp
 800fb86:	9600      	str	r6, [sp, #0]
 800fb88:	f7ff fd06 	bl	800f598 <__lo0bits>
 800fb8c:	9900      	ldr	r1, [sp, #0]
 800fb8e:	b300      	cbz	r0, 800fbd2 <__d2b+0x82>
 800fb90:	9a01      	ldr	r2, [sp, #4]
 800fb92:	f1c0 0320 	rsb	r3, r0, #32
 800fb96:	fa02 f303 	lsl.w	r3, r2, r3
 800fb9a:	430b      	orrs	r3, r1
 800fb9c:	40c2      	lsrs	r2, r0
 800fb9e:	6163      	str	r3, [r4, #20]
 800fba0:	9201      	str	r2, [sp, #4]
 800fba2:	9b01      	ldr	r3, [sp, #4]
 800fba4:	61a3      	str	r3, [r4, #24]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	bf14      	ite	ne
 800fbaa:	2202      	movne	r2, #2
 800fbac:	2201      	moveq	r2, #1
 800fbae:	6122      	str	r2, [r4, #16]
 800fbb0:	b1d5      	cbz	r5, 800fbe8 <__d2b+0x98>
 800fbb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fbb6:	4405      	add	r5, r0
 800fbb8:	f8c9 5000 	str.w	r5, [r9]
 800fbbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbc0:	f8c8 0000 	str.w	r0, [r8]
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	b003      	add	sp, #12
 800fbc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbd0:	e7d5      	b.n	800fb7e <__d2b+0x2e>
 800fbd2:	6161      	str	r1, [r4, #20]
 800fbd4:	e7e5      	b.n	800fba2 <__d2b+0x52>
 800fbd6:	a801      	add	r0, sp, #4
 800fbd8:	f7ff fcde 	bl	800f598 <__lo0bits>
 800fbdc:	9b01      	ldr	r3, [sp, #4]
 800fbde:	6163      	str	r3, [r4, #20]
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	6122      	str	r2, [r4, #16]
 800fbe4:	3020      	adds	r0, #32
 800fbe6:	e7e3      	b.n	800fbb0 <__d2b+0x60>
 800fbe8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fbf0:	f8c9 0000 	str.w	r0, [r9]
 800fbf4:	6918      	ldr	r0, [r3, #16]
 800fbf6:	f7ff fcaf 	bl	800f558 <__hi0bits>
 800fbfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbfe:	e7df      	b.n	800fbc0 <__d2b+0x70>
 800fc00:	08010a30 	.word	0x08010a30
 800fc04:	08010b20 	.word	0x08010b20

0800fc08 <__ratio>:
 800fc08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	4688      	mov	r8, r1
 800fc0e:	4669      	mov	r1, sp
 800fc10:	4681      	mov	r9, r0
 800fc12:	f7ff ff4d 	bl	800fab0 <__b2d>
 800fc16:	a901      	add	r1, sp, #4
 800fc18:	4640      	mov	r0, r8
 800fc1a:	ec55 4b10 	vmov	r4, r5, d0
 800fc1e:	f7ff ff47 	bl	800fab0 <__b2d>
 800fc22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc2a:	eba3 0c02 	sub.w	ip, r3, r2
 800fc2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc32:	1a9b      	subs	r3, r3, r2
 800fc34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fc38:	ec51 0b10 	vmov	r0, r1, d0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	bfd6      	itet	le
 800fc40:	460a      	movle	r2, r1
 800fc42:	462a      	movgt	r2, r5
 800fc44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc48:	468b      	mov	fp, r1
 800fc4a:	462f      	mov	r7, r5
 800fc4c:	bfd4      	ite	le
 800fc4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fc52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fc56:	4620      	mov	r0, r4
 800fc58:	ee10 2a10 	vmov	r2, s0
 800fc5c:	465b      	mov	r3, fp
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f7f0 fdf4 	bl	800084c <__aeabi_ddiv>
 800fc64:	ec41 0b10 	vmov	d0, r0, r1
 800fc68:	b003      	add	sp, #12
 800fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc6e <__copybits>:
 800fc6e:	3901      	subs	r1, #1
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	1149      	asrs	r1, r1, #5
 800fc74:	6914      	ldr	r4, [r2, #16]
 800fc76:	3101      	adds	r1, #1
 800fc78:	f102 0314 	add.w	r3, r2, #20
 800fc7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc84:	1f05      	subs	r5, r0, #4
 800fc86:	42a3      	cmp	r3, r4
 800fc88:	d30c      	bcc.n	800fca4 <__copybits+0x36>
 800fc8a:	1aa3      	subs	r3, r4, r2
 800fc8c:	3b11      	subs	r3, #17
 800fc8e:	f023 0303 	bic.w	r3, r3, #3
 800fc92:	3211      	adds	r2, #17
 800fc94:	42a2      	cmp	r2, r4
 800fc96:	bf88      	it	hi
 800fc98:	2300      	movhi	r3, #0
 800fc9a:	4418      	add	r0, r3
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4288      	cmp	r0, r1
 800fca0:	d305      	bcc.n	800fcae <__copybits+0x40>
 800fca2:	bd70      	pop	{r4, r5, r6, pc}
 800fca4:	f853 6b04 	ldr.w	r6, [r3], #4
 800fca8:	f845 6f04 	str.w	r6, [r5, #4]!
 800fcac:	e7eb      	b.n	800fc86 <__copybits+0x18>
 800fcae:	f840 3b04 	str.w	r3, [r0], #4
 800fcb2:	e7f4      	b.n	800fc9e <__copybits+0x30>

0800fcb4 <__any_on>:
 800fcb4:	f100 0214 	add.w	r2, r0, #20
 800fcb8:	6900      	ldr	r0, [r0, #16]
 800fcba:	114b      	asrs	r3, r1, #5
 800fcbc:	4298      	cmp	r0, r3
 800fcbe:	b510      	push	{r4, lr}
 800fcc0:	db11      	blt.n	800fce6 <__any_on+0x32>
 800fcc2:	dd0a      	ble.n	800fcda <__any_on+0x26>
 800fcc4:	f011 011f 	ands.w	r1, r1, #31
 800fcc8:	d007      	beq.n	800fcda <__any_on+0x26>
 800fcca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fcce:	fa24 f001 	lsr.w	r0, r4, r1
 800fcd2:	fa00 f101 	lsl.w	r1, r0, r1
 800fcd6:	428c      	cmp	r4, r1
 800fcd8:	d10b      	bne.n	800fcf2 <__any_on+0x3e>
 800fcda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d803      	bhi.n	800fcea <__any_on+0x36>
 800fce2:	2000      	movs	r0, #0
 800fce4:	bd10      	pop	{r4, pc}
 800fce6:	4603      	mov	r3, r0
 800fce8:	e7f7      	b.n	800fcda <__any_on+0x26>
 800fcea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fcee:	2900      	cmp	r1, #0
 800fcf0:	d0f5      	beq.n	800fcde <__any_on+0x2a>
 800fcf2:	2001      	movs	r0, #1
 800fcf4:	e7f6      	b.n	800fce4 <__any_on+0x30>

0800fcf6 <_calloc_r>:
 800fcf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcf8:	fba1 2402 	umull	r2, r4, r1, r2
 800fcfc:	b94c      	cbnz	r4, 800fd12 <_calloc_r+0x1c>
 800fcfe:	4611      	mov	r1, r2
 800fd00:	9201      	str	r2, [sp, #4]
 800fd02:	f7fb ff77 	bl	800bbf4 <_malloc_r>
 800fd06:	9a01      	ldr	r2, [sp, #4]
 800fd08:	4605      	mov	r5, r0
 800fd0a:	b930      	cbnz	r0, 800fd1a <_calloc_r+0x24>
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	b003      	add	sp, #12
 800fd10:	bd30      	pop	{r4, r5, pc}
 800fd12:	220c      	movs	r2, #12
 800fd14:	6002      	str	r2, [r0, #0]
 800fd16:	2500      	movs	r5, #0
 800fd18:	e7f8      	b.n	800fd0c <_calloc_r+0x16>
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	f7fb fef6 	bl	800bb0c <memset>
 800fd20:	e7f4      	b.n	800fd0c <_calloc_r+0x16>

0800fd22 <__ssputs_r>:
 800fd22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd26:	688e      	ldr	r6, [r1, #8]
 800fd28:	429e      	cmp	r6, r3
 800fd2a:	4682      	mov	sl, r0
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	4690      	mov	r8, r2
 800fd30:	461f      	mov	r7, r3
 800fd32:	d838      	bhi.n	800fda6 <__ssputs_r+0x84>
 800fd34:	898a      	ldrh	r2, [r1, #12]
 800fd36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd3a:	d032      	beq.n	800fda2 <__ssputs_r+0x80>
 800fd3c:	6825      	ldr	r5, [r4, #0]
 800fd3e:	6909      	ldr	r1, [r1, #16]
 800fd40:	eba5 0901 	sub.w	r9, r5, r1
 800fd44:	6965      	ldr	r5, [r4, #20]
 800fd46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd4e:	3301      	adds	r3, #1
 800fd50:	444b      	add	r3, r9
 800fd52:	106d      	asrs	r5, r5, #1
 800fd54:	429d      	cmp	r5, r3
 800fd56:	bf38      	it	cc
 800fd58:	461d      	movcc	r5, r3
 800fd5a:	0553      	lsls	r3, r2, #21
 800fd5c:	d531      	bpl.n	800fdc2 <__ssputs_r+0xa0>
 800fd5e:	4629      	mov	r1, r5
 800fd60:	f7fb ff48 	bl	800bbf4 <_malloc_r>
 800fd64:	4606      	mov	r6, r0
 800fd66:	b950      	cbnz	r0, 800fd7e <__ssputs_r+0x5c>
 800fd68:	230c      	movs	r3, #12
 800fd6a:	f8ca 3000 	str.w	r3, [sl]
 800fd6e:	89a3      	ldrh	r3, [r4, #12]
 800fd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd74:	81a3      	strh	r3, [r4, #12]
 800fd76:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7e:	6921      	ldr	r1, [r4, #16]
 800fd80:	464a      	mov	r2, r9
 800fd82:	f7fb feb5 	bl	800baf0 <memcpy>
 800fd86:	89a3      	ldrh	r3, [r4, #12]
 800fd88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd90:	81a3      	strh	r3, [r4, #12]
 800fd92:	6126      	str	r6, [r4, #16]
 800fd94:	6165      	str	r5, [r4, #20]
 800fd96:	444e      	add	r6, r9
 800fd98:	eba5 0509 	sub.w	r5, r5, r9
 800fd9c:	6026      	str	r6, [r4, #0]
 800fd9e:	60a5      	str	r5, [r4, #8]
 800fda0:	463e      	mov	r6, r7
 800fda2:	42be      	cmp	r6, r7
 800fda4:	d900      	bls.n	800fda8 <__ssputs_r+0x86>
 800fda6:	463e      	mov	r6, r7
 800fda8:	6820      	ldr	r0, [r4, #0]
 800fdaa:	4632      	mov	r2, r6
 800fdac:	4641      	mov	r1, r8
 800fdae:	f000 fb4d 	bl	801044c <memmove>
 800fdb2:	68a3      	ldr	r3, [r4, #8]
 800fdb4:	1b9b      	subs	r3, r3, r6
 800fdb6:	60a3      	str	r3, [r4, #8]
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	4433      	add	r3, r6
 800fdbc:	6023      	str	r3, [r4, #0]
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	e7db      	b.n	800fd7a <__ssputs_r+0x58>
 800fdc2:	462a      	mov	r2, r5
 800fdc4:	f000 fb5c 	bl	8010480 <_realloc_r>
 800fdc8:	4606      	mov	r6, r0
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d1e1      	bne.n	800fd92 <__ssputs_r+0x70>
 800fdce:	6921      	ldr	r1, [r4, #16]
 800fdd0:	4650      	mov	r0, sl
 800fdd2:	f7fb fea3 	bl	800bb1c <_free_r>
 800fdd6:	e7c7      	b.n	800fd68 <__ssputs_r+0x46>

0800fdd8 <_svfiprintf_r>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	4698      	mov	r8, r3
 800fdde:	898b      	ldrh	r3, [r1, #12]
 800fde0:	061b      	lsls	r3, r3, #24
 800fde2:	b09d      	sub	sp, #116	; 0x74
 800fde4:	4607      	mov	r7, r0
 800fde6:	460d      	mov	r5, r1
 800fde8:	4614      	mov	r4, r2
 800fdea:	d50e      	bpl.n	800fe0a <_svfiprintf_r+0x32>
 800fdec:	690b      	ldr	r3, [r1, #16]
 800fdee:	b963      	cbnz	r3, 800fe0a <_svfiprintf_r+0x32>
 800fdf0:	2140      	movs	r1, #64	; 0x40
 800fdf2:	f7fb feff 	bl	800bbf4 <_malloc_r>
 800fdf6:	6028      	str	r0, [r5, #0]
 800fdf8:	6128      	str	r0, [r5, #16]
 800fdfa:	b920      	cbnz	r0, 800fe06 <_svfiprintf_r+0x2e>
 800fdfc:	230c      	movs	r3, #12
 800fdfe:	603b      	str	r3, [r7, #0]
 800fe00:	f04f 30ff 	mov.w	r0, #4294967295
 800fe04:	e0d1      	b.n	800ffaa <_svfiprintf_r+0x1d2>
 800fe06:	2340      	movs	r3, #64	; 0x40
 800fe08:	616b      	str	r3, [r5, #20]
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe0e:	2320      	movs	r3, #32
 800fe10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe14:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe18:	2330      	movs	r3, #48	; 0x30
 800fe1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ffc4 <_svfiprintf_r+0x1ec>
 800fe1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe22:	f04f 0901 	mov.w	r9, #1
 800fe26:	4623      	mov	r3, r4
 800fe28:	469a      	mov	sl, r3
 800fe2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe2e:	b10a      	cbz	r2, 800fe34 <_svfiprintf_r+0x5c>
 800fe30:	2a25      	cmp	r2, #37	; 0x25
 800fe32:	d1f9      	bne.n	800fe28 <_svfiprintf_r+0x50>
 800fe34:	ebba 0b04 	subs.w	fp, sl, r4
 800fe38:	d00b      	beq.n	800fe52 <_svfiprintf_r+0x7a>
 800fe3a:	465b      	mov	r3, fp
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	4629      	mov	r1, r5
 800fe40:	4638      	mov	r0, r7
 800fe42:	f7ff ff6e 	bl	800fd22 <__ssputs_r>
 800fe46:	3001      	adds	r0, #1
 800fe48:	f000 80aa 	beq.w	800ffa0 <_svfiprintf_r+0x1c8>
 800fe4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe4e:	445a      	add	r2, fp
 800fe50:	9209      	str	r2, [sp, #36]	; 0x24
 800fe52:	f89a 3000 	ldrb.w	r3, [sl]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	f000 80a2 	beq.w	800ffa0 <_svfiprintf_r+0x1c8>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe66:	f10a 0a01 	add.w	sl, sl, #1
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	9307      	str	r3, [sp, #28]
 800fe6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe72:	931a      	str	r3, [sp, #104]	; 0x68
 800fe74:	4654      	mov	r4, sl
 800fe76:	2205      	movs	r2, #5
 800fe78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe7c:	4851      	ldr	r0, [pc, #324]	; (800ffc4 <_svfiprintf_r+0x1ec>)
 800fe7e:	f7f0 f9af 	bl	80001e0 <memchr>
 800fe82:	9a04      	ldr	r2, [sp, #16]
 800fe84:	b9d8      	cbnz	r0, 800febe <_svfiprintf_r+0xe6>
 800fe86:	06d0      	lsls	r0, r2, #27
 800fe88:	bf44      	itt	mi
 800fe8a:	2320      	movmi	r3, #32
 800fe8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe90:	0711      	lsls	r1, r2, #28
 800fe92:	bf44      	itt	mi
 800fe94:	232b      	movmi	r3, #43	; 0x2b
 800fe96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe9a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe9e:	2b2a      	cmp	r3, #42	; 0x2a
 800fea0:	d015      	beq.n	800fece <_svfiprintf_r+0xf6>
 800fea2:	9a07      	ldr	r2, [sp, #28]
 800fea4:	4654      	mov	r4, sl
 800fea6:	2000      	movs	r0, #0
 800fea8:	f04f 0c0a 	mov.w	ip, #10
 800feac:	4621      	mov	r1, r4
 800feae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feb2:	3b30      	subs	r3, #48	; 0x30
 800feb4:	2b09      	cmp	r3, #9
 800feb6:	d94e      	bls.n	800ff56 <_svfiprintf_r+0x17e>
 800feb8:	b1b0      	cbz	r0, 800fee8 <_svfiprintf_r+0x110>
 800feba:	9207      	str	r2, [sp, #28]
 800febc:	e014      	b.n	800fee8 <_svfiprintf_r+0x110>
 800febe:	eba0 0308 	sub.w	r3, r0, r8
 800fec2:	fa09 f303 	lsl.w	r3, r9, r3
 800fec6:	4313      	orrs	r3, r2
 800fec8:	9304      	str	r3, [sp, #16]
 800feca:	46a2      	mov	sl, r4
 800fecc:	e7d2      	b.n	800fe74 <_svfiprintf_r+0x9c>
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	1d19      	adds	r1, r3, #4
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	9103      	str	r1, [sp, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	bfbb      	ittet	lt
 800feda:	425b      	neglt	r3, r3
 800fedc:	f042 0202 	orrlt.w	r2, r2, #2
 800fee0:	9307      	strge	r3, [sp, #28]
 800fee2:	9307      	strlt	r3, [sp, #28]
 800fee4:	bfb8      	it	lt
 800fee6:	9204      	strlt	r2, [sp, #16]
 800fee8:	7823      	ldrb	r3, [r4, #0]
 800feea:	2b2e      	cmp	r3, #46	; 0x2e
 800feec:	d10c      	bne.n	800ff08 <_svfiprintf_r+0x130>
 800feee:	7863      	ldrb	r3, [r4, #1]
 800fef0:	2b2a      	cmp	r3, #42	; 0x2a
 800fef2:	d135      	bne.n	800ff60 <_svfiprintf_r+0x188>
 800fef4:	9b03      	ldr	r3, [sp, #12]
 800fef6:	1d1a      	adds	r2, r3, #4
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	9203      	str	r2, [sp, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bfb8      	it	lt
 800ff00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff04:	3402      	adds	r4, #2
 800ff06:	9305      	str	r3, [sp, #20]
 800ff08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ffd4 <_svfiprintf_r+0x1fc>
 800ff0c:	7821      	ldrb	r1, [r4, #0]
 800ff0e:	2203      	movs	r2, #3
 800ff10:	4650      	mov	r0, sl
 800ff12:	f7f0 f965 	bl	80001e0 <memchr>
 800ff16:	b140      	cbz	r0, 800ff2a <_svfiprintf_r+0x152>
 800ff18:	2340      	movs	r3, #64	; 0x40
 800ff1a:	eba0 000a 	sub.w	r0, r0, sl
 800ff1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ff22:	9b04      	ldr	r3, [sp, #16]
 800ff24:	4303      	orrs	r3, r0
 800ff26:	3401      	adds	r4, #1
 800ff28:	9304      	str	r3, [sp, #16]
 800ff2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff2e:	4826      	ldr	r0, [pc, #152]	; (800ffc8 <_svfiprintf_r+0x1f0>)
 800ff30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff34:	2206      	movs	r2, #6
 800ff36:	f7f0 f953 	bl	80001e0 <memchr>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d038      	beq.n	800ffb0 <_svfiprintf_r+0x1d8>
 800ff3e:	4b23      	ldr	r3, [pc, #140]	; (800ffcc <_svfiprintf_r+0x1f4>)
 800ff40:	bb1b      	cbnz	r3, 800ff8a <_svfiprintf_r+0x1b2>
 800ff42:	9b03      	ldr	r3, [sp, #12]
 800ff44:	3307      	adds	r3, #7
 800ff46:	f023 0307 	bic.w	r3, r3, #7
 800ff4a:	3308      	adds	r3, #8
 800ff4c:	9303      	str	r3, [sp, #12]
 800ff4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff50:	4433      	add	r3, r6
 800ff52:	9309      	str	r3, [sp, #36]	; 0x24
 800ff54:	e767      	b.n	800fe26 <_svfiprintf_r+0x4e>
 800ff56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	2001      	movs	r0, #1
 800ff5e:	e7a5      	b.n	800feac <_svfiprintf_r+0xd4>
 800ff60:	2300      	movs	r3, #0
 800ff62:	3401      	adds	r4, #1
 800ff64:	9305      	str	r3, [sp, #20]
 800ff66:	4619      	mov	r1, r3
 800ff68:	f04f 0c0a 	mov.w	ip, #10
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff72:	3a30      	subs	r2, #48	; 0x30
 800ff74:	2a09      	cmp	r2, #9
 800ff76:	d903      	bls.n	800ff80 <_svfiprintf_r+0x1a8>
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d0c5      	beq.n	800ff08 <_svfiprintf_r+0x130>
 800ff7c:	9105      	str	r1, [sp, #20]
 800ff7e:	e7c3      	b.n	800ff08 <_svfiprintf_r+0x130>
 800ff80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff84:	4604      	mov	r4, r0
 800ff86:	2301      	movs	r3, #1
 800ff88:	e7f0      	b.n	800ff6c <_svfiprintf_r+0x194>
 800ff8a:	ab03      	add	r3, sp, #12
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	462a      	mov	r2, r5
 800ff90:	4b0f      	ldr	r3, [pc, #60]	; (800ffd0 <_svfiprintf_r+0x1f8>)
 800ff92:	a904      	add	r1, sp, #16
 800ff94:	4638      	mov	r0, r7
 800ff96:	f7fb ff41 	bl	800be1c <_printf_float>
 800ff9a:	1c42      	adds	r2, r0, #1
 800ff9c:	4606      	mov	r6, r0
 800ff9e:	d1d6      	bne.n	800ff4e <_svfiprintf_r+0x176>
 800ffa0:	89ab      	ldrh	r3, [r5, #12]
 800ffa2:	065b      	lsls	r3, r3, #25
 800ffa4:	f53f af2c 	bmi.w	800fe00 <_svfiprintf_r+0x28>
 800ffa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffaa:	b01d      	add	sp, #116	; 0x74
 800ffac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb0:	ab03      	add	r3, sp, #12
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	462a      	mov	r2, r5
 800ffb6:	4b06      	ldr	r3, [pc, #24]	; (800ffd0 <_svfiprintf_r+0x1f8>)
 800ffb8:	a904      	add	r1, sp, #16
 800ffba:	4638      	mov	r0, r7
 800ffbc:	f7fc f9d2 	bl	800c364 <_printf_i>
 800ffc0:	e7eb      	b.n	800ff9a <_svfiprintf_r+0x1c2>
 800ffc2:	bf00      	nop
 800ffc4:	08010c7c 	.word	0x08010c7c
 800ffc8:	08010c86 	.word	0x08010c86
 800ffcc:	0800be1d 	.word	0x0800be1d
 800ffd0:	0800fd23 	.word	0x0800fd23
 800ffd4:	08010c82 	.word	0x08010c82

0800ffd8 <__sfputc_r>:
 800ffd8:	6893      	ldr	r3, [r2, #8]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	b410      	push	{r4}
 800ffe0:	6093      	str	r3, [r2, #8]
 800ffe2:	da08      	bge.n	800fff6 <__sfputc_r+0x1e>
 800ffe4:	6994      	ldr	r4, [r2, #24]
 800ffe6:	42a3      	cmp	r3, r4
 800ffe8:	db01      	blt.n	800ffee <__sfputc_r+0x16>
 800ffea:	290a      	cmp	r1, #10
 800ffec:	d103      	bne.n	800fff6 <__sfputc_r+0x1e>
 800ffee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fff2:	f7fd bcd5 	b.w	800d9a0 <__swbuf_r>
 800fff6:	6813      	ldr	r3, [r2, #0]
 800fff8:	1c58      	adds	r0, r3, #1
 800fffa:	6010      	str	r0, [r2, #0]
 800fffc:	7019      	strb	r1, [r3, #0]
 800fffe:	4608      	mov	r0, r1
 8010000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010004:	4770      	bx	lr

08010006 <__sfputs_r>:
 8010006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010008:	4606      	mov	r6, r0
 801000a:	460f      	mov	r7, r1
 801000c:	4614      	mov	r4, r2
 801000e:	18d5      	adds	r5, r2, r3
 8010010:	42ac      	cmp	r4, r5
 8010012:	d101      	bne.n	8010018 <__sfputs_r+0x12>
 8010014:	2000      	movs	r0, #0
 8010016:	e007      	b.n	8010028 <__sfputs_r+0x22>
 8010018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801001c:	463a      	mov	r2, r7
 801001e:	4630      	mov	r0, r6
 8010020:	f7ff ffda 	bl	800ffd8 <__sfputc_r>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d1f3      	bne.n	8010010 <__sfputs_r+0xa>
 8010028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801002c <_vfiprintf_r>:
 801002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010030:	460d      	mov	r5, r1
 8010032:	b09d      	sub	sp, #116	; 0x74
 8010034:	4614      	mov	r4, r2
 8010036:	4698      	mov	r8, r3
 8010038:	4606      	mov	r6, r0
 801003a:	b118      	cbz	r0, 8010044 <_vfiprintf_r+0x18>
 801003c:	6983      	ldr	r3, [r0, #24]
 801003e:	b90b      	cbnz	r3, 8010044 <_vfiprintf_r+0x18>
 8010040:	f7fe fd02 	bl	800ea48 <__sinit>
 8010044:	4b89      	ldr	r3, [pc, #548]	; (801026c <_vfiprintf_r+0x240>)
 8010046:	429d      	cmp	r5, r3
 8010048:	d11b      	bne.n	8010082 <_vfiprintf_r+0x56>
 801004a:	6875      	ldr	r5, [r6, #4]
 801004c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801004e:	07d9      	lsls	r1, r3, #31
 8010050:	d405      	bmi.n	801005e <_vfiprintf_r+0x32>
 8010052:	89ab      	ldrh	r3, [r5, #12]
 8010054:	059a      	lsls	r2, r3, #22
 8010056:	d402      	bmi.n	801005e <_vfiprintf_r+0x32>
 8010058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801005a:	f7ff f906 	bl	800f26a <__retarget_lock_acquire_recursive>
 801005e:	89ab      	ldrh	r3, [r5, #12]
 8010060:	071b      	lsls	r3, r3, #28
 8010062:	d501      	bpl.n	8010068 <_vfiprintf_r+0x3c>
 8010064:	692b      	ldr	r3, [r5, #16]
 8010066:	b9eb      	cbnz	r3, 80100a4 <_vfiprintf_r+0x78>
 8010068:	4629      	mov	r1, r5
 801006a:	4630      	mov	r0, r6
 801006c:	f7fd fcea 	bl	800da44 <__swsetup_r>
 8010070:	b1c0      	cbz	r0, 80100a4 <_vfiprintf_r+0x78>
 8010072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010074:	07dc      	lsls	r4, r3, #31
 8010076:	d50e      	bpl.n	8010096 <_vfiprintf_r+0x6a>
 8010078:	f04f 30ff 	mov.w	r0, #4294967295
 801007c:	b01d      	add	sp, #116	; 0x74
 801007e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010082:	4b7b      	ldr	r3, [pc, #492]	; (8010270 <_vfiprintf_r+0x244>)
 8010084:	429d      	cmp	r5, r3
 8010086:	d101      	bne.n	801008c <_vfiprintf_r+0x60>
 8010088:	68b5      	ldr	r5, [r6, #8]
 801008a:	e7df      	b.n	801004c <_vfiprintf_r+0x20>
 801008c:	4b79      	ldr	r3, [pc, #484]	; (8010274 <_vfiprintf_r+0x248>)
 801008e:	429d      	cmp	r5, r3
 8010090:	bf08      	it	eq
 8010092:	68f5      	ldreq	r5, [r6, #12]
 8010094:	e7da      	b.n	801004c <_vfiprintf_r+0x20>
 8010096:	89ab      	ldrh	r3, [r5, #12]
 8010098:	0598      	lsls	r0, r3, #22
 801009a:	d4ed      	bmi.n	8010078 <_vfiprintf_r+0x4c>
 801009c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801009e:	f7ff f8e5 	bl	800f26c <__retarget_lock_release_recursive>
 80100a2:	e7e9      	b.n	8010078 <_vfiprintf_r+0x4c>
 80100a4:	2300      	movs	r3, #0
 80100a6:	9309      	str	r3, [sp, #36]	; 0x24
 80100a8:	2320      	movs	r3, #32
 80100aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80100b2:	2330      	movs	r3, #48	; 0x30
 80100b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010278 <_vfiprintf_r+0x24c>
 80100b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100bc:	f04f 0901 	mov.w	r9, #1
 80100c0:	4623      	mov	r3, r4
 80100c2:	469a      	mov	sl, r3
 80100c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100c8:	b10a      	cbz	r2, 80100ce <_vfiprintf_r+0xa2>
 80100ca:	2a25      	cmp	r2, #37	; 0x25
 80100cc:	d1f9      	bne.n	80100c2 <_vfiprintf_r+0x96>
 80100ce:	ebba 0b04 	subs.w	fp, sl, r4
 80100d2:	d00b      	beq.n	80100ec <_vfiprintf_r+0xc0>
 80100d4:	465b      	mov	r3, fp
 80100d6:	4622      	mov	r2, r4
 80100d8:	4629      	mov	r1, r5
 80100da:	4630      	mov	r0, r6
 80100dc:	f7ff ff93 	bl	8010006 <__sfputs_r>
 80100e0:	3001      	adds	r0, #1
 80100e2:	f000 80aa 	beq.w	801023a <_vfiprintf_r+0x20e>
 80100e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100e8:	445a      	add	r2, fp
 80100ea:	9209      	str	r2, [sp, #36]	; 0x24
 80100ec:	f89a 3000 	ldrb.w	r3, [sl]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f000 80a2 	beq.w	801023a <_vfiprintf_r+0x20e>
 80100f6:	2300      	movs	r3, #0
 80100f8:	f04f 32ff 	mov.w	r2, #4294967295
 80100fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010100:	f10a 0a01 	add.w	sl, sl, #1
 8010104:	9304      	str	r3, [sp, #16]
 8010106:	9307      	str	r3, [sp, #28]
 8010108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801010c:	931a      	str	r3, [sp, #104]	; 0x68
 801010e:	4654      	mov	r4, sl
 8010110:	2205      	movs	r2, #5
 8010112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010116:	4858      	ldr	r0, [pc, #352]	; (8010278 <_vfiprintf_r+0x24c>)
 8010118:	f7f0 f862 	bl	80001e0 <memchr>
 801011c:	9a04      	ldr	r2, [sp, #16]
 801011e:	b9d8      	cbnz	r0, 8010158 <_vfiprintf_r+0x12c>
 8010120:	06d1      	lsls	r1, r2, #27
 8010122:	bf44      	itt	mi
 8010124:	2320      	movmi	r3, #32
 8010126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801012a:	0713      	lsls	r3, r2, #28
 801012c:	bf44      	itt	mi
 801012e:	232b      	movmi	r3, #43	; 0x2b
 8010130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010134:	f89a 3000 	ldrb.w	r3, [sl]
 8010138:	2b2a      	cmp	r3, #42	; 0x2a
 801013a:	d015      	beq.n	8010168 <_vfiprintf_r+0x13c>
 801013c:	9a07      	ldr	r2, [sp, #28]
 801013e:	4654      	mov	r4, sl
 8010140:	2000      	movs	r0, #0
 8010142:	f04f 0c0a 	mov.w	ip, #10
 8010146:	4621      	mov	r1, r4
 8010148:	f811 3b01 	ldrb.w	r3, [r1], #1
 801014c:	3b30      	subs	r3, #48	; 0x30
 801014e:	2b09      	cmp	r3, #9
 8010150:	d94e      	bls.n	80101f0 <_vfiprintf_r+0x1c4>
 8010152:	b1b0      	cbz	r0, 8010182 <_vfiprintf_r+0x156>
 8010154:	9207      	str	r2, [sp, #28]
 8010156:	e014      	b.n	8010182 <_vfiprintf_r+0x156>
 8010158:	eba0 0308 	sub.w	r3, r0, r8
 801015c:	fa09 f303 	lsl.w	r3, r9, r3
 8010160:	4313      	orrs	r3, r2
 8010162:	9304      	str	r3, [sp, #16]
 8010164:	46a2      	mov	sl, r4
 8010166:	e7d2      	b.n	801010e <_vfiprintf_r+0xe2>
 8010168:	9b03      	ldr	r3, [sp, #12]
 801016a:	1d19      	adds	r1, r3, #4
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	9103      	str	r1, [sp, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	bfbb      	ittet	lt
 8010174:	425b      	neglt	r3, r3
 8010176:	f042 0202 	orrlt.w	r2, r2, #2
 801017a:	9307      	strge	r3, [sp, #28]
 801017c:	9307      	strlt	r3, [sp, #28]
 801017e:	bfb8      	it	lt
 8010180:	9204      	strlt	r2, [sp, #16]
 8010182:	7823      	ldrb	r3, [r4, #0]
 8010184:	2b2e      	cmp	r3, #46	; 0x2e
 8010186:	d10c      	bne.n	80101a2 <_vfiprintf_r+0x176>
 8010188:	7863      	ldrb	r3, [r4, #1]
 801018a:	2b2a      	cmp	r3, #42	; 0x2a
 801018c:	d135      	bne.n	80101fa <_vfiprintf_r+0x1ce>
 801018e:	9b03      	ldr	r3, [sp, #12]
 8010190:	1d1a      	adds	r2, r3, #4
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	9203      	str	r2, [sp, #12]
 8010196:	2b00      	cmp	r3, #0
 8010198:	bfb8      	it	lt
 801019a:	f04f 33ff 	movlt.w	r3, #4294967295
 801019e:	3402      	adds	r4, #2
 80101a0:	9305      	str	r3, [sp, #20]
 80101a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010288 <_vfiprintf_r+0x25c>
 80101a6:	7821      	ldrb	r1, [r4, #0]
 80101a8:	2203      	movs	r2, #3
 80101aa:	4650      	mov	r0, sl
 80101ac:	f7f0 f818 	bl	80001e0 <memchr>
 80101b0:	b140      	cbz	r0, 80101c4 <_vfiprintf_r+0x198>
 80101b2:	2340      	movs	r3, #64	; 0x40
 80101b4:	eba0 000a 	sub.w	r0, r0, sl
 80101b8:	fa03 f000 	lsl.w	r0, r3, r0
 80101bc:	9b04      	ldr	r3, [sp, #16]
 80101be:	4303      	orrs	r3, r0
 80101c0:	3401      	adds	r4, #1
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101c8:	482c      	ldr	r0, [pc, #176]	; (801027c <_vfiprintf_r+0x250>)
 80101ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101ce:	2206      	movs	r2, #6
 80101d0:	f7f0 f806 	bl	80001e0 <memchr>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d03f      	beq.n	8010258 <_vfiprintf_r+0x22c>
 80101d8:	4b29      	ldr	r3, [pc, #164]	; (8010280 <_vfiprintf_r+0x254>)
 80101da:	bb1b      	cbnz	r3, 8010224 <_vfiprintf_r+0x1f8>
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	3307      	adds	r3, #7
 80101e0:	f023 0307 	bic.w	r3, r3, #7
 80101e4:	3308      	adds	r3, #8
 80101e6:	9303      	str	r3, [sp, #12]
 80101e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ea:	443b      	add	r3, r7
 80101ec:	9309      	str	r3, [sp, #36]	; 0x24
 80101ee:	e767      	b.n	80100c0 <_vfiprintf_r+0x94>
 80101f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80101f4:	460c      	mov	r4, r1
 80101f6:	2001      	movs	r0, #1
 80101f8:	e7a5      	b.n	8010146 <_vfiprintf_r+0x11a>
 80101fa:	2300      	movs	r3, #0
 80101fc:	3401      	adds	r4, #1
 80101fe:	9305      	str	r3, [sp, #20]
 8010200:	4619      	mov	r1, r3
 8010202:	f04f 0c0a 	mov.w	ip, #10
 8010206:	4620      	mov	r0, r4
 8010208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801020c:	3a30      	subs	r2, #48	; 0x30
 801020e:	2a09      	cmp	r2, #9
 8010210:	d903      	bls.n	801021a <_vfiprintf_r+0x1ee>
 8010212:	2b00      	cmp	r3, #0
 8010214:	d0c5      	beq.n	80101a2 <_vfiprintf_r+0x176>
 8010216:	9105      	str	r1, [sp, #20]
 8010218:	e7c3      	b.n	80101a2 <_vfiprintf_r+0x176>
 801021a:	fb0c 2101 	mla	r1, ip, r1, r2
 801021e:	4604      	mov	r4, r0
 8010220:	2301      	movs	r3, #1
 8010222:	e7f0      	b.n	8010206 <_vfiprintf_r+0x1da>
 8010224:	ab03      	add	r3, sp, #12
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	462a      	mov	r2, r5
 801022a:	4b16      	ldr	r3, [pc, #88]	; (8010284 <_vfiprintf_r+0x258>)
 801022c:	a904      	add	r1, sp, #16
 801022e:	4630      	mov	r0, r6
 8010230:	f7fb fdf4 	bl	800be1c <_printf_float>
 8010234:	4607      	mov	r7, r0
 8010236:	1c78      	adds	r0, r7, #1
 8010238:	d1d6      	bne.n	80101e8 <_vfiprintf_r+0x1bc>
 801023a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801023c:	07d9      	lsls	r1, r3, #31
 801023e:	d405      	bmi.n	801024c <_vfiprintf_r+0x220>
 8010240:	89ab      	ldrh	r3, [r5, #12]
 8010242:	059a      	lsls	r2, r3, #22
 8010244:	d402      	bmi.n	801024c <_vfiprintf_r+0x220>
 8010246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010248:	f7ff f810 	bl	800f26c <__retarget_lock_release_recursive>
 801024c:	89ab      	ldrh	r3, [r5, #12]
 801024e:	065b      	lsls	r3, r3, #25
 8010250:	f53f af12 	bmi.w	8010078 <_vfiprintf_r+0x4c>
 8010254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010256:	e711      	b.n	801007c <_vfiprintf_r+0x50>
 8010258:	ab03      	add	r3, sp, #12
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	462a      	mov	r2, r5
 801025e:	4b09      	ldr	r3, [pc, #36]	; (8010284 <_vfiprintf_r+0x258>)
 8010260:	a904      	add	r1, sp, #16
 8010262:	4630      	mov	r0, r6
 8010264:	f7fc f87e 	bl	800c364 <_printf_i>
 8010268:	e7e4      	b.n	8010234 <_vfiprintf_r+0x208>
 801026a:	bf00      	nop
 801026c:	08010a64 	.word	0x08010a64
 8010270:	08010a84 	.word	0x08010a84
 8010274:	08010a44 	.word	0x08010a44
 8010278:	08010c7c 	.word	0x08010c7c
 801027c:	08010c86 	.word	0x08010c86
 8010280:	0800be1d 	.word	0x0800be1d
 8010284:	08010007 	.word	0x08010007
 8010288:	08010c82 	.word	0x08010c82
 801028c:	00000000 	.word	0x00000000

08010290 <nan>:
 8010290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010298 <nan+0x8>
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	00000000 	.word	0x00000000
 801029c:	7ff80000 	.word	0x7ff80000

080102a0 <__sread>:
 80102a0:	b510      	push	{r4, lr}
 80102a2:	460c      	mov	r4, r1
 80102a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a8:	f000 f91a 	bl	80104e0 <_read_r>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	bfab      	itete	ge
 80102b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102b2:	89a3      	ldrhlt	r3, [r4, #12]
 80102b4:	181b      	addge	r3, r3, r0
 80102b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102ba:	bfac      	ite	ge
 80102bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80102be:	81a3      	strhlt	r3, [r4, #12]
 80102c0:	bd10      	pop	{r4, pc}

080102c2 <__swrite>:
 80102c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c6:	461f      	mov	r7, r3
 80102c8:	898b      	ldrh	r3, [r1, #12]
 80102ca:	05db      	lsls	r3, r3, #23
 80102cc:	4605      	mov	r5, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	4616      	mov	r6, r2
 80102d2:	d505      	bpl.n	80102e0 <__swrite+0x1e>
 80102d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d8:	2302      	movs	r3, #2
 80102da:	2200      	movs	r2, #0
 80102dc:	f000 f8a4 	bl	8010428 <_lseek_r>
 80102e0:	89a3      	ldrh	r3, [r4, #12]
 80102e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102ea:	81a3      	strh	r3, [r4, #12]
 80102ec:	4632      	mov	r2, r6
 80102ee:	463b      	mov	r3, r7
 80102f0:	4628      	mov	r0, r5
 80102f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102f6:	f000 b823 	b.w	8010340 <_write_r>

080102fa <__sseek>:
 80102fa:	b510      	push	{r4, lr}
 80102fc:	460c      	mov	r4, r1
 80102fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010302:	f000 f891 	bl	8010428 <_lseek_r>
 8010306:	1c43      	adds	r3, r0, #1
 8010308:	89a3      	ldrh	r3, [r4, #12]
 801030a:	bf15      	itete	ne
 801030c:	6560      	strne	r0, [r4, #84]	; 0x54
 801030e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010316:	81a3      	strheq	r3, [r4, #12]
 8010318:	bf18      	it	ne
 801031a:	81a3      	strhne	r3, [r4, #12]
 801031c:	bd10      	pop	{r4, pc}

0801031e <__sclose>:
 801031e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010322:	f000 b83d 	b.w	80103a0 <_close_r>

08010326 <__ascii_wctomb>:
 8010326:	b149      	cbz	r1, 801033c <__ascii_wctomb+0x16>
 8010328:	2aff      	cmp	r2, #255	; 0xff
 801032a:	bf85      	ittet	hi
 801032c:	238a      	movhi	r3, #138	; 0x8a
 801032e:	6003      	strhi	r3, [r0, #0]
 8010330:	700a      	strbls	r2, [r1, #0]
 8010332:	f04f 30ff 	movhi.w	r0, #4294967295
 8010336:	bf98      	it	ls
 8010338:	2001      	movls	r0, #1
 801033a:	4770      	bx	lr
 801033c:	4608      	mov	r0, r1
 801033e:	4770      	bx	lr

08010340 <_write_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4d07      	ldr	r5, [pc, #28]	; (8010360 <_write_r+0x20>)
 8010344:	4604      	mov	r4, r0
 8010346:	4608      	mov	r0, r1
 8010348:	4611      	mov	r1, r2
 801034a:	2200      	movs	r2, #0
 801034c:	602a      	str	r2, [r5, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	f7f3 f9f9 	bl	8003746 <_write>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	d102      	bne.n	801035e <_write_r+0x1e>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	b103      	cbz	r3, 801035e <_write_r+0x1e>
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	bd38      	pop	{r3, r4, r5, pc}
 8010360:	2001349c 	.word	0x2001349c

08010364 <__assert_func>:
 8010364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010366:	4614      	mov	r4, r2
 8010368:	461a      	mov	r2, r3
 801036a:	4b09      	ldr	r3, [pc, #36]	; (8010390 <__assert_func+0x2c>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4605      	mov	r5, r0
 8010370:	68d8      	ldr	r0, [r3, #12]
 8010372:	b14c      	cbz	r4, 8010388 <__assert_func+0x24>
 8010374:	4b07      	ldr	r3, [pc, #28]	; (8010394 <__assert_func+0x30>)
 8010376:	9100      	str	r1, [sp, #0]
 8010378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801037c:	4906      	ldr	r1, [pc, #24]	; (8010398 <__assert_func+0x34>)
 801037e:	462b      	mov	r3, r5
 8010380:	f000 f81e 	bl	80103c0 <fiprintf>
 8010384:	f000 f8be 	bl	8010504 <abort>
 8010388:	4b04      	ldr	r3, [pc, #16]	; (801039c <__assert_func+0x38>)
 801038a:	461c      	mov	r4, r3
 801038c:	e7f3      	b.n	8010376 <__assert_func+0x12>
 801038e:	bf00      	nop
 8010390:	20000044 	.word	0x20000044
 8010394:	08010c8d 	.word	0x08010c8d
 8010398:	08010c9a 	.word	0x08010c9a
 801039c:	08010cc8 	.word	0x08010cc8

080103a0 <_close_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	4d06      	ldr	r5, [pc, #24]	; (80103bc <_close_r+0x1c>)
 80103a4:	2300      	movs	r3, #0
 80103a6:	4604      	mov	r4, r0
 80103a8:	4608      	mov	r0, r1
 80103aa:	602b      	str	r3, [r5, #0]
 80103ac:	f7f3 f9e7 	bl	800377e <_close>
 80103b0:	1c43      	adds	r3, r0, #1
 80103b2:	d102      	bne.n	80103ba <_close_r+0x1a>
 80103b4:	682b      	ldr	r3, [r5, #0]
 80103b6:	b103      	cbz	r3, 80103ba <_close_r+0x1a>
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	bd38      	pop	{r3, r4, r5, pc}
 80103bc:	2001349c 	.word	0x2001349c

080103c0 <fiprintf>:
 80103c0:	b40e      	push	{r1, r2, r3}
 80103c2:	b503      	push	{r0, r1, lr}
 80103c4:	4601      	mov	r1, r0
 80103c6:	ab03      	add	r3, sp, #12
 80103c8:	4805      	ldr	r0, [pc, #20]	; (80103e0 <fiprintf+0x20>)
 80103ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80103ce:	6800      	ldr	r0, [r0, #0]
 80103d0:	9301      	str	r3, [sp, #4]
 80103d2:	f7ff fe2b 	bl	801002c <_vfiprintf_r>
 80103d6:	b002      	add	sp, #8
 80103d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80103dc:	b003      	add	sp, #12
 80103de:	4770      	bx	lr
 80103e0:	20000044 	.word	0x20000044

080103e4 <_fstat_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	4d07      	ldr	r5, [pc, #28]	; (8010404 <_fstat_r+0x20>)
 80103e8:	2300      	movs	r3, #0
 80103ea:	4604      	mov	r4, r0
 80103ec:	4608      	mov	r0, r1
 80103ee:	4611      	mov	r1, r2
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	f7f3 f9d0 	bl	8003796 <_fstat>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d102      	bne.n	8010400 <_fstat_r+0x1c>
 80103fa:	682b      	ldr	r3, [r5, #0]
 80103fc:	b103      	cbz	r3, 8010400 <_fstat_r+0x1c>
 80103fe:	6023      	str	r3, [r4, #0]
 8010400:	bd38      	pop	{r3, r4, r5, pc}
 8010402:	bf00      	nop
 8010404:	2001349c 	.word	0x2001349c

08010408 <_isatty_r>:
 8010408:	b538      	push	{r3, r4, r5, lr}
 801040a:	4d06      	ldr	r5, [pc, #24]	; (8010424 <_isatty_r+0x1c>)
 801040c:	2300      	movs	r3, #0
 801040e:	4604      	mov	r4, r0
 8010410:	4608      	mov	r0, r1
 8010412:	602b      	str	r3, [r5, #0]
 8010414:	f7f3 f9cf 	bl	80037b6 <_isatty>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d102      	bne.n	8010422 <_isatty_r+0x1a>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	b103      	cbz	r3, 8010422 <_isatty_r+0x1a>
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	bd38      	pop	{r3, r4, r5, pc}
 8010424:	2001349c 	.word	0x2001349c

08010428 <_lseek_r>:
 8010428:	b538      	push	{r3, r4, r5, lr}
 801042a:	4d07      	ldr	r5, [pc, #28]	; (8010448 <_lseek_r+0x20>)
 801042c:	4604      	mov	r4, r0
 801042e:	4608      	mov	r0, r1
 8010430:	4611      	mov	r1, r2
 8010432:	2200      	movs	r2, #0
 8010434:	602a      	str	r2, [r5, #0]
 8010436:	461a      	mov	r2, r3
 8010438:	f7f3 f9c8 	bl	80037cc <_lseek>
 801043c:	1c43      	adds	r3, r0, #1
 801043e:	d102      	bne.n	8010446 <_lseek_r+0x1e>
 8010440:	682b      	ldr	r3, [r5, #0]
 8010442:	b103      	cbz	r3, 8010446 <_lseek_r+0x1e>
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	bd38      	pop	{r3, r4, r5, pc}
 8010448:	2001349c 	.word	0x2001349c

0801044c <memmove>:
 801044c:	4288      	cmp	r0, r1
 801044e:	b510      	push	{r4, lr}
 8010450:	eb01 0402 	add.w	r4, r1, r2
 8010454:	d902      	bls.n	801045c <memmove+0x10>
 8010456:	4284      	cmp	r4, r0
 8010458:	4623      	mov	r3, r4
 801045a:	d807      	bhi.n	801046c <memmove+0x20>
 801045c:	1e43      	subs	r3, r0, #1
 801045e:	42a1      	cmp	r1, r4
 8010460:	d008      	beq.n	8010474 <memmove+0x28>
 8010462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010466:	f803 2f01 	strb.w	r2, [r3, #1]!
 801046a:	e7f8      	b.n	801045e <memmove+0x12>
 801046c:	4402      	add	r2, r0
 801046e:	4601      	mov	r1, r0
 8010470:	428a      	cmp	r2, r1
 8010472:	d100      	bne.n	8010476 <memmove+0x2a>
 8010474:	bd10      	pop	{r4, pc}
 8010476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801047a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801047e:	e7f7      	b.n	8010470 <memmove+0x24>

08010480 <_realloc_r>:
 8010480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010484:	4680      	mov	r8, r0
 8010486:	4614      	mov	r4, r2
 8010488:	460e      	mov	r6, r1
 801048a:	b921      	cbnz	r1, 8010496 <_realloc_r+0x16>
 801048c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010490:	4611      	mov	r1, r2
 8010492:	f7fb bbaf 	b.w	800bbf4 <_malloc_r>
 8010496:	b92a      	cbnz	r2, 80104a4 <_realloc_r+0x24>
 8010498:	f7fb fb40 	bl	800bb1c <_free_r>
 801049c:	4625      	mov	r5, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a4:	f000 f835 	bl	8010512 <_malloc_usable_size_r>
 80104a8:	4284      	cmp	r4, r0
 80104aa:	4607      	mov	r7, r0
 80104ac:	d802      	bhi.n	80104b4 <_realloc_r+0x34>
 80104ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80104b2:	d812      	bhi.n	80104da <_realloc_r+0x5a>
 80104b4:	4621      	mov	r1, r4
 80104b6:	4640      	mov	r0, r8
 80104b8:	f7fb fb9c 	bl	800bbf4 <_malloc_r>
 80104bc:	4605      	mov	r5, r0
 80104be:	2800      	cmp	r0, #0
 80104c0:	d0ed      	beq.n	801049e <_realloc_r+0x1e>
 80104c2:	42bc      	cmp	r4, r7
 80104c4:	4622      	mov	r2, r4
 80104c6:	4631      	mov	r1, r6
 80104c8:	bf28      	it	cs
 80104ca:	463a      	movcs	r2, r7
 80104cc:	f7fb fb10 	bl	800baf0 <memcpy>
 80104d0:	4631      	mov	r1, r6
 80104d2:	4640      	mov	r0, r8
 80104d4:	f7fb fb22 	bl	800bb1c <_free_r>
 80104d8:	e7e1      	b.n	801049e <_realloc_r+0x1e>
 80104da:	4635      	mov	r5, r6
 80104dc:	e7df      	b.n	801049e <_realloc_r+0x1e>
	...

080104e0 <_read_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	4d07      	ldr	r5, [pc, #28]	; (8010500 <_read_r+0x20>)
 80104e4:	4604      	mov	r4, r0
 80104e6:	4608      	mov	r0, r1
 80104e8:	4611      	mov	r1, r2
 80104ea:	2200      	movs	r2, #0
 80104ec:	602a      	str	r2, [r5, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	f7f3 f90c 	bl	800370c <_read>
 80104f4:	1c43      	adds	r3, r0, #1
 80104f6:	d102      	bne.n	80104fe <_read_r+0x1e>
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	b103      	cbz	r3, 80104fe <_read_r+0x1e>
 80104fc:	6023      	str	r3, [r4, #0]
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	2001349c 	.word	0x2001349c

08010504 <abort>:
 8010504:	b508      	push	{r3, lr}
 8010506:	2006      	movs	r0, #6
 8010508:	f000 f834 	bl	8010574 <raise>
 801050c:	2001      	movs	r0, #1
 801050e:	f7f3 f8f3 	bl	80036f8 <_exit>

08010512 <_malloc_usable_size_r>:
 8010512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010516:	1f18      	subs	r0, r3, #4
 8010518:	2b00      	cmp	r3, #0
 801051a:	bfbc      	itt	lt
 801051c:	580b      	ldrlt	r3, [r1, r0]
 801051e:	18c0      	addlt	r0, r0, r3
 8010520:	4770      	bx	lr

08010522 <_raise_r>:
 8010522:	291f      	cmp	r1, #31
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4604      	mov	r4, r0
 8010528:	460d      	mov	r5, r1
 801052a:	d904      	bls.n	8010536 <_raise_r+0x14>
 801052c:	2316      	movs	r3, #22
 801052e:	6003      	str	r3, [r0, #0]
 8010530:	f04f 30ff 	mov.w	r0, #4294967295
 8010534:	bd38      	pop	{r3, r4, r5, pc}
 8010536:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010538:	b112      	cbz	r2, 8010540 <_raise_r+0x1e>
 801053a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801053e:	b94b      	cbnz	r3, 8010554 <_raise_r+0x32>
 8010540:	4620      	mov	r0, r4
 8010542:	f000 f831 	bl	80105a8 <_getpid_r>
 8010546:	462a      	mov	r2, r5
 8010548:	4601      	mov	r1, r0
 801054a:	4620      	mov	r0, r4
 801054c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010550:	f000 b818 	b.w	8010584 <_kill_r>
 8010554:	2b01      	cmp	r3, #1
 8010556:	d00a      	beq.n	801056e <_raise_r+0x4c>
 8010558:	1c59      	adds	r1, r3, #1
 801055a:	d103      	bne.n	8010564 <_raise_r+0x42>
 801055c:	2316      	movs	r3, #22
 801055e:	6003      	str	r3, [r0, #0]
 8010560:	2001      	movs	r0, #1
 8010562:	e7e7      	b.n	8010534 <_raise_r+0x12>
 8010564:	2400      	movs	r4, #0
 8010566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801056a:	4628      	mov	r0, r5
 801056c:	4798      	blx	r3
 801056e:	2000      	movs	r0, #0
 8010570:	e7e0      	b.n	8010534 <_raise_r+0x12>
	...

08010574 <raise>:
 8010574:	4b02      	ldr	r3, [pc, #8]	; (8010580 <raise+0xc>)
 8010576:	4601      	mov	r1, r0
 8010578:	6818      	ldr	r0, [r3, #0]
 801057a:	f7ff bfd2 	b.w	8010522 <_raise_r>
 801057e:	bf00      	nop
 8010580:	20000044 	.word	0x20000044

08010584 <_kill_r>:
 8010584:	b538      	push	{r3, r4, r5, lr}
 8010586:	4d07      	ldr	r5, [pc, #28]	; (80105a4 <_kill_r+0x20>)
 8010588:	2300      	movs	r3, #0
 801058a:	4604      	mov	r4, r0
 801058c:	4608      	mov	r0, r1
 801058e:	4611      	mov	r1, r2
 8010590:	602b      	str	r3, [r5, #0]
 8010592:	f7f3 f8a1 	bl	80036d8 <_kill>
 8010596:	1c43      	adds	r3, r0, #1
 8010598:	d102      	bne.n	80105a0 <_kill_r+0x1c>
 801059a:	682b      	ldr	r3, [r5, #0]
 801059c:	b103      	cbz	r3, 80105a0 <_kill_r+0x1c>
 801059e:	6023      	str	r3, [r4, #0]
 80105a0:	bd38      	pop	{r3, r4, r5, pc}
 80105a2:	bf00      	nop
 80105a4:	2001349c 	.word	0x2001349c

080105a8 <_getpid_r>:
 80105a8:	f7f3 b88e 	b.w	80036c8 <_getpid>

080105ac <_init>:
 80105ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ae:	bf00      	nop
 80105b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105b2:	bc08      	pop	{r3}
 80105b4:	469e      	mov	lr, r3
 80105b6:	4770      	bx	lr

080105b8 <_fini>:
 80105b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ba:	bf00      	nop
 80105bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105be:	bc08      	pop	{r3}
 80105c0:	469e      	mov	lr, r3
 80105c2:	4770      	bx	lr
