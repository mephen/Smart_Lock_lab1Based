
smart_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08010660  08010660  00020660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c8c  08010c8c  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08010c8c  08010c8c  00020c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c94  08010c94  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c94  08010c94  00020c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c98  08010c98  00020c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08010c9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013294  20000218  08010eb4  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200134ac  08010eb4  000334ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eaca  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004317  00000000  00000000  0004ed12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00053030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a78  00000000  00000000  00054c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d82  00000000  00000000  000566b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021419  00000000  00000000  0007d432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8225  00000000  00000000  0009e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d2c  00000000  00000000  00186ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010644 	.word	0x08010644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08010644 	.word	0x08010644

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HD44780_Init+0xec>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HD44780_Init+0xf0>)
 800100a:	2208      	movs	r2, #8
 800100c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HD44780_Init+0xf4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HD44780_Init+0xec>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d907      	bls.n	800102c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HD44780_Init+0xf4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HD44780_Init+0xf4>)
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e006      	b.n	800103a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HD44780_Init+0xf4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HD44780_Init+0xf4>)
 8001038:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800103a:	f000 f985 	bl	8001348 <DelayInit>
  HAL_Delay(50);
 800103e:	2032      	movs	r0, #50	; 0x32
 8001040:	f002 fc9e 	bl	8003980 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HD44780_Init+0xf0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f943 	bl	80012d4 <ExpanderWrite>
  HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f002 fc95 	bl	8003980 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001056:	2030      	movs	r0, #48	; 0x30
 8001058:	f000 f92b 	bl	80012b2 <Write4Bits>
  DelayUS(4500);
 800105c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001060:	f000 f99c 	bl	800139c <DelayUS>

  Write4Bits(0x03 << 4);
 8001064:	2030      	movs	r0, #48	; 0x30
 8001066:	f000 f924 	bl	80012b2 <Write4Bits>
  DelayUS(4500);
 800106a:	f241 1094 	movw	r0, #4500	; 0x1194
 800106e:	f000 f995 	bl	800139c <DelayUS>

  Write4Bits(0x03 << 4);
 8001072:	2030      	movs	r0, #48	; 0x30
 8001074:	f000 f91d 	bl	80012b2 <Write4Bits>
  DelayUS(4500);
 8001078:	f241 1094 	movw	r0, #4500	; 0x1194
 800107c:	f000 f98e 	bl	800139c <DelayUS>

  Write4Bits(0x02 << 4);
 8001080:	2020      	movs	r0, #32
 8001082:	f000 f916 	bl	80012b2 <Write4Bits>
  DelayUS(100);
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f000 f988 	bl	800139c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HD44780_Init+0xf4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8ce 	bl	8001238 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HD44780_Init+0xf8>)
 800109e:	2204      	movs	r2, #4
 80010a0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010a2:	f000 f875 	bl	8001190 <HD44780_Display>
  HD44780_Clear();
 80010a6:	f000 f82b 	bl	8001100 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HD44780_Init+0xfc>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HD44780_Init+0xfc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f8bc 	bl	8001238 <SendCommand>
  DelayUS(4500);
 80010c0:	f241 1094 	movw	r0, #4500	; 0x1194
 80010c4:	f000 f96a 	bl	800139c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010c8:	490b      	ldr	r1, [pc, #44]	; (80010f8 <HD44780_Init+0x100>)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f876 	bl	80011bc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010d0:	490a      	ldr	r1, [pc, #40]	; (80010fc <HD44780_Init+0x104>)
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 f872 	bl	80011bc <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010d8:	f000 f81d 	bl	8001116 <HD44780_Home>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000237 	.word	0x20000237
 80010e8:	20000238 	.word	0x20000238
 80010ec:	20000234 	.word	0x20000234
 80010f0:	20000235 	.word	0x20000235
 80010f4:	20000236 	.word	0x20000236
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008

08001100 <HD44780_Clear>:

void HD44780_Clear()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001104:	2001      	movs	r0, #1
 8001106:	f000 f897 	bl	8001238 <SendCommand>
  DelayUS(2000);
 800110a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800110e:	f000 f945 	bl	800139c <DelayUS>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}

08001116 <HD44780_Home>:

void HD44780_Home()
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800111a:	2002      	movs	r0, #2
 800111c:	f000 f88c 	bl	8001238 <SendCommand>
  DelayUS(2000);
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f000 f93a 	bl	800139c <DelayUS>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HD44780_SetCursor+0x5c>)
 800113e:	f107 0408 	add.w	r4, r7, #8
 8001142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HD44780_SetCursor+0x60>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	429a      	cmp	r2, r3
 8001150:	d303      	bcc.n	800115a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HD44780_SetCursor+0x60>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	3318      	adds	r3, #24
 8001160:	443b      	add	r3, r7
 8001162:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4413      	add	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001174:	b25b      	sxtb	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f85d 	bl	8001238 <SendCommand>
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	08010660 	.word	0x08010660
 800118c:	20000237 	.word	0x20000237

08001190 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HD44780_Display+0x28>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HD44780_Display+0x28>)
 80011a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HD44780_Display+0x28>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f843 	bl	8001238 <SendCommand>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000235 	.word	0x20000235

080011bc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f82a 	bl	8001238 <SendCommand>
  for (int i=0; i<8; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e009      	b.n	80011fe <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f82e 	bl	8001254 <SendChar>
  for (int i=0; i<8; i++)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b07      	cmp	r3, #7
 8001202:	ddf2      	ble.n	80011ea <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  while (*c)
 8001216:	e006      	b.n	8001226 <HD44780_PrintStr+0x18>
    SendChar(*c++);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f817 	bl	8001254 <SendChar>
  while (*c)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <HD44780_PrintStr+0xa>
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f812 	bl	8001270 <Send>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f804 	bl	8001270 <Send>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4313      	orrs	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f80b 	bl	80012b2 <Write4Bits>
  Write4Bits((lownib)|mode);
 800129c:	7bba      	ldrb	r2, [r7, #14]
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f804 	bl	80012b2 <Write4Bits>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f808 	bl	80012d4 <ExpanderWrite>
  PulseEnable(value);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f820 	bl	800130c <PulseEnable>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <ExpanderWrite+0x30>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 80012ea:	f107 020f 	add.w	r2, r7, #15
 80012ee:	230a      	movs	r3, #10
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	214e      	movs	r1, #78	; 0x4e
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <ExpanderWrite+0x34>)
 80012f8:	f003 fd6a 	bl	8004dd0 <HAL_I2C_Master_Transmit>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238
 8001308:	200002e4 	.word	0x200002e4

0800130c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ffd8 	bl	80012d4 <ExpanderWrite>
  DelayUS(20);
 8001324:	2014      	movs	r0, #20
 8001326:	f000 f839 	bl	800139c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f023 0304 	bic.w	r3, r3, #4
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffce 	bl	80012d4 <ExpanderWrite>
  DelayUS(20);
 8001338:	2014      	movs	r0, #20
 800133a:	f000 f82f 	bl	800139c <DelayUS>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <DelayInit>:

static void DelayInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <DelayInit+0x4c>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <DelayInit+0x4c>)
 8001352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001356:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <DelayInit+0x4c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <DelayInit+0x4c>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001362:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <DelayInit+0x50>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <DelayInit+0x50>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <DelayInit+0x50>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <DelayInit+0x50>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <DelayInit+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001382:	bf00      	nop
  __ASM volatile ("NOP");
 8001384:	bf00      	nop
  __ASM volatile ("NOP");
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000edf0 	.word	0xe000edf0
 8001398:	e0001000 	.word	0xe0001000

0800139c <DelayUS>:

static void DelayUS(uint32_t us)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <DelayUS+0x44>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <DelayUS+0x48>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9a      	lsrs	r2, r3, #18
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <DelayUS+0x4c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <DelayUS+0x4c>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]
  } while (cnt < cycles);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f6      	bhi.n	80013be <DelayUS+0x22>
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000034 	.word	0x20000034
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	e0001000 	.word	0xe0001000

080013ec <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//UART_HandleTypeDef UartHandle;
/* Private function prototypes -----------------------------------------------*/
char read_keypad(void)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
    char keys[4][4] = {{'1', '2', '3', 'A'},
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <read_keypad+0x184>)
 80013f4:	1d3c      	adds	r4, r7, #4
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       {'4', '5', '6', 'B'},
                       {'7', '8', '9', 'C'},
                       {'*', '0', '#', 'D'}};

    for (int i = 0; i < 4; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e0ac      	b.n	800155c <read_keypad+0x170>
    {
        // Set one column to LOW and others to HIGH
        HAL_GPIO_WritePin(C1_PORT, C1_PIN, (i == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <read_keypad+0x188>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001418:	f003 fb4a 	bl	8004ab0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C2_PORT, C2_PIN, (i == 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <read_keypad+0x18c>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b01      	cmp	r3, #1
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	f003 fb3d 	bl	8004ab0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C3_PORT, C3_PIN, (i == 2) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <read_keypad+0x190>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b02      	cmp	r3, #2
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	f003 fb30 	bl	8004ab0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C4_PORT, C4_PIN, (i == 3) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <read_keypad+0x194>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b03      	cmp	r3, #3
 8001458:	bf14      	ite	ne
 800145a:	2301      	movne	r3, #1
 800145c:	2300      	moveq	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001466:	f003 fb23 	bl	8004ab0 <HAL_GPIO_WritePin>
//         printf("Row 1 Pin State: %d\n", HAL_GPIO_ReadPin(R1_PORT, R1_PIN));

        // Check each row
        if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == GPIO_PIN_RESET) {
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <read_keypad+0x198>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fb05 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d112      	bne.n	80014a2 <read_keypad+0xb6>
            HAL_Delay(20); // Debounce delay
 800147c:	2014      	movs	r0, #20
 800147e:	f002 fa7f 	bl	8003980 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R1_PORT, R1_PIN) == GPIO_PIN_RESET) { // Check again
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <read_keypad+0x198>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4618      	mov	r0, r3
 800148a:	f003 faf9 	bl	8004a80 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <read_keypad+0xb6>
                return keys[i][0];
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3318      	adds	r3, #24
 800149a:	443b      	add	r3, r7
 800149c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014a0:	e061      	b.n	8001566 <read_keypad+0x17a>
            }
        }
        if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == GPIO_PIN_RESET) {
 80014a2:	4b39      	ldr	r3, [pc, #228]	; (8001588 <read_keypad+0x19c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fae8 	bl	8004a80 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d113      	bne.n	80014de <read_keypad+0xf2>
            HAL_Delay(20);
 80014b6:	2014      	movs	r0, #20
 80014b8:	f002 fa62 	bl	8003980 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R2_PORT, R2_PIN) == GPIO_PIN_RESET) {
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <read_keypad+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fadb 	bl	8004a80 <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d106      	bne.n	80014de <read_keypad+0xf2>
                return keys[i][1];
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	3318      	adds	r3, #24
 80014d6:	443b      	add	r3, r7
 80014d8:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 80014dc:	e043      	b.n	8001566 <read_keypad+0x17a>
            }
        }
        if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <read_keypad+0x1a0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 faca 	bl	8004a80 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <read_keypad+0x12e>
            HAL_Delay(20);
 80014f2:	2014      	movs	r0, #20
 80014f4:	f002 fa44 	bl	8003980 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R3_PORT, R3_PIN) == GPIO_PIN_RESET) {
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <read_keypad+0x1a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fabd 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <read_keypad+0x12e>
                return keys[i][2];
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	3318      	adds	r3, #24
 8001512:	443b      	add	r3, r7
 8001514:	f813 3c12 	ldrb.w	r3, [r3, #-18]
 8001518:	e025      	b.n	8001566 <read_keypad+0x17a>
            }
        }
        if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET) {
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <read_keypad+0x1a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001522:	4618      	mov	r0, r3
 8001524:	f003 faac 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d113      	bne.n	8001556 <read_keypad+0x16a>
            HAL_Delay(20);
 800152e:	2014      	movs	r0, #20
 8001530:	f002 fa26 	bl	8003980 <HAL_Delay>
            if (HAL_GPIO_ReadPin(R4_PORT, R4_PIN) == GPIO_PIN_RESET) {
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <read_keypad+0x1a4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fa9f 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <read_keypad+0x16a>
                return keys[i][3];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	3318      	adds	r3, #24
 800154e:	443b      	add	r3, r7
 8001550:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8001554:	e007      	b.n	8001566 <read_keypad+0x17a>
    for (int i = 0; i < 4; i++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b03      	cmp	r3, #3
 8001560:	f77f af4f 	ble.w	8001402 <read_keypad+0x16>
            }
        }
    }

//    printf("Key read: %c\n", key);
    return '\0';
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	08010670 	.word	0x08010670
 8001574:	20000020 	.word	0x20000020
 8001578:	20000024 	.word	0x20000024
 800157c:	20000028 	.word	0x20000028
 8001580:	2000002c 	.word	0x2000002c
 8001584:	20000010 	.word	0x20000010
 8001588:	20000014 	.word	0x20000014
 800158c:	20000018 	.word	0x20000018
 8001590:	2000001c 	.word	0x2000001c

08001594 <search_card_list_Global>:

//search card in the linked list stored in the RAM of board
uint8_t search_card_list_Global(uint8_t *target_cardVal)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint8_t card_exist = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  card *current = list_start;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <search_card_list_Global+0x78>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60bb      	str	r3, [r7, #8]
  while(current != NULL){
 80015a6:	e027      	b.n	80015f8 <search_card_list_Global+0x64>
    if(current->data[0] == target_cardVal[0] && current->data[1] == target_cardVal[1] && current->data[2] == target_cardVal[2] && current->data[3] == target_cardVal[3] && current->data[4] == target_cardVal[4]){
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	791a      	ldrb	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d11e      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	795a      	ldrb	r2, [r3, #5]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d117      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	799a      	ldrb	r2, [r3, #6]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3302      	adds	r3, #2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d110      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	79da      	ldrb	r2, [r3, #7]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3303      	adds	r3, #3
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d109      	bne.n	80015f2 <search_card_list_Global+0x5e>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	7a1a      	ldrb	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d102      	bne.n	80015f2 <search_card_list_Global+0x5e>
      card_exist = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
      break;
 80015f0:	e005      	b.n	80015fe <search_card_list_Global+0x6a>
    }
    current = current->next;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60bb      	str	r3, [r7, #8]
  while(current != NULL){
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1d4      	bne.n	80015a8 <search_card_list_Global+0x14>
  }
  return card_exist;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	200005c8 	.word	0x200005c8

08001610 <rc522_add_card>:

//add a new card into the linked list, and update SD card
void rc522_add_card(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD,LED_Blue_Pin,1);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161c:	485c      	ldr	r0, [pc, #368]	; (8001790 <rc522_add_card+0x180>)
 800161e:	f003 fa47 	bl	8004ab0 <HAL_GPIO_WritePin>
  //reset str before reading
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e007      	b.n	8001638 <rc522_add_card+0x28>
    str[cardVal] = 0;
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <rc522_add_card+0x184>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b04      	cmp	r3, #4
 800163c:	ddf4      	ble.n	8001628 <rc522_add_card+0x18>
  }
  //if a card is read, str[0~4] will not be 0
  //repeat reading until a card is read
  while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 800163e:	e00e      	b.n	800165e <rc522_add_card+0x4e>
    status = MFRC522_Request(PICC_REQIDL, str);
 8001640:	4954      	ldr	r1, [pc, #336]	; (8001794 <rc522_add_card+0x184>)
 8001642:	2026      	movs	r0, #38	; 0x26
 8001644:	f001 fbc9 	bl	8002dda <MFRC522_Request>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <rc522_add_card+0x188>)
 800164e:	701a      	strb	r2, [r3, #0]
    status = MFRC522_Anticoll(str);
 8001650:	4850      	ldr	r0, [pc, #320]	; (8001794 <rc522_add_card+0x184>)
 8001652:	f001 fbe7 	bl	8002e24 <MFRC522_Anticoll>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <rc522_add_card+0x188>)
 800165c:	701a      	strb	r2, [r3, #0]
  while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 800165e:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <rc522_add_card+0x184>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ec      	beq.n	8001640 <rc522_add_card+0x30>
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <rc522_add_card+0x184>)
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0e8      	beq.n	8001640 <rc522_add_card+0x30>
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <rc522_add_card+0x184>)
 8001670:	789b      	ldrb	r3, [r3, #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0e4      	beq.n	8001640 <rc522_add_card+0x30>
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <rc522_add_card+0x184>)
 8001678:	78db      	ldrb	r3, [r3, #3]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0e0      	beq.n	8001640 <rc522_add_card+0x30>
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <rc522_add_card+0x184>)
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0dc      	beq.n	8001640 <rc522_add_card+0x30>
  }
  //check if the readed card already exists in the linked list
  //if it exists, keep reading until a new card is read
  uint8_t card_exist = search_card_list_Global(str);
 8001686:	4843      	ldr	r0, [pc, #268]	; (8001794 <rc522_add_card+0x184>)
 8001688:	f7ff ff84 	bl	8001594 <search_card_list_Global>
 800168c:	4603      	mov	r3, r0
 800168e:	74fb      	strb	r3, [r7, #19]
  while(card_exist){
 8001690:	e036      	b.n	8001700 <rc522_add_card+0xf0>
    //reset str before reading
    for(int cardVal = 0; cardVal < 5; cardVal++){
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e007      	b.n	80016a8 <rc522_add_card+0x98>
      str[cardVal] = 0;
 8001698:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <rc522_add_card+0x184>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
    for(int cardVal = 0; cardVal < 5; cardVal++){
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	ddf4      	ble.n	8001698 <rc522_add_card+0x88>
    }
    while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 80016ae:	e00e      	b.n	80016ce <rc522_add_card+0xbe>
      status = MFRC522_Request(PICC_REQIDL, str);
 80016b0:	4938      	ldr	r1, [pc, #224]	; (8001794 <rc522_add_card+0x184>)
 80016b2:	2026      	movs	r0, #38	; 0x26
 80016b4:	f001 fb91 	bl	8002dda <MFRC522_Request>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <rc522_add_card+0x188>)
 80016be:	701a      	strb	r2, [r3, #0]
      status = MFRC522_Anticoll(str);
 80016c0:	4834      	ldr	r0, [pc, #208]	; (8001794 <rc522_add_card+0x184>)
 80016c2:	f001 fbaf 	bl	8002e24 <MFRC522_Anticoll>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <rc522_add_card+0x188>)
 80016cc:	701a      	strb	r2, [r3, #0]
    while(!(str[0] != 0 && str[1] != 0 && str[2] != 0 && str[3] != 0 && str[4] != 0)){
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <rc522_add_card+0x184>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ec      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <rc522_add_card+0x184>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0e8      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <rc522_add_card+0x184>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0e4      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <rc522_add_card+0x184>)
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0e0      	beq.n	80016b0 <rc522_add_card+0xa0>
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <rc522_add_card+0x184>)
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0dc      	beq.n	80016b0 <rc522_add_card+0xa0>
    }
    card_exist = search_card_list_Global(str);
 80016f6:	4827      	ldr	r0, [pc, #156]	; (8001794 <rc522_add_card+0x184>)
 80016f8:	f7ff ff4c 	bl	8001594 <search_card_list_Global>
 80016fc:	4603      	mov	r3, r0
 80016fe:	74fb      	strb	r3, [r7, #19]
  while(card_exist){
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c5      	bne.n	8001692 <rc522_add_card+0x82>
  }
  //add the new card to the list, don't forget to free this memory in delete_card fn.
  card *new_card = (card *)malloc(sizeof(card));
 8001706:	200c      	movs	r0, #12
 8001708:	f00a fa5a 	bl	800bbc0 <malloc>
 800170c:	4603      	mov	r3, r0
 800170e:	607b      	str	r3, [r7, #4]
  new_card->next = NULL;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	e00c      	b.n	8001736 <rc522_add_card+0x126>
    new_card->data[cardVal] = str[cardVal];
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <rc522_add_card+0x184>)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4413      	add	r3, r2
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	460a      	mov	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
  for(int cardVal = 0; cardVal < 5; cardVal++){
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3301      	adds	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b04      	cmp	r3, #4
 800173a:	ddef      	ble.n	800171c <rc522_add_card+0x10c>
  }
  if(list_start == NULL){//the list is empty
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <rc522_add_card+0x18c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <rc522_add_card+0x142>
    list_start = new_card;
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <rc522_add_card+0x18c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
    list_end = new_card;
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <rc522_add_card+0x190>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e013      	b.n	800177a <rc522_add_card+0x16a>
  }else if (list_start -> next == NULL){//there is only one card in the list
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <rc522_add_card+0x18c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <rc522_add_card+0x15c>
    list_start->next = new_card;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <rc522_add_card+0x18c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
    list_end = new_card;
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <rc522_add_card+0x190>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e006      	b.n	800177a <rc522_add_card+0x16a>
  }else{//there are >= 2 cards in the list
    list_end->next = new_card;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <rc522_add_card+0x190>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
    list_end = new_card;
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <rc522_add_card+0x190>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  }
  HAL_GPIO_WritePin(GPIOD,LED_Blue_Pin,0);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <rc522_add_card+0x180>)
 8001782:	f003 f995 	bl	8004ab0 <HAL_GPIO_WritePin>

  //update registered_card_linked_list to SD card.(overwrite)
  // update_card_to_SD();
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020c00 	.word	0x40020c00
 8001794:	200005a8 	.word	0x200005a8
 8001798:	200005a4 	.word	0x200005a4
 800179c:	200005c8 	.word	0x200005c8
 80017a0:	200005cc 	.word	0x200005cc

080017a4 <rc522_delete_card>:

//assume the target card is in the list
//delete the target card from the linked list, and update SD card
void rc522_delete_card(uint8_t *target_card_value){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  card *cur = list_start;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <rc522_delete_card+0xbc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  card *prev = NULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  while(cur != NULL){
 80017b6:	e026      	b.n	8001806 <rc522_delete_card+0x62>
    if(cur->data[0] == target_card_value[0] && cur->data[1] == target_card_value[1] && cur->data[2] == target_card_value[2] && cur->data[3] == target_card_value[3] && cur->data[4] == target_card_value[4]){
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	791a      	ldrb	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d11b      	bne.n	80017fc <rc522_delete_card+0x58>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	795a      	ldrb	r2, [r3, #5]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d114      	bne.n	80017fc <rc522_delete_card+0x58>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	799a      	ldrb	r2, [r3, #6]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3302      	adds	r3, #2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d10d      	bne.n	80017fc <rc522_delete_card+0x58>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	79da      	ldrb	r2, [r3, #7]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3303      	adds	r3, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d106      	bne.n	80017fc <rc522_delete_card+0x58>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	7a1a      	ldrb	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d008      	beq.n	800180e <rc522_delete_card+0x6a>
      break; //found
    }
    prev = cur;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	60bb      	str	r3, [r7, #8]
    cur = cur->next;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  while(cur != NULL){
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1d5      	bne.n	80017b8 <rc522_delete_card+0x14>
 800180c:	e000      	b.n	8001810 <rc522_delete_card+0x6c>
      break; //found
 800180e:	bf00      	nop
  }
  if(cur == list_start){//target is the first card
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <rc522_delete_card+0xbc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	429a      	cmp	r2, r3
 8001818:	d108      	bne.n	800182c <rc522_delete_card+0x88>
    list_start = list_start->next;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <rc522_delete_card+0xbc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <rc522_delete_card+0xbc>)
 8001822:	6013      	str	r3, [r2, #0]
    free(cur);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f00a f9d3 	bl	800bbd0 <free>
    free(cur);
    cur == NULL;
  }
  //update registered_card_linked_list to SD card.(overwrite)
  // update_card_to_SD();
}
 800182a:	e015      	b.n	8001858 <rc522_delete_card+0xb4>
  }else if(cur == list_end){//target is the last card
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <rc522_delete_card+0xc0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d109      	bne.n	800184a <rc522_delete_card+0xa6>
    list_end = prev;
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <rc522_delete_card+0xc0>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	6013      	str	r3, [r2, #0]
    prev->next = NULL;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    free(cur);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f00a f9c4 	bl	800bbd0 <free>
}
 8001848:	e006      	b.n	8001858 <rc522_delete_card+0xb4>
    prev->next = cur->next;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	601a      	str	r2, [r3, #0]
    free(cur);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f00a f9bc 	bl	800bbd0 <free>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200005c8 	.word	0x200005c8
 8001864:	200005cc 	.word	0x200005cc

08001868 <debounce>:
    HAL_GPIO_WritePin(GPIOD,LED_Orange_Pin,led_state);
    HAL_Delay(300);
  }
}

int debounce(int state){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  //pressed
  if(state){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d013      	beq.n	800189e <debounce+0x36>
    //wait for some time to debounce
    vTaskDelay(25);
 8001876:	2019      	movs	r0, #25
 8001878:	f008 fbd2 	bl	800a020 <vTaskDelay>
    //check if still pressed
    if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){
 800187c:	2101      	movs	r1, #1
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <debounce+0x40>)
 8001880:	f003 f8fe 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <debounce+0x36>
      //wait for button to be released
      while(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0)){;}
 800188a:	bf00      	nop
 800188c:	2101      	movs	r1, #1
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <debounce+0x40>)
 8001890:	f003 f8f6 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f8      	bne.n	800188c <debounce+0x24>
      return 1;//pressed
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <debounce+0x38>
    }
  }
  return 0;//not pressed
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40020000 	.word	0x40020000

080018ac <rc522_check>:
      vTaskDelay(25);
    }
	}
}

uint8_t rc522_check(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  status = MFRC522_Request(PICC_REQIDL, str);
 80018b2:	4910      	ldr	r1, [pc, #64]	; (80018f4 <rc522_check+0x48>)
 80018b4:	2026      	movs	r0, #38	; 0x26
 80018b6:	f001 fa90 	bl	8002dda <MFRC522_Request>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <rc522_check+0x4c>)
 80018c0:	701a      	strb	r2, [r3, #0]
  status = MFRC522_Anticoll(str);
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <rc522_check+0x48>)
 80018c4:	f001 faae 	bl	8002e24 <MFRC522_Anticoll>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <rc522_check+0x4c>)
 80018ce:	701a      	strb	r2, [r3, #0]
  memcpy(sNum, str, 5); 
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <rc522_check+0x50>)
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <rc522_check+0x48>)
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	6018      	str	r0, [r3, #0]
 80018da:	3304      	adds	r3, #4
 80018dc:	7019      	strb	r1, [r3, #0]
  uint8_t card_exist = search_card_list_Global(str);
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <rc522_check+0x48>)
 80018e0:	f7ff fe58 	bl	8001594 <search_card_list_Global>
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  return card_exist;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200005a8 	.word	0x200005a8
 80018f8:	200005a4 	.word	0x200005a4
 80018fc:	200005b8 	.word	0x200005b8

08001900 <setpin>:

void setpin(){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
  HD44780_Init(2);
 8001906:	2002      	movs	r0, #2
 8001908:	f7ff fb76 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();
 800190c:	f7ff fbf8 	bl	8001100 <HD44780_Clear>
  HD44780_PrintStr("Entering PIN:");     
 8001910:	4840      	ldr	r0, [pc, #256]	; (8001a14 <setpin+0x114>)
 8001912:	f7ff fc7c 	bl	800120e <HD44780_PrintStr>
  HD44780_SetCursor(0, 1);
 8001916:	2101      	movs	r1, #1
 8001918:	2000      	movs	r0, #0
 800191a:	f7ff fc07 	bl	800112c <HD44780_SetCursor>
  bool isButtonPressed = false;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
  char enteredPin[5] = {0};
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	2300      	movs	r3, #0
 8001928:	723b      	strb	r3, [r7, #8]
  uint8_t local_entered = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	75bb      	strb	r3, [r7, #22]
  // bool newPinSet = false;   
  while (local_entered < 4) {
 800192e:	e06a      	b.n	8001a06 <setpin+0x106>
    key = read_keypad();
 8001930:	f7ff fd5c 	bl	80013ec <read_keypad>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <setpin+0x118>)
 800193a:	701a      	strb	r2, [r3, #0]
    if (key != '\0' && !isButtonPressed) {
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <setpin+0x118>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d05a      	beq.n	80019fa <setpin+0xfa>
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	f083 0301 	eor.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d054      	beq.n	80019fa <setpin+0xfa>
      if (key >= '0' && key <= '9' && local_entered < 4) {
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <setpin+0x118>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b2f      	cmp	r3, #47	; 0x2f
 8001956:	d913      	bls.n	8001980 <setpin+0x80>
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <setpin+0x118>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b39      	cmp	r3, #57	; 0x39
 800195e:	d80f      	bhi.n	8001980 <setpin+0x80>
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d80c      	bhi.n	8001980 <setpin+0x80>
          strncat(enteredPin, &key, 1);
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2201      	movs	r2, #1
 800196a:	492b      	ldr	r1, [pc, #172]	; (8001a18 <setpin+0x118>)
 800196c:	4618      	mov	r0, r3
 800196e:	f00b f97a 	bl	800cc66 <strncat>
          local_entered++;
 8001972:	7dbb      	ldrb	r3, [r7, #22]
 8001974:	3301      	adds	r3, #1
 8001976:	75bb      	strb	r3, [r7, #22]
          HD44780_PrintStr("*");
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <setpin+0x11c>)
 800197a:	f7ff fc48 	bl	800120e <HD44780_PrintStr>
 800197e:	e01d      	b.n	80019bc <setpin+0xbc>
      } else if (key == 'C' && local_entered > 0) {
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <setpin+0x118>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b43      	cmp	r3, #67	; 0x43
 8001986:	d119      	bne.n	80019bc <setpin+0xbc>
 8001988:	7dbb      	ldrb	r3, [r7, #22]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d016      	beq.n	80019bc <setpin+0xbc>
          enteredPin[local_entered - 1] = '\0';
 800198e:	7dbb      	ldrb	r3, [r7, #22]
 8001990:	3b01      	subs	r3, #1
 8001992:	3318      	adds	r3, #24
 8001994:	443b      	add	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	f803 2c14 	strb.w	r2, [r3, #-20]
          local_entered--;
 800199c:	7dbb      	ldrb	r3, [r7, #22]
 800199e:	3b01      	subs	r3, #1
 80019a0:	75bb      	strb	r3, [r7, #22]
          for(int i = 0; i < local_entered; i++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e005      	b.n	80019b4 <setpin+0xb4>
              HD44780_PrintStr("*");
 80019a8:	481c      	ldr	r0, [pc, #112]	; (8001a1c <setpin+0x11c>)
 80019aa:	f7ff fc30 	bl	800120e <HD44780_PrintStr>
          for(int i = 0; i < local_entered; i++) {
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	3301      	adds	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	7dbb      	ldrb	r3, [r7, #22]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf5      	blt.n	80019a8 <setpin+0xa8>
          }
      }
      if (local_entered == 4) {
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d118      	bne.n	80019f4 <setpin+0xf4>
          strncpy(newPin, enteredPin, 4);
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2204      	movs	r2, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4815      	ldr	r0, [pc, #84]	; (8001a20 <setpin+0x120>)
 80019ca:	f00b f973 	bl	800ccb4 <strncpy>
          // newPinSet = true;
          enteredPin[0] = '\0';
 80019ce:	2300      	movs	r3, #0
 80019d0:	713b      	strb	r3, [r7, #4]
          HD44780_Clear();
 80019d2:	f7ff fb95 	bl	8001100 <HD44780_Clear>
          HD44780_PrintStr("PIN Set!");
 80019d6:	4813      	ldr	r0, [pc, #76]	; (8001a24 <setpin+0x124>)
 80019d8:	f7ff fc19 	bl	800120e <HD44780_PrintStr>
          uint32_t From_begin_time = HAL_GetTick();
 80019dc:	f001 ffc4 	bl	8003968 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]
          while(HAL_GetTick() - From_begin_time < 1000/portTICK_RATE_MS){//wait 3s for push button 
 80019e2:	bf00      	nop
 80019e4:	f001 ffc0 	bl	8003968 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f2:	d3f7      	bcc.n	80019e4 <setpin+0xe4>
            ;
          }
      }
      isButtonPressed = true;  // Mark the button as pressed
 80019f4:	2301      	movs	r3, #1
 80019f6:	75fb      	strb	r3, [r7, #23]
 80019f8:	e005      	b.n	8001a06 <setpin+0x106>
    }else if (key == '\0') {
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <setpin+0x118>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <setpin+0x106>
        isButtonPressed = false;  // Reset button press state
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]
  while (local_entered < 4) {
 8001a06:	7dbb      	ldrb	r3, [r7, #22]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d991      	bls.n	8001930 <setpin+0x30>
    }
  }
  return;
 8001a0c:	bf00      	nop
}
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	08010680 	.word	0x08010680
 8001a18:	200005d0 	.word	0x200005d0
 8001a1c:	08010690 	.word	0x08010690
 8001a20:	200005d4 	.word	0x200005d4
 8001a24:	08010694 	.word	0x08010694

08001a28 <unlock_fn_setpin>:

void unlock_fn_setpin() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
    HD44780_Init(2);//lcd init, should be called in "task"
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7ff fae2 	bl	8000ff8 <HD44780_Init>
    HD44780_Clear();
 8001a34:	f7ff fb64 	bl	8001100 <HD44780_Clear>
    char unlock[16] = "UNLOCK!";
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <unlock_fn_setpin+0x94>)
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a42:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
    HD44780_PrintStr(unlock);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fbda 	bl	800120e <HD44780_PrintStr>
    char add_Card_str[16] = "Set pin";
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <unlock_fn_setpin+0x98>)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a62:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
    HD44780_SetCursor(0,1);//move cursor to the first word of the second line
 8001a70:	2101      	movs	r1, #1
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fb5a 	bl	800112c <HD44780_SetCursor>
    HD44780_PrintStr(add_Card_str);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fbc7 	bl	800120e <HD44780_PrintStr>
    uint32_t From_begin_time = HAL_GetTick();
 8001a80:	f001 ff72 	bl	8003968 <HAL_GetTick>
 8001a84:	6278      	str	r0, [r7, #36]	; 0x24
    while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button 
 8001a86:	e00d      	b.n	8001aa4 <unlock_fn_setpin+0x7c>
      if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){//push button
 8001a88:	2101      	movs	r1, #1
 8001a8a:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <unlock_fn_setpin+0x9c>)
 8001a8c:	f002 fff8 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fee8 	bl	8001868 <debounce>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <unlock_fn_setpin+0x7c>
        setpin();
 8001a9e:	f7ff ff2f 	bl	8001900 <setpin>
 8001aa2:	e008      	b.n	8001ab6 <unlock_fn_setpin+0x8e>
    while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button 
 8001aa4:	f001 ff60 	bl	8003968 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d9e8      	bls.n	8001a88 <unlock_fn_setpin+0x60>
        return;
      }
    }
}
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	080106a0 	.word	0x080106a0
 8001ac0:	080106b0 	.word	0x080106b0
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <keypad_check>:

uint8_t keypad_check() {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
    printf("Entered keypad_check()\n");  
 8001ace:	4859      	ldr	r0, [pc, #356]	; (8001c34 <keypad_check+0x16c>)
 8001ad0:	f00b f87c 	bl	800cbcc <puts>
    char enteredPin[5] = {0};
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	733b      	strb	r3, [r7, #12]
    uint8_t entered = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
    char key;
    bool isButtonPressed = false;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73bb      	strb	r3, [r7, #14]
    bool startInput = false;  // Flag to indicate whether to start PIN input
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	737b      	strb	r3, [r7, #13]

    HD44780_Clear();
 8001ae8:	f7ff fb0a 	bl	8001100 <HD44780_Clear>
    HD44780_SetCursor(0, 0);
 8001aec:	2100      	movs	r1, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fb1c 	bl	800112c <HD44780_SetCursor>
    HD44780_PrintStr("Ready");
 8001af4:	4850      	ldr	r0, [pc, #320]	; (8001c38 <keypad_check+0x170>)
 8001af6:	f7ff fb8a 	bl	800120e <HD44780_PrintStr>
    HAL_Delay(20);
 8001afa:	2014      	movs	r0, #20
 8001afc:	f001 ff40 	bl	8003980 <HAL_Delay>

    while (entered < 4) {
 8001b00:	e065      	b.n	8001bce <keypad_check+0x106>
        key = read_keypad();  // Read key input
 8001b02:	f7ff fc73 	bl	80013ec <read_keypad>
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]

        if (key != '\0' && !isButtonPressed) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d059      	beq.n	8001bc4 <keypad_check+0xfc>
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	f083 0301 	eor.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d053      	beq.n	8001bc4 <keypad_check+0xfc>
            printf("Entered key: %c\n", key);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4846      	ldr	r0, [pc, #280]	; (8001c3c <keypad_check+0x174>)
 8001b22:	f00a ffcd 	bl	800cac0 <iprintf>
            if (!startInput) {
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00a      	beq.n	8001b48 <keypad_check+0x80>
                HD44780_Clear();  
 8001b32:	f7ff fae5 	bl	8001100 <HD44780_Clear>
                HD44780_SetCursor(0, 0);
 8001b36:	2100      	movs	r1, #0
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff faf7 	bl	800112c <HD44780_SetCursor>
                HD44780_PrintStr("Enter PIN:");
 8001b3e:	4840      	ldr	r0, [pc, #256]	; (8001c40 <keypad_check+0x178>)
 8001b40:	f7ff fb65 	bl	800120e <HD44780_PrintStr>
                startInput = true;  // Start showing PIN input screen and accepting PIN input
 8001b44:	2301      	movs	r3, #1
 8001b46:	737b      	strb	r3, [r7, #13]
            }

            if (key >= '0' && key <= '9' && entered < 4) {
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b4c:	d91e      	bls.n	8001b8c <keypad_check+0xc4>
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b39      	cmp	r3, #57	; 0x39
 8001b52:	d81b      	bhi.n	8001b8c <keypad_check+0xc4>
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d818      	bhi.n	8001b8c <keypad_check+0xc4>
                strncat(enteredPin, &key, 1);
 8001b5a:	1df9      	adds	r1, r7, #7
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	2201      	movs	r2, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00b f87f 	bl	800cc66 <strncat>
                entered++;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]

                HD44780_SetCursor(11 + entered - 1, 0);
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	330a      	adds	r3, #10
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fad8 	bl	800112c <HD44780_SetCursor>
                HD44780_PrintStr("*");  // Print each '*' as it is entered
 8001b7c:	4831      	ldr	r0, [pc, #196]	; (8001c44 <keypad_check+0x17c>)
 8001b7e:	f7ff fb46 	bl	800120e <HD44780_PrintStr>
                printf(key);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00a ff9b 	bl	800cac0 <iprintf>
 8001b8a:	e018      	b.n	8001bbe <keypad_check+0xf6>
            } else if (key == 'C' && entered > 0) {
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b43      	cmp	r3, #67	; 0x43
 8001b90:	d115      	bne.n	8001bbe <keypad_check+0xf6>
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d012      	beq.n	8001bbe <keypad_check+0xf6>
                enteredPin[--entered] = '\0';
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	3310      	adds	r3, #16
 8001ba2:	443b      	add	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f803 2c08 	strb.w	r2, [r3, #-8]
                HD44780_SetCursor(11 + entered, 0);
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	330b      	adds	r3, #11
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff faba 	bl	800112c <HD44780_SetCursor>
                HD44780_PrintStr(" ");  // Clear the '*' from the display
 8001bb8:	4823      	ldr	r0, [pc, #140]	; (8001c48 <keypad_check+0x180>)
 8001bba:	f7ff fb28 	bl	800120e <HD44780_PrintStr>
            }

            isButtonPressed = true;  // Mark the button as pressed
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73bb      	strb	r3, [r7, #14]
 8001bc2:	e004      	b.n	8001bce <keypad_check+0x106>
        } else if (key == '\0') {
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <keypad_check+0x106>
            isButtonPressed = false;  // Reset button press state
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73bb      	strb	r3, [r7, #14]
    while (entered < 4) {
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d996      	bls.n	8001b02 <keypad_check+0x3a>
        }
    }

    if (entered == 4) {
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d127      	bne.n	8001c2a <keypad_check+0x162>
        if (strncmp(enteredPin, setPin, 4) == 0 || (strncmp(enteredPin, newPin, 4) == 0)) {
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2204      	movs	r2, #4
 8001be0:	491a      	ldr	r1, [pc, #104]	; (8001c4c <keypad_check+0x184>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00b f852 	bl	800cc8c <strncmp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <keypad_check+0x13a>
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <keypad_check+0x188>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00b f848 	bl	800cc8c <strncmp>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <keypad_check+0x150>
            HD44780_Clear();
 8001c02:	f7ff fa7d 	bl	8001100 <HD44780_Clear>
            HD44780_SetCursor(0, 0);
 8001c06:	2100      	movs	r1, #0
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff fa8f 	bl	800112c <HD44780_SetCursor>
            HD44780_PrintStr("UNLOCKED");
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <keypad_check+0x18c>)
 8001c10:	f7ff fafd 	bl	800120e <HD44780_PrintStr>
            return 1;  // PIN is correct
 8001c14:	2301      	movs	r3, #1
 8001c16:	e009      	b.n	8001c2c <keypad_check+0x164>
        } else {
            HD44780_SetCursor(0, 1);
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fa86 	bl	800112c <HD44780_SetCursor>
            HD44780_PrintStr("Wrong PIN. Try again.");
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <keypad_check+0x190>)
 8001c22:	f7ff faf4 	bl	800120e <HD44780_PrintStr>
            return 0;  // PIN is incorrect
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <keypad_check+0x164>
        }
    }
    return 0;  // Default return if less than 4 digits were entered
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	080106c0 	.word	0x080106c0
 8001c38:	080106d8 	.word	0x080106d8
 8001c3c:	080106e0 	.word	0x080106e0
 8001c40:	080106f4 	.word	0x080106f4
 8001c44:	08010690 	.word	0x08010690
 8001c48:	08010700 	.word	0x08010700
 8001c4c:	080107b8 	.word	0x080107b8
 8001c50:	200005d4 	.word	0x200005d4
 8001c54:	08010704 	.word	0x08010704
 8001c58:	08010710 	.word	0x08010710

08001c5c <bluetooth_check>:

uint8_t bluetooth_check(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]
	if(HAL_UART_Receive(&huart2,&rx_data,1, 300) == HAL_OK){
 8001c66:	1df9      	adds	r1, r7, #7
 8001c68:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <bluetooth_check+0x38>)
 8001c70:	f006 fad3 	bl	800821a <HAL_UART_Receive>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <bluetooth_check+0x2c>
		if(rx_data == '1'){
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b31      	cmp	r3, #49	; 0x31
 8001c7e:	d101      	bne.n	8001c84 <bluetooth_check+0x28>
			return 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e002      	b.n	8001c8a <bluetooth_check+0x2e>
		}
		else{
			return 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <bluetooth_check+0x2e>
		}
	}
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000051c 	.word	0x2000051c

08001c98 <unlock_fn_AddCard>:

void unlock_fn_AddCard(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
  HD44780_Init(2);//lcd init, should be called in "task"
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7ff f9aa 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001ca4:	f7ff fa2c 	bl	8001100 <HD44780_Clear>
  char unlock[16] = "UNLOCK!";
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <unlock_fn_AddCard+0x94>)
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
  HD44780_PrintStr(unlock);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff faa2 	bl	800120e <HD44780_PrintStr>
  char add_Card_str[16] = "Add Card";
 8001cca:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <unlock_fn_AddCard+0x98>)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cd0:	c303      	stmia	r3!, {r0, r1}
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	f107 030d 	add.w	r3, r7, #13
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f8c3 2003 	str.w	r2, [r3, #3]
  HD44780_SetCursor(0,1);//move cursor to the first word of the second line
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fa22 	bl	800112c <HD44780_SetCursor>
  HD44780_PrintStr(add_Card_str);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fa8f 	bl	800120e <HD44780_PrintStr>
  uint32_t From_begin_time = HAL_GetTick();
 8001cf0:	f001 fe3a 	bl	8003968 <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button 
 8001cf6:	e00d      	b.n	8001d14 <unlock_fn_AddCard+0x7c>
    if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){//push button
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <unlock_fn_AddCard+0x9c>)
 8001cfc:	f002 fec0 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fdb0 	bl	8001868 <debounce>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <unlock_fn_AddCard+0x7c>
      rc522_add_card();
 8001d0e:	f7ff fc7f 	bl	8001610 <rc522_add_card>
 8001d12:	e008      	b.n	8001d26 <unlock_fn_AddCard+0x8e>
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button 
 8001d14:	f001 fe28 	bl	8003968 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d9e8      	bls.n	8001cf8 <unlock_fn_AddCard+0x60>
      return;
    }
  }
}
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	080106a0 	.word	0x080106a0
 8001d30:	08010728 	.word	0x08010728
 8001d34:	40020000 	.word	0x40020000

08001d38 <unlock_fn_DelCard>:

void unlock_fn_DelCard(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b098      	sub	sp, #96	; 0x60
 8001d3c:	af00      	add	r7, sp, #0
  HD44780_Init(2);//lcd init, should be called in "task"
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f7ff f95a 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001d44:	f7ff f9dc 	bl	8001100 <HD44780_Clear>
  char unlock[16] = "UNLOCK!";
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <unlock_fn_DelCard+0x178>)
 8001d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d52:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
  HD44780_PrintStr(unlock);
 8001d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fa52 	bl	800120e <HD44780_PrintStr>
  char del_Card_str[16] = "Del Card";
 8001d6a:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <unlock_fn_DelCard+0x17c>)
 8001d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d72:	c303      	stmia	r3!, {r0, r1}
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	f107 0339 	add.w	r3, r7, #57	; 0x39
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f8c3 2003 	str.w	r2, [r3, #3]
  HD44780_SetCursor(0,1);
 8001d82:	2101      	movs	r1, #1
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff f9d1 	bl	800112c <HD44780_SetCursor>
  HD44780_PrintStr(del_Card_str);
 8001d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa3d 	bl	800120e <HD44780_PrintStr>
  uint32_t From_begin_time = HAL_GetTick();
 8001d94:	f001 fde8 	bl	8003968 <HAL_GetTick>
 8001d98:	6578      	str	r0, [r7, #84]	; 0x54
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001d9a:	e07b      	b.n	8001e94 <unlock_fn_DelCard+0x15c>
    if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){//make sure doing delete card
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4846      	ldr	r0, [pc, #280]	; (8001eb8 <unlock_fn_DelCard+0x180>)
 8001da0:	f002 fe6e 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fd5e 	bl	8001868 <debounce>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d070      	beq.n	8001e94 <unlock_fn_DelCard+0x15c>
      while(1){
        int count = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	65fb      	str	r3, [r7, #92]	; 0x5c
        card *current = list_start;
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <unlock_fn_DelCard+0x184>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	65bb      	str	r3, [r7, #88]	; 0x58
        while(current != NULL){
 8001dbc:	e066      	b.n	8001e8c <unlock_fn_DelCard+0x154>
          HD44780_Clear();
 8001dbe:	f7ff f99f 	bl	8001100 <HD44780_Clear>
          char CARD[16] = "card ";
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	; (8001ec0 <unlock_fn_DelCard+0x188>)
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dcc:	6018      	str	r0, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	8019      	strh	r1, [r3, #0]
 8001dd2:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	811a      	strh	r2, [r3, #8]
          char card_number[1];
          sprintf(card_number, "%d", count);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001de4:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <unlock_fn_DelCard+0x18c>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00a ff0e 	bl	800cc08 <siprintf>
          strcat(CARD, card_number);
 8001dec:	f107 021c 	add.w	r2, r7, #28
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00a ff26 	bl	800cc48 <strcat>
          HD44780_PrintStr(CARD);
 8001dfc:	f107 0320 	add.w	r3, r7, #32
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa04 	bl	800120e <HD44780_PrintStr>
          uint32_t card_showTime = HAL_GetTick();
 8001e06:	f001 fdaf 	bl	8003968 <HAL_GetTick>
 8001e0a:	6538      	str	r0, [r7, #80]	; 0x50
          while(HAL_GetTick() - card_showTime < 1000/portTICK_RATE_MS){//delete selected card
 8001e0c:	e030      	b.n	8001e70 <unlock_fn_DelCard+0x138>
            if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4829      	ldr	r0, [pc, #164]	; (8001eb8 <unlock_fn_DelCard+0x180>)
 8001e12:	f002 fe35 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fd25 	bl	8001868 <debounce>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d025      	beq.n	8001e70 <unlock_fn_DelCard+0x138>
              uint8_t del[5] = {current->data[0], current->data[1], current->data[2], current->data[3], current->data[4]};
 8001e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	753b      	strb	r3, [r7, #20]
 8001e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e2c:	795b      	ldrb	r3, [r3, #5]
 8001e2e:	757b      	strb	r3, [r7, #21]
 8001e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e32:	799b      	ldrb	r3, [r3, #6]
 8001e34:	75bb      	strb	r3, [r7, #22]
 8001e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e38:	79db      	ldrb	r3, [r3, #7]
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e3e:	7a1b      	ldrb	r3, [r3, #8]
 8001e40:	763b      	strb	r3, [r7, #24]
              rc522_delete_card(del);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcac 	bl	80017a4 <rc522_delete_card>
              HD44780_Clear();
 8001e4c:	f7ff f958 	bl	8001100 <HD44780_Clear>
              char unlock_str[16] = "UNLOCK!";
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <unlock_fn_DelCard+0x178>)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
              HD44780_PrintStr(unlock_str);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f9d0 	bl	800120e <HD44780_PrintStr>
 8001e6e:	e01b      	b.n	8001ea8 <unlock_fn_DelCard+0x170>
          while(HAL_GetTick() - card_showTime < 1000/portTICK_RATE_MS){//delete selected card
 8001e70:	f001 fd7a 	bl	8003968 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7e:	d3c6      	bcc.n	8001e0e <unlock_fn_DelCard+0xd6>
              return;
            }
          }
          current = current->next;
 8001e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	65bb      	str	r3, [r7, #88]	; 0x58
          count++;
 8001e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e88:	3301      	adds	r3, #1
 8001e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        while(current != NULL){
 8001e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d195      	bne.n	8001dbe <unlock_fn_DelCard+0x86>
      while(1){
 8001e92:	e78e      	b.n	8001db2 <unlock_fn_DelCard+0x7a>
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001e94:	f001 fd68 	bl	8003968 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	f67f af7a 	bls.w	8001d9c <unlock_fn_DelCard+0x64>
        }
      }
    }
  }
}
 8001ea8:	3760      	adds	r7, #96	; 0x60
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	080106a0 	.word	0x080106a0
 8001eb4:	0801073c 	.word	0x0801073c
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	200005c8 	.word	0x200005c8
 8001ec0:	0801074c 	.word	0x0801074c
 8001ec4:	08010738 	.word	0x08010738

08001ec8 <unlock_fn_Lock>:

void unlock_fn_Lock(){
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af00      	add	r7, sp, #0
  HD44780_Init(2);//lcd init, should be called in "task"
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7ff f892 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 8001ed4:	f7ff f914 	bl	8001100 <HD44780_Clear>
  char unlock[16] = "UNLOCK!";
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <unlock_fn_Lock+0x9c>)
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
  HD44780_PrintStr(unlock);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f98a 	bl	800120e <HD44780_PrintStr>
  char del_Card_str[16] = "LOCK function";
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <unlock_fn_Lock+0xa0>)
 8001efc:	1d3c      	adds	r4, r7, #4
 8001efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f00:	c407      	stmia	r4!, {r0, r1, r2}
 8001f02:	8023      	strh	r3, [r4, #0]
 8001f04:	2300      	movs	r3, #0
 8001f06:	827b      	strh	r3, [r7, #18]
  HD44780_SetCursor(0,1);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff f90e 	bl	800112c <HD44780_SetCursor>
  HD44780_PrintStr(del_Card_str);
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f97b 	bl	800120e <HD44780_PrintStr>
  uint32_t From_begin_time = HAL_GetTick();
 8001f18:	f001 fd26 	bl	8003968 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	; 0x24
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001f1e:	e013      	b.n	8001f48 <unlock_fn_Lock+0x80>
    if(debounce(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))){
 8001f20:	2101      	movs	r1, #1
 8001f22:	4812      	ldr	r0, [pc, #72]	; (8001f6c <unlock_fn_Lock+0xa4>)
 8001f24:	f002 fdac 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fc9c 	bl	8001868 <debounce>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <unlock_fn_Lock+0x80>
      HD44780_Clear();
 8001f36:	f7ff f8e3 	bl	8001100 <HD44780_Clear>
      vTaskResume(xHandle_lock_task);
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <unlock_fn_Lock+0xa8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f008 f966 	bl	800a210 <vTaskResume>
      unlock_bee();
 8001f44:	f000 f84a 	bl	8001fdc <unlock_bee>
  while(HAL_GetTick() - From_begin_time < 3000/portTICK_RATE_MS){//wait 3s for push button
 8001f48:	f001 fd0e 	bl	8003968 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d9e2      	bls.n	8001f20 <unlock_fn_Lock+0x58>
    }
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	372c      	adds	r7, #44	; 0x2c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	080106a0 	.word	0x080106a0
 8001f68:	0801075c 	.word	0x0801075c
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	200005c0 	.word	0x200005c0

08001f74 <lock_bee>:

void lock_bee(){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 2; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	e023      	b.n	8001fc8 <lock_bee+0x54>
  {
    uint32_t bee_time = HAL_GetTick();
 8001f80:	f001 fcf2 	bl	8003968 <HAL_GetTick>
 8001f84:	6038      	str	r0, [r7, #0]
    HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8c:	4812      	ldr	r0, [pc, #72]	; (8001fd8 <lock_bee+0x64>)
 8001f8e:	f002 fd8f 	bl	8004ab0 <HAL_GPIO_WritePin>
    while(HAL_GetTick() - bee_time < 300/portTICK_RATE_MS){
 8001f92:	bf00      	nop
 8001f94:	f001 fce8 	bl	8003968 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fa2:	d3f7      	bcc.n	8001f94 <lock_bee+0x20>
      ;
    }
    HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001faa:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <lock_bee+0x64>)
 8001fac:	f002 fd80 	bl	8004ab0 <HAL_GPIO_WritePin>
    while(HAL_GetTick() - bee_time < 600/portTICK_RATE_MS){
 8001fb0:	bf00      	nop
 8001fb2:	f001 fcd9 	bl	8003968 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001fc0:	d3f7      	bcc.n	8001fb2 <lock_bee+0x3e>
  for (size_t i = 0; i < 2; i++)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d9d8      	bls.n	8001f80 <lock_bee+0xc>
      ;
    }
  }
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40020c00 	.word	0x40020c00

08001fdc <unlock_bee>:

void unlock_bee(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t bee_time = HAL_GetTick();
 8001fe2:	f001 fcc1 	bl	8003968 <HAL_GetTick>
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fee:	480b      	ldr	r0, [pc, #44]	; (800201c <unlock_bee+0x40>)
 8001ff0:	f002 fd5e 	bl	8004ab0 <HAL_GPIO_WritePin>
  while(HAL_GetTick() - bee_time < 300/portTICK_RATE_MS){
 8001ff4:	bf00      	nop
 8001ff6:	f001 fcb7 	bl	8003968 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002004:	d3f7      	bcc.n	8001ff6 <unlock_bee+0x1a>
    ;
  }
  HAL_GPIO_WritePin(GPIOD, Bee_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <unlock_bee+0x40>)
 800200e:	f002 fd4f 	bl	8004ab0 <HAL_GPIO_WritePin>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40020c00 	.word	0x40020c00

08002020 <lock_task>:
//     }
//   }
// }


void lock_task(void *pvParameters){
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HD44780_Init(2);//lcd init, should be called in "task"
 8002028:	2002      	movs	r0, #2
 800202a:	f7fe ffe5 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 800202e:	f7ff f867 	bl	8001100 <HD44780_Clear>
  uint8_t keyPressed = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while(1){
    char lock_str[16] = "LOCK!";
 8002038:	4a41      	ldr	r2, [pc, #260]	; (8002140 <lock_task+0x120>)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002042:	6018      	str	r0, [r3, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	8019      	strh	r1, [r3, #0]
 8002048:	f107 0312 	add.w	r3, r7, #18
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	811a      	strh	r2, [r3, #8]
    HAL_GPIO_TogglePin(GPIOD, LED_Green_Pin);
 8002054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002058:	483a      	ldr	r0, [pc, #232]	; (8002144 <lock_task+0x124>)
 800205a:	f002 fd42 	bl	8004ae2 <HAL_GPIO_TogglePin>
    HD44780_PrintStr(lock_str);
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f8d3 	bl	800120e <HD44780_PrintStr>
    uint8_t unlock = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    unlock = rc522_check();//str_1
 800206e:	f7ff fc1d 	bl	80018ac <rc522_check>
 8002072:	4603      	mov	r3, r0
 8002074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(unlock){
 8002078:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <lock_task+0x7c>
      HAL_UART_Transmit(&huart3, (uint8_t*)"1", 14, 1000);//1:card_unlock
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	220e      	movs	r2, #14
 8002086:	4930      	ldr	r1, [pc, #192]	; (8002148 <lock_task+0x128>)
 8002088:	4830      	ldr	r0, [pc, #192]	; (800214c <lock_task+0x12c>)
 800208a:	f006 f834 	bl	80080f6 <HAL_UART_Transmit>
      vTaskSuspend(xHandle_lock_task);
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <lock_task+0x130>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f007 fff8 	bl	800a088 <vTaskSuspend>
      lock_bee();
 8002098:	f7ff ff6c 	bl	8001f74 <lock_bee>
    }

    uint32_t From_begin_time = HAL_GetTick();
 800209c:	f001 fc64 	bl	8003968 <HAL_GetTick>
 80020a0:	6238      	str	r0, [r7, #32]
    while(HAL_GetTick() - From_begin_time < 300/portTICK_RATE_MS){ //busy waiting 300 ms, can't use vTaskDelay
 80020a2:	e02b      	b.n	80020fc <lock_task+0xdc>
        char key = read_keypad();
 80020a4:	f7ff f9a2 	bl	80013ec <read_keypad>
 80020a8:	4603      	mov	r3, r0
 80020aa:	77fb      	strb	r3, [r7, #31]
        if (key != '\0' && !keyPressed) {
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01a      	beq.n	80020e8 <lock_task+0xc8>
 80020b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <lock_task+0xc8>
            keyPressed = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (keypad_check()) {
 80020c0:	f7ff fd02 	bl	8001ac8 <keypad_check>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <lock_task+0xdc>
                HAL_UART_Transmit(&huart3, (uint8_t*)"2", 14, 1000);//2:password_unlock
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	220e      	movs	r2, #14
 80020d0:	4920      	ldr	r1, [pc, #128]	; (8002154 <lock_task+0x134>)
 80020d2:	481e      	ldr	r0, [pc, #120]	; (800214c <lock_task+0x12c>)
 80020d4:	f006 f80f 	bl	80080f6 <HAL_UART_Transmit>
                vTaskSuspend(xHandle_lock_task);
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <lock_task+0x130>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f007 ffd3 	bl	800a088 <vTaskSuspend>
                lock_bee();
 80020e2:	f7ff ff47 	bl	8001f74 <lock_bee>
            if (keypad_check()) {
 80020e6:	e009      	b.n	80020fc <lock_task+0xdc>
            }
        } else if (key == '\0' && keyPressed) {
 80020e8:	7ffb      	ldrb	r3, [r7, #31]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <lock_task+0xdc>
 80020ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <lock_task+0xdc>
            keyPressed = 0; // Reset the flag when the key is released
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(HAL_GetTick() - From_begin_time < 300/portTICK_RATE_MS){ //busy waiting 300 ms, can't use vTaskDelay
 80020fc:	f001 fc34 	bl	8003968 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800210a:	d3cb      	bcc.n	80020a4 <lock_task+0x84>
        }
    }

    unlock = bluetooth_check();//wait 300ms for bluetooth signal
 800210c:	f7ff fda6 	bl	8001c5c <bluetooth_check>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if(unlock){
 8002116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <lock_task+0x11a>
      // char* device = "BT";
      // sendLogToServer(device);
      HAL_UART_Transmit(&huart3, (uint8_t*)"3", 14, 1000);//3:bluetooth_unlock
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	220e      	movs	r2, #14
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <lock_task+0x138>)
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <lock_task+0x12c>)
 8002128:	f005 ffe5 	bl	80080f6 <HAL_UART_Transmit>
      vTaskSuspend(xHandle_lock_task);
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <lock_task+0x130>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f007 ffa9 	bl	800a088 <vTaskSuspend>
      lock_bee();
 8002136:	f7ff ff1d 	bl	8001f74 <lock_bee>
    }

    HD44780_Clear();
 800213a:	f7fe ffe1 	bl	8001100 <HD44780_Clear>
  while(1){
 800213e:	e77b      	b.n	8002038 <lock_task+0x18>
 8002140:	08010778 	.word	0x08010778
 8002144:	40020c00 	.word	0x40020c00
 8002148:	0801076c 	.word	0x0801076c
 800214c:	20000560 	.word	0x20000560
 8002150:	200005c0 	.word	0x200005c0
 8002154:	08010770 	.word	0x08010770
 8002158:	08010774 	.word	0x08010774

0800215c <unlock_task>:
  }
}

void unlock_task(void *pvParameters){
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HD44780_Init(2);//lcd init, should be called in "task"
 8002164:	2002      	movs	r0, #2
 8002166:	f7fe ff47 	bl	8000ff8 <HD44780_Init>
  HD44780_Clear();//clean screen
 800216a:	f7fe ffc9 	bl	8001100 <HD44780_Clear>
  unlock_bee();
 800216e:	f7ff ff35 	bl	8001fdc <unlock_bee>
  while(1){
    char unlock_str[16] = "UNLOCK!";
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <unlock_task+0x74>)
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
    HD44780_PrintStr(unlock_str);
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f83d 	bl	800120e <HD44780_PrintStr>
    uint8_t fn_execute = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]
    char key = read_keypad();
 8002198:	f7ff f928 	bl	80013ec <read_keypad>
 800219c:	4603      	mov	r3, r0
 800219e:	77bb      	strb	r3, [r7, #30]
    if (key == 'A'){
 80021a0:	7fbb      	ldrb	r3, [r7, #30]
 80021a2:	2b41      	cmp	r3, #65	; 0x41
 80021a4:	d101      	bne.n	80021aa <unlock_task+0x4e>
      unlock_fn_AddCard();
 80021a6:	f7ff fd77 	bl	8001c98 <unlock_fn_AddCard>
    }
    if (key == 'B'){
 80021aa:	7fbb      	ldrb	r3, [r7, #30]
 80021ac:	2b42      	cmp	r3, #66	; 0x42
 80021ae:	d101      	bne.n	80021b4 <unlock_task+0x58>
      unlock_fn_DelCard();
 80021b0:	f7ff fdc2 	bl	8001d38 <unlock_fn_DelCard>
    }
    if (key == 'C'){
 80021b4:	7fbb      	ldrb	r3, [r7, #30]
 80021b6:	2b43      	cmp	r3, #67	; 0x43
 80021b8:	d101      	bne.n	80021be <unlock_task+0x62>
      unlock_fn_Lock();
 80021ba:	f7ff fe85 	bl	8001ec8 <unlock_fn_Lock>
    }
    if (key == 'D'){
 80021be:	7fbb      	ldrb	r3, [r7, #30]
 80021c0:	2b44      	cmp	r3, #68	; 0x44
 80021c2:	d101      	bne.n	80021c8 <unlock_task+0x6c>
      unlock_fn_setpin();
 80021c4:	f7ff fc30 	bl	8001a28 <unlock_fn_setpin>
    }
    HD44780_Clear();
 80021c8:	f7fe ff9a 	bl	8001100 <HD44780_Clear>
  while(1){
 80021cc:	e7d1      	b.n	8002172 <unlock_task+0x16>
 80021ce:	bf00      	nop
 80021d0:	080106a0 	.word	0x080106a0

080021d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint64_t CardSize = 0;
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e6:	f001 fb89 	bl	80038fc <HAL_Init>

  /* USER CODE BEGIN Init */
  xQue1=xQueueCreate(5,sizeof(int));
 80021ea:	2200      	movs	r2, #0
 80021ec:	2104      	movs	r1, #4
 80021ee:	2005      	movs	r0, #5
 80021f0:	f007 f906 	bl	8009400 <xQueueGenericCreate>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <main+0xc4>)
 80021f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fa:	f000 f85f 	bl	80022bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021fe:	f000 fafb 	bl	80027f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002202:	f000 fac3 	bl	800278c <MX_DMA_Init>
  MX_SPI1_Init();
 8002206:	f000 f97f 	bl	8002508 <MX_SPI1_Init>
  MX_I2C1_Init();
 800220a:	f000 f921 	bl	8002450 <MX_I2C1_Init>
  MX_I2S3_Init();
 800220e:	f000 f94d 	bl	80024ac <MX_I2S3_Init>
  MX_USART2_UART_Init();
 8002212:	f000 fa67 	bl	80026e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002216:	f000 f8bb 	bl	8002390 <MX_ADC1_Init>
  MX_SPI2_Init();
 800221a:	f000 f9ab 	bl	8002574 <MX_SPI2_Init>
  MX_TIM2_Init();
 800221e:	f000 f9df 	bl	80025e0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002222:	f000 fa89 	bl	8002738 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8002226:	f000 fa33 	bl	8002690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // vEsp8266Init(); //WiFi init
  MFRC522_Init();//card reader init
 800222a:	f000 fcdd 	bl	8002be8 <MFRC522_Init>
  card *default_card = (card *)malloc(sizeof(card));
 800222e:	200c      	movs	r0, #12
 8002230:	f009 fcc6 	bl	800bbc0 <malloc>
 8002234:	4603      	mov	r3, r0
 8002236:	607b      	str	r3, [r7, #4]
  default_card->next = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
  default_card->data[0] = 211;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	22d3      	movs	r2, #211	; 0xd3
 8002242:	711a      	strb	r2, [r3, #4]
  default_card->data[1] = 113;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2271      	movs	r2, #113	; 0x71
 8002248:	715a      	strb	r2, [r3, #5]
  default_card->data[2] = 208;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	22d0      	movs	r2, #208	; 0xd0
 800224e:	719a      	strb	r2, [r3, #6]
  default_card->data[3] = 2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	71da      	strb	r2, [r3, #7]
  default_card->data[4] = 112;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2270      	movs	r2, #112	; 0x70
 800225a:	721a      	strb	r2, [r3, #8]
  list_start = default_card;
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <main+0xc8>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
  list_end = default_card;
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <main+0xcc>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6013      	str	r3, [r2, #0]
  //rc522-test
  // xTaskCreate(rc522_test, "rc522_test_task", 128, NULL, 1, &xHandle_1);

  //because configUSE_TIME_SLICING = 1
  //if priorities of lock_task and unlock_task are the same, they will be executed in turn. 
  xTaskCreate(lock_task, "lock_task", 128, NULL, 2, &xHandle_lock_task);
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <main+0xd0>)
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	490c      	ldr	r1, [pc, #48]	; (80022a8 <main+0xd4>)
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <main+0xd8>)
 8002278:	f007 fd94 	bl	8009da4 <xTaskCreate>
  xTaskCreate(unlock_task, "unlock_task", 128, NULL, 1, &xHandle_unlock_task);
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <main+0xdc>)
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2301      	movs	r3, #1
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2300      	movs	r3, #0
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	490a      	ldr	r1, [pc, #40]	; (80022b4 <main+0xe0>)
 800228a:	480b      	ldr	r0, [pc, #44]	; (80022b8 <main+0xe4>)
 800228c:	f007 fd8a 	bl	8009da4 <xTaskCreate>
	
  vTaskStartScheduler();
 8002290:	f008 f81c 	bl	800a2cc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8002294:	e7fe      	b.n	8002294 <main+0xc0>
 8002296:	bf00      	nop
 8002298:	200005e0 	.word	0x200005e0
 800229c:	200005c8 	.word	0x200005c8
 80022a0:	200005cc 	.word	0x200005cc
 80022a4:	200005c0 	.word	0x200005c0
 80022a8:	08010788 	.word	0x08010788
 80022ac:	08002021 	.word	0x08002021
 80022b0:	200005c4 	.word	0x200005c4
 80022b4:	08010794 	.word	0x08010794
 80022b8:	0800215d 	.word	0x0800215d

080022bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b094      	sub	sp, #80	; 0x50
 80022c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c2:	f107 0320 	add.w	r3, r7, #32
 80022c6:	2230      	movs	r2, #48	; 0x30
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f009 fc96 	bl	800bbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	4b28      	ldr	r3, [pc, #160]	; (8002388 <SystemClock_Config+0xcc>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <SystemClock_Config+0xcc>)
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6413      	str	r3, [r2, #64]	; 0x40
 80022f0:	4b25      	ldr	r3, [pc, #148]	; (8002388 <SystemClock_Config+0xcc>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <SystemClock_Config+0xd0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <SystemClock_Config+0xd0>)
 8002306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <SystemClock_Config+0xd0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002318:	2301      	movs	r3, #1
 800231a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800231c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002322:	2302      	movs	r3, #2
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800232c:	2304      	movs	r3, #4
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002330:	235a      	movs	r3, #90	; 0x5a
 8002332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002334:	2302      	movs	r3, #2
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002338:	2304      	movs	r3, #4
 800233a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233c:	f107 0320 	add.w	r3, r7, #32
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fced 	bl	8005d20 <HAL_RCC_OscConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800234c:	f000 fb90 	bl	8002a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002350:	230f      	movs	r3, #15
 8002352:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800235c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f003 ff4e 	bl	8006210 <HAL_RCC_ClockConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800237a:	f000 fb79 	bl	8002a70 <Error_Handler>
  }
}
 800237e:	bf00      	nop
 8002380:	3750      	adds	r7, #80	; 0x50
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40007000 	.word	0x40007000

08002390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023a4:	4a28      	ldr	r2, [pc, #160]	; (8002448 <MX_ADC1_Init+0xb8>)
 80023a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023bc:	2204      	movs	r2, #4
 80023be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023c0:	4b20      	ldr	r3, [pc, #128]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <MX_ADC1_Init+0xbc>)
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023dc:	2202      	movs	r2, #2
 80023de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023ee:	4815      	ldr	r0, [pc, #84]	; (8002444 <MX_ADC1_Init+0xb4>)
 80023f0:	f001 faea 	bl	80039c8 <HAL_ADC_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80023fa:	f000 fb39 	bl	8002a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023fe:	2308      	movs	r3, #8
 8002400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800240a:	463b      	mov	r3, r7
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <MX_ADC1_Init+0xb4>)
 8002410:	f001 fb1e 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800241a:	f000 fb29 	bl	8002a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800241e:	2309      	movs	r3, #9
 8002420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002422:	2302      	movs	r3, #2
 8002424:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002426:	463b      	mov	r3, r7
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_ADC1_Init+0xb4>)
 800242c:	f001 fb10 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002436:	f000 fb1b 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000023c 	.word	0x2000023c
 8002448:	40012000 	.word	0x40012000
 800244c:	0f000001 	.word	0x0f000001

08002450 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_I2C1_Init+0x50>)
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <MX_I2C1_Init+0x54>)
 8002458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_I2C1_Init+0x50>)
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <MX_I2C1_Init+0x58>)
 800245e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_I2C1_Init+0x50>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_I2C1_Init+0x50>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_I2C1_Init+0x50>)
 800246e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002472:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <MX_I2C1_Init+0x50>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_I2C1_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <MX_I2C1_Init+0x50>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_I2C1_Init+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <MX_I2C1_Init+0x50>)
 800248e:	f002 fb5b 	bl	8004b48 <HAL_I2C_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002498:	f000 faea 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200002e4 	.word	0x200002e4
 80024a4:	40005400 	.word	0x40005400
 80024a8:	000186a0 	.word	0x000186a0

080024ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_I2S3_Init+0x54>)
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <MX_I2S3_Init+0x58>)
 80024b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_I2S3_Init+0x54>)
 80024b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_I2S3_Init+0x54>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_I2S3_Init+0x54>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <MX_I2S3_Init+0x54>)
 80024cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_I2S3_Init+0x54>)
 80024d4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80024d8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_I2S3_Init+0x54>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <MX_I2S3_Init+0x54>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_I2S3_Init+0x54>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <MX_I2S3_Init+0x54>)
 80024ee:	f002 ff77 	bl	80053e0 <HAL_I2S_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80024f8:	f000 faba 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000338 	.word	0x20000338
 8002504:	40003c00 	.word	0x40003c00

08002508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <MX_SPI1_Init+0x64>)
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <MX_SPI1_Init+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_SPI1_Init+0x64>)
 8002514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_SPI1_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_SPI1_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_SPI1_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_SPI1_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_SPI1_Init+0x64>)
 8002534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_SPI1_Init+0x64>)
 800253c:	2220      	movs	r2, #32
 800253e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_SPI1_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_SPI1_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_SPI1_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_SPI1_Init+0x64>)
 8002554:	220a      	movs	r2, #10
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_SPI1_Init+0x64>)
 800255a:	f004 f9eb 	bl	8006934 <HAL_SPI_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002564:	f000 fa84 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200003e0 	.word	0x200003e0
 8002570:	40013000 	.word	0x40013000

08002574 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <MX_SPI2_Init+0x64>)
 800257a:	4a18      	ldr	r2, [pc, #96]	; (80025dc <MX_SPI2_Init+0x68>)
 800257c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <MX_SPI2_Init+0x64>)
 8002580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002584:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_SPI2_Init+0x64>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <MX_SPI2_Init+0x64>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_SPI2_Init+0x64>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <MX_SPI2_Init+0x64>)
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025a8:	2220      	movs	r2, #32
 80025aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025c0:	220a      	movs	r2, #10
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025c4:	4804      	ldr	r0, [pc, #16]	; (80025d8 <MX_SPI2_Init+0x64>)
 80025c6:	f004 f9b5 	bl	8006934 <HAL_SPI_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025d0:	f000 fa4e 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000438 	.word	0x20000438
 80025dc:	40003800 	.word	0x40003800

080025e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <MX_TIM2_Init+0xac>)
 8002604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <MX_TIM2_Init+0xac>)
 800260c:	2259      	movs	r2, #89	; 0x59
 800260e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <MX_TIM2_Init+0xac>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <MX_TIM2_Init+0xac>)
 8002618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MX_TIM2_Init+0xac>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <MX_TIM2_Init+0xac>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800262a:	4818      	ldr	r0, [pc, #96]	; (800268c <MX_TIM2_Init+0xac>)
 800262c:	f004 fff4 	bl	8007618 <HAL_TIM_PWM_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002636:	f000 fa1b 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	4619      	mov	r1, r3
 8002648:	4810      	ldr	r0, [pc, #64]	; (800268c <MX_TIM2_Init+0xac>)
 800264a:	f005 fc77 	bl	8007f3c <HAL_TIMEx_MasterConfigSynchronization>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002654:	f000 fa0c 	bl	8002a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002658:	2360      	movs	r3, #96	; 0x60
 800265a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <MX_TIM2_Init+0xac>)
 8002670:	f005 f92a 	bl	80078c8 <HAL_TIM_PWM_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800267a:	f000 f9f9 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800267e:	4803      	ldr	r0, [pc, #12]	; (800268c <MX_TIM2_Init+0xac>)
 8002680:	f000 fe52 	bl	8003328 <HAL_TIM_MspPostInit>

}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000490 	.word	0x20000490

08002690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <MX_USART1_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 800269c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_USART1_UART_Init+0x4c>)
 80026c8:	f005 fcc8 	bl	800805c <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f000 f9cd 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200004d8 	.word	0x200004d8
 80026e0:	40011000 	.word	0x40011000

080026e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <MX_USART2_UART_Init+0x50>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_USART2_UART_Init+0x4c>)
 800271c:	f005 fc9e 	bl	800805c <HAL_UART_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002726:	f000 f9a3 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000051c 	.word	0x2000051c
 8002734:	40004400 	.word	0x40004400

08002738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <MX_USART3_UART_Init+0x50>)
 8002740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_USART3_UART_Init+0x4c>)
 8002770:	f005 fc74 	bl	800805c <HAL_UART_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800277a:	f000 f979 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000560 	.word	0x20000560
 8002788:	40004800 	.word	0x40004800

0800278c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_DMA_Init+0x68>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <MX_DMA_Init+0x68>)
 800279c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_DMA_Init+0x68>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <MX_DMA_Init+0x68>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <MX_DMA_Init+0x68>)
 80027b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <MX_DMA_Init+0x68>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2010      	movs	r0, #16
 80027d0:	f001 fc14 	bl	8003ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027d4:	2010      	movs	r0, #16
 80027d6:	f001 fc2d 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2038      	movs	r0, #56	; 0x38
 80027e0:	f001 fc0c 	bl	8003ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027e4:	2038      	movs	r0, #56	; 0x38
 80027e6:	f001 fc25 	bl	8004034 <HAL_NVIC_EnableIRQ>

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	4b61      	ldr	r3, [pc, #388]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a60      	ldr	r2, [pc, #384]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002818:	f043 0310 	orr.w	r3, r3, #16
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a59      	ldr	r2, [pc, #356]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b57      	ldr	r3, [pc, #348]	; (8002998 <MX_GPIO_Init+0x1a0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b53      	ldr	r3, [pc, #332]	; (8002998 <MX_GPIO_Init+0x1a0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a52      	ldr	r2, [pc, #328]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <MX_GPIO_Init+0x1a0>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b49      	ldr	r3, [pc, #292]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b45      	ldr	r3, [pc, #276]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a44      	ldr	r2, [pc, #272]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <MX_GPIO_Init+0x1a0>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <MX_GPIO_Init+0x1a0>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <MX_GPIO_Init+0x1a0>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <MX_GPIO_Init+0x1a0>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|C1_Pin|C2_Pin|C3_Pin
 80028b6:	2200      	movs	r2, #0
 80028b8:	f647 0112 	movw	r1, #30738	; 0x7812
 80028bc:	4837      	ldr	r0, [pc, #220]	; (800299c <MX_GPIO_Init+0x1a4>)
 80028be:	f002 f8f7 	bl	8004ab0 <HAL_GPIO_WritePin>
                          |C4_Pin|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BOOT1_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f641 0104 	movw	r1, #6148	; 0x1804
 80028c8:	4835      	ldr	r0, [pc, #212]	; (80029a0 <MX_GPIO_Init+0x1a8>)
 80028ca:	f002 f8f1 	bl	8004ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|Bee_Pin|LED_Green_Pin|LED_Orange_Pin
 80028ce:	2200      	movs	r2, #0
 80028d0:	f64f 1180 	movw	r1, #63872	; 0xf980
 80028d4:	4833      	ldr	r0, [pc, #204]	; (80029a4 <MX_GPIO_Init+0x1ac>)
 80028d6:	f002 f8eb 	bl	8004ab0 <HAL_GPIO_WritePin>
                          |LED_Red_Pin|LED_Blue_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 C1_Pin C2_Pin C3_Pin
                           C4_Pin PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|C1_Pin|C2_Pin|C3_Pin
 80028da:	f647 0312 	movw	r3, #30738	; 0x7812
 80028de:	61fb      	str	r3, [r7, #28]
                          |C4_Pin|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	482a      	ldr	r0, [pc, #168]	; (800299c <MX_GPIO_Init+0x1a4>)
 80028f4:	f001 ff28 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4827      	ldr	r0, [pc, #156]	; (80029a8 <MX_GPIO_Init+0x1b0>)
 800290c:	f001 ff1c 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB11 PB12 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8002910:	f641 0304 	movw	r3, #6148	; 0x1804
 8002914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	4619      	mov	r1, r3
 8002928:	481d      	ldr	r0, [pc, #116]	; (80029a0 <MX_GPIO_Init+0x1a8>)
 800292a:	f001 ff0d 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 800292e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	4619      	mov	r1, r3
 8002942:	4816      	ldr	r0, [pc, #88]	; (800299c <MX_GPIO_Init+0x1a4>)
 8002944:	f001 ff00 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 Bee_Pin LED_Green_Pin LED_Orange_Pin
                           LED_Red_Pin LED_Blue_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|Bee_Pin|LED_Green_Pin|LED_Orange_Pin
 8002948:	f64f 1380 	movw	r3, #63872	; 0xf980
 800294c:	61fb      	str	r3, [r7, #28]
                          |LED_Red_Pin|LED_Blue_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	4619      	mov	r1, r3
 8002960:	4810      	ldr	r0, [pc, #64]	; (80029a4 <MX_GPIO_Init+0x1ac>)
 8002962:	f001 fef1 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800296a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800296e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4808      	ldr	r0, [pc, #32]	; (800299c <MX_GPIO_Init+0x1a4>)
 800297c:	f001 fee4 	bl	8004748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	210f      	movs	r1, #15
 8002984:	2006      	movs	r0, #6
 8002986:	f001 fb39 	bl	8003ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800298a:	2006      	movs	r0, #6
 800298c:	f001 fb52 	bl	8004034 <HAL_NVIC_EnableIRQ>

}
 8002990:	bf00      	nop
 8002992:	3730      	adds	r7, #48	; 0x30
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	40021000 	.word	0x40021000
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40020000 	.word	0x40020000

080029ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	if (GPIO_Pin == GPIO_PIN_0) {
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d137      	bne.n	8002a2c <HAL_GPIO_EXTI_Callback+0x80>
		xHigherPriorityTaskWoken = pdFALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
		if (flag == pdTRUE) {
 80029c0:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x88>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_GPIO_EXTI_Callback+0x2c>
			xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x8c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f107 020c 	add.w	r2, r7, #12
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f006 ff0a 	bl	80097ec <xQueueGiveFromISR>
		} else {
			//do nothing
		}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80029d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029dc:	4817      	ldr	r0, [pc, #92]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x90>)
 80029de:	f002 f880 	bl	8004ae2 <HAL_GPIO_TogglePin>
		uint8_t data_1 = 0x5f | 0x80;
 80029e2:	23df      	movs	r3, #223	; 0xdf
 80029e4:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2108      	movs	r1, #8
 80029ea:	4815      	ldr	r0, [pc, #84]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x94>)
 80029ec:	f002 f860 	bl	8004ab0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &data_1, 1, 10);
 80029f0:	f107 010b 	add.w	r1, r7, #11
 80029f4:	230a      	movs	r3, #10
 80029f6:	2201      	movs	r2, #1
 80029f8:	4812      	ldr	r0, [pc, #72]	; (8002a44 <HAL_GPIO_EXTI_Callback+0x98>)
 80029fa:	f004 f824 	bl	8006a46 <HAL_SPI_Transmit>
		////	HAL_Delay(10);
		HAL_SPI_Receive(&hspi1, &data_1, 1, 10);
 80029fe:	f107 010b 	add.w	r1, r7, #11
 8002a02:	230a      	movs	r3, #10
 8002a04:	2201      	movs	r2, #1
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <HAL_GPIO_EXTI_Callback+0x98>)
 8002a08:	f004 f959 	bl	8006cbe <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2108      	movs	r1, #8
 8002a10:	480b      	ldr	r0, [pc, #44]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x94>)
 8002a12:	f002 f84d 	bl	8004ab0 <HAL_GPIO_WritePin>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_GPIO_EXTI_Callback+0x80>
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
	}

}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000030 	.word	0x20000030
 8002a38:	200005dc 	.word	0x200005dc
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	200003e0 	.word	0x200003e0
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a5e:	f000 ff6f 	bl	8003940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40001400 	.word	0x40001400

08002a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a74:	b672      	cpsid	i
}
 8002a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a78:	e7fe      	b.n	8002a78 <Error_Handler+0x8>
	...

08002a7c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8002a86:	f107 020f 	add.w	r2, r7, #15
 8002a8a:	1df9      	adds	r1, r7, #7
 8002a8c:	2364      	movs	r3, #100	; 0x64
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2301      	movs	r3, #1
 8002a92:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <RC522_SPI_Transfer+0x28>)
 8002a94:	f004 fa24 	bl	8006ee0 <HAL_SPI_TransmitReceive>

	return rx_data;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000438 	.word	0x20000438

08002aa8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	71fb      	strb	r3, [r7, #7]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <Write_MFRC522+0x4c>)
 8002ac0:	f001 fff6 	bl	8004ab0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ffd3 	bl	8002a7c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8002ad6:	79bb      	ldrb	r3, [r7, #6]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ffcf 	bl	8002a7c <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <Write_MFRC522+0x4c>)
 8002ae6:	f001 ffe3 	bl	8004ab0 <HAL_GPIO_WritePin>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40020400 	.word	0x40020400

08002af8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b08:	480f      	ldr	r0, [pc, #60]	; (8002b48 <Read_MFRC522+0x50>)
 8002b0a:	f001 ffd1 	bl	8004ab0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ffaa 	bl	8002a7c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7ff ffa7 	bl	8002a7c <RC522_SPI_Transfer>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002b32:	2201      	movs	r2, #1
 8002b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b38:	4803      	ldr	r0, [pc, #12]	; (8002b48 <Read_MFRC522+0x50>)
 8002b3a:	f001 ffb9 	bl	8004ab0 <HAL_GPIO_WritePin>

    return val;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40020400 	.word	0x40020400

08002b4c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	460a      	mov	r2, r1
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ffca 	bl	8002af8 <Read_MFRC522>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff97 	bl	8002aa8 <Write_MFRC522>
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	71fb      	strb	r3, [r7, #7]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ffaf 	bl	8002af8 <Read_MFRC522>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002b9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	b25a      	sxtb	r2, r3
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff77 	bl	8002aa8 <Write_MFRC522>
} 
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8002bc6:	2014      	movs	r0, #20
 8002bc8:	f7ff ff96 	bl	8002af8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8002bcc:	2103      	movs	r1, #3
 8002bce:	2014      	movs	r0, #20
 8002bd0:	f7ff ffbc 	bl	8002b4c <SetBitMask>
}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8002bdc:	210f      	movs	r1, #15
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7ff ff62 	bl	8002aa8 <Write_MFRC522>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002bec:	2201      	movs	r2, #1
 8002bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bf2:	4813      	ldr	r0, [pc, #76]	; (8002c40 <MFRC522_Init+0x58>)
 8002bf4:	f001 ff5c 	bl	8004ab0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <MFRC522_Init+0x5c>)
 8002c00:	f001 ff56 	bl	8004ab0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8002c04:	f7ff ffe8 	bl	8002bd8 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8002c08:	218d      	movs	r1, #141	; 0x8d
 8002c0a:	202a      	movs	r0, #42	; 0x2a
 8002c0c:	f7ff ff4c 	bl	8002aa8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002c10:	213e      	movs	r1, #62	; 0x3e
 8002c12:	202b      	movs	r0, #43	; 0x2b
 8002c14:	f7ff ff48 	bl	8002aa8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8002c18:	211e      	movs	r1, #30
 8002c1a:	202d      	movs	r0, #45	; 0x2d
 8002c1c:	f7ff ff44 	bl	8002aa8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002c20:	2100      	movs	r1, #0
 8002c22:	202c      	movs	r0, #44	; 0x2c
 8002c24:	f7ff ff40 	bl	8002aa8 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8002c28:	2140      	movs	r1, #64	; 0x40
 8002c2a:	2015      	movs	r0, #21
 8002c2c:	f7ff ff3c 	bl	8002aa8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002c30:	213d      	movs	r1, #61	; 0x3d
 8002c32:	2011      	movs	r0, #17
 8002c34:	f7ff ff38 	bl	8002aa8 <Write_MFRC522>

	AntennaOn();
 8002c38:	f7ff ffc3 	bl	8002bc2 <AntennaOn>
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40020c00 	.word	0x40020c00

08002c48 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	4613      	mov	r3, r2
 8002c58:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002c62:	2300      	movs	r3, #0
 8002c64:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d006      	beq.n	8002c7a <MFRC522_ToCard+0x32>
 8002c6c:	2b0e      	cmp	r3, #14
 8002c6e:	d109      	bne.n	8002c84 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8002c70:	2312      	movs	r3, #18
 8002c72:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8002c74:	2310      	movs	r3, #16
 8002c76:	777b      	strb	r3, [r7, #29]
			break;
 8002c78:	e005      	b.n	8002c86 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8002c7a:	2377      	movs	r3, #119	; 0x77
 8002c7c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8002c7e:	2330      	movs	r3, #48	; 0x30
 8002c80:	777b      	strb	r3, [r7, #29]
			break;
 8002c82:	e000      	b.n	8002c86 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002c84:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8002c86:	7fbb      	ldrb	r3, [r7, #30]
 8002c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2002      	movs	r0, #2
 8002c92:	f7ff ff09 	bl	8002aa8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	2004      	movs	r0, #4
 8002c9a:	f7ff ff72 	bl	8002b82 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	200a      	movs	r0, #10
 8002ca2:	f7ff ff53 	bl	8002b4c <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7ff fefd 	bl	8002aa8 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e00a      	b.n	8002cca <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2009      	movs	r0, #9
 8002cc0:	f7ff fef2 	bl	8002aa8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	7bbb      	ldrb	r3, [r7, #14]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3f0      	bcc.n	8002cb4 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f7ff fee6 	bl	8002aa8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d103      	bne.n	8002cea <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	200d      	movs	r0, #13
 8002ce6:	f7ff ff31 	bl	8002b4c <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8002cea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cee:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002cf0:	2004      	movs	r0, #4
 8002cf2:	f7ff ff01 	bl	8002af8 <Read_MFRC522>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	773b      	strb	r3, [r7, #28]
        i--;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <MFRC522_ToCard+0xd4>
 8002d06:	7f3b      	ldrb	r3, [r7, #28]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <MFRC522_ToCard+0xd4>
 8002d10:	7f3a      	ldrb	r2, [r7, #28]
 8002d12:	7f7b      	ldrb	r3, [r7, #29]
 8002d14:	4013      	ands	r3, r2
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0e9      	beq.n	8002cf0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	200d      	movs	r0, #13
 8002d20:	f7ff ff2f 	bl	8002b82 <ClearBitMask>
	
    if (i != 0)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d052      	beq.n	8002dd0 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8002d2a:	2006      	movs	r0, #6
 8002d2c:	f7ff fee4 	bl	8002af8 <Read_MFRC522>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 031b 	and.w	r3, r3, #27
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d148      	bne.n	8002dcc <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8002d3e:	7f3a      	ldrb	r2, [r7, #28]
 8002d40:	7fbb      	ldrb	r3, [r7, #30]
 8002d42:	4013      	ands	r3, r2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d13b      	bne.n	8002dd0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002d58:	200a      	movs	r0, #10
 8002d5a:	f7ff fecd 	bl	8002af8 <Read_MFRC522>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002d62:	200c      	movs	r0, #12
 8002d64:	f7ff fec8 	bl	8002af8 <Read_MFRC522>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8002d76:	7f3b      	ldrb	r3, [r7, #28]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	00da      	lsls	r2, r3, #3
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	4413      	add	r3, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e004      	b.n	8002d92 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8002d88:	7f3b      	ldrb	r3, [r7, #28]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002d92:	7f3b      	ldrb	r3, [r7, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8002d98:	2301      	movs	r3, #1
 8002d9a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8002d9c:	7f3b      	ldrb	r3, [r7, #28]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d901      	bls.n	8002da6 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8002da2:	2310      	movs	r3, #16
 8002da4:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e00a      	b.n	8002dc2 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	18d4      	adds	r4, r2, r3
 8002db2:	2009      	movs	r0, #9
 8002db4:	f7ff fea0 	bl	8002af8 <Read_MFRC522>
 8002db8:	4603      	mov	r3, r0
 8002dba:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	7f3b      	ldrb	r3, [r7, #28]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3f0      	bcc.n	8002dac <MFRC522_ToCard+0x164>
 8002dca:	e001      	b.n	8002dd0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8002dcc:	2302      	movs	r3, #2
 8002dce:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}

08002dda <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	4603      	mov	r3, r0
 8002de2:	6039      	str	r1, [r7, #0]
 8002de4:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8002de6:	2107      	movs	r1, #7
 8002de8:	200d      	movs	r0, #13
 8002dea:	f7ff fe5d 	bl	8002aa8 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002df4:	f107 0308 	add.w	r3, r7, #8
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	200c      	movs	r0, #12
 8002e02:	f7ff ff21 	bl	8002c48 <MFRC522_ToCard>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <MFRC522_Request+0x3c>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d001      	beq.n	8002e1a <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8002e16:	2302      	movs	r3, #2
 8002e18:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002e30:	2100      	movs	r1, #0
 8002e32:	200d      	movs	r0, #13
 8002e34:	f7ff fe38 	bl	8002aa8 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2293      	movs	r2, #147	; 0x93
 8002e3c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3301      	adds	r3, #1
 8002e42:	2220      	movs	r2, #32
 8002e44:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	200c      	movs	r0, #12
 8002e54:	f7ff fef8 	bl	8002c48 <MFRC522_ToCard>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	73bb      	strb	r3, [r7, #14]
 8002e66:	e009      	b.n	8002e7c <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	7b7b      	ldrb	r3, [r7, #13]
 8002e72:	4053      	eors	r3, r2
 8002e74:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8002e76:	7bbb      	ldrb	r3, [r7, #14]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	73bb      	strb	r3, [r7, #14]
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d9f2      	bls.n	8002e68 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	7b7a      	ldrb	r2, [r7, #13]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8002e90:	2302      	movs	r3, #2
 8002e92:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
} 
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_MspInit+0x4c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_MspInit+0x4c>)
 8002eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_MspInit+0x4c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_MspInit+0x4c>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <HAL_MspInit+0x4c>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_MspInit+0x4c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800

08002ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <HAL_ADC_MspInit+0xdc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d157      	bne.n	8002fc2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_ADC_MspInit+0xe0>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	; (8002fd0 <HAL_ADC_MspInit+0xe0>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6453      	str	r3, [r2, #68]	; 0x44
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_ADC_MspInit+0xe0>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_ADC_MspInit+0xe0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_ADC_MspInit+0xe0>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_ADC_MspInit+0xe0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	481d      	ldr	r0, [pc, #116]	; (8002fd4 <HAL_ADC_MspInit+0xe4>)
 8002f5e:	f001 fbf3 	bl	8004748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f64:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_ADC_MspInit+0xec>)
 8002f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fa6:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002fa8:	f001 f852 	bl	8004050 <HAL_DMA_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002fb2:	f7ff fd5d 	bl	8002a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <HAL_ADC_MspInit+0xe8>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fc2:	bf00      	nop
 8002fc4:	3728      	adds	r7, #40	; 0x28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40012000 	.word	0x40012000
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	20000284 	.word	0x20000284
 8002fdc:	40026410 	.word	0x40026410

08002fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_I2C_MspInit+0x84>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12c      	bne.n	800305c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_I2C_MspInit+0x88>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_I2C_MspInit+0x88>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_I2C_MspInit+0x88>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800301e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003024:	2312      	movs	r3, #18
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003028:	2301      	movs	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	2303      	movs	r3, #3
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003030:	2304      	movs	r3, #4
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	480c      	ldr	r0, [pc, #48]	; (800306c <HAL_I2C_MspInit+0x8c>)
 800303c:	f001 fb84 	bl	8004748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_I2C_MspInit+0x88>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_I2C_MspInit+0x88>)
 800304a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800304e:	6413      	str	r3, [r2, #64]	; 0x40
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_I2C_MspInit+0x88>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800305c:	bf00      	nop
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40005400 	.word	0x40005400
 8003068:	40023800 	.word	0x40023800
 800306c:	40020400 	.word	0x40020400

08003070 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <HAL_I2S_MspInit+0x164>)
 800309c:	4293      	cmp	r3, r2
 800309e:	f040 8094 	bne.w	80031ca <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80030a2:	2301      	movs	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80030a6:	2332      	movs	r3, #50	; 0x32
 80030a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80030aa:	2302      	movs	r3, #2
 80030ac:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fafe 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80030be:	f7ff fcd7 	bl	8002a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a43      	ldr	r2, [pc, #268]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 80030cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a35      	ldr	r2, [pc, #212]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_I2S_MspInit+0x168>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003116:	2310      	movs	r3, #16
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003122:	2300      	movs	r3, #0
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003126:	2306      	movs	r3, #6
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312e:	4619      	mov	r1, r3
 8003130:	482a      	ldr	r0, [pc, #168]	; (80031dc <HAL_I2S_MspInit+0x16c>)
 8003132:	f001 fb09 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003136:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2300      	movs	r3, #0
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003148:	2306      	movs	r3, #6
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003150:	4619      	mov	r1, r3
 8003152:	4823      	ldr	r0, [pc, #140]	; (80031e0 <HAL_I2S_MspInit+0x170>)
 8003154:	f001 faf8 	bl	8004748 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 800315a:	4a23      	ldr	r2, [pc, #140]	; (80031e8 <HAL_I2S_MspInit+0x178>)
 800315c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 8003160:	2200      	movs	r2, #0
 8003162:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 8003172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003176:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 800317a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800317e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 8003182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003186:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 800318a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800318e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 8003192:	2200      	movs	r2, #0
 8003194:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 8003198:	2204      	movs	r2, #4
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 800319e:	2203      	movs	r2, #3
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80031ae:	480d      	ldr	r0, [pc, #52]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 80031b0:	f000 ff4e 	bl	8004050 <HAL_DMA_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 80031ba:	f7ff fc59 	bl	8002a70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_I2S_MspInit+0x174>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031ca:	bf00      	nop
 80031cc:	3738      	adds	r7, #56	; 0x38
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40003c00 	.word	0x40003c00
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020800 	.word	0x40020800
 80031e4:	20000380 	.word	0x20000380
 80031e8:	40026088 	.word	0x40026088

080031ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <HAL_SPI_MspInit+0xe8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12c      	bne.n	8003268 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a30      	ldr	r2, [pc, #192]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003246:	23e0      	movs	r3, #224	; 0xe0
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003256:	2305      	movs	r3, #5
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	481e      	ldr	r0, [pc, #120]	; (80032dc <HAL_SPI_MspInit+0xf0>)
 8003262:	f001 fa71 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003266:	e031      	b.n	80032cc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <HAL_SPI_MspInit+0xf4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d12c      	bne.n	80032cc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_SPI_MspInit+0xec>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80032ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b8:	2303      	movs	r3, #3
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032bc:	2305      	movs	r3, #5
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	4619      	mov	r1, r3
 80032c6:	4807      	ldr	r0, [pc, #28]	; (80032e4 <HAL_SPI_MspInit+0xf8>)
 80032c8:	f001 fa3e 	bl	8004748 <HAL_GPIO_Init>
}
 80032cc:	bf00      	nop
 80032ce:	3730      	adds	r7, #48	; 0x30
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013000 	.word	0x40013000
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40003800 	.word	0x40003800
 80032e4:	40020400 	.word	0x40020400

080032e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d10d      	bne.n	8003316 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_TIM_PWM_MspInit+0x3c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_TIM_PWM_MspInit+0x3c>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_TIM_PWM_MspInit+0x3c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d11e      	bne.n	8003388 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_TIM_MspPostInit+0x68>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_TIM_MspPostInit+0x68>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_TIM_MspPostInit+0x68>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4619      	mov	r1, r3
 8003382:	4804      	ldr	r0, [pc, #16]	; (8003394 <HAL_TIM_MspPostInit+0x6c>)
 8003384:	f001 f9e0 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	40020000 	.word	0x40020000

08003398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a63      	ldr	r2, [pc, #396]	; (8003544 <HAL_UART_MspInit+0x1ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12d      	bne.n	8003416 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a61      	ldr	r2, [pc, #388]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033c4:	f043 0310 	orr.w	r3, r3, #16
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003404:	2307      	movs	r3, #7
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340c:	4619      	mov	r1, r3
 800340e:	484f      	ldr	r0, [pc, #316]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003410:	f001 f99a 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003414:	e092      	b.n	800353c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4d      	ldr	r2, [pc, #308]	; (8003550 <HAL_UART_MspInit+0x1b8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d134      	bne.n	800348a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a47      	ldr	r2, [pc, #284]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 800342a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
 8003430:	4b45      	ldr	r3, [pc, #276]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4a40      	ldr	r2, [pc, #256]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6313      	str	r3, [r2, #48]	; 0x30
 800344c:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003458:	230c      	movs	r3, #12
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003468:	2307      	movs	r3, #7
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003470:	4619      	mov	r1, r3
 8003472:	4836      	ldr	r0, [pc, #216]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003474:	f001 f968 	bl	8004748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003478:	2200      	movs	r2, #0
 800347a:	2100      	movs	r1, #0
 800347c:	2026      	movs	r0, #38	; 0x26
 800347e:	f000 fdbd 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003482:	2026      	movs	r0, #38	; 0x26
 8003484:	f000 fdd6 	bl	8004034 <HAL_NVIC_EnableIRQ>
}
 8003488:	e058      	b.n	800353c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a31      	ldr	r2, [pc, #196]	; (8003554 <HAL_UART_MspInit+0x1bc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d153      	bne.n	800353c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 800349e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034d6:	f043 0308 	orr.w	r3, r3, #8
 80034da:	6313      	str	r3, [r2, #48]	; 0x30
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034fa:	2307      	movs	r3, #7
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003502:	4619      	mov	r1, r3
 8003504:	4814      	ldr	r0, [pc, #80]	; (8003558 <HAL_UART_MspInit+0x1c0>)
 8003506:	f001 f91f 	bl	8004748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800350a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003518:	2303      	movs	r3, #3
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800351c:	2307      	movs	r3, #7
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	4619      	mov	r1, r3
 8003526:	480d      	ldr	r0, [pc, #52]	; (800355c <HAL_UART_MspInit+0x1c4>)
 8003528:	f001 f90e 	bl	8004748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	2027      	movs	r0, #39	; 0x27
 8003532:	f000 fd63 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003536:	2027      	movs	r0, #39	; 0x27
 8003538:	f000 fd7c 	bl	8004034 <HAL_NVIC_EnableIRQ>
}
 800353c:	bf00      	nop
 800353e:	3738      	adds	r7, #56	; 0x38
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40011000 	.word	0x40011000
 8003548:	40023800 	.word	0x40023800
 800354c:	40020000 	.word	0x40020000
 8003550:	40004400 	.word	0x40004400
 8003554:	40004800 	.word	0x40004800
 8003558:	40020400 	.word	0x40020400
 800355c:	40020c00 	.word	0x40020c00

08003560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_InitTick+0xe4>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	4a32      	ldr	r2, [pc, #200]	; (8003644 <HAL_InitTick+0xe4>)
 800357a:	f043 0320 	orr.w	r3, r3, #32
 800357e:	6413      	str	r3, [r2, #64]	; 0x40
 8003580:	4b30      	ldr	r3, [pc, #192]	; (8003644 <HAL_InitTick+0xe4>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800358c:	f107 0210 	add.w	r2, r7, #16
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f003 f85a 	bl	8006650 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035a6:	f003 f82b 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 80035aa:	6378      	str	r0, [r7, #52]	; 0x34
 80035ac:	e004      	b.n	80035b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035ae:	f003 f827 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 80035b2:	4603      	mov	r3, r0
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_InitTick+0xe8>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	0c9b      	lsrs	r3, r3, #18
 80035c2:	3b01      	subs	r3, #1
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <HAL_InitTick+0xec>)
 80035c8:	4a21      	ldr	r2, [pc, #132]	; (8003650 <HAL_InitTick+0xf0>)
 80035ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_InitTick+0xec>)
 80035ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_InitTick+0xec>)
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80035da:	4b1c      	ldr	r3, [pc, #112]	; (800364c <HAL_InitTick+0xec>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_InitTick+0xec>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_InitTick+0xec>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80035ec:	4817      	ldr	r0, [pc, #92]	; (800364c <HAL_InitTick+0xec>)
 80035ee:	f003 ff49 	bl	8007484 <HAL_TIM_Base_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80035f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11b      	bne.n	8003638 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003600:	4812      	ldr	r0, [pc, #72]	; (800364c <HAL_InitTick+0xec>)
 8003602:	f003 ff99 	bl	8007538 <HAL_TIM_Base_Start_IT>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800360c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003614:	2037      	movs	r0, #55	; 0x37
 8003616:	f000 fd0d 	bl	8004034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d808      	bhi.n	8003632 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	2037      	movs	r0, #55	; 0x37
 8003626:	f000 fce9 	bl	8003ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <HAL_InitTick+0xf4>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	e002      	b.n	8003638 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800363c:	4618      	mov	r0, r3
 800363e:	3738      	adds	r7, #56	; 0x38
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	431bde83 	.word	0x431bde83
 800364c:	200005e4 	.word	0x200005e4
 8003650:	40001400 	.word	0x40001400
 8003654:	20000038 	.word	0x20000038

08003658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800365c:	e7fe      	b.n	800365c <NMI_Handler+0x4>

0800365e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003662:	e7fe      	b.n	8003662 <HardFault_Handler+0x4>

08003664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003668:	e7fe      	b.n	8003668 <MemManage_Handler+0x4>

0800366a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800366e:	e7fe      	b.n	800366e <BusFault_Handler+0x4>

08003670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003674:	e7fe      	b.n	8003674 <UsageFault_Handler+0x4>

08003676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003676:	b480      	push	{r7}
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003688:	2001      	movs	r0, #1
 800368a:	f001 fa45 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <DMA1_Stream5_IRQHandler+0x10>)
 800369a:	f000 fe19 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000380 	.word	0x20000380

080036a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <USART2_IRQHandler+0x10>)
 80036ae:	f004 fe57 	bl	8008360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000051c 	.word	0x2000051c

080036bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <USART3_IRQHandler+0x10>)
 80036c2:	f004 fe4d 	bl	8008360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000560 	.word	0x20000560

080036d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <TIM7_IRQHandler+0x10>)
 80036d6:	f003 ffee 	bl	80076b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200005e4 	.word	0x200005e4

080036e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <DMA2_Stream0_IRQHandler+0x10>)
 80036ea:	f000 fdf1 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000284 	.word	0x20000284

080036f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return 1;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <_kill>:

int _kill(int pid, int sig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003712:	f008 fa2b 	bl	800bb6c <__errno>
 8003716:	4603      	mov	r3, r0
 8003718:	2216      	movs	r2, #22
 800371a:	601a      	str	r2, [r3, #0]
  return -1;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_exit>:

void _exit (int status)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003730:	f04f 31ff 	mov.w	r1, #4294967295
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ffe7 	bl	8003708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800373a:	e7fe      	b.n	800373a <_exit+0x12>

0800373c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e00a      	b.n	8003764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800374e:	f3af 8000 	nop.w
 8003752:	4601      	mov	r1, r0
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	60ba      	str	r2, [r7, #8]
 800375a:	b2ca      	uxtb	r2, r1
 800375c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3301      	adds	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	dbf0      	blt.n	800374e <_read+0x12>
  }

  return len;
 800376c:	687b      	ldr	r3, [r7, #4]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e009      	b.n	800379c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	60ba      	str	r2, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dbf1      	blt.n	8003788 <_write+0x12>
  }
  return len;
 80037a4:	687b      	ldr	r3, [r7, #4]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_close>:

int _close(int file)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037d6:	605a      	str	r2, [r3, #4]
  return 0;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <_isatty>:

int _isatty(int file)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037ee:	2301      	movs	r3, #1
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <_sbrk+0x5c>)
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <_sbrk+0x60>)
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <_sbrk+0x64>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <_sbrk+0x64>)
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <_sbrk+0x68>)
 8003838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d207      	bcs.n	8003858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003848:	f008 f990 	bl	800bb6c <__errno>
 800384c:	4603      	mov	r3, r0
 800384e:	220c      	movs	r2, #12
 8003850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e009      	b.n	800386c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <_sbrk+0x64>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <_sbrk+0x64>)
 8003868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20020000 	.word	0x20020000
 8003878:	00000400 	.word	0x00000400
 800387c:	2000062c 	.word	0x2000062c
 8003880:	200134b0 	.word	0x200134b0

08003884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <SystemInit+0x20>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <SystemInit+0x20>)
 8003890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 80038a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e0 <LoopFillZerobss+0x12>
  ldr   sp, =_estack     /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
 80038ac:	480d      	ldr	r0, [pc, #52]	; (80038e4 <LoopFillZerobss+0x16>)
  movs  r1, #0
 80038ae:	490e      	ldr	r1, [pc, #56]	; (80038e8 <LoopFillZerobss+0x1a>)
  b  LoopCopyDataInit
 80038b0:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <LoopFillZerobss+0x1e>)

 80038b2:	2300      	movs	r3, #0
CopyDataInit:
 80038b4:	e002      	b.n	80038bc <LoopCopyDataInit>

080038b6 <CopyDataInit>:
  ldr  r3, =_sidata
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
 80038b6:	58d4      	ldr	r4, [r2, r3]
  adds  r1, r1, #4
 80038b8:	50c4      	str	r4, [r0, r3]
    
 80038ba:	3304      	adds	r3, #4

080038bc <LoopCopyDataInit>:
LoopCopyDataInit:
  ldr  r0, =_sdata
  ldr  r3, =_edata
 80038bc:	18c4      	adds	r4, r0, r3
  adds  r2, r0, r1
 80038be:	428c      	cmp	r4, r1
  cmp  r2, r3
 80038c0:	d3f9      	bcc.n	80038b6 <CopyDataInit>
  bcc  CopyDataInit
  ldr  r2, =_sbss
  b  LoopFillZerobss
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <LoopFillZerobss+0x22>)
/* Zero fill the bss segment. */  
 80038c4:	4c0b      	ldr	r4, [pc, #44]	; (80038f4 <LoopFillZerobss+0x26>)
FillZerobss:
 80038c6:	2300      	movs	r3, #0
  movs  r3, #0
 80038c8:	e001      	b.n	80038ce <LoopFillZerobss>

080038ca <FillZerobss>:
  str  r3, [r2], #4
    
LoopFillZerobss:
 80038ca:	6013      	str	r3, [r2, #0]
  ldr  r3, = _ebss
 80038cc:	3204      	adds	r2, #4

080038ce <LoopFillZerobss>:
  cmp  r2, r3
  bcc  FillZerobss

 80038ce:	42a2      	cmp	r2, r4
/* Call the clock system intitialization function.*/
 80038d0:	d3fb      	bcc.n	80038ca <FillZerobss>
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
 80038d2:	f7ff ffd7 	bl	8003884 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 80038d6:	f008 f94f 	bl	800bb78 <__libc_init_array>
  bx  lr    
.size  Reset_Handler, .-Reset_Handler
 80038da:	f7fe fc7b 	bl	80021d4 <main>

 80038de:	4770      	bx	lr
Reset_Handler:  
 80038e0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
 80038e4:	20000000 	.word	0x20000000
  movs  r1, #0
 80038e8:	20000218 	.word	0x20000218
  b  LoopCopyDataInit
 80038ec:	08010c9c 	.word	0x08010c9c
  b  LoopFillZerobss
 80038f0:	20000218 	.word	0x20000218
/* Zero fill the bss segment. */  
 80038f4:	200134ac 	.word	0x200134ac

080038f8 <ADC_IRQHandler>:
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
  .size  Default_Handler, .-Default_Handler
/******************************************************************************
 80038f8:	e7fe      	b.n	80038f8 <ADC_IRQHandler>
	...

080038fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_Init+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0d      	ldr	r2, [pc, #52]	; (800393c <HAL_Init+0x40>)
 8003906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_Init+0x40>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_Init+0x40>)
 8003912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_Init+0x40>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_Init+0x40>)
 800391e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003924:	2003      	movs	r0, #3
 8003926:	f000 fb5e 	bl	8003fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392a:	200f      	movs	r0, #15
 800392c:	f7ff fe18 	bl	8003560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003930:	f7ff fab6 	bl	8002ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00

08003940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_IncTick+0x20>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x24>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_IncTick+0x24>)
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000003c 	.word	0x2000003c
 8003964:	20000630 	.word	0x20000630

08003968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return uwTick;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_GetTick+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000630 	.word	0x20000630

08003980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003988:	f7ff ffee 	bl	8003968 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d005      	beq.n	80039a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_Delay+0x44>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039a6:	bf00      	nop
 80039a8:	f7ff ffde 	bl	8003968 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d8f7      	bhi.n	80039a8 <HAL_Delay+0x28>
  {
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000003c 	.word	0x2000003c

080039c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e033      	b.n	8003a46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fa82 	bl	8002ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a0e:	f023 0302 	bic.w	r3, r3, #2
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f93a 	bl	8003c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
 8003a36:	e001      	b.n	8003a3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e105      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x228>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	d925      	bls.n	8003ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68d9      	ldr	r1, [r3, #12]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b1e      	subs	r3, #30
 8003a92:	2207      	movs	r2, #7
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68d9      	ldr	r1, [r3, #12]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4403      	add	r3, r0
 8003aba:	3b1e      	subs	r3, #30
 8003abc:	409a      	lsls	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	e022      	b.n	8003b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	2207      	movs	r2, #7
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	400a      	ands	r2, r1
 8003aea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6919      	ldr	r1, [r3, #16]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4403      	add	r3, r0
 8003b04:	409a      	lsls	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d824      	bhi.n	8003b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	3b05      	subs	r3, #5
 8003b28:	221f      	movs	r2, #31
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	400a      	ands	r2, r1
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4618      	mov	r0, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	3b05      	subs	r3, #5
 8003b52:	fa00 f203 	lsl.w	r2, r0, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b5e:	e04c      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d824      	bhi.n	8003bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	3b23      	subs	r3, #35	; 0x23
 8003b7a:	221f      	movs	r2, #31
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43da      	mvns	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	400a      	ands	r2, r1
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b23      	subs	r3, #35	; 0x23
 8003ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
 8003bb0:	e023      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b41      	subs	r3, #65	; 0x41
 8003bc4:	221f      	movs	r2, #31
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4618      	mov	r0, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3b41      	subs	r3, #65	; 0x41
 8003bee:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <HAL_ADC_ConfigChannel+0x234>)
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <HAL_ADC_ConfigChannel+0x238>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1cc>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b12      	cmp	r3, #18
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_ADC_ConfigChannel+0x238>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d123      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x21e>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d003      	beq.n	8003c36 <HAL_ADC_ConfigChannel+0x1e6>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b11      	cmp	r3, #17
 8003c34:	d11b      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d111      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_ADC_ConfigChannel+0x23c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <HAL_ADC_ConfigChannel+0x240>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	0c9a      	lsrs	r2, r3, #18
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c60:	e002      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f9      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40012300 	.word	0x40012300
 8003c88:	40012000 	.word	0x40012000
 8003c8c:	20000034 	.word	0x20000034
 8003c90:	431bde83 	.word	0x431bde83

08003c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <ADC_Init+0x1f0>)
 8003c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6899      	ldr	r1, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	4a58      	ldr	r2, [pc, #352]	; (8003e88 <ADC_Init+0x1f4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	e00f      	b.n	8003d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0202 	bic.w	r2, r2, #2
 8003da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
 8003dac:	005a      	lsls	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01b      	beq.n	8003df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	3b01      	subs	r3, #1
 8003dec:	035a      	lsls	r2, r3, #13
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e007      	b.n	8003e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	051a      	lsls	r2, r3, #20
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6899      	ldr	r1, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e4a:	025a      	lsls	r2, r3, #9
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6899      	ldr	r1, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	029a      	lsls	r2, r3, #10
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012300 	.word	0x40012300
 8003e88:	0f000001 	.word	0x0f000001

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	; (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff4c 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800400e:	f7ff ff61 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7ff ffb1 	bl	8003f80 <NVIC_EncodePriority>
 800401e:	4602      	mov	r2, r0
 8004020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff80 	bl	8003f2c <__NVIC_SetPriority>
}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff54 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800405c:	f7ff fc84 	bl	8003968 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e099      	b.n	80041a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800408c:	e00f      	b.n	80040ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800408e:	f7ff fc6b 	bl	8003968 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b05      	cmp	r3, #5
 800409a:	d908      	bls.n	80040ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2203      	movs	r2, #3
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e078      	b.n	80041a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e8      	bne.n	800408e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <HAL_DMA_Init+0x158>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	4313      	orrs	r3, r2
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b04      	cmp	r3, #4
 8004140:	d117      	bne.n	8004172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa7b 	bl	8004650 <DMA_CheckFifoParam>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800416e:	2301      	movs	r3, #1
 8004170:	e016      	b.n	80041a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa32 	bl	80045e4 <DMA_CalcBaseAndBitshift>
 8004180:	4603      	mov	r3, r0
 8004182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	223f      	movs	r2, #63	; 0x3f
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	f010803f 	.word	0xf010803f

080041ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041ba:	f7ff fbd5 	bl	8003968 <HAL_GetTick>
 80041be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d008      	beq.n	80041de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e052      	b.n	8004284 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0216 	bic.w	r2, r2, #22
 80041ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_DMA_Abort+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422e:	e013      	b.n	8004258 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004230:	f7ff fb9a 	bl	8003968 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b05      	cmp	r3, #5
 800423c:	d90c      	bls.n	8004258 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2203      	movs	r2, #3
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e015      	b.n	8004284 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e4      	bne.n	8004230 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	223f      	movs	r2, #63	; 0x3f
 800426c:	409a      	lsls	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00c      	b.n	80042c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2205      	movs	r2, #5
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042dc:	4b8e      	ldr	r3, [pc, #568]	; (8004518 <HAL_DMA_IRQHandler+0x248>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a8e      	ldr	r2, [pc, #568]	; (800451c <HAL_DMA_IRQHandler+0x24c>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	2208      	movs	r2, #8
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01a      	beq.n	800433c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	2208      	movs	r2, #8
 800432a:	409a      	lsls	r2, r3
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d012      	beq.n	8004372 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	2201      	movs	r2, #1
 8004360:	409a      	lsls	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0202 	orr.w	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	2204      	movs	r2, #4
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	2204      	movs	r2, #4
 8004396:	409a      	lsls	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	2210      	movs	r2, #16
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d043      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d03c      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ca:	2210      	movs	r2, #16
 80043cc:	409a      	lsls	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d018      	beq.n	8004412 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d024      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
 80043fe:	e01f      	b.n	8004440 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
 8004410:	e016      	b.n	8004440 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0208 	bic.w	r2, r2, #8
 800442e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004444:	2220      	movs	r2, #32
 8004446:	409a      	lsls	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 808f 	beq.w	8004570 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8087 	beq.w	8004570 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004466:	2220      	movs	r2, #32
 8004468:	409a      	lsls	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b05      	cmp	r3, #5
 8004478:	d136      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0216 	bic.w	r2, r2, #22
 8004488:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004498:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <HAL_DMA_IRQHandler+0x1da>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0208 	bic.w	r2, r2, #8
 80044b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	223f      	movs	r2, #63	; 0x3f
 80044c0:	409a      	lsls	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d07e      	beq.n	80045dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
        }
        return;
 80044e6:	e079      	b.n	80045dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	2b00      	cmp	r3, #0
 800450a:	d031      	beq.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
 8004514:	e02c      	b.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
 8004516:	bf00      	nop
 8004518:	20000034 	.word	0x20000034
 800451c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d023      	beq.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
 8004530:	e01e      	b.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0210 	bic.w	r2, r2, #16
 800454e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	2b00      	cmp	r3, #0
 8004576:	d032      	beq.n	80045de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d022      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2205      	movs	r2, #5
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3301      	adds	r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d307      	bcc.n	80045b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f2      	bne.n	800459c <HAL_DMA_IRQHandler+0x2cc>
 80045b6:	e000      	b.n	80045ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
 80045da:	e000      	b.n	80045de <HAL_DMA_IRQHandler+0x30e>
        return;
 80045dc:	bf00      	nop
    }
  }
}
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3b10      	subs	r3, #16
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <DMA_CalcBaseAndBitshift+0x64>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <DMA_CalcBaseAndBitshift+0x68>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d909      	bls.n	8004626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	659a      	str	r2, [r3, #88]	; 0x58
 8004624:	e007      	b.n	8004636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	aaaaaaab 	.word	0xaaaaaaab
 800464c:	080107d4 	.word	0x080107d4

08004650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11f      	bne.n	80046aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d856      	bhi.n	800471e <DMA_CheckFifoParam+0xce>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <DMA_CheckFifoParam+0x28>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	08004689 	.word	0x08004689
 800467c:	0800469b 	.word	0x0800469b
 8004680:	08004689 	.word	0x08004689
 8004684:	0800471f 	.word	0x0800471f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d046      	beq.n	8004722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e043      	b.n	8004722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046a2:	d140      	bne.n	8004726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a8:	e03d      	b.n	8004726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b2:	d121      	bne.n	80046f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d837      	bhi.n	800472a <DMA_CheckFifoParam+0xda>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <DMA_CheckFifoParam+0x70>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d7 	.word	0x080046d7
 80046c8:	080046d1 	.word	0x080046d1
 80046cc:	080046e9 	.word	0x080046e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e030      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d025      	beq.n	800472e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e6:	e022      	b.n	800472e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046f6:	e01c      	b.n	8004732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d903      	bls.n	8004706 <DMA_CheckFifoParam+0xb6>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004704:	e018      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      break;
 800470a:	e015      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	e00b      	b.n	8004736 <DMA_CheckFifoParam+0xe6>
      break;
 800471e:	bf00      	nop
 8004720:	e00a      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004722:	bf00      	nop
 8004724:	e008      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
 8004728:	e006      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;   
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004736:	bf00      	nop
    }
  } 
  
  return status; 
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e16b      	b.n	8004a3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004764:	2201      	movs	r2, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	f040 815a 	bne.w	8004a36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d005      	beq.n	800479a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004796:	2b02      	cmp	r3, #2
 8004798:	d130      	bne.n	80047fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 0201 	and.w	r2, r3, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d017      	beq.n	8004838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	2203      	movs	r2, #3
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d123      	bne.n	800488c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08da      	lsrs	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80b4 	beq.w	8004a36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	4b60      	ldr	r3, [pc, #384]	; (8004a54 <HAL_GPIO_Init+0x30c>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4a5f      	ldr	r2, [pc, #380]	; (8004a54 <HAL_GPIO_Init+0x30c>)
 80048d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048dc:	6453      	str	r3, [r2, #68]	; 0x44
 80048de:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <HAL_GPIO_Init+0x30c>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ea:	4a5b      	ldr	r2, [pc, #364]	; (8004a58 <HAL_GPIO_Init+0x310>)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_GPIO_Init+0x314>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02b      	beq.n	800496e <HAL_GPIO_Init+0x226>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a51      	ldr	r2, [pc, #324]	; (8004a60 <HAL_GPIO_Init+0x318>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d025      	beq.n	800496a <HAL_GPIO_Init+0x222>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a50      	ldr	r2, [pc, #320]	; (8004a64 <HAL_GPIO_Init+0x31c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <HAL_GPIO_Init+0x21e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4f      	ldr	r2, [pc, #316]	; (8004a68 <HAL_GPIO_Init+0x320>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d019      	beq.n	8004962 <HAL_GPIO_Init+0x21a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <HAL_GPIO_Init+0x324>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_GPIO_Init+0x216>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a4d      	ldr	r2, [pc, #308]	; (8004a70 <HAL_GPIO_Init+0x328>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00d      	beq.n	800495a <HAL_GPIO_Init+0x212>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a4c      	ldr	r2, [pc, #304]	; (8004a74 <HAL_GPIO_Init+0x32c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <HAL_GPIO_Init+0x20e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a4b      	ldr	r2, [pc, #300]	; (8004a78 <HAL_GPIO_Init+0x330>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_GPIO_Init+0x20a>
 800494e:	2307      	movs	r3, #7
 8004950:	e00e      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004952:	2308      	movs	r3, #8
 8004954:	e00c      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004956:	2306      	movs	r3, #6
 8004958:	e00a      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800495a:	2305      	movs	r3, #5
 800495c:	e008      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800495e:	2304      	movs	r3, #4
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004962:	2303      	movs	r3, #3
 8004964:	e004      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004966:	2302      	movs	r3, #2
 8004968:	e002      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800496e:	2300      	movs	r3, #0
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	f002 0203 	and.w	r2, r2, #3
 8004976:	0092      	lsls	r2, r2, #2
 8004978:	4093      	lsls	r3, r2
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004980:	4935      	ldr	r1, [pc, #212]	; (8004a58 <HAL_GPIO_Init+0x310>)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	3302      	adds	r3, #2
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049b2:	4a32      	ldr	r2, [pc, #200]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b8:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a30:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b0f      	cmp	r3, #15
 8004a40:	f67f ae90 	bls.w	8004764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3724      	adds	r7, #36	; 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40020000 	.word	0x40020000
 8004a60:	40020400 	.word	0x40020400
 8004a64:	40020800 	.word	0x40020800
 8004a68:	40020c00 	.word	0x40020c00
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40021400 	.word	0x40021400
 8004a74:	40021800 	.word	0x40021800
 8004a78:	40021c00 	.word	0x40021c00
 8004a7c:	40013c00 	.word	0x40013c00

08004a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	887b      	ldrh	r3, [r7, #2]
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	e001      	b.n	8004aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
 8004abc:	4613      	mov	r3, r2
 8004abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ac0:	787b      	ldrb	r3, [r7, #1]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004acc:	e003      	b.n	8004ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	041a      	lsls	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	619a      	str	r2, [r3, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004af4:	887a      	ldrh	r2, [r7, #2]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	041a      	lsls	r2, r3, #16
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43d9      	mvns	r1, r3
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	400b      	ands	r3, r1
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	619a      	str	r2, [r3, #24]
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d006      	beq.n	8004b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd ff38 	bl	80029ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e12b      	b.n	8004db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe fa36 	bl	8002fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bac:	f001 fd28 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8004bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4a81      	ldr	r2, [pc, #516]	; (8004dbc <HAL_I2C_Init+0x274>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d807      	bhi.n	8004bcc <HAL_I2C_Init+0x84>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a80      	ldr	r2, [pc, #512]	; (8004dc0 <HAL_I2C_Init+0x278>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	bf94      	ite	ls
 8004bc4:	2301      	movls	r3, #1
 8004bc6:	2300      	movhi	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e006      	b.n	8004bda <HAL_I2C_Init+0x92>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a7d      	ldr	r2, [pc, #500]	; (8004dc4 <HAL_I2C_Init+0x27c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	bf94      	ite	ls
 8004bd4:	2301      	movls	r3, #1
 8004bd6:	2300      	movhi	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0e7      	b.n	8004db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a78      	ldr	r2, [pc, #480]	; (8004dc8 <HAL_I2C_Init+0x280>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	0c9b      	lsrs	r3, r3, #18
 8004bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a6a      	ldr	r2, [pc, #424]	; (8004dbc <HAL_I2C_Init+0x274>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d802      	bhi.n	8004c1c <HAL_I2C_Init+0xd4>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	e009      	b.n	8004c30 <HAL_I2C_Init+0xe8>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	4a69      	ldr	r2, [pc, #420]	; (8004dcc <HAL_I2C_Init+0x284>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	3301      	adds	r3, #1
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	495c      	ldr	r1, [pc, #368]	; (8004dbc <HAL_I2C_Init+0x274>)
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	d819      	bhi.n	8004c84 <HAL_I2C_Init+0x13c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1e59      	subs	r1, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c64:	400b      	ands	r3, r1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_I2C_Init+0x138>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1e59      	subs	r1, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7e:	e051      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004c80:	2304      	movs	r3, #4
 8004c82:	e04f      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <HAL_I2C_Init+0x168>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1e58      	subs	r0, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	440b      	add	r3, r1
 8004c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e012      	b.n	8004cd6 <HAL_I2C_Init+0x18e>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	0099      	lsls	r1, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Init+0x196>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e022      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <HAL_I2C_Init+0x1bc>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1e58      	subs	r0, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	440b      	add	r3, r1
 8004cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d02:	e00f      	b.n	8004d24 <HAL_I2C_Init+0x1dc>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1e58      	subs	r0, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	0099      	lsls	r1, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	6809      	ldr	r1, [r1, #0]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6911      	ldr	r1, [r2, #16]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	000186a0 	.word	0x000186a0
 8004dc0:	001e847f 	.word	0x001e847f
 8004dc4:	003d08ff 	.word	0x003d08ff
 8004dc8:	431bde83 	.word	0x431bde83
 8004dcc:	10624dd3 	.word	0x10624dd3

08004dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
 8004de0:	4613      	mov	r3, r2
 8004de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de4:	f7fe fdc0 	bl	8003968 <HAL_GetTick>
 8004de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 80e0 	bne.w	8004fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2319      	movs	r3, #25
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4970      	ldr	r1, [pc, #448]	; (8004fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f964 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0d3      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2C_Master_Transmit+0x50>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0cc      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d007      	beq.n	8004e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2221      	movs	r2, #33	; 0x21
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	893a      	ldrh	r2, [r7, #8]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a50      	ldr	r2, [pc, #320]	; (8004fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f89c 	bl	8004fcc <I2C_MasterRequestWrite>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e08d      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004eb4:	e066      	b.n	8004f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	6a39      	ldr	r1, [r7, #32]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f9de 	bl	800527c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d107      	bne.n	8004ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e06b      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11b      	bne.n	8004f58 <HAL_I2C_Master_Transmit+0x188>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d017      	beq.n	8004f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	6a39      	ldr	r1, [r7, #32]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f9ce 	bl	80052fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d107      	bne.n	8004f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e01a      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d194      	bne.n	8004eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	00100002 	.word	0x00100002
 8004fc8:	ffff0000 	.word	0xffff0000

08004fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d006      	beq.n	8004ff6 <I2C_MasterRequestWrite+0x2a>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d003      	beq.n	8004ff6 <I2C_MasterRequestWrite+0x2a>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ff4:	d108      	bne.n	8005008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e00b      	b.n	8005020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	2b12      	cmp	r3, #18
 800500e:	d107      	bne.n	8005020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f84f 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00d      	beq.n	8005054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005046:	d103      	bne.n	8005050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e035      	b.n	80050c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505c:	d108      	bne.n	8005070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800505e:	897b      	ldrh	r3, [r7, #10]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800506c:	611a      	str	r2, [r3, #16]
 800506e:	e01b      	b.n	80050a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005070:	897b      	ldrh	r3, [r7, #10]
 8005072:	11db      	asrs	r3, r3, #7
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f063 030f 	orn	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	490e      	ldr	r1, [pc, #56]	; (80050c8 <I2C_MasterRequestWrite+0xfc>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f875 	bl	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e010      	b.n	80050c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800509e:	897b      	ldrh	r3, [r7, #10]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4907      	ldr	r1, [pc, #28]	; (80050cc <I2C_MasterRequestWrite+0x100>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f865 	bl	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00010008 	.word	0x00010008
 80050cc:	00010002 	.word	0x00010002

080050d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e0:	e025      	b.n	800512e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d021      	beq.n	800512e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fe fc3d 	bl	8003968 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d116      	bne.n	800512e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e023      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10d      	bne.n	8005154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf0c      	ite	eq
 800514a:	2301      	moveq	r3, #1
 800514c:	2300      	movne	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	e00c      	b.n	800516e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d0b6      	beq.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
 800518a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800518c:	e051      	b.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519c:	d123      	bne.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f043 0204 	orr.w	r2, r3, #4
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e046      	b.n	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d021      	beq.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fe fbbb 	bl	8003968 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e020      	b.n	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10c      	bne.n	8005256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e00b      	b.n	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	43da      	mvns	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4013      	ands	r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d18d      	bne.n	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005288:	e02d      	b.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f878 	bl	8005380 <I2C_IsAcknowledgeFailed>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e02d      	b.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d021      	beq.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fe fb61 	bl	8003968 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d116      	bne.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e007      	b.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d1ca      	bne.n	800528a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800530a:	e02d      	b.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f837 	bl	8005380 <I2C_IsAcknowledgeFailed>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e02d      	b.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d021      	beq.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005324:	f7fe fb20 	bl	8003968 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	d302      	bcc.n	800533a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d116      	bne.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e007      	b.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d1ca      	bne.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005396:	d11b      	bne.n	80053d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	f043 0204 	orr.w	r2, r3, #4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e128      	b.n	8005644 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a90      	ldr	r2, [pc, #576]	; (800564c <HAL_I2S_Init+0x26c>)
 800540a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fd fe2f 	bl	8003070 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005428:	f023 030f 	bic.w	r3, r3, #15
 800542c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2202      	movs	r2, #2
 8005434:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d060      	beq.n	8005500 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005446:	2310      	movs	r3, #16
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	e001      	b.n	8005450 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800544c:	2320      	movs	r3, #32
 800544e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b20      	cmp	r3, #32
 8005456:	d802      	bhi.n	800545e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800545e:	2001      	movs	r0, #1
 8005460:	f001 fa0a 	bl	8006878 <HAL_RCCEx_GetPeriphCLKFreq>
 8005464:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546e:	d125      	bne.n	80054bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d010      	beq.n	800549a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	461a      	mov	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	3305      	adds	r3, #5
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e01f      	b.n	80054da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	3305      	adds	r3, #5
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e00e      	b.n	80054da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	461a      	mov	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	3305      	adds	r3, #5
 80054d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4a5c      	ldr	r2, [pc, #368]	; (8005650 <HAL_I2S_Init+0x270>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	08db      	lsrs	r3, r3, #3
 80054e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e003      	b.n	8005508 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005500:	2302      	movs	r3, #2
 8005502:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d902      	bls.n	8005514 <HAL_I2S_Init+0x134>
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2bff      	cmp	r3, #255	; 0xff
 8005512:	d907      	bls.n	8005524 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f043 0210 	orr.w	r2, r3, #16
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e08f      	b.n	8005644 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	ea42 0103 	orr.w	r1, r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	430a      	orrs	r2, r1
 8005536:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005542:	f023 030f 	bic.w	r3, r3, #15
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6851      	ldr	r1, [r2, #4]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6892      	ldr	r2, [r2, #8]
 800554e:	4311      	orrs	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68d2      	ldr	r2, [r2, #12]
 8005554:	4311      	orrs	r1, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6992      	ldr	r2, [r2, #24]
 800555a:	430a      	orrs	r2, r1
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d161      	bne.n	8005634 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a38      	ldr	r2, [pc, #224]	; (8005654 <HAL_I2S_Init+0x274>)
 8005574:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a37      	ldr	r2, [pc, #220]	; (8005658 <HAL_I2S_Init+0x278>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_I2S_Init+0x1a4>
 8005580:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_I2S_Init+0x27c>)
 8005582:	e001      	b.n	8005588 <HAL_I2S_Init+0x1a8>
 8005584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	4932      	ldr	r1, [pc, #200]	; (8005658 <HAL_I2S_Init+0x278>)
 8005590:	428a      	cmp	r2, r1
 8005592:	d101      	bne.n	8005598 <HAL_I2S_Init+0x1b8>
 8005594:	4a31      	ldr	r2, [pc, #196]	; (800565c <HAL_I2S_Init+0x27c>)
 8005596:	e001      	b.n	800559c <HAL_I2S_Init+0x1bc>
 8005598:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800559c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055a0:	f023 030f 	bic.w	r3, r3, #15
 80055a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <HAL_I2S_Init+0x278>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_I2S_Init+0x1d4>
 80055b0:	4b2a      	ldr	r3, [pc, #168]	; (800565c <HAL_I2S_Init+0x27c>)
 80055b2:	e001      	b.n	80055b8 <HAL_I2S_Init+0x1d8>
 80055b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b8:	2202      	movs	r2, #2
 80055ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a25      	ldr	r2, [pc, #148]	; (8005658 <HAL_I2S_Init+0x278>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d101      	bne.n	80055ca <HAL_I2S_Init+0x1ea>
 80055c6:	4b25      	ldr	r3, [pc, #148]	; (800565c <HAL_I2S_Init+0x27c>)
 80055c8:	e001      	b.n	80055ce <HAL_I2S_Init+0x1ee>
 80055ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055da:	d003      	beq.n	80055e4 <HAL_I2S_Init+0x204>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80055e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	e001      	b.n	80055f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055fa:	4313      	orrs	r3, r2
 80055fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005604:	4313      	orrs	r3, r2
 8005606:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800560e:	4313      	orrs	r3, r2
 8005610:	b29a      	uxth	r2, r3
 8005612:	897b      	ldrh	r3, [r7, #10]
 8005614:	4313      	orrs	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800561c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <HAL_I2S_Init+0x278>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d101      	bne.n	800562c <HAL_I2S_Init+0x24c>
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_I2S_Init+0x27c>)
 800562a:	e001      	b.n	8005630 <HAL_I2S_Init+0x250>
 800562c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005630:	897a      	ldrh	r2, [r7, #10]
 8005632:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	08005757 	.word	0x08005757
 8005650:	cccccccd 	.word	0xcccccccd
 8005654:	0800586d 	.word	0x0800586d
 8005658:	40003800 	.word	0x40003800
 800565c:	40003400 	.word	0x40003400

08005660 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10e      	bne.n	80056f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ffb8 	bl	8005660 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	b292      	uxth	r2, r2
 800570c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	1c9a      	adds	r2, r3, #2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10e      	bne.n	800574e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800573e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff93 	bl	8005674 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b04      	cmp	r3, #4
 8005770:	d13a      	bne.n	80057e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d109      	bne.n	8005790 <I2S_IRQHandler+0x3a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d102      	bne.n	8005790 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ffb4 	bl	80056f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d126      	bne.n	80057e8 <I2S_IRQHandler+0x92>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d11f      	bne.n	80057e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff ff50 	bl	8005688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d136      	bne.n	8005862 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d109      	bne.n	8005812 <I2S_IRQHandler+0xbc>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d102      	bne.n	8005812 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ff45 	bl	800569c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d122      	bne.n	8005862 <I2S_IRQHandler+0x10c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d11b      	bne.n	8005862 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005838:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff13 	bl	8005688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005862:	bf00      	nop
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a92      	ldr	r2, [pc, #584]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005886:	4b92      	ldr	r3, [pc, #584]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005888:	e001      	b.n	800588e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800588a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a8b      	ldr	r2, [pc, #556]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d101      	bne.n	80058a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80058a4:	4b8a      	ldr	r3, [pc, #552]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058a6:	e001      	b.n	80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80058a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d004      	beq.n	80058c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f040 8099 	bne.w	80059f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d107      	bne.n	80058de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f925 	bl	8005b28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9c8 	bl	8005c88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d13a      	bne.n	8005978 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d035      	beq.n	8005978 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a6e      	ldr	r2, [pc, #440]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d101      	bne.n	800591a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005916:	4b6e      	ldr	r3, [pc, #440]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005918:	e001      	b.n	800591e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800591a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4969      	ldr	r1, [pc, #420]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005926:	428b      	cmp	r3, r1
 8005928:	d101      	bne.n	800592e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800592a:	4b69      	ldr	r3, [pc, #420]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800592c:	e001      	b.n	8005932 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800592e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005936:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005946:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fe88 	bl	8005688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b08      	cmp	r3, #8
 8005980:	f040 80c3 	bne.w	8005b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80bd 	beq.w	8005b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800599e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a49      	ldr	r2, [pc, #292]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80059aa:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059ac:	e001      	b.n	80059b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80059ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4944      	ldr	r1, [pc, #272]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059ba:	428b      	cmp	r3, r1
 80059bc:	d101      	bne.n	80059c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80059be:	4b44      	ldr	r3, [pc, #272]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c0:	e001      	b.n	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80059c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	f043 0204 	orr.w	r2, r3, #4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fe4a 	bl	8005688 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059f4:	e089      	b.n	8005b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d107      	bne.n	8005a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8be 	bl	8005b8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8fd 	bl	8005c24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d12f      	bne.n	8005a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02a      	beq.n	8005a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a5a:	e001      	b.n	8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4919      	ldr	r1, [pc, #100]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	d101      	bne.n	8005a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005a6c:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a6e:	e001      	b.n	8005a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	f043 0202 	orr.w	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fdfa 	bl	8005688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d136      	bne.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d031      	beq.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a07      	ldr	r2, [pc, #28]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ab4:	e001      	b.n	8005aba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4902      	ldr	r1, [pc, #8]	; (8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ac2:	428b      	cmp	r3, r1
 8005ac4:	d106      	bne.n	8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005ac6:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ac8:	e006      	b.n	8005ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005aca:	bf00      	nop
 8005acc:	40003800 	.word	0x40003800
 8005ad0:	40003400 	.word	0x40003400
 8005ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005adc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005aec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	f043 0204 	orr.w	r2, r3, #4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fdc0 	bl	8005688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b08:	e000      	b.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b0a:	bf00      	nop
}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	1c99      	adds	r1, r3, #2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6251      	str	r1, [r2, #36]	; 0x24
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d113      	bne.n	8005b82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ffc9 	bl	8005b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	1c99      	adds	r1, r3, #2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6251      	str	r1, [r2, #36]	; 0x24
 8005b9e:	8819      	ldrh	r1, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <I2SEx_TxISR_I2SExt+0x90>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <I2SEx_TxISR_I2SExt+0x22>
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <I2SEx_TxISR_I2SExt+0x94>)
 8005bac:	e001      	b.n	8005bb2 <I2SEx_TxISR_I2SExt+0x26>
 8005bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bb2:	460a      	mov	r2, r1
 8005bb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d121      	bne.n	8005c12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <I2SEx_TxISR_I2SExt+0x90>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d101      	bne.n	8005bdc <I2SEx_TxISR_I2SExt+0x50>
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <I2SEx_TxISR_I2SExt+0x94>)
 8005bda:	e001      	b.n	8005be0 <I2SEx_TxISR_I2SExt+0x54>
 8005bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	490d      	ldr	r1, [pc, #52]	; (8005c1c <I2SEx_TxISR_I2SExt+0x90>)
 8005be8:	428b      	cmp	r3, r1
 8005bea:	d101      	bne.n	8005bf0 <I2SEx_TxISR_I2SExt+0x64>
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <I2SEx_TxISR_I2SExt+0x94>)
 8005bee:	e001      	b.n	8005bf4 <I2SEx_TxISR_I2SExt+0x68>
 8005bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff81 	bl	8005b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40003800 	.word	0x40003800
 8005c20:	40003400 	.word	0x40003400

08005c24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68d8      	ldr	r0, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	1c99      	adds	r1, r3, #2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c3c:	b282      	uxth	r2, r0
 8005c3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d113      	bne.n	8005c80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ff4a 	bl	8005b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <I2SEx_RxISR_I2SExt+0x90>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <I2SEx_RxISR_I2SExt+0x16>
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <I2SEx_RxISR_I2SExt+0x94>)
 8005c9c:	e001      	b.n	8005ca2 <I2SEx_RxISR_I2SExt+0x1a>
 8005c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ca2:	68d8      	ldr	r0, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	1c99      	adds	r1, r3, #2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005cae:	b282      	uxth	r2, r0
 8005cb0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d121      	bne.n	8005d0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <I2SEx_RxISR_I2SExt+0x90>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d101      	bne.n	8005cd8 <I2SEx_RxISR_I2SExt+0x50>
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <I2SEx_RxISR_I2SExt+0x94>)
 8005cd6:	e001      	b.n	8005cdc <I2SEx_RxISR_I2SExt+0x54>
 8005cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	490d      	ldr	r1, [pc, #52]	; (8005d18 <I2SEx_RxISR_I2SExt+0x90>)
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	d101      	bne.n	8005cec <I2SEx_RxISR_I2SExt+0x64>
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <I2SEx_RxISR_I2SExt+0x94>)
 8005cea:	e001      	b.n	8005cf0 <I2SEx_RxISR_I2SExt+0x68>
 8005cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cf4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff03 	bl	8005b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40003800 	.word	0x40003800
 8005d1c:	40003400 	.word	0x40003400

08005d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e267      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d075      	beq.n	8005e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3e:	4b88      	ldr	r3, [pc, #544]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 030c 	and.w	r3, r3, #12
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d00c      	beq.n	8005d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4a:	4b85      	ldr	r3, [pc, #532]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d112      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d56:	4b82      	ldr	r3, [pc, #520]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d62:	d10b      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d64:	4b7e      	ldr	r3, [pc, #504]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05b      	beq.n	8005e28 <HAL_RCC_OscConfig+0x108>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d157      	bne.n	8005e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e242      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d106      	bne.n	8005d94 <HAL_RCC_OscConfig+0x74>
 8005d86:	4b76      	ldr	r3, [pc, #472]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a75      	ldr	r2, [pc, #468]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e01d      	b.n	8005dd0 <HAL_RCC_OscConfig+0xb0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x98>
 8005d9e:	4b70      	ldr	r3, [pc, #448]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6f      	ldr	r2, [pc, #444]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b6d      	ldr	r3, [pc, #436]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a6c      	ldr	r2, [pc, #432]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0xb0>
 8005db8:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a68      	ldr	r2, [pc, #416]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fdc6 	bl	8003968 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fd fdc2 	bl	8003968 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e207      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df2:	4b5b      	ldr	r3, [pc, #364]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0xc0>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fd fdb2 	bl	8003968 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fd fdae 	bl	8003968 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e1f3      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1a:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0xe8>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d063      	beq.n	8005efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e36:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e42:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d11c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e4e:	4b44      	ldr	r3, [pc, #272]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d116      	bne.n	8005e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5a:	4b41      	ldr	r3, [pc, #260]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_RCC_OscConfig+0x152>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d001      	beq.n	8005e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e1c7      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4937      	ldr	r1, [pc, #220]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e86:	e03a      	b.n	8005efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e90:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <HAL_RCC_OscConfig+0x244>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fd fd67 	bl	8003968 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9e:	f7fd fd63 	bl	8003968 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e1a8      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4925      	ldr	r1, [pc, #148]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]
 8005ed0:	e015      	b.n	8005efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed2:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCC_OscConfig+0x244>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fd fd46 	bl	8003968 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee0:	f7fd fd42 	bl	8003968 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e187      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d036      	beq.n	8005f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <HAL_RCC_OscConfig+0x248>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f18:	f7fd fd26 	bl	8003968 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f20:	f7fd fd22 	bl	8003968 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e167      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0x200>
 8005f3e:	e01b      	b.n	8005f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f40:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_OscConfig+0x248>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f46:	f7fd fd0f 	bl	8003968 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4c:	e00e      	b.n	8005f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f4e:	f7fd fd0b 	bl	8003968 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d907      	bls.n	8005f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e150      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
 8005f60:	40023800 	.word	0x40023800
 8005f64:	42470000 	.word	0x42470000
 8005f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f6c:	4b88      	ldr	r3, [pc, #544]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ea      	bne.n	8005f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8097 	beq.w	80060b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f86:	2300      	movs	r3, #0
 8005f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8a:	4b81      	ldr	r3, [pc, #516]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	4b7d      	ldr	r3, [pc, #500]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a7c      	ldr	r2, [pc, #496]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b7a      	ldr	r3, [pc, #488]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb6:	4b77      	ldr	r3, [pc, #476]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d118      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc2:	4b74      	ldr	r3, [pc, #464]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a73      	ldr	r2, [pc, #460]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fce:	f7fd fccb 	bl	8003968 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7fd fcc7 	bl	8003968 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e10c      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe8:	4b6a      	ldr	r3, [pc, #424]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d106      	bne.n	800600a <HAL_RCC_OscConfig+0x2ea>
 8005ffc:	4b64      	ldr	r3, [pc, #400]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	4a63      	ldr	r2, [pc, #396]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	6713      	str	r3, [r2, #112]	; 0x70
 8006008:	e01c      	b.n	8006044 <HAL_RCC_OscConfig+0x324>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b05      	cmp	r3, #5
 8006010:	d10c      	bne.n	800602c <HAL_RCC_OscConfig+0x30c>
 8006012:	4b5f      	ldr	r3, [pc, #380]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	4a5e      	ldr	r2, [pc, #376]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006018:	f043 0304 	orr.w	r3, r3, #4
 800601c:	6713      	str	r3, [r2, #112]	; 0x70
 800601e:	4b5c      	ldr	r3, [pc, #368]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	4a5b      	ldr	r2, [pc, #364]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	6713      	str	r3, [r2, #112]	; 0x70
 800602a:	e00b      	b.n	8006044 <HAL_RCC_OscConfig+0x324>
 800602c:	4b58      	ldr	r3, [pc, #352]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	4a57      	ldr	r2, [pc, #348]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	6713      	str	r3, [r2, #112]	; 0x70
 8006038:	4b55      	ldr	r3, [pc, #340]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603c:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800603e:	f023 0304 	bic.w	r3, r3, #4
 8006042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d015      	beq.n	8006078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604c:	f7fd fc8c 	bl	8003968 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	e00a      	b.n	800606a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006054:	f7fd fc88 	bl	8003968 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e0cb      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606a:	4b49      	ldr	r3, [pc, #292]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0ee      	beq.n	8006054 <HAL_RCC_OscConfig+0x334>
 8006076:	e014      	b.n	80060a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006078:	f7fd fc76 	bl	8003968 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	e00a      	b.n	8006096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006080:	f7fd fc72 	bl	8003968 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e0b5      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006096:	4b3e      	ldr	r3, [pc, #248]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ee      	bne.n	8006080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b39      	ldr	r3, [pc, #228]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	4a38      	ldr	r2, [pc, #224]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 80a1 	beq.w	8006200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060be:	4b34      	ldr	r3, [pc, #208]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d05c      	beq.n	8006184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d141      	bne.n	8006156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d2:	4b31      	ldr	r3, [pc, #196]	; (8006198 <HAL_RCC_OscConfig+0x478>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fd fc46 	bl	8003968 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e0:	f7fd fc42 	bl	8003968 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e087      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f2:	4b27      	ldr	r3, [pc, #156]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69da      	ldr	r2, [r3, #28]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	019b      	lsls	r3, r3, #6
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	3b01      	subs	r3, #1
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	491b      	ldr	r1, [pc, #108]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006124:	4313      	orrs	r3, r2
 8006126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006128:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <HAL_RCC_OscConfig+0x478>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612e:	f7fd fc1b 	bl	8003968 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006136:	f7fd fc17 	bl	8003968 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e05c      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x416>
 8006154:	e054      	b.n	8006200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <HAL_RCC_OscConfig+0x478>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615c:	f7fd fc04 	bl	8003968 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006164:	f7fd fc00 	bl	8003968 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e045      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x444>
 8006182:	e03d      	b.n	8006200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d107      	bne.n	800619c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e038      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
 8006190:	40023800 	.word	0x40023800
 8006194:	40007000 	.word	0x40007000
 8006198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_RCC_OscConfig+0x4ec>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d028      	beq.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d121      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d11a      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061cc:	4013      	ands	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d111      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d107      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40023800 	.word	0x40023800

08006210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0cc      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006224:	4b68      	ldr	r3, [pc, #416]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d90c      	bls.n	800624c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b65      	ldr	r3, [pc, #404]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0b8      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d020      	beq.n	800629a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800626e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800627c:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006288:	4b50      	ldr	r3, [pc, #320]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	494d      	ldr	r1, [pc, #308]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d044      	beq.n	8006330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b47      	ldr	r3, [pc, #284]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d119      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d003      	beq.n	80062ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d107      	bne.n	80062de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ce:	4b3f      	ldr	r3, [pc, #252]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e06f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e067      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ee:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4934      	ldr	r1, [pc, #208]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006300:	f7fd fb32 	bl	8003968 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	e00a      	b.n	800631e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006308:	f7fd fb2e 	bl	8003968 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e04f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631e:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 020c 	and.w	r2, r3, #12
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	429a      	cmp	r2, r3
 800632e:	d1eb      	bne.n	8006308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006330:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d20c      	bcs.n	8006358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e032      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4916      	ldr	r1, [pc, #88]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006396:	f000 f821 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800639a:	4602      	mov	r2, r0
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	490a      	ldr	r1, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x1c0>)
 80063a8:	5ccb      	ldrb	r3, [r1, r3]
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1c8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd f8d2 	bl	8003560 <HAL_InitTick>

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023c00 	.word	0x40023c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	080107bc 	.word	0x080107bc
 80063d4:	20000034 	.word	0x20000034
 80063d8:	20000038 	.word	0x20000038

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e0:	b094      	sub	sp, #80	; 0x50
 80063e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	647b      	str	r3, [r7, #68]	; 0x44
 80063e8:	2300      	movs	r3, #0
 80063ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ec:	2300      	movs	r3, #0
 80063ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f4:	4b79      	ldr	r3, [pc, #484]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d00d      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x40>
 8006400:	2b08      	cmp	r3, #8
 8006402:	f200 80e1 	bhi.w	80065c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_RCC_GetSysClockFreq+0x34>
 800640a:	2b04      	cmp	r3, #4
 800640c:	d003      	beq.n	8006416 <HAL_RCC_GetSysClockFreq+0x3a>
 800640e:	e0db      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006410:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006414:	e0db      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006416:	4b73      	ldr	r3, [pc, #460]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800641a:	e0d8      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800641c:	4b6f      	ldr	r3, [pc, #444]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006426:	4b6d      	ldr	r3, [pc, #436]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d063      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006432:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	2200      	movs	r2, #0
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
 800643c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f04f 0100 	mov.w	r1, #0
 800645a:	0159      	lsls	r1, r3, #5
 800645c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006460:	0150      	lsls	r0, r2, #5
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4621      	mov	r1, r4
 8006468:	1a51      	subs	r1, r2, r1
 800646a:	6139      	str	r1, [r7, #16]
 800646c:	4629      	mov	r1, r5
 800646e:	eb63 0301 	sbc.w	r3, r3, r1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006480:	4659      	mov	r1, fp
 8006482:	018b      	lsls	r3, r1, #6
 8006484:	4651      	mov	r1, sl
 8006486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800648a:	4651      	mov	r1, sl
 800648c:	018a      	lsls	r2, r1, #6
 800648e:	4651      	mov	r1, sl
 8006490:	ebb2 0801 	subs.w	r8, r2, r1
 8006494:	4659      	mov	r1, fp
 8006496:	eb63 0901 	sbc.w	r9, r3, r1
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ae:	4690      	mov	r8, r2
 80064b0:	4699      	mov	r9, r3
 80064b2:	4623      	mov	r3, r4
 80064b4:	eb18 0303 	adds.w	r3, r8, r3
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	462b      	mov	r3, r5
 80064bc:	eb49 0303 	adc.w	r3, r9, r3
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ce:	4629      	mov	r1, r5
 80064d0:	024b      	lsls	r3, r1, #9
 80064d2:	4621      	mov	r1, r4
 80064d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064d8:	4621      	mov	r1, r4
 80064da:	024a      	lsls	r2, r1, #9
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e2:	2200      	movs	r2, #0
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ec:	f7fa fbcc 	bl	8000c88 <__aeabi_uldivmod>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4613      	mov	r3, r2
 80064f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f8:	e058      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064fa:	4b38      	ldr	r3, [pc, #224]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	4618      	mov	r0, r3
 8006504:	4611      	mov	r1, r2
 8006506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	2300      	movs	r3, #0
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
 8006510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	f04f 0000 	mov.w	r0, #0
 800651c:	f04f 0100 	mov.w	r1, #0
 8006520:	0159      	lsls	r1, r3, #5
 8006522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006526:	0150      	lsls	r0, r2, #5
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4641      	mov	r1, r8
 800652e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006532:	4649      	mov	r1, r9
 8006534:	eb63 0b01 	sbc.w	fp, r3, r1
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800654c:	ebb2 040a 	subs.w	r4, r2, sl
 8006550:	eb63 050b 	sbc.w	r5, r3, fp
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	00eb      	lsls	r3, r5, #3
 800655e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006562:	00e2      	lsls	r2, r4, #3
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	4643      	mov	r3, r8
 800656a:	18e3      	adds	r3, r4, r3
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	464b      	mov	r3, r9
 8006570:	eb45 0303 	adc.w	r3, r5, r3
 8006574:	607b      	str	r3, [r7, #4]
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006582:	4629      	mov	r1, r5
 8006584:	028b      	lsls	r3, r1, #10
 8006586:	4621      	mov	r1, r4
 8006588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800658c:	4621      	mov	r1, r4
 800658e:	028a      	lsls	r2, r1, #10
 8006590:	4610      	mov	r0, r2
 8006592:	4619      	mov	r1, r3
 8006594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006596:	2200      	movs	r2, #0
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	61fa      	str	r2, [r7, #28]
 800659c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a0:	f7fa fb72 	bl	8000c88 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4613      	mov	r3, r2
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	3301      	adds	r3, #1
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c6:	e002      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3750      	adds	r7, #80	; 0x50
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	00f42400 	.word	0x00f42400
 80065e4:	007a1200 	.word	0x007a1200

080065e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ee:	681b      	ldr	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000034 	.word	0x20000034

08006600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006604:	f7ff fff0 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006608:	4602      	mov	r2, r0
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	0a9b      	lsrs	r3, r3, #10
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	4903      	ldr	r1, [pc, #12]	; (8006624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006616:	5ccb      	ldrb	r3, [r1, r3]
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800661c:	4618      	mov	r0, r3
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40023800 	.word	0x40023800
 8006624:	080107cc 	.word	0x080107cc

08006628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800662c:	f7ff ffdc 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006630:	4602      	mov	r2, r0
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	0b5b      	lsrs	r3, r3, #13
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4903      	ldr	r1, [pc, #12]	; (800664c <HAL_RCC_GetPCLK2Freq+0x24>)
 800663e:	5ccb      	ldrb	r3, [r1, r3]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40023800 	.word	0x40023800
 800664c:	080107cc 	.word	0x080107cc

08006650 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	220f      	movs	r2, #15
 800665e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006660:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_RCC_GetClockConfig+0x5c>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0203 	and.w	r2, r3, #3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800666c:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <HAL_RCC_GetClockConfig+0x5c>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_RCC_GetClockConfig+0x5c>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006684:	4b09      	ldr	r3, [pc, #36]	; (80066ac <HAL_RCC_GetClockConfig+0x5c>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	08db      	lsrs	r3, r3, #3
 800668a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <HAL_RCC_GetClockConfig+0x60>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0207 	and.w	r2, r3, #7
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	601a      	str	r2, [r3, #0]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40023c00 	.word	0x40023c00

080066b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d035      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066dc:	4b62      	ldr	r3, [pc, #392]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066e2:	f7fd f941 	bl	8003968 <HAL_GetTick>
 80066e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ea:	f7fd f93d 	bl	8003968 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0b0      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066fc:	4b5b      	ldr	r3, [pc, #364]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f0      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	019a      	lsls	r2, r3, #6
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	071b      	lsls	r3, r3, #28
 8006714:	4955      	ldr	r1, [pc, #340]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800671c:	4b52      	ldr	r3, [pc, #328]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006722:	f7fd f921 	bl	8003968 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006728:	e008      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800672a:	f7fd f91d 	bl	8003968 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e090      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800673c:	4b4b      	ldr	r3, [pc, #300]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8083 	beq.w	800685c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	4b44      	ldr	r3, [pc, #272]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	4a43      	ldr	r2, [pc, #268]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006764:	6413      	str	r3, [r2, #64]	; 0x40
 8006766:	4b41      	ldr	r3, [pc, #260]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006772:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3e      	ldr	r2, [pc, #248]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800677e:	f7fd f8f3 	bl	8003968 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006786:	f7fd f8ef 	bl	8003968 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e062      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006798:	4b35      	ldr	r3, [pc, #212]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067a4:	4b31      	ldr	r3, [pc, #196]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02f      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d028      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067c2:	4b2a      	ldr	r3, [pc, #168]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067d2:	4b28      	ldr	r3, [pc, #160]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067d8:	4a24      	ldr	r2, [pc, #144]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067de:	4b23      	ldr	r3, [pc, #140]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d114      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fd f8bd 	bl	8003968 <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f0:	e00a      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f2:	f7fd f8b9 	bl	8003968 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006800:	4293      	cmp	r3, r2
 8006802:	d901      	bls.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e02a      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006808:	4b18      	ldr	r3, [pc, #96]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800680a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0ee      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006820:	d10d      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006836:	490d      	ldr	r1, [pc, #52]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]
 800683c:	e005      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	4a0a      	ldr	r2, [pc, #40]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006844:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006848:	6093      	str	r3, [r2, #8]
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800684c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006856:	4905      	ldr	r1, [pc, #20]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	42470068 	.word	0x42470068
 800686c:	40023800 	.word	0x40023800
 8006870:	40007000 	.word	0x40007000
 8006874:	42470e40 	.word	0x42470e40

08006878 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d13e      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006896:	4b23      	ldr	r3, [pc, #140]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d12f      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80068ac:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068ae:	617b      	str	r3, [r7, #20]
          break;
 80068b0:	e02f      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068be:	d108      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068c0:	4b18      	ldr	r3, [pc, #96]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c8:	4a18      	ldr	r2, [pc, #96]	; (800692c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e007      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068da:	4a15      	ldr	r2, [pc, #84]	; (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e8:	099b      	lsrs	r3, r3, #6
 80068ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fc:	0f1b      	lsrs	r3, r3, #28
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]
          break;
 800690a:	e002      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
          break;
 8006910:	bf00      	nop
        }
      }
      break;
 8006912:	bf00      	nop
    }
  }
  return frequency;
 8006914:	697b      	ldr	r3, [r7, #20]
}
 8006916:	4618      	mov	r0, r3
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800
 8006928:	00bb8000 	.word	0x00bb8000
 800692c:	007a1200 	.word	0x007a1200
 8006930:	00f42400 	.word	0x00f42400

08006934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e07b      	b.n	8006a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	d108      	bne.n	8006960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006956:	d009      	beq.n	800696c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	61da      	str	r2, [r3, #28]
 800695e:	e005      	b.n	800696c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fc fc30 	bl	80031ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	ea42 0103 	orr.w	r1, r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	f003 0104 	and.w	r1, r3, #4
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	f003 0210 	and.w	r2, r3, #16
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b088      	sub	sp, #32
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_SPI_Transmit+0x22>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e126      	b.n	8006cb6 <HAL_SPI_Transmit+0x270>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a70:	f7fc ff7a 	bl	8003968 <HAL_GetTick>
 8006a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d002      	beq.n	8006a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
 8006a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a8a:	e10b      	b.n	8006ca4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_SPI_Transmit+0x52>
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a9c:	e102      	b.n	8006ca4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	88fa      	ldrh	r2, [r7, #6]
 8006ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae4:	d10f      	bne.n	8006b06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d007      	beq.n	8006b24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b2c:	d14b      	bne.n	8006bc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_SPI_Transmit+0xf6>
 8006b36:	8afb      	ldrh	r3, [r7, #22]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d13e      	bne.n	8006bba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b60:	e02b      	b.n	8006bba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d112      	bne.n	8006b96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	881a      	ldrh	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	1c9a      	adds	r2, r3, #2
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b94:	e011      	b.n	8006bba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b96:	f7fc fee7 	bl	8003968 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d803      	bhi.n	8006bae <HAL_SPI_Transmit+0x168>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d102      	bne.n	8006bb4 <HAL_SPI_Transmit+0x16e>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bb8:	e074      	b.n	8006ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ce      	bne.n	8006b62 <HAL_SPI_Transmit+0x11c>
 8006bc4:	e04c      	b.n	8006c60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_SPI_Transmit+0x18e>
 8006bce:	8afb      	ldrh	r3, [r7, #22]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d140      	bne.n	8006c56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bfa:	e02c      	b.n	8006c56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d113      	bne.n	8006c32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c30:	e011      	b.n	8006c56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c32:	f7fc fe99 	bl	8003968 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d803      	bhi.n	8006c4a <HAL_SPI_Transmit+0x204>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d102      	bne.n	8006c50 <HAL_SPI_Transmit+0x20a>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c54:	e026      	b.n	8006ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1cd      	bne.n	8006bfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fbcb 	bl	8007400 <SPI_EndRxTxTransaction>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e000      	b.n	8006ca4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b088      	sub	sp, #32
 8006cc2:	af02      	add	r7, sp, #8
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d112      	bne.n	8006d02 <HAL_SPI_Receive+0x44>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10e      	bne.n	8006d02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f8f1 	bl	8006ee0 <HAL_SPI_TransmitReceive>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	e0ea      	b.n	8006ed8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_SPI_Receive+0x52>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e0e3      	b.n	8006ed8 <HAL_SPI_Receive+0x21a>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d18:	f7fc fe26 	bl	8003968 <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d002      	beq.n	8006d30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d2e:	e0ca      	b.n	8006ec6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_SPI_Receive+0x7e>
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d40:	e0c1      	b.n	8006ec6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2204      	movs	r2, #4
 8006d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	88fa      	ldrh	r2, [r7, #6]
 8006d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d88:	d10f      	bne.n	8006daa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006da8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d007      	beq.n	8006dc8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d162      	bne.n	8006e96 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dd0:	e02e      	b.n	8006e30 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d115      	bne.n	8006e0c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f103 020c 	add.w	r2, r3, #12
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	7812      	ldrb	r2, [r2, #0]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e0a:	e011      	b.n	8006e30 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e0c:	f7fc fdac 	bl	8003968 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d803      	bhi.n	8006e24 <HAL_SPI_Receive+0x166>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d102      	bne.n	8006e2a <HAL_SPI_Receive+0x16c>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e2e:	e04a      	b.n	8006ec6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1cb      	bne.n	8006dd2 <HAL_SPI_Receive+0x114>
 8006e3a:	e031      	b.n	8006ea0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d113      	bne.n	8006e72 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	b292      	uxth	r2, r2
 8006e56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e70:	e011      	b.n	8006e96 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e72:	f7fc fd79 	bl	8003968 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d803      	bhi.n	8006e8a <HAL_SPI_Receive+0x1cc>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d102      	bne.n	8006e90 <HAL_SPI_Receive+0x1d2>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e94:	e017      	b.n	8006ec6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1cd      	bne.n	8006e3c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fa45 	bl	8007334 <SPI_EndRxTransaction>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
 8006ec2:	e000      	b.n	8006ec6 <HAL_SPI_Receive+0x208>
  }

error :
 8006ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x26>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e18a      	b.n	800721c <HAL_SPI_TransmitReceive+0x33c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f0e:	f7fc fd2b 	bl	8003968 <HAL_GetTick>
 8006f12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f24:	887b      	ldrh	r3, [r7, #2]
 8006f26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d00f      	beq.n	8006f50 <HAL_SPI_TransmitReceive+0x70>
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f36:	d107      	bne.n	8006f48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <HAL_SPI_TransmitReceive+0x68>
 8006f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d003      	beq.n	8006f50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f4e:	e15b      	b.n	8007208 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0x82>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0x82>
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f68:	e14e      	b.n	8007208 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d003      	beq.n	8006f7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2205      	movs	r2, #5
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	887a      	ldrh	r2, [r7, #2]
 8006f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	887a      	ldrh	r2, [r7, #2]
 8006f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	887a      	ldrh	r2, [r7, #2]
 8006fa0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	887a      	ldrh	r2, [r7, #2]
 8006fa6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d007      	beq.n	8006fd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fda:	d178      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_SPI_TransmitReceive+0x10a>
 8006fe4:	8b7b      	ldrh	r3, [r7, #26]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d166      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	881a      	ldrh	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	1c9a      	adds	r2, r3, #2
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800700e:	e053      	b.n	80070b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b02      	cmp	r3, #2
 800701c:	d11b      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x176>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d016      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x176>
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	2b01      	cmp	r3, #1
 800702c:	d113      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	881a      	ldrh	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	1c9a      	adds	r2, r3, #2
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	d119      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x1b8>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d014      	beq.n	8007098 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	b292      	uxth	r2, r2
 800707a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	1c9a      	adds	r2, r3, #2
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007094:	2301      	movs	r3, #1
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007098:	f7fc fc66 	bl	8003968 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d807      	bhi.n	80070b8 <HAL_SPI_TransmitReceive+0x1d8>
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d003      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070b6:	e0a7      	b.n	8007208 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1a6      	bne.n	8007010 <HAL_SPI_TransmitReceive+0x130>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1a1      	bne.n	8007010 <HAL_SPI_TransmitReceive+0x130>
 80070cc:	e07c      	b.n	80071c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_SPI_TransmitReceive+0x1fc>
 80070d6:	8b7b      	ldrh	r3, [r7, #26]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d16b      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007102:	e057      	b.n	80071b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d11c      	bne.n	800714c <HAL_SPI_TransmitReceive+0x26c>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d017      	beq.n	800714c <HAL_SPI_TransmitReceive+0x26c>
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d114      	bne.n	800714c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b01      	cmp	r3, #1
 8007158:	d119      	bne.n	800718e <HAL_SPI_TransmitReceive+0x2ae>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d014      	beq.n	800718e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800718a:	2301      	movs	r3, #1
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800718e:	f7fc fbeb 	bl	8003968 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800719a:	429a      	cmp	r2, r3
 800719c:	d803      	bhi.n	80071a6 <HAL_SPI_TransmitReceive+0x2c6>
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d102      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x2cc>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071b2:	e029      	b.n	8007208 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1a2      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x224>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d19d      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f917 	bl	8007400 <SPI_EndRxTxTransaction>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071e4:	e010      	b.n	8007208 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	e000      	b.n	8007208 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007206:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800721c:	4618      	mov	r0, r3
 800721e:	3730      	adds	r7, #48	; 0x30
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	4613      	mov	r3, r2
 8007232:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007234:	f7fc fb98 	bl	8003968 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4413      	add	r3, r2
 8007242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007244:	f7fc fb90 	bl	8003968 <HAL_GetTick>
 8007248:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800724a:	4b39      	ldr	r3, [pc, #228]	; (8007330 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	015b      	lsls	r3, r3, #5
 8007250:	0d1b      	lsrs	r3, r3, #20
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	fb02 f303 	mul.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800725a:	e054      	b.n	8007306 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d050      	beq.n	8007306 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007264:	f7fc fb80 	bl	8003968 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	429a      	cmp	r2, r3
 8007272:	d902      	bls.n	800727a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d13d      	bne.n	80072f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007288:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007292:	d111      	bne.n	80072b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729c:	d004      	beq.n	80072a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a6:	d107      	bne.n	80072b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c0:	d10f      	bne.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e017      	b.n	8007326 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3b01      	subs	r3, #1
 8007304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4013      	ands	r3, r2
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	bf0c      	ite	eq
 8007316:	2301      	moveq	r3, #1
 8007318:	2300      	movne	r3, #0
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	429a      	cmp	r2, r3
 8007322:	d19b      	bne.n	800725c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000034 	.word	0x20000034

08007334 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007348:	d111      	bne.n	800736e <SPI_EndRxTransaction+0x3a>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007352:	d004      	beq.n	800735e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735c:	d107      	bne.n	800736e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007376:	d12a      	bne.n	80073ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007380:	d012      	beq.n	80073a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2200      	movs	r2, #0
 800738a:	2180      	movs	r1, #128	; 0x80
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff ff49 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02d      	beq.n	80073f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	f043 0220 	orr.w	r2, r3, #32
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e026      	b.n	80073f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	2101      	movs	r1, #1
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff ff36 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01a      	beq.n	80073f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	f043 0220 	orr.w	r2, r3, #32
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e013      	b.n	80073f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	2101      	movs	r1, #1
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff ff23 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e000      	b.n	80073f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800740c:	4b1b      	ldr	r3, [pc, #108]	; (800747c <SPI_EndRxTxTransaction+0x7c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <SPI_EndRxTxTransaction+0x80>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	0d5b      	lsrs	r3, r3, #21
 8007418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800741c:	fb02 f303 	mul.w	r3, r2, r3
 8007420:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800742a:	d112      	bne.n	8007452 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	2180      	movs	r1, #128	; 0x80
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fef4 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e00f      	b.n	8007472 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	3b01      	subs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d0f2      	beq.n	8007452 <SPI_EndRxTxTransaction+0x52>
 800746c:	e000      	b.n	8007470 <SPI_EndRxTxTransaction+0x70>
        break;
 800746e:	bf00      	nop
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000034 	.word	0x20000034
 8007480:	165e9f81 	.word	0x165e9f81

08007484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e041      	b.n	800751a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f839 	bl	8007522 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f000 faea 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e04e      	b.n	80075ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0201 	orr.w	r2, r2, #1
 8007566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a23      	ldr	r2, [pc, #140]	; (80075fc <HAL_TIM_Base_Start_IT+0xc4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757a:	d01d      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <HAL_TIM_Base_Start_IT+0xc8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a1e      	ldr	r2, [pc, #120]	; (8007604 <HAL_TIM_Base_Start_IT+0xcc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <HAL_TIM_Base_Start_IT+0xd0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_TIM_Base_Start_IT+0xd4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a19      	ldr	r2, [pc, #100]	; (8007610 <HAL_TIM_Base_Start_IT+0xd8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_TIM_Base_Start_IT+0x80>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_TIM_Base_Start_IT+0xdc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d111      	bne.n	80075dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b06      	cmp	r3, #6
 80075c8:	d010      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0201 	orr.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075da:	e007      	b.n	80075ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40010000 	.word	0x40010000
 8007600:	40000400 	.word	0x40000400
 8007604:	40000800 	.word	0x40000800
 8007608:	40000c00 	.word	0x40000c00
 800760c:	40010400 	.word	0x40010400
 8007610:	40014000 	.word	0x40014000
 8007614:	40001800 	.word	0x40001800

08007618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e041      	b.n	80076ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb fe52 	bl	80032e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f000 fa20 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d122      	bne.n	8007712 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d11b      	bne.n	8007712 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f06f 0202 	mvn.w	r2, #2
 80076e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f9b1 	bl	8007a60 <HAL_TIM_IC_CaptureCallback>
 80076fe:	e005      	b.n	800770c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f9a3 	bl	8007a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f9b4 	bl	8007a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b04      	cmp	r3, #4
 800771e:	d122      	bne.n	8007766 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b04      	cmp	r3, #4
 800772c:	d11b      	bne.n	8007766 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f06f 0204 	mvn.w	r2, #4
 8007736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f987 	bl	8007a60 <HAL_TIM_IC_CaptureCallback>
 8007752:	e005      	b.n	8007760 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f979 	bl	8007a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f98a 	bl	8007a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d122      	bne.n	80077ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	2b08      	cmp	r3, #8
 8007780:	d11b      	bne.n	80077ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f06f 0208 	mvn.w	r2, #8
 800778a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2204      	movs	r2, #4
 8007790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f95d 	bl	8007a60 <HAL_TIM_IC_CaptureCallback>
 80077a6:	e005      	b.n	80077b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f94f 	bl	8007a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f960 	bl	8007a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d122      	bne.n	800780e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d11b      	bne.n	800780e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f06f 0210 	mvn.w	r2, #16
 80077de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2208      	movs	r2, #8
 80077e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f933 	bl	8007a60 <HAL_TIM_IC_CaptureCallback>
 80077fa:	e005      	b.n	8007808 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f925 	bl	8007a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f936 	bl	8007a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b01      	cmp	r3, #1
 800781a:	d10e      	bne.n	800783a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f06f 0201 	mvn.w	r2, #1
 8007832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7fb f909 	bl	8002a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d10e      	bne.n	8007866 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b80      	cmp	r3, #128	; 0x80
 8007854:	d107      	bne.n	8007866 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800785e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fbf1 	bl	8008048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b40      	cmp	r3, #64	; 0x40
 8007872:	d10e      	bne.n	8007892 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d107      	bne.n	8007892 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800788a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8fb 	bl	8007a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b20      	cmp	r3, #32
 800789e:	d10e      	bne.n	80078be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d107      	bne.n	80078be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f06f 0220 	mvn.w	r2, #32
 80078b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fbbb 	bl	8008034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e0ae      	b.n	8007a44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b0c      	cmp	r3, #12
 80078f2:	f200 809f 	bhi.w	8007a34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007931 	.word	0x08007931
 8007900:	08007a35 	.word	0x08007a35
 8007904:	08007a35 	.word	0x08007a35
 8007908:	08007a35 	.word	0x08007a35
 800790c:	08007971 	.word	0x08007971
 8007910:	08007a35 	.word	0x08007a35
 8007914:	08007a35 	.word	0x08007a35
 8007918:	08007a35 	.word	0x08007a35
 800791c:	080079b3 	.word	0x080079b3
 8007920:	08007a35 	.word	0x08007a35
 8007924:	08007a35 	.word	0x08007a35
 8007928:	08007a35 	.word	0x08007a35
 800792c:	080079f3 	.word	0x080079f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f950 	bl	8007bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0208 	orr.w	r2, r2, #8
 800794a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0204 	bic.w	r2, r2, #4
 800795a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6999      	ldr	r1, [r3, #24]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	619a      	str	r2, [r3, #24]
      break;
 800796e:	e064      	b.n	8007a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f9a0 	bl	8007cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800798a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800799a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	021a      	lsls	r2, r3, #8
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	619a      	str	r2, [r3, #24]
      break;
 80079b0:	e043      	b.n	8007a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 f9f5 	bl	8007da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0208 	orr.w	r2, r2, #8
 80079cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0204 	bic.w	r2, r2, #4
 80079dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	61da      	str	r2, [r3, #28]
      break;
 80079f0:	e023      	b.n	8007a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fa49 	bl	8007e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	021a      	lsls	r2, r3, #8
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	61da      	str	r2, [r3, #28]
      break;
 8007a32:	e002      	b.n	8007a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
      break;
 8007a38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a40      	ldr	r2, [pc, #256]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d00f      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a3d      	ldr	r2, [pc, #244]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00b      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a3c      	ldr	r2, [pc, #240]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d007      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a3b      	ldr	r2, [pc, #236]	; (8007bbc <TIM_Base_SetConfig+0x120>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d003      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a3a      	ldr	r2, [pc, #232]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d108      	bne.n	8007aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2f      	ldr	r2, [pc, #188]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02b      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afc:	d027      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2c      	ldr	r2, [pc, #176]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d023      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a2b      	ldr	r2, [pc, #172]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d01f      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <TIM_Base_SetConfig+0x120>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01b      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d017      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <TIM_Base_SetConfig+0x128>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d013      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <TIM_Base_SetConfig+0x12c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00f      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <TIM_Base_SetConfig+0x130>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00b      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a25      	ldr	r2, [pc, #148]	; (8007bd0 <TIM_Base_SetConfig+0x134>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d007      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a24      	ldr	r2, [pc, #144]	; (8007bd4 <TIM_Base_SetConfig+0x138>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d003      	beq.n	8007b4e <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a23      	ldr	r2, [pc, #140]	; (8007bd8 <TIM_Base_SetConfig+0x13c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d108      	bne.n	8007b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a0a      	ldr	r2, [pc, #40]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d003      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a0c      	ldr	r2, [pc, #48]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d103      	bne.n	8007b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	615a      	str	r2, [r3, #20]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40010400 	.word	0x40010400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800
 8007bd0:	40001800 	.word	0x40001800
 8007bd4:	40001c00 	.word	0x40001c00
 8007bd8:	40002000 	.word	0x40002000

08007bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	f023 0201 	bic.w	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f023 0302 	bic.w	r3, r3, #2
 8007c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <TIM_OC1_SetConfig+0xd8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d003      	beq.n	8007c40 <TIM_OC1_SetConfig+0x64>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a1f      	ldr	r2, [pc, #124]	; (8007cb8 <TIM_OC1_SetConfig+0xdc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10c      	bne.n	8007c5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f023 0308 	bic.w	r3, r3, #8
 8007c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f023 0304 	bic.w	r3, r3, #4
 8007c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <TIM_OC1_SetConfig+0xd8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d003      	beq.n	8007c6a <TIM_OC1_SetConfig+0x8e>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a14      	ldr	r2, [pc, #80]	; (8007cb8 <TIM_OC1_SetConfig+0xdc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d111      	bne.n	8007c8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	621a      	str	r2, [r3, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40010000 	.word	0x40010000
 8007cb8:	40010400 	.word	0x40010400

08007cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f023 0210 	bic.w	r2, r3, #16
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 0320 	bic.w	r3, r3, #32
 8007d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <TIM_OC2_SetConfig+0xe4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_OC2_SetConfig+0x68>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a21      	ldr	r2, [pc, #132]	; (8007da4 <TIM_OC2_SetConfig+0xe8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d10d      	bne.n	8007d40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a17      	ldr	r2, [pc, #92]	; (8007da0 <TIM_OC2_SetConfig+0xe4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_OC2_SetConfig+0x94>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <TIM_OC2_SetConfig+0xe8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d113      	bne.n	8007d78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40010000 	.word	0x40010000
 8007da4:	40010400 	.word	0x40010400

08007da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <TIM_OC3_SetConfig+0xe0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d003      	beq.n	8007e0e <TIM_OC3_SetConfig+0x66>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a20      	ldr	r2, [pc, #128]	; (8007e8c <TIM_OC3_SetConfig+0xe4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d10d      	bne.n	8007e2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a16      	ldr	r2, [pc, #88]	; (8007e88 <TIM_OC3_SetConfig+0xe0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_OC3_SetConfig+0x92>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <TIM_OC3_SetConfig+0xe4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d113      	bne.n	8007e62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	621a      	str	r2, [r3, #32]
}
 8007e7c:	bf00      	nop
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40010000 	.word	0x40010000
 8007e8c:	40010400 	.word	0x40010400

08007e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	031b      	lsls	r3, r3, #12
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a12      	ldr	r2, [pc, #72]	; (8007f34 <TIM_OC4_SetConfig+0xa4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x68>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a11      	ldr	r2, [pc, #68]	; (8007f38 <TIM_OC4_SetConfig+0xa8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d109      	bne.n	8007f0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	019b      	lsls	r3, r3, #6
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40010400 	.word	0x40010400

08007f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e05a      	b.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a21      	ldr	r2, [pc, #132]	; (8008018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d022      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa0:	d01d      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1d      	ldr	r2, [pc, #116]	; (800801c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d018      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1b      	ldr	r2, [pc, #108]	; (8008020 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00e      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a18      	ldr	r2, [pc, #96]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a17      	ldr	r2, [pc, #92]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a15      	ldr	r2, [pc, #84]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d10c      	bne.n	8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40010000 	.word	0x40010000
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40000c00 	.word	0x40000c00
 8008028:	40010400 	.word	0x40010400
 800802c:	40014000 	.word	0x40014000
 8008030:	40001800 	.word	0x40001800

08008034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e03f      	b.n	80080ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d106      	bne.n	8008088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fb f988 	bl	8003398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	; 0x24
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800809e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fe1d 	bl	8008ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	695a      	ldr	r2, [r3, #20]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b08a      	sub	sp, #40	; 0x28
 80080fa:	af02      	add	r7, sp, #8
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b20      	cmp	r3, #32
 8008114:	d17c      	bne.n	8008210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_UART_Transmit+0x2c>
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e075      	b.n	8008212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_UART_Transmit+0x3e>
 8008130:	2302      	movs	r3, #2
 8008132:	e06e      	b.n	8008212 <HAL_UART_Transmit+0x11c>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2221      	movs	r2, #33	; 0x21
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800814a:	f7fb fc0d 	bl	8003968 <HAL_GetTick>
 800814e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008164:	d108      	bne.n	8008178 <HAL_UART_Transmit+0x82>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e003      	b.n	8008180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008188:	e02a      	b.n	80081e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2200      	movs	r2, #0
 8008192:	2180      	movs	r1, #128	; 0x80
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fb9b 	bl	80088d0 <UART_WaitOnFlagUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e036      	b.n	8008212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10b      	bne.n	80081c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	3302      	adds	r3, #2
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	e007      	b.n	80081d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	781a      	ldrb	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	3b01      	subs	r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1cf      	bne.n	800818a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2200      	movs	r2, #0
 80081f2:	2140      	movs	r1, #64	; 0x40
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 fb6b 	bl	80088d0 <UART_WaitOnFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e006      	b.n	8008212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	e000      	b.n	8008212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008210:	2302      	movs	r3, #2
  }
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b08a      	sub	sp, #40	; 0x28
 800821e:	af02      	add	r7, sp, #8
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	603b      	str	r3, [r7, #0]
 8008226:	4613      	mov	r3, r2
 8008228:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b20      	cmp	r3, #32
 8008238:	f040 808c 	bne.w	8008354 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_UART_Receive+0x2e>
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e084      	b.n	8008356 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <HAL_UART_Receive+0x40>
 8008256:	2302      	movs	r3, #2
 8008258:	e07d      	b.n	8008356 <HAL_UART_Receive+0x13c>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2222      	movs	r2, #34	; 0x22
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008276:	f7fb fb77 	bl	8003968 <HAL_GetTick>
 800827a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	88fa      	ldrh	r2, [r7, #6]
 8008280:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	88fa      	ldrh	r2, [r7, #6]
 8008286:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008290:	d108      	bne.n	80082a4 <HAL_UART_Receive+0x8a>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	61bb      	str	r3, [r7, #24]
 80082a2:	e003      	b.n	80082ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80082b4:	e043      	b.n	800833e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2200      	movs	r2, #0
 80082be:	2120      	movs	r1, #32
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fb05 	bl	80088d0 <UART_WaitOnFlagUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e042      	b.n	8008356 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10c      	bne.n	80082f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	3302      	adds	r3, #2
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	e01f      	b.n	8008330 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d007      	beq.n	800830a <HAL_UART_Receive+0xf0>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <HAL_UART_Receive+0xfe>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e008      	b.n	800832a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008324:	b2da      	uxtb	r2, r3
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	3301      	adds	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1b6      	bne.n	80082b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	e000      	b.n	8008356 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008354:	2302      	movs	r3, #2
  }
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b0ba      	sub	sp, #232	; 0xe8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008396:	f003 030f 	and.w	r3, r3, #15
 800839a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800839e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10f      	bne.n	80083c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <HAL_UART_IRQHandler+0x66>
 80083b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbd3 	bl	8008b6a <UART_Receive_IT>
      return;
 80083c4:	e256      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80de 	beq.w	800858c <HAL_UART_IRQHandler+0x22c>
 80083d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80d1 	beq.w	800858c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <HAL_UART_IRQHandler+0xae>
 80083f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d005      	beq.n	800840e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	f043 0201 	orr.w	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <HAL_UART_IRQHandler+0xd2>
 800841a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	f043 0202 	orr.w	r2, r3, #2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <HAL_UART_IRQHandler+0xf6>
 800843e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d005      	beq.n	8008456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f043 0204 	orr.w	r2, r3, #4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d011      	beq.n	8008486 <HAL_UART_IRQHandler+0x126>
 8008462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d105      	bne.n	800847a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800846e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d005      	beq.n	8008486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f043 0208 	orr.w	r2, r3, #8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 81ed 	beq.w	800886a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <HAL_UART_IRQHandler+0x14e>
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb5e 	bl	8008b6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d103      	bne.n	80084da <HAL_UART_IRQHandler+0x17a>
 80084d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d04f      	beq.n	800857a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa66 	bl	80089ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d141      	bne.n	8008572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3314      	adds	r3, #20
 8008516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800851a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800851e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1d9      	bne.n	80084ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	2b00      	cmp	r3, #0
 8008540:	d013      	beq.n	800856a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	4a7d      	ldr	r2, [pc, #500]	; (800873c <HAL_UART_IRQHandler+0x3dc>)
 8008548:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	4618      	mov	r0, r3
 8008550:	f7fb fe9c 	bl	800428c <HAL_DMA_Abort_IT>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	e00e      	b.n	8008588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f99a 	bl	80088a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008570:	e00a      	b.n	8008588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f996 	bl	80088a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008578:	e006      	b.n	8008588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f992 	bl	80088a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008586:	e170      	b.n	800886a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008588:	bf00      	nop
    return;
 800858a:	e16e      	b.n	800886a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	2b01      	cmp	r3, #1
 8008592:	f040 814a 	bne.w	800882a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8143 	beq.w	800882a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 813c 	beq.w	800882a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60bb      	str	r3, [r7, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d2:	2b40      	cmp	r3, #64	; 0x40
 80085d4:	f040 80b4 	bne.w	8008740 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8140 	beq.w	800886e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085f6:	429a      	cmp	r2, r3
 80085f8:	f080 8139 	bcs.w	800886e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008602:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860e:	f000 8088 	beq.w	8008722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800862c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800863e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800864a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d9      	bne.n	8008612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800866e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800868a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e1      	bne.n	800865e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3314      	adds	r3, #20
 80086a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3314      	adds	r3, #20
 80086ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e3      	bne.n	800869a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f2:	f023 0310 	bic.w	r3, r3, #16
 80086f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008704:	65ba      	str	r2, [r7, #88]	; 0x58
 8008706:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800870a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e3      	bne.n	80086e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	4618      	mov	r0, r3
 800871e:	f7fb fd45 	bl	80041ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800872a:	b29b      	uxth	r3, r3
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	b29b      	uxth	r3, r3
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f8c0 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008738:	e099      	b.n	800886e <HAL_UART_IRQHandler+0x50e>
 800873a:	bf00      	nop
 800873c:	08008a73 	.word	0x08008a73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008748:	b29b      	uxth	r3, r3
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008754:	b29b      	uxth	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 808b 	beq.w	8008872 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800875c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 8086 	beq.w	8008872 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	330c      	adds	r3, #12
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800877c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800878a:	647a      	str	r2, [r7, #68]	; 0x44
 800878c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e3      	bne.n	8008766 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3314      	adds	r3, #20
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	623b      	str	r3, [r7, #32]
   return(result);
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	f023 0301 	bic.w	r3, r3, #1
 80087b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3314      	adds	r3, #20
 80087be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087c2:	633a      	str	r2, [r7, #48]	; 0x30
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e3      	bne.n	800879e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008808:	61fa      	str	r2, [r7, #28]
 800880a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	69b9      	ldr	r1, [r7, #24]
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	617b      	str	r3, [r7, #20]
   return(result);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e3      	bne.n	80087e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800881c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f848 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008828:	e023      	b.n	8008872 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800882a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <HAL_UART_IRQHandler+0x4ea>
 8008836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800883a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f929 	bl	8008a9a <UART_Transmit_IT>
    return;
 8008848:	e014      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00e      	beq.n	8008874 <HAL_UART_IRQHandler+0x514>
 8008856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800885a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f969 	bl	8008b3a <UART_EndTransmit_IT>
    return;
 8008868:	e004      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
    return;
 800886a:	bf00      	nop
 800886c:	e002      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
      return;
 800886e:	bf00      	nop
 8008870:	e000      	b.n	8008874 <HAL_UART_IRQHandler+0x514>
      return;
 8008872:	bf00      	nop
  }
}
 8008874:	37e8      	adds	r7, #232	; 0xe8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop

0800887c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b090      	sub	sp, #64	; 0x40
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e0:	e050      	b.n	8008984 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d04c      	beq.n	8008984 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d007      	beq.n	8008900 <UART_WaitOnFlagUntilTimeout+0x30>
 80088f0:	f7fb f83a 	bl	8003968 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d241      	bcs.n	8008984 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	330c      	adds	r3, #12
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008920:	637a      	str	r2, [r7, #52]	; 0x34
 8008922:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e5      	bne.n	8008900 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	613b      	str	r3, [r7, #16]
   return(result);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	63bb      	str	r3, [r7, #56]	; 0x38
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008954:	623a      	str	r2, [r7, #32]
 8008956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	69f9      	ldr	r1, [r7, #28]
 800895a:	6a3a      	ldr	r2, [r7, #32]
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	61bb      	str	r3, [r7, #24]
   return(result);
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e5      	bne.n	8008934 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e00f      	b.n	80089a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4013      	ands	r3, r2
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	429a      	cmp	r2, r3
 8008992:	bf0c      	ite	eq
 8008994:	2301      	moveq	r3, #1
 8008996:	2300      	movne	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d09f      	beq.n	80088e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3740      	adds	r7, #64	; 0x40
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b095      	sub	sp, #84	; 0x54
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089d4:	643a      	str	r2, [r7, #64]	; 0x40
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e5      	bne.n	80089b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3314      	adds	r3, #20
 80089ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3314      	adds	r3, #20
 8008a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d119      	bne.n	8008a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	330c      	adds	r3, #12
 8008a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 0310 	bic.w	r3, r3, #16
 8008a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a44:	61ba      	str	r2, [r7, #24]
 8008a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6979      	ldr	r1, [r7, #20]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	613b      	str	r3, [r7, #16]
   return(result);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e5      	bne.n	8008a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a66:	bf00      	nop
 8008a68:	3754      	adds	r7, #84	; 0x54
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7ff ff09 	bl	80088a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b21      	cmp	r3, #33	; 0x21
 8008aac:	d13e      	bne.n	8008b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab6:	d114      	bne.n	8008ae2 <UART_Transmit_IT+0x48>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d110      	bne.n	8008ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	1c9a      	adds	r2, r3, #2
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	621a      	str	r2, [r3, #32]
 8008ae0:	e008      	b.n	8008af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	1c59      	adds	r1, r3, #1
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6211      	str	r1, [r2, #32]
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	4619      	mov	r1, r3
 8008b02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10f      	bne.n	8008b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e000      	b.n	8008b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b2c:	2302      	movs	r3, #2
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fe8e 	bl	800887c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b08c      	sub	sp, #48	; 0x30
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b22      	cmp	r3, #34	; 0x22
 8008b7c:	f040 80ab 	bne.w	8008cd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b88:	d117      	bne.n	8008bba <UART_Receive_IT+0x50>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d113      	bne.n	8008bba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	1c9a      	adds	r2, r3, #2
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8008bb8:	e026      	b.n	8008c08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bcc:	d007      	beq.n	8008bde <UART_Receive_IT+0x74>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <UART_Receive_IT+0x82>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	e008      	b.n	8008bfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	4619      	mov	r1, r3
 8008c16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d15a      	bne.n	8008cd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0220 	bic.w	r2, r2, #32
 8008c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695a      	ldr	r2, [r3, #20]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0201 	bic.w	r2, r2, #1
 8008c4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d135      	bne.n	8008cc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	330c      	adds	r3, #12
 8008c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	613b      	str	r3, [r7, #16]
   return(result);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f023 0310 	bic.w	r3, r3, #16
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c82:	623a      	str	r2, [r7, #32]
 8008c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	69f9      	ldr	r1, [r7, #28]
 8008c88:	6a3a      	ldr	r2, [r7, #32]
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e5      	bne.n	8008c62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0310 	and.w	r3, r3, #16
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d10a      	bne.n	8008cba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff fdf9 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
 8008cc6:	e002      	b.n	8008cce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fde1 	bl	8008890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e002      	b.n	8008cd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e000      	b.n	8008cd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008cd6:	2302      	movs	r3, #2
  }
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3730      	adds	r7, #48	; 0x30
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce4:	b0c0      	sub	sp, #256	; 0x100
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfc:	68d9      	ldr	r1, [r3, #12]
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	ea40 0301 	orr.w	r3, r0, r1
 8008d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d38:	f021 010c 	bic.w	r1, r1, #12
 8008d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d46:	430b      	orrs	r3, r1
 8008d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5a:	6999      	ldr	r1, [r3, #24]
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	ea40 0301 	orr.w	r3, r0, r1
 8008d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b8f      	ldr	r3, [pc, #572]	; (8008fac <UART_SetConfig+0x2cc>)
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d005      	beq.n	8008d80 <UART_SetConfig+0xa0>
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	4b8d      	ldr	r3, [pc, #564]	; (8008fb0 <UART_SetConfig+0x2d0>)
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d104      	bne.n	8008d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d80:	f7fd fc52 	bl	8006628 <HAL_RCC_GetPCLK2Freq>
 8008d84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d88:	e003      	b.n	8008d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d8a:	f7fd fc39 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8008d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9c:	f040 810c 	bne.w	8008fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008db2:	4622      	mov	r2, r4
 8008db4:	462b      	mov	r3, r5
 8008db6:	1891      	adds	r1, r2, r2
 8008db8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008dba:	415b      	adcs	r3, r3
 8008dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	eb12 0801 	adds.w	r8, r2, r1
 8008dc8:	4629      	mov	r1, r5
 8008dca:	eb43 0901 	adc.w	r9, r3, r1
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008de2:	4690      	mov	r8, r2
 8008de4:	4699      	mov	r9, r3
 8008de6:	4623      	mov	r3, r4
 8008de8:	eb18 0303 	adds.w	r3, r8, r3
 8008dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008df0:	462b      	mov	r3, r5
 8008df2:	eb49 0303 	adc.w	r3, r9, r3
 8008df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e0e:	460b      	mov	r3, r1
 8008e10:	18db      	adds	r3, r3, r3
 8008e12:	653b      	str	r3, [r7, #80]	; 0x50
 8008e14:	4613      	mov	r3, r2
 8008e16:	eb42 0303 	adc.w	r3, r2, r3
 8008e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e24:	f7f7 ff30 	bl	8000c88 <__aeabi_uldivmod>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4b61      	ldr	r3, [pc, #388]	; (8008fb4 <UART_SetConfig+0x2d4>)
 8008e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	011c      	lsls	r4, r3, #4
 8008e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	1891      	adds	r1, r2, r2
 8008e4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e50:	415b      	adcs	r3, r3
 8008e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e58:	4641      	mov	r1, r8
 8008e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8008e5e:	4649      	mov	r1, r9
 8008e60:	eb43 0b01 	adc.w	fp, r3, r1
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e78:	4692      	mov	sl, r2
 8008e7a:	469b      	mov	fp, r3
 8008e7c:	4643      	mov	r3, r8
 8008e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8008e82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e86:	464b      	mov	r3, r9
 8008e88:	eb4b 0303 	adc.w	r3, fp, r3
 8008e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	18db      	adds	r3, r3, r3
 8008ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eaa:	4613      	mov	r3, r2
 8008eac:	eb42 0303 	adc.w	r3, r2, r3
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008eba:	f7f7 fee5 	bl	8000c88 <__aeabi_uldivmod>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4b3b      	ldr	r3, [pc, #236]	; (8008fb4 <UART_SetConfig+0x2d4>)
 8008ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8008eca:	095b      	lsrs	r3, r3, #5
 8008ecc:	2264      	movs	r2, #100	; 0x64
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	1acb      	subs	r3, r1, r3
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008eda:	4b36      	ldr	r3, [pc, #216]	; (8008fb4 <UART_SetConfig+0x2d4>)
 8008edc:	fba3 2302 	umull	r2, r3, r3, r2
 8008ee0:	095b      	lsrs	r3, r3, #5
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ee8:	441c      	add	r4, r3
 8008eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008efc:	4642      	mov	r2, r8
 8008efe:	464b      	mov	r3, r9
 8008f00:	1891      	adds	r1, r2, r2
 8008f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f04:	415b      	adcs	r3, r3
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	1851      	adds	r1, r2, r1
 8008f10:	6339      	str	r1, [r7, #48]	; 0x30
 8008f12:	4649      	mov	r1, r9
 8008f14:	414b      	adcs	r3, r1
 8008f16:	637b      	str	r3, [r7, #52]	; 0x34
 8008f18:	f04f 0200 	mov.w	r2, #0
 8008f1c:	f04f 0300 	mov.w	r3, #0
 8008f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f24:	4659      	mov	r1, fp
 8008f26:	00cb      	lsls	r3, r1, #3
 8008f28:	4651      	mov	r1, sl
 8008f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f2e:	4651      	mov	r1, sl
 8008f30:	00ca      	lsls	r2, r1, #3
 8008f32:	4610      	mov	r0, r2
 8008f34:	4619      	mov	r1, r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	4642      	mov	r2, r8
 8008f3a:	189b      	adds	r3, r3, r2
 8008f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f40:	464b      	mov	r3, r9
 8008f42:	460a      	mov	r2, r1
 8008f44:	eb42 0303 	adc.w	r3, r2, r3
 8008f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f60:	460b      	mov	r3, r1
 8008f62:	18db      	adds	r3, r3, r3
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f66:	4613      	mov	r3, r2
 8008f68:	eb42 0303 	adc.w	r3, r2, r3
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f76:	f7f7 fe87 	bl	8000c88 <__aeabi_uldivmod>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <UART_SetConfig+0x2d4>)
 8008f80:	fba3 1302 	umull	r1, r3, r3, r2
 8008f84:	095b      	lsrs	r3, r3, #5
 8008f86:	2164      	movs	r1, #100	; 0x64
 8008f88:	fb01 f303 	mul.w	r3, r1, r3
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	3332      	adds	r3, #50	; 0x32
 8008f92:	4a08      	ldr	r2, [pc, #32]	; (8008fb4 <UART_SetConfig+0x2d4>)
 8008f94:	fba2 2303 	umull	r2, r3, r2, r3
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	f003 0207 	and.w	r2, r3, #7
 8008f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4422      	add	r2, r4
 8008fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fa8:	e105      	b.n	80091b6 <UART_SetConfig+0x4d6>
 8008faa:	bf00      	nop
 8008fac:	40011000 	.word	0x40011000
 8008fb0:	40011400 	.word	0x40011400
 8008fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008fca:	4642      	mov	r2, r8
 8008fcc:	464b      	mov	r3, r9
 8008fce:	1891      	adds	r1, r2, r2
 8008fd0:	6239      	str	r1, [r7, #32]
 8008fd2:	415b      	adcs	r3, r3
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fda:	4641      	mov	r1, r8
 8008fdc:	1854      	adds	r4, r2, r1
 8008fde:	4649      	mov	r1, r9
 8008fe0:	eb43 0501 	adc.w	r5, r3, r1
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	00eb      	lsls	r3, r5, #3
 8008fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ff2:	00e2      	lsls	r2, r4, #3
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	461d      	mov	r5, r3
 8008ff8:	4643      	mov	r3, r8
 8008ffa:	18e3      	adds	r3, r4, r3
 8008ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009000:	464b      	mov	r3, r9
 8009002:	eb45 0303 	adc.w	r3, r5, r3
 8009006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800900a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009026:	4629      	mov	r1, r5
 8009028:	008b      	lsls	r3, r1, #2
 800902a:	4621      	mov	r1, r4
 800902c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009030:	4621      	mov	r1, r4
 8009032:	008a      	lsls	r2, r1, #2
 8009034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009038:	f7f7 fe26 	bl	8000c88 <__aeabi_uldivmod>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4b60      	ldr	r3, [pc, #384]	; (80091c4 <UART_SetConfig+0x4e4>)
 8009042:	fba3 2302 	umull	r2, r3, r3, r2
 8009046:	095b      	lsrs	r3, r3, #5
 8009048:	011c      	lsls	r4, r3, #4
 800904a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800904e:	2200      	movs	r2, #0
 8009050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009054:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800905c:	4642      	mov	r2, r8
 800905e:	464b      	mov	r3, r9
 8009060:	1891      	adds	r1, r2, r2
 8009062:	61b9      	str	r1, [r7, #24]
 8009064:	415b      	adcs	r3, r3
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800906c:	4641      	mov	r1, r8
 800906e:	1851      	adds	r1, r2, r1
 8009070:	6139      	str	r1, [r7, #16]
 8009072:	4649      	mov	r1, r9
 8009074:	414b      	adcs	r3, r1
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	f04f 0200 	mov.w	r2, #0
 800907c:	f04f 0300 	mov.w	r3, #0
 8009080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009084:	4659      	mov	r1, fp
 8009086:	00cb      	lsls	r3, r1, #3
 8009088:	4651      	mov	r1, sl
 800908a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800908e:	4651      	mov	r1, sl
 8009090:	00ca      	lsls	r2, r1, #3
 8009092:	4610      	mov	r0, r2
 8009094:	4619      	mov	r1, r3
 8009096:	4603      	mov	r3, r0
 8009098:	4642      	mov	r2, r8
 800909a:	189b      	adds	r3, r3, r2
 800909c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090a0:	464b      	mov	r3, r9
 80090a2:	460a      	mov	r2, r1
 80090a4:	eb42 0303 	adc.w	r3, r2, r3
 80090a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80090b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090b8:	f04f 0200 	mov.w	r2, #0
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090c4:	4649      	mov	r1, r9
 80090c6:	008b      	lsls	r3, r1, #2
 80090c8:	4641      	mov	r1, r8
 80090ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ce:	4641      	mov	r1, r8
 80090d0:	008a      	lsls	r2, r1, #2
 80090d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090d6:	f7f7 fdd7 	bl	8000c88 <__aeabi_uldivmod>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4b39      	ldr	r3, [pc, #228]	; (80091c4 <UART_SetConfig+0x4e4>)
 80090e0:	fba3 1302 	umull	r1, r3, r3, r2
 80090e4:	095b      	lsrs	r3, r3, #5
 80090e6:	2164      	movs	r1, #100	; 0x64
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	3332      	adds	r3, #50	; 0x32
 80090f2:	4a34      	ldr	r2, [pc, #208]	; (80091c4 <UART_SetConfig+0x4e4>)
 80090f4:	fba2 2303 	umull	r2, r3, r2, r3
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090fe:	441c      	add	r4, r3
 8009100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009104:	2200      	movs	r2, #0
 8009106:	673b      	str	r3, [r7, #112]	; 0x70
 8009108:	677a      	str	r2, [r7, #116]	; 0x74
 800910a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800910e:	4642      	mov	r2, r8
 8009110:	464b      	mov	r3, r9
 8009112:	1891      	adds	r1, r2, r2
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	415b      	adcs	r3, r3
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800911e:	4641      	mov	r1, r8
 8009120:	1851      	adds	r1, r2, r1
 8009122:	6039      	str	r1, [r7, #0]
 8009124:	4649      	mov	r1, r9
 8009126:	414b      	adcs	r3, r1
 8009128:	607b      	str	r3, [r7, #4]
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009136:	4659      	mov	r1, fp
 8009138:	00cb      	lsls	r3, r1, #3
 800913a:	4651      	mov	r1, sl
 800913c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009140:	4651      	mov	r1, sl
 8009142:	00ca      	lsls	r2, r1, #3
 8009144:	4610      	mov	r0, r2
 8009146:	4619      	mov	r1, r3
 8009148:	4603      	mov	r3, r0
 800914a:	4642      	mov	r2, r8
 800914c:	189b      	adds	r3, r3, r2
 800914e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009150:	464b      	mov	r3, r9
 8009152:	460a      	mov	r2, r1
 8009154:	eb42 0303 	adc.w	r3, r2, r3
 8009158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800915a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	663b      	str	r3, [r7, #96]	; 0x60
 8009164:	667a      	str	r2, [r7, #100]	; 0x64
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009172:	4649      	mov	r1, r9
 8009174:	008b      	lsls	r3, r1, #2
 8009176:	4641      	mov	r1, r8
 8009178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800917c:	4641      	mov	r1, r8
 800917e:	008a      	lsls	r2, r1, #2
 8009180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009184:	f7f7 fd80 	bl	8000c88 <__aeabi_uldivmod>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <UART_SetConfig+0x4e4>)
 800918e:	fba3 1302 	umull	r1, r3, r3, r2
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	2164      	movs	r1, #100	; 0x64
 8009196:	fb01 f303 	mul.w	r3, r1, r3
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	3332      	adds	r3, #50	; 0x32
 80091a0:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <UART_SetConfig+0x4e4>)
 80091a2:	fba2 2303 	umull	r2, r3, r2, r3
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	f003 020f 	and.w	r2, r3, #15
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4422      	add	r2, r4
 80091b4:	609a      	str	r2, [r3, #8]
}
 80091b6:	bf00      	nop
 80091b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091bc:	46bd      	mov	sp, r7
 80091be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091c2:	bf00      	nop
 80091c4:	51eb851f 	.word	0x51eb851f

080091c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f103 0208 	add.w	r2, r3, #8
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f04f 32ff 	mov.w	r2, #4294967295
 80091e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f103 0208 	add.w	r2, r3, #8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f103 0208 	add.w	r2, r3, #8
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009222:	b480      	push	{r7}
 8009224:	b085      	sub	sp, #20
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
}
 800925e:	bf00      	nop
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d103      	bne.n	800928a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	e00c      	b.n	80092a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3308      	adds	r3, #8
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	e002      	b.n	8009298 <vListInsert+0x2e>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d2f6      	bcs.n	8009292 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	601a      	str	r2, [r3, #0]
}
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6892      	ldr	r2, [r2, #8]
 80092f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6852      	ldr	r2, [r2, #4]
 80092fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d103      	bne.n	8009310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	1e5a      	subs	r2, r3, #1
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800935a:	f002 f90b 	bl	800b574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800936a:	fb01 f303 	mul.w	r3, r1, r3
 800936e:	441a      	add	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938a:	3b01      	subs	r3, #1
 800938c:	68f9      	ldr	r1, [r7, #12]
 800938e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	22ff      	movs	r2, #255	; 0xff
 800939e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	22ff      	movs	r2, #255	; 0xff
 80093a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d114      	bne.n	80093da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01a      	beq.n	80093ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3310      	adds	r3, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 f9f1 	bl	800a7a4 <xTaskRemoveFromEventList>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d012      	beq.n	80093ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093c8:	4b0c      	ldr	r3, [pc, #48]	; (80093fc <xQueueGenericReset+0xcc>)
 80093ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	e009      	b.n	80093ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3310      	adds	r3, #16
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff fef2 	bl	80091c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff feed 	bl	80091c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093ee:	f002 f8f1 	bl	800b5d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093f2:	2301      	movs	r3, #1
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	; 0x28
 8009404:	af02      	add	r7, sp, #8
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4613      	mov	r3, r2
 800940c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	613b      	str	r3, [r7, #16]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009430:	2300      	movs	r3, #0
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e004      	b.n	8009440 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	fb02 f303 	mul.w	r3, r2, r3
 800943e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	3350      	adds	r3, #80	; 0x50
 8009444:	4618      	mov	r0, r3
 8009446:	f002 f9b7 	bl	800b7b8 <pvPortMalloc>
 800944a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00d      	beq.n	800946e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	3350      	adds	r3, #80	; 0x50
 800945a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800945c:	79fa      	ldrb	r2, [r7, #7]
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	4613      	mov	r3, r2
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f805 	bl	8009478 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800946e:	69bb      	ldr	r3, [r7, #24]
	}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e002      	b.n	800949a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094a6:	2101      	movs	r1, #1
 80094a8:	69b8      	ldr	r0, [r7, #24]
 80094aa:	f7ff ff41 	bl	8009330 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	; 0x38
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094ce:	2300      	movs	r3, #0
 80094d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <xQueueGenericSend+0x32>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d103      	bne.n	8009500 <xQueueGenericSend+0x40>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <xQueueGenericSend+0x44>
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <xQueueGenericSend+0x46>
 8009504:	2300      	movs	r3, #0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <xQueueGenericSend+0x60>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d103      	bne.n	800952e <xQueueGenericSend+0x6e>
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <xQueueGenericSend+0x72>
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <xQueueGenericSend+0x74>
 8009532:	2300      	movs	r3, #0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10a      	bne.n	800954e <xQueueGenericSend+0x8e>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	623b      	str	r3, [r7, #32]
}
 800954a:	bf00      	nop
 800954c:	e7fe      	b.n	800954c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800954e:	f001 fac5 	bl	800aadc <xTaskGetSchedulerState>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <xQueueGenericSend+0x9e>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <xQueueGenericSend+0xa2>
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <xQueueGenericSend+0xa4>
 8009562:	2300      	movs	r3, #0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xQueueGenericSend+0xbe>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	61fb      	str	r3, [r7, #28]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800957e:	f001 fff9 	bl	800b574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958a:	429a      	cmp	r2, r3
 800958c:	d302      	bcc.n	8009594 <xQueueGenericSend+0xd4>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d129      	bne.n	80095e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800959a:	f000 fa95 	bl	8009ac8 <prvCopyDataToQueue>
 800959e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d010      	beq.n	80095ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	3324      	adds	r3, #36	; 0x24
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 f8f9 	bl	800a7a4 <xTaskRemoveFromEventList>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d013      	beq.n	80095e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095b8:	4b3f      	ldr	r3, [pc, #252]	; (80096b8 <xQueueGenericSend+0x1f8>)
 80095ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	e00a      	b.n	80095e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d007      	beq.n	80095e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095d0:	4b39      	ldr	r3, [pc, #228]	; (80096b8 <xQueueGenericSend+0x1f8>)
 80095d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095e0:	f001 fff8 	bl	800b5d4 <vPortExitCritical>
				return pdPASS;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e063      	b.n	80096b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d103      	bne.n	80095f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095ee:	f001 fff1 	bl	800b5d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e05c      	b.n	80096b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	4618      	mov	r0, r3
 8009602:	f001 f931 	bl	800a868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009606:	2301      	movs	r3, #1
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800960a:	f001 ffe3 	bl	800b5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800960e:	f000 feab 	bl	800a368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009612:	f001 ffaf 	bl	800b574 <vPortEnterCritical>
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800961c:	b25b      	sxtb	r3, r3
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d103      	bne.n	800962c <xQueueGenericSend+0x16c>
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009632:	b25b      	sxtb	r3, r3
 8009634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009638:	d103      	bne.n	8009642 <xQueueGenericSend+0x182>
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009642:	f001 ffc7 	bl	800b5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009646:	1d3a      	adds	r2, r7, #4
 8009648:	f107 0314 	add.w	r3, r7, #20
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f001 f920 	bl	800a894 <xTaskCheckForTimeOut>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d124      	bne.n	80096a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800965a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800965c:	f000 fb2c 	bl	8009cb8 <prvIsQueueFull>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d018      	beq.n	8009698 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	3310      	adds	r3, #16
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f001 f848 	bl	800a704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009676:	f000 fab7 	bl	8009be8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800967a:	f000 fe83 	bl	800a384 <xTaskResumeAll>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	f47f af7c 	bne.w	800957e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009686:	4b0c      	ldr	r3, [pc, #48]	; (80096b8 <xQueueGenericSend+0x1f8>)
 8009688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	e772      	b.n	800957e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969a:	f000 faa5 	bl	8009be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800969e:	f000 fe71 	bl	800a384 <xTaskResumeAll>
 80096a2:	e76c      	b.n	800957e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096a6:	f000 fa9f 	bl	8009be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096aa:	f000 fe6b 	bl	800a384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3738      	adds	r7, #56	; 0x38
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08e      	sub	sp, #56	; 0x38
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d103      	bne.n	80096f8 <xQueueGenericSendFromISR+0x3c>
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <xQueueGenericSendFromISR+0x40>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <xQueueGenericSendFromISR+0x42>
 80096fc:	2300      	movs	r3, #0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	623b      	str	r3, [r7, #32]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d103      	bne.n	8009726 <xQueueGenericSendFromISR+0x6a>
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <xQueueGenericSendFromISR+0x6e>
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <xQueueGenericSendFromISR+0x70>
 800972a:	2300      	movs	r3, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	61fb      	str	r3, [r7, #28]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009746:	f001 fff7 	bl	800b738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800974a:	f3ef 8211 	mrs	r2, BASEPRI
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	61ba      	str	r2, [r7, #24]
 8009760:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009762:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976e:	429a      	cmp	r2, r3
 8009770:	d302      	bcc.n	8009778 <xQueueGenericSendFromISR+0xbc>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d12c      	bne.n	80097d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800977e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	68b9      	ldr	r1, [r7, #8]
 8009786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009788:	f000 f99e 	bl	8009ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800978c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d112      	bne.n	80097bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	d016      	beq.n	80097cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	3324      	adds	r3, #36	; 0x24
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fffe 	bl	800a7a4 <xTaskRemoveFromEventList>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00e      	beq.n	80097cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	e007      	b.n	80097cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097c0:	3301      	adds	r3, #1
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	b25a      	sxtb	r2, r3
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097cc:	2301      	movs	r3, #1
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80097d0:	e001      	b.n	80097d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	637b      	str	r3, [r7, #52]	; 0x34
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3738      	adds	r7, #56	; 0x38
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08e      	sub	sp, #56	; 0x38
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	623b      	str	r3, [r7, #32]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <xQueueGiveFromISR+0x48>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	61fb      	str	r3, [r7, #28]
}
 8009830:	bf00      	nop
 8009832:	e7fe      	b.n	8009832 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <xQueueGiveFromISR+0x58>
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <xQueueGiveFromISR+0x5c>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <xQueueGiveFromISR+0x5e>
 8009848:	2300      	movs	r3, #0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10a      	bne.n	8009864 <xQueueGiveFromISR+0x78>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	61bb      	str	r3, [r7, #24]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009864:	f001 ff68 	bl	800b738 <vPortValidateInterruptPriority>
	__asm volatile
 8009868:	f3ef 8211 	mrs	r2, BASEPRI
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	617a      	str	r2, [r7, #20]
 800987e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009880:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009890:	429a      	cmp	r2, r3
 8009892:	d22b      	bcs.n	80098ec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800989a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d112      	bne.n	80098d6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d016      	beq.n	80098e6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	3324      	adds	r3, #36	; 0x24
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 ff71 	bl	800a7a4 <xTaskRemoveFromEventList>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00e      	beq.n	80098e6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2201      	movs	r2, #1
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	e007      	b.n	80098e6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098da:	3301      	adds	r3, #1
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	b25a      	sxtb	r2, r3
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ea:	e001      	b.n	80098f0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	637b      	str	r3, [r7, #52]	; 0x34
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f383 8811 	msr	BASEPRI, r3
}
 80098fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3738      	adds	r7, #56	; 0x38
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08c      	sub	sp, #48	; 0x30
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009914:	2300      	movs	r3, #0
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <xQueueReceive+0x30>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	623b      	str	r3, [r7, #32]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <xQueueReceive+0x3e>
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <xQueueReceive+0x42>
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <xQueueReceive+0x44>
 800994a:	2300      	movs	r3, #0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <xQueueReceive+0x5e>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	61fb      	str	r3, [r7, #28]
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009966:	f001 f8b9 	bl	800aadc <xTaskGetSchedulerState>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <xQueueReceive+0x6e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <xQueueReceive+0x72>
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <xQueueReceive+0x74>
 800997a:	2300      	movs	r3, #0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <xQueueReceive+0x8e>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	61bb      	str	r3, [r7, #24]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009996:	f001 fded 	bl	800b574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01f      	beq.n	80099e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099a6:	68b9      	ldr	r1, [r7, #8]
 80099a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099aa:	f000 f8f7 	bl	8009b9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	1e5a      	subs	r2, r3, #1
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00f      	beq.n	80099de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	3310      	adds	r3, #16
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 feee 	bl	800a7a4 <xTaskRemoveFromEventList>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d007      	beq.n	80099de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099ce:	4b3d      	ldr	r3, [pc, #244]	; (8009ac4 <xQueueReceive+0x1bc>)
 80099d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099de:	f001 fdf9 	bl	800b5d4 <vPortExitCritical>
				return pdPASS;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e069      	b.n	8009aba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d103      	bne.n	80099f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099ec:	f001 fdf2 	bl	800b5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099f0:	2300      	movs	r3, #0
 80099f2:	e062      	b.n	8009aba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099fa:	f107 0310 	add.w	r3, r7, #16
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 ff32 	bl	800a868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a08:	f001 fde4 	bl	800b5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a0c:	f000 fcac 	bl	800a368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a10:	f001 fdb0 	bl	800b574 <vPortEnterCritical>
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a1a:	b25b      	sxtb	r3, r3
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d103      	bne.n	8009a2a <xQueueReceive+0x122>
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a30:	b25b      	sxtb	r3, r3
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a36:	d103      	bne.n	8009a40 <xQueueReceive+0x138>
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a40:	f001 fdc8 	bl	800b5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a44:	1d3a      	adds	r2, r7, #4
 8009a46:	f107 0310 	add.w	r3, r7, #16
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 ff21 	bl	800a894 <xTaskCheckForTimeOut>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d123      	bne.n	8009aa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5a:	f000 f917 	bl	8009c8c <prvIsQueueEmpty>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d017      	beq.n	8009a94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	3324      	adds	r3, #36	; 0x24
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fe49 	bl	800a704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a74:	f000 f8b8 	bl	8009be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a78:	f000 fc84 	bl	800a384 <xTaskResumeAll>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d189      	bne.n	8009996 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a82:	4b10      	ldr	r3, [pc, #64]	; (8009ac4 <xQueueReceive+0x1bc>)
 8009a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	e780      	b.n	8009996 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f000 f8a7 	bl	8009be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a9a:	f000 fc73 	bl	800a384 <xTaskResumeAll>
 8009a9e:	e77a      	b.n	8009996 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa2:	f000 f8a1 	bl	8009be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009aa6:	f000 fc6d 	bl	800a384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aac:	f000 f8ee 	bl	8009c8c <prvIsQueueEmpty>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f43f af6f 	beq.w	8009996 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ab8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3730      	adds	r7, #48	; 0x30
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	e000ed04 	.word	0xe000ed04

08009ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10d      	bne.n	8009b02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d14d      	bne.n	8009b8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 f810 	bl	800ab18 <xTaskPriorityDisinherit>
 8009af8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	609a      	str	r2, [r3, #8]
 8009b00:	e043      	b.n	8009b8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d119      	bne.n	8009b3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6858      	ldr	r0, [r3, #4]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b10:	461a      	mov	r2, r3
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	f002 f864 	bl	800bbe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	441a      	add	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d32b      	bcc.n	8009b8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	e026      	b.n	8009b8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68d8      	ldr	r0, [r3, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	461a      	mov	r2, r3
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	f002 f84a 	bl	800bbe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	425b      	negs	r3, r3
 8009b56:	441a      	add	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d207      	bcs.n	8009b78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	425b      	negs	r3, r3
 8009b72:	441a      	add	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d105      	bne.n	8009b8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b92:	697b      	ldr	r3, [r7, #20]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d018      	beq.n	8009be0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	441a      	add	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d303      	bcc.n	8009bd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68d9      	ldr	r1, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6838      	ldr	r0, [r7, #0]
 8009bdc:	f002 f800 	bl	800bbe0 <memcpy>
	}
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bf0:	f001 fcc0 	bl	800b574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bfc:	e011      	b.n	8009c22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d012      	beq.n	8009c2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3324      	adds	r3, #36	; 0x24
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fdca 	bl	800a7a4 <xTaskRemoveFromEventList>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c16:	f000 fe9f 	bl	800a958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dce9      	bgt.n	8009bfe <prvUnlockQueue+0x16>
 8009c2a:	e000      	b.n	8009c2e <prvUnlockQueue+0x46>
					break;
 8009c2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	22ff      	movs	r2, #255	; 0xff
 8009c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c36:	f001 fccd 	bl	800b5d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c3a:	f001 fc9b 	bl	800b574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c46:	e011      	b.n	8009c6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d012      	beq.n	8009c76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3310      	adds	r3, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fda5 	bl	800a7a4 <xTaskRemoveFromEventList>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c60:	f000 fe7a 	bl	800a958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dce9      	bgt.n	8009c48 <prvUnlockQueue+0x60>
 8009c74:	e000      	b.n	8009c78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	22ff      	movs	r2, #255	; 0xff
 8009c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c80:	f001 fca8 	bl	800b5d4 <vPortExitCritical>
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c94:	f001 fc6e 	bl	800b574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	e001      	b.n	8009caa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009caa:	f001 fc93 	bl	800b5d4 <vPortExitCritical>

	return xReturn;
 8009cae:	68fb      	ldr	r3, [r7, #12]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cc0:	f001 fc58 	bl	800b574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d102      	bne.n	8009cd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e001      	b.n	8009cda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cda:	f001 fc7b 	bl	800b5d4 <vPortExitCritical>

	return xReturn;
 8009cde:	68fb      	ldr	r3, [r7, #12]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e014      	b.n	8009d22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cf8:	4a0f      	ldr	r2, [pc, #60]	; (8009d38 <vQueueAddToRegistry+0x50>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10b      	bne.n	8009d1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d04:	490c      	ldr	r1, [pc, #48]	; (8009d38 <vQueueAddToRegistry+0x50>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d0e:	4a0a      	ldr	r2, [pc, #40]	; (8009d38 <vQueueAddToRegistry+0x50>)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	4413      	add	r3, r2
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d1a:	e006      	b.n	8009d2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b07      	cmp	r3, #7
 8009d26:	d9e7      	bls.n	8009cf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	20000634 	.word	0x20000634

08009d3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d4c:	f001 fc12 	bl	800b574 <vPortEnterCritical>
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5c:	d103      	bne.n	8009d66 <vQueueWaitForMessageRestricted+0x2a>
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d6c:	b25b      	sxtb	r3, r3
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d72:	d103      	bne.n	8009d7c <vQueueWaitForMessageRestricted+0x40>
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d7c:	f001 fc2a 	bl	800b5d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d106      	bne.n	8009d96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3324      	adds	r3, #36	; 0x24
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 fcdb 	bl	800a74c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d96:	6978      	ldr	r0, [r7, #20]
 8009d98:	f7ff ff26 	bl	8009be8 <prvUnlockQueue>
	}
 8009d9c:	bf00      	nop
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08c      	sub	sp, #48	; 0x30
 8009da8:	af04      	add	r7, sp, #16
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	4613      	mov	r3, r2
 8009db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fcfd 	bl	800b7b8 <pvPortMalloc>
 8009dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00e      	beq.n	8009de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009dc6:	2058      	movs	r0, #88	; 0x58
 8009dc8:	f001 fcf6 	bl	800b7b8 <pvPortMalloc>
 8009dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8009dda:	e005      	b.n	8009de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ddc:	6978      	ldr	r0, [r7, #20]
 8009dde:	f001 fdaf 	bl	800b940 <vPortFree>
 8009de2:	e001      	b.n	8009de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d013      	beq.n	8009e16 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009dee:	88fa      	ldrh	r2, [r7, #6]
 8009df0:	2300      	movs	r3, #0
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	9302      	str	r3, [sp, #8]
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f80e 	bl	8009e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e0a:	69f8      	ldr	r0, [r7, #28]
 8009e0c:	f000 f89a 	bl	8009f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e10:	2301      	movs	r3, #1
 8009e12:	61bb      	str	r3, [r7, #24]
 8009e14:	e002      	b.n	8009e1c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e16:	f04f 33ff 	mov.w	r3, #4294967295
 8009e1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e1c:	69bb      	ldr	r3, [r7, #24]
	}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3720      	adds	r7, #32
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b088      	sub	sp, #32
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	21a5      	movs	r1, #165	; 0xa5
 8009e40:	f001 fedc 	bl	800bbfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f023 0307 	bic.w	r3, r3, #7
 8009e5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00a      	beq.n	8009e7e <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	617b      	str	r3, [r7, #20]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01f      	beq.n	8009ec4 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]
 8009e88:	e012      	b.n	8009eb0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	4413      	add	r3, r2
 8009e90:	7819      	ldrb	r1, [r3, #0]
 8009e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	4413      	add	r3, r2
 8009e98:	3334      	adds	r3, #52	; 0x34
 8009e9a:	460a      	mov	r2, r1
 8009e9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d9e9      	bls.n	8009e8a <prvInitialiseNewTask+0x64>
 8009eb6:	e000      	b.n	8009eba <prvInitialiseNewTask+0x94>
			{
				break;
 8009eb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ec2:	e003      	b.n	8009ecc <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	2b0e      	cmp	r3, #14
 8009ed0:	d901      	bls.n	8009ed6 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ed2:	230e      	movs	r3, #14
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ee0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	3304      	adds	r3, #4
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff f98b 	bl	8009208 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	3318      	adds	r3, #24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff f986 	bl	8009208 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	f1c3 020f 	rsb	r2, r3, #15
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	2200      	movs	r2, #0
 8009f16:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	69b8      	ldr	r0, [r7, #24]
 8009f26:	f001 f9f5 	bl	800b314 <pxPortInitialiseStack>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f3c:	bf00      	nop
 8009f3e:	3720      	adds	r7, #32
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f4c:	f001 fb12 	bl	800b574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f50:	4b2c      	ldr	r3, [pc, #176]	; (800a004 <prvAddNewTaskToReadyList+0xc0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	4a2b      	ldr	r2, [pc, #172]	; (800a004 <prvAddNewTaskToReadyList+0xc0>)
 8009f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f5a:	4b2b      	ldr	r3, [pc, #172]	; (800a008 <prvAddNewTaskToReadyList+0xc4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f62:	4a29      	ldr	r2, [pc, #164]	; (800a008 <prvAddNewTaskToReadyList+0xc4>)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f68:	4b26      	ldr	r3, [pc, #152]	; (800a004 <prvAddNewTaskToReadyList+0xc0>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d110      	bne.n	8009f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f70:	f000 fd16 	bl	800a9a0 <prvInitialiseTaskLists>
 8009f74:	e00d      	b.n	8009f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f76:	4b25      	ldr	r3, [pc, #148]	; (800a00c <prvAddNewTaskToReadyList+0xc8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f7e:	4b22      	ldr	r3, [pc, #136]	; (800a008 <prvAddNewTaskToReadyList+0xc4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d802      	bhi.n	8009f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f8c:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <prvAddNewTaskToReadyList+0xc4>)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f92:	4b1f      	ldr	r3, [pc, #124]	; (800a010 <prvAddNewTaskToReadyList+0xcc>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3301      	adds	r3, #1
 8009f98:	4a1d      	ldr	r2, [pc, #116]	; (800a010 <prvAddNewTaskToReadyList+0xcc>)
 8009f9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f9c:	4b1c      	ldr	r3, [pc, #112]	; (800a010 <prvAddNewTaskToReadyList+0xcc>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	2201      	movs	r2, #1
 8009faa:	409a      	lsls	r2, r3
 8009fac:	4b19      	ldr	r3, [pc, #100]	; (800a014 <prvAddNewTaskToReadyList+0xd0>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	4a18      	ldr	r2, [pc, #96]	; (800a014 <prvAddNewTaskToReadyList+0xd0>)
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4a15      	ldr	r2, [pc, #84]	; (800a018 <prvAddNewTaskToReadyList+0xd4>)
 8009fc4:	441a      	add	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3304      	adds	r3, #4
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7ff f928 	bl	8009222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fd2:	f001 faff 	bl	800b5d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fd6:	4b0d      	ldr	r3, [pc, #52]	; (800a00c <prvAddNewTaskToReadyList+0xc8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00e      	beq.n	8009ffc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <prvAddNewTaskToReadyList+0xc4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d207      	bcs.n	8009ffc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fec:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <prvAddNewTaskToReadyList+0xd8>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20000814 	.word	0x20000814
 800a008:	20000674 	.word	0x20000674
 800a00c:	20000820 	.word	0x20000820
 800a010:	20000830 	.word	0x20000830
 800a014:	2000081c 	.word	0x2000081c
 800a018:	20000678 	.word	0x20000678
 800a01c:	e000ed04 	.word	0xe000ed04

0800a020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d017      	beq.n	800a062 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a032:	4b13      	ldr	r3, [pc, #76]	; (800a080 <vTaskDelay+0x60>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <vTaskDelay+0x30>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	60bb      	str	r3, [r7, #8]
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a050:	f000 f98a 	bl	800a368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a054:	2100      	movs	r1, #0
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fde4 	bl	800ac24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a05c:	f000 f992 	bl	800a384 <xTaskResumeAll>
 800a060:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d107      	bne.n	800a078 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a068:	4b06      	ldr	r3, [pc, #24]	; (800a084 <vTaskDelay+0x64>)
 800a06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2000083c 	.word	0x2000083c
 800a084:	e000ed04 	.word	0xe000ed04

0800a088 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a090:	f001 fa70 	bl	800b574 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <vTaskSuspend+0x18>
 800a09a:	4b3c      	ldr	r3, [pc, #240]	; (800a18c <vTaskSuspend+0x104>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	e000      	b.n	800a0a2 <vTaskSuspend+0x1a>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff f917 	bl	80092dc <uxListRemove>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d115      	bne.n	800a0e0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b8:	4935      	ldr	r1, [pc, #212]	; (800a190 <vTaskSuspend+0x108>)
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <vTaskSuspend+0x58>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	43da      	mvns	r2, r3
 800a0d6:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <vTaskSuspend+0x10c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	4a2d      	ldr	r2, [pc, #180]	; (800a194 <vTaskSuspend+0x10c>)
 800a0de:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3318      	adds	r3, #24
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff f8f5 	bl	80092dc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4827      	ldr	r0, [pc, #156]	; (800a198 <vTaskSuspend+0x110>)
 800a0fa:	f7ff f892 	bl	8009222 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b01      	cmp	r3, #1
 800a108:	d103      	bne.n	800a112 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a112:	f001 fa5f 	bl	800b5d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a116:	4b21      	ldr	r3, [pc, #132]	; (800a19c <vTaskSuspend+0x114>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d005      	beq.n	800a12a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a11e:	f001 fa29 	bl	800b574 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a122:	f000 fcbb 	bl	800aa9c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a126:	f001 fa55 	bl	800b5d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a12a:	4b18      	ldr	r3, [pc, #96]	; (800a18c <vTaskSuspend+0x104>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d127      	bne.n	800a184 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a134:	4b19      	ldr	r3, [pc, #100]	; (800a19c <vTaskSuspend+0x114>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d017      	beq.n	800a16c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a13c:	4b18      	ldr	r3, [pc, #96]	; (800a1a0 <vTaskSuspend+0x118>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00a      	beq.n	800a15a <vTaskSuspend+0xd2>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60bb      	str	r3, [r7, #8]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a15a:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <vTaskSuspend+0x11c>)
 800a15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a16a:	e00b      	b.n	800a184 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <vTaskSuspend+0x110>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <vTaskSuspend+0x120>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d103      	bne.n	800a180 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800a178:	4b04      	ldr	r3, [pc, #16]	; (800a18c <vTaskSuspend+0x104>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
	}
 800a17e:	e001      	b.n	800a184 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800a180:	f000 fa64 	bl	800a64c <vTaskSwitchContext>
	}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000674 	.word	0x20000674
 800a190:	20000678 	.word	0x20000678
 800a194:	2000081c 	.word	0x2000081c
 800a198:	20000800 	.word	0x20000800
 800a19c:	20000820 	.word	0x20000820
 800a1a0:	2000083c 	.word	0x2000083c
 800a1a4:	e000ed04 	.word	0xe000ed04
 800a1a8:	20000814 	.word	0x20000814

0800a1ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60fb      	str	r3, [r7, #12]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <prvTaskIsTaskSuspended+0x5c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d10a      	bne.n	800a1f8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	4a09      	ldr	r2, [pc, #36]	; (800a20c <prvTaskIsTaskSuspended+0x60>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d005      	beq.n	800a1f8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1f8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	371c      	adds	r7, #28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	20000800 	.word	0x20000800
 800a20c:	200007d4 	.word	0x200007d4

0800a210 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <vTaskResume+0x28>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	60bb      	str	r3, [r7, #8]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a238:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <vTaskResume+0xac>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d037      	beq.n	800a2b2 <vTaskResume+0xa2>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d034      	beq.n	800a2b2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800a248:	f001 f994 	bl	800b574 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7ff ffad 	bl	800a1ac <prvTaskIsTaskSuspended>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d02a      	beq.n	800a2ae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff f83d 	bl	80092dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a266:	2201      	movs	r2, #1
 800a268:	409a      	lsls	r2, r3
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <vTaskResume+0xb0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4313      	orrs	r3, r2
 800a270:	4a13      	ldr	r2, [pc, #76]	; (800a2c0 <vTaskResume+0xb0>)
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4a10      	ldr	r2, [pc, #64]	; (800a2c4 <vTaskResume+0xb4>)
 800a282:	441a      	add	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fe ffc9 	bl	8009222 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a294:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <vTaskResume+0xac>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d307      	bcc.n	800a2ae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a29e:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <vTaskResume+0xb8>)
 800a2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a2ae:	f001 f991 	bl	800b5d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2b2:	bf00      	nop
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000674 	.word	0x20000674
 800a2c0:	2000081c 	.word	0x2000081c
 800a2c4:	20000678 	.word	0x20000678
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a2d2:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <vTaskStartScheduler+0x84>)
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2282      	movs	r2, #130	; 0x82
 800a2de:	491d      	ldr	r1, [pc, #116]	; (800a354 <vTaskStartScheduler+0x88>)
 800a2e0:	481d      	ldr	r0, [pc, #116]	; (800a358 <vTaskStartScheduler+0x8c>)
 800a2e2:	f7ff fd5f 	bl	8009da4 <xTaskCreate>
 800a2e6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d102      	bne.n	800a2f4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800a2ee:	f000 fcff 	bl	800acf0 <xTimerCreateTimerTask>
 800a2f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d116      	bne.n	800a328 <vTaskStartScheduler+0x5c>
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	60bb      	str	r3, [r7, #8]
}
 800a30c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <vTaskStartScheduler+0x90>)
 800a310:	f04f 32ff 	mov.w	r2, #4294967295
 800a314:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a316:	4b12      	ldr	r3, [pc, #72]	; (800a360 <vTaskStartScheduler+0x94>)
 800a318:	2201      	movs	r2, #1
 800a31a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a31c:	4b11      	ldr	r3, [pc, #68]	; (800a364 <vTaskStartScheduler+0x98>)
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a322:	f001 f885 	bl	800b430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a326:	e00e      	b.n	800a346 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d10a      	bne.n	800a346 <vTaskStartScheduler+0x7a>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	607b      	str	r3, [r7, #4]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <vTaskStartScheduler+0x78>
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20000838 	.word	0x20000838
 800a354:	080107a0 	.word	0x080107a0
 800a358:	0800a971 	.word	0x0800a971
 800a35c:	20000834 	.word	0x20000834
 800a360:	20000820 	.word	0x20000820
 800a364:	20000818 	.word	0x20000818

0800a368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a368:	b480      	push	{r7}
 800a36a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <vTaskSuspendAll+0x18>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3301      	adds	r3, #1
 800a372:	4a03      	ldr	r2, [pc, #12]	; (800a380 <vTaskSuspendAll+0x18>)
 800a374:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a376:	bf00      	nop
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	2000083c 	.word	0x2000083c

0800a384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a392:	4b41      	ldr	r3, [pc, #260]	; (800a498 <xTaskResumeAll+0x114>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10a      	bne.n	800a3b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	603b      	str	r3, [r7, #0]
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3b0:	f001 f8e0 	bl	800b574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3b4:	4b38      	ldr	r3, [pc, #224]	; (800a498 <xTaskResumeAll+0x114>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	4a37      	ldr	r2, [pc, #220]	; (800a498 <xTaskResumeAll+0x114>)
 800a3bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3be:	4b36      	ldr	r3, [pc, #216]	; (800a498 <xTaskResumeAll+0x114>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d161      	bne.n	800a48a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3c6:	4b35      	ldr	r3, [pc, #212]	; (800a49c <xTaskResumeAll+0x118>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d05d      	beq.n	800a48a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ce:	e02e      	b.n	800a42e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d0:	4b33      	ldr	r3, [pc, #204]	; (800a4a0 <xTaskResumeAll+0x11c>)
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3318      	adds	r3, #24
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe ff7d 	bl	80092dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe ff78 	bl	80092dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	4b2b      	ldr	r3, [pc, #172]	; (800a4a4 <xTaskResumeAll+0x120>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	4a2a      	ldr	r2, [pc, #168]	; (800a4a4 <xTaskResumeAll+0x120>)
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4a27      	ldr	r2, [pc, #156]	; (800a4a8 <xTaskResumeAll+0x124>)
 800a40c:	441a      	add	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3304      	adds	r3, #4
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f7fe ff04 	bl	8009222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41e:	4b23      	ldr	r3, [pc, #140]	; (800a4ac <xTaskResumeAll+0x128>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	429a      	cmp	r2, r3
 800a426:	d302      	bcc.n	800a42e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a428:	4b21      	ldr	r3, [pc, #132]	; (800a4b0 <xTaskResumeAll+0x12c>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a42e:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <xTaskResumeAll+0x11c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1cc      	bne.n	800a3d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a43c:	f000 fb2e 	bl	800aa9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a440:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <xTaskResumeAll+0x130>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d010      	beq.n	800a46e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a44c:	f000 f846 	bl	800a4dc <xTaskIncrementTick>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d002      	beq.n	800a45c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a456:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <xTaskResumeAll+0x12c>)
 800a458:	2201      	movs	r2, #1
 800a45a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3b01      	subs	r3, #1
 800a460:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f1      	bne.n	800a44c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a468:	4b12      	ldr	r3, [pc, #72]	; (800a4b4 <xTaskResumeAll+0x130>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a46e:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <xTaskResumeAll+0x12c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a476:	2301      	movs	r3, #1
 800a478:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a47a:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <xTaskResumeAll+0x134>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a48a:	f001 f8a3 	bl	800b5d4 <vPortExitCritical>

	return xAlreadyYielded;
 800a48e:	68bb      	ldr	r3, [r7, #8]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	2000083c 	.word	0x2000083c
 800a49c:	20000814 	.word	0x20000814
 800a4a0:	200007d4 	.word	0x200007d4
 800a4a4:	2000081c 	.word	0x2000081c
 800a4a8:	20000678 	.word	0x20000678
 800a4ac:	20000674 	.word	0x20000674
 800a4b0:	20000828 	.word	0x20000828
 800a4b4:	20000824 	.word	0x20000824
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4c2:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <xTaskGetTickCount+0x1c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4c8:	687b      	ldr	r3, [r7, #4]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	20000818 	.word	0x20000818

0800a4dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e6:	4b4e      	ldr	r3, [pc, #312]	; (800a620 <xTaskIncrementTick+0x144>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 8088 	bne.w	800a600 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4f0:	4b4c      	ldr	r3, [pc, #304]	; (800a624 <xTaskIncrementTick+0x148>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4f8:	4a4a      	ldr	r2, [pc, #296]	; (800a624 <xTaskIncrementTick+0x148>)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d120      	bne.n	800a546 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a504:	4b48      	ldr	r3, [pc, #288]	; (800a628 <xTaskIncrementTick+0x14c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <xTaskIncrementTick+0x48>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	603b      	str	r3, [r7, #0]
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <xTaskIncrementTick+0x46>
 800a524:	4b40      	ldr	r3, [pc, #256]	; (800a628 <xTaskIncrementTick+0x14c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	4b40      	ldr	r3, [pc, #256]	; (800a62c <xTaskIncrementTick+0x150>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a3e      	ldr	r2, [pc, #248]	; (800a628 <xTaskIncrementTick+0x14c>)
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	4a3e      	ldr	r2, [pc, #248]	; (800a62c <xTaskIncrementTick+0x150>)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	4b3d      	ldr	r3, [pc, #244]	; (800a630 <xTaskIncrementTick+0x154>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	4a3c      	ldr	r2, [pc, #240]	; (800a630 <xTaskIncrementTick+0x154>)
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	f000 faab 	bl	800aa9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a546:	4b3b      	ldr	r3, [pc, #236]	; (800a634 <xTaskIncrementTick+0x158>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d348      	bcc.n	800a5e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a550:	4b35      	ldr	r3, [pc, #212]	; (800a628 <xTaskIncrementTick+0x14c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d104      	bne.n	800a564 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a55a:	4b36      	ldr	r3, [pc, #216]	; (800a634 <xTaskIncrementTick+0x158>)
 800a55c:	f04f 32ff 	mov.w	r2, #4294967295
 800a560:	601a      	str	r2, [r3, #0]
					break;
 800a562:	e03e      	b.n	800a5e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a564:	4b30      	ldr	r3, [pc, #192]	; (800a628 <xTaskIncrementTick+0x14c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d203      	bcs.n	800a584 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a57c:	4a2d      	ldr	r2, [pc, #180]	; (800a634 <xTaskIncrementTick+0x158>)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a582:	e02e      	b.n	800a5e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fea7 	bl	80092dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d004      	beq.n	800a5a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	3318      	adds	r3, #24
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fe9e 	bl	80092dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	409a      	lsls	r2, r3
 800a5a8:	4b23      	ldr	r3, [pc, #140]	; (800a638 <xTaskIncrementTick+0x15c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	4a22      	ldr	r2, [pc, #136]	; (800a638 <xTaskIncrementTick+0x15c>)
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4a1f      	ldr	r2, [pc, #124]	; (800a63c <xTaskIncrementTick+0x160>)
 800a5c0:	441a      	add	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f7fe fe2a 	bl	8009222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <xTaskIncrementTick+0x164>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d3b9      	bcc.n	800a550 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5e0:	e7b6      	b.n	800a550 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5e2:	4b17      	ldr	r3, [pc, #92]	; (800a640 <xTaskIncrementTick+0x164>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e8:	4914      	ldr	r1, [pc, #80]	; (800a63c <xTaskIncrementTick+0x160>)
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d907      	bls.n	800a60a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	e004      	b.n	800a60a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a600:	4b10      	ldr	r3, [pc, #64]	; (800a644 <xTaskIncrementTick+0x168>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a0f      	ldr	r2, [pc, #60]	; (800a644 <xTaskIncrementTick+0x168>)
 800a608:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a60a:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <xTaskIncrementTick+0x16c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a612:	2301      	movs	r3, #1
 800a614:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a616:	697b      	ldr	r3, [r7, #20]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	2000083c 	.word	0x2000083c
 800a624:	20000818 	.word	0x20000818
 800a628:	200007cc 	.word	0x200007cc
 800a62c:	200007d0 	.word	0x200007d0
 800a630:	2000082c 	.word	0x2000082c
 800a634:	20000834 	.word	0x20000834
 800a638:	2000081c 	.word	0x2000081c
 800a63c:	20000678 	.word	0x20000678
 800a640:	20000674 	.word	0x20000674
 800a644:	20000824 	.word	0x20000824
 800a648:	20000828 	.word	0x20000828

0800a64c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a652:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <vTaskSwitchContext+0xa4>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a65a:	4b26      	ldr	r3, [pc, #152]	; (800a6f4 <vTaskSwitchContext+0xa8>)
 800a65c:	2201      	movs	r2, #1
 800a65e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a660:	e03f      	b.n	800a6e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <vTaskSwitchContext+0xa8>)
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a668:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <vTaskSwitchContext+0xac>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	fab3 f383 	clz	r3, r3
 800a674:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	f1c3 031f 	rsb	r3, r3, #31
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	491f      	ldr	r1, [pc, #124]	; (800a6fc <vTaskSwitchContext+0xb0>)
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	607b      	str	r3, [r7, #4]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <vTaskSwitchContext+0x5a>
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <vTaskSwitchContext+0xb0>)
 800a6b4:	4413      	add	r3, r2
 800a6b6:	613b      	str	r3, [r7, #16]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	605a      	str	r2, [r3, #4]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d104      	bne.n	800a6d8 <vTaskSwitchContext+0x8c>
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	605a      	str	r2, [r3, #4]
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	4a08      	ldr	r2, [pc, #32]	; (800a700 <vTaskSwitchContext+0xb4>)
 800a6e0:	6013      	str	r3, [r2, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	2000083c 	.word	0x2000083c
 800a6f4:	20000828 	.word	0x20000828
 800a6f8:	2000081c 	.word	0x2000081c
 800a6fc:	20000678 	.word	0x20000678
 800a700:	20000674 	.word	0x20000674

0800a704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	60fb      	str	r3, [r7, #12]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a72a:	4b07      	ldr	r3, [pc, #28]	; (800a748 <vTaskPlaceOnEventList+0x44>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3318      	adds	r3, #24
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7fe fd99 	bl	800926a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a738:	2101      	movs	r1, #1
 800a73a:	6838      	ldr	r0, [r7, #0]
 800a73c:	f000 fa72 	bl	800ac24 <prvAddCurrentTaskToDelayedList>
}
 800a740:	bf00      	nop
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	20000674 	.word	0x20000674

0800a74c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10a      	bne.n	800a774 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	617b      	str	r3, [r7, #20]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a774:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3318      	adds	r3, #24
 800a77a:	4619      	mov	r1, r3
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7fe fd50 	bl	8009222 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a788:	f04f 33ff 	mov.w	r3, #4294967295
 800a78c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	68b8      	ldr	r0, [r7, #8]
 800a792:	f000 fa47 	bl	800ac24 <prvAddCurrentTaskToDelayedList>
	}
 800a796:	bf00      	nop
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000674 	.word	0x20000674

0800a7a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	60fb      	str	r3, [r7, #12]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	3318      	adds	r3, #24
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe fd81 	bl	80092dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7da:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <xTaskRemoveFromEventList+0xac>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d11c      	bne.n	800a81c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fd78 	bl	80092dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	409a      	lsls	r2, r3
 800a7f4:	4b17      	ldr	r3, [pc, #92]	; (800a854 <xTaskRemoveFromEventList+0xb0>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	4a16      	ldr	r2, [pc, #88]	; (800a854 <xTaskRemoveFromEventList+0xb0>)
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a802:	4613      	mov	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4413      	add	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4a13      	ldr	r2, [pc, #76]	; (800a858 <xTaskRemoveFromEventList+0xb4>)
 800a80c:	441a      	add	r2, r3
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	3304      	adds	r3, #4
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f7fe fd04 	bl	8009222 <vListInsertEnd>
 800a81a:	e005      	b.n	800a828 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	3318      	adds	r3, #24
 800a820:	4619      	mov	r1, r3
 800a822:	480e      	ldr	r0, [pc, #56]	; (800a85c <xTaskRemoveFromEventList+0xb8>)
 800a824:	f7fe fcfd 	bl	8009222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <xTaskRemoveFromEventList+0xbc>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a832:	429a      	cmp	r2, r3
 800a834:	d905      	bls.n	800a842 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a836:	2301      	movs	r3, #1
 800a838:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a83a:	4b0a      	ldr	r3, [pc, #40]	; (800a864 <xTaskRemoveFromEventList+0xc0>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e001      	b.n	800a846 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a846:	697b      	ldr	r3, [r7, #20]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	2000083c 	.word	0x2000083c
 800a854:	2000081c 	.word	0x2000081c
 800a858:	20000678 	.word	0x20000678
 800a85c:	200007d4 	.word	0x200007d4
 800a860:	20000674 	.word	0x20000674
 800a864:	20000828 	.word	0x20000828

0800a868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a870:	4b06      	ldr	r3, [pc, #24]	; (800a88c <vTaskInternalSetTimeOutState+0x24>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <vTaskInternalSetTimeOutState+0x28>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	605a      	str	r2, [r3, #4]
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	2000082c 	.word	0x2000082c
 800a890:	20000818 	.word	0x20000818

0800a894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	613b      	str	r3, [r7, #16]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60fb      	str	r3, [r7, #12]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8d6:	f000 fe4d 	bl	800b574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8da:	4b1d      	ldr	r3, [pc, #116]	; (800a950 <xTaskCheckForTimeOut+0xbc>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d102      	bne.n	800a8fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e023      	b.n	800a942 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4b15      	ldr	r3, [pc, #84]	; (800a954 <xTaskCheckForTimeOut+0xc0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d007      	beq.n	800a916 <xTaskCheckForTimeOut+0x82>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d302      	bcc.n	800a916 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	61fb      	str	r3, [r7, #28]
 800a914:	e015      	b.n	800a942 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d20b      	bcs.n	800a938 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	1ad2      	subs	r2, r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ff9b 	bl	800a868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	e004      	b.n	800a942 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a942:	f000 fe47 	bl	800b5d4 <vPortExitCritical>

	return xReturn;
 800a946:	69fb      	ldr	r3, [r7, #28]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20000818 	.word	0x20000818
 800a954:	2000082c 	.word	0x2000082c

0800a958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a95c:	4b03      	ldr	r3, [pc, #12]	; (800a96c <vTaskMissedYield+0x14>)
 800a95e:	2201      	movs	r2, #1
 800a960:	601a      	str	r2, [r3, #0]
}
 800a962:	bf00      	nop
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20000828 	.word	0x20000828

0800a970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a978:	f000 f852 	bl	800aa20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <prvIdleTask+0x28>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d9f9      	bls.n	800a978 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a984:	4b05      	ldr	r3, [pc, #20]	; (800a99c <prvIdleTask+0x2c>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a994:	e7f0      	b.n	800a978 <prvIdleTask+0x8>
 800a996:	bf00      	nop
 800a998:	20000678 	.word	0x20000678
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	e00c      	b.n	800a9c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a12      	ldr	r2, [pc, #72]	; (800aa00 <prvInitialiseTaskLists+0x60>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fc04 	bl	80091c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	607b      	str	r3, [r7, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b0e      	cmp	r3, #14
 800a9ca:	d9ef      	bls.n	800a9ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9cc:	480d      	ldr	r0, [pc, #52]	; (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ce:	f7fe fbfb 	bl	80091c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9d2:	480d      	ldr	r0, [pc, #52]	; (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9d4:	f7fe fbf8 	bl	80091c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9d8:	480c      	ldr	r0, [pc, #48]	; (800aa0c <prvInitialiseTaskLists+0x6c>)
 800a9da:	f7fe fbf5 	bl	80091c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9de:	480c      	ldr	r0, [pc, #48]	; (800aa10 <prvInitialiseTaskLists+0x70>)
 800a9e0:	f7fe fbf2 	bl	80091c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9e4:	480b      	ldr	r0, [pc, #44]	; (800aa14 <prvInitialiseTaskLists+0x74>)
 800a9e6:	f7fe fbef 	bl	80091c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <prvInitialiseTaskLists+0x78>)
 800a9ec:	4a05      	ldr	r2, [pc, #20]	; (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <prvInitialiseTaskLists+0x7c>)
 800a9f2:	4a05      	ldr	r2, [pc, #20]	; (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000678 	.word	0x20000678
 800aa04:	200007a4 	.word	0x200007a4
 800aa08:	200007b8 	.word	0x200007b8
 800aa0c:	200007d4 	.word	0x200007d4
 800aa10:	200007e8 	.word	0x200007e8
 800aa14:	20000800 	.word	0x20000800
 800aa18:	200007cc 	.word	0x200007cc
 800aa1c:	200007d0 	.word	0x200007d0

0800aa20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa26:	e019      	b.n	800aa5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa28:	f000 fda4 	bl	800b574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2c:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <prvCheckTasksWaitingTermination+0x50>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe fc4f 	bl	80092dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4a0b      	ldr	r2, [pc, #44]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa48:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4a0a      	ldr	r2, [pc, #40]	; (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa52:	f000 fdbf 	bl	800b5d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f810 	bl	800aa7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e1      	bne.n	800aa28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200007e8 	.word	0x200007e8
 800aa74:	20000814 	.word	0x20000814
 800aa78:	200007fc 	.word	0x200007fc

0800aa7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 ff59 	bl	800b940 <vPortFree>
			vPortFree( pxTCB );
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 ff56 	bl	800b940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaa2:	4b0c      	ldr	r3, [pc, #48]	; (800aad4 <prvResetNextTaskUnblockTime+0x38>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <prvResetNextTaskUnblockTime+0x3c>)
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aab4:	e008      	b.n	800aac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab6:	4b07      	ldr	r3, [pc, #28]	; (800aad4 <prvResetNextTaskUnblockTime+0x38>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	4a04      	ldr	r2, [pc, #16]	; (800aad8 <prvResetNextTaskUnblockTime+0x3c>)
 800aac6:	6013      	str	r3, [r2, #0]
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	200007cc 	.word	0x200007cc
 800aad8:	20000834 	.word	0x20000834

0800aadc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <xTaskGetSchedulerState+0x34>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d102      	bne.n	800aaf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aaea:	2301      	movs	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	e008      	b.n	800ab02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaf0:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <xTaskGetSchedulerState+0x38>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaf8:	2302      	movs	r3, #2
 800aafa:	607b      	str	r3, [r7, #4]
 800aafc:	e001      	b.n	800ab02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aafe:	2300      	movs	r3, #0
 800ab00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab02:	687b      	ldr	r3, [r7, #4]
	}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	20000820 	.word	0x20000820
 800ab14:	2000083c 	.word	0x2000083c

0800ab18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab24:	2300      	movs	r3, #0
 800ab26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d06e      	beq.n	800ac0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab2e:	4b3a      	ldr	r3, [pc, #232]	; (800ac18 <xTaskPriorityDisinherit+0x100>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d00a      	beq.n	800ab4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60fb      	str	r3, [r7, #12]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60bb      	str	r3, [r7, #8]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab70:	1e5a      	subs	r2, r3, #1
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d044      	beq.n	800ac0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d140      	bne.n	800ac0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fba4 	bl	80092dc <uxListRemove>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d115      	bne.n	800abc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9e:	491f      	ldr	r1, [pc, #124]	; (800ac1c <xTaskPriorityDisinherit+0x104>)
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <xTaskPriorityDisinherit+0xae>
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	2201      	movs	r2, #1
 800abb6:	fa02 f303 	lsl.w	r3, r2, r3
 800abba:	43da      	mvns	r2, r3
 800abbc:	4b18      	ldr	r3, [pc, #96]	; (800ac20 <xTaskPriorityDisinherit+0x108>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4013      	ands	r3, r2
 800abc2:	4a17      	ldr	r2, [pc, #92]	; (800ac20 <xTaskPriorityDisinherit+0x108>)
 800abc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd2:	f1c3 020f 	rsb	r2, r3, #15
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	2201      	movs	r2, #1
 800abe0:	409a      	lsls	r2, r3
 800abe2:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <xTaskPriorityDisinherit+0x108>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	4a0d      	ldr	r2, [pc, #52]	; (800ac20 <xTaskPriorityDisinherit+0x108>)
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4a08      	ldr	r2, [pc, #32]	; (800ac1c <xTaskPriorityDisinherit+0x104>)
 800abfa:	441a      	add	r2, r3
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f7fe fb0d 	bl	8009222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac0c:	697b      	ldr	r3, [r7, #20]
	}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20000674 	.word	0x20000674
 800ac1c:	20000678 	.word	0x20000678
 800ac20:	2000081c 	.word	0x2000081c

0800ac24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac2e:	4b29      	ldr	r3, [pc, #164]	; (800acd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac34:	4b28      	ldr	r3, [pc, #160]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe fb4e 	bl	80092dc <uxListRemove>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10b      	bne.n	800ac5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ac46:	4b24      	ldr	r3, [pc, #144]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac52:	43da      	mvns	r2, r3
 800ac54:	4b21      	ldr	r3, [pc, #132]	; (800acdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	4a20      	ldr	r2, [pc, #128]	; (800acdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac64:	d10a      	bne.n	800ac7c <prvAddCurrentTaskToDelayedList+0x58>
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d007      	beq.n	800ac7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3304      	adds	r3, #4
 800ac72:	4619      	mov	r1, r3
 800ac74:	481a      	ldr	r0, [pc, #104]	; (800ace0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ac76:	f7fe fad4 	bl	8009222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac7a:	e026      	b.n	800acca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac84:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d209      	bcs.n	800aca8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac94:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	4b0f      	ldr	r3, [pc, #60]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f7fe fae2 	bl	800926a <vListInsert>
}
 800aca6:	e010      	b.n	800acca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aca8:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	3304      	adds	r3, #4
 800acb2:	4619      	mov	r1, r3
 800acb4:	4610      	mov	r0, r2
 800acb6:	f7fe fad8 	bl	800926a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acba:	4b0c      	ldr	r3, [pc, #48]	; (800acec <prvAddCurrentTaskToDelayedList+0xc8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d202      	bcs.n	800acca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800acc4:	4a09      	ldr	r2, [pc, #36]	; (800acec <prvAddCurrentTaskToDelayedList+0xc8>)
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6013      	str	r3, [r2, #0]
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000818 	.word	0x20000818
 800acd8:	20000674 	.word	0x20000674
 800acdc:	2000081c 	.word	0x2000081c
 800ace0:	20000800 	.word	0x20000800
 800ace4:	200007d0 	.word	0x200007d0
 800ace8:	200007cc 	.word	0x200007cc
 800acec:	20000834 	.word	0x20000834

0800acf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acfa:	f000 fad5 	bl	800b2a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acfe:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <xTimerCreateTimerTask+0x54>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800ad06:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <xTimerCreateTimerTask+0x58>)
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ad14:	490d      	ldr	r1, [pc, #52]	; (800ad4c <xTimerCreateTimerTask+0x5c>)
 800ad16:	480e      	ldr	r0, [pc, #56]	; (800ad50 <xTimerCreateTimerTask+0x60>)
 800ad18:	f7ff f844 	bl	8009da4 <xTaskCreate>
 800ad1c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	603b      	str	r3, [r7, #0]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800ad3a:	687b      	ldr	r3, [r7, #4]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000870 	.word	0x20000870
 800ad48:	20000874 	.word	0x20000874
 800ad4c:	080107a8 	.word	0x080107a8
 800ad50:	0800ae89 	.word	0x0800ae89

0800ad54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08a      	sub	sp, #40	; 0x28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	623b      	str	r3, [r7, #32]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad82:	4b1a      	ldr	r3, [pc, #104]	; (800adec <xTimerGenericCommand+0x98>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d02a      	beq.n	800ade0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b05      	cmp	r3, #5
 800ad9a:	dc18      	bgt.n	800adce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad9c:	f7ff fe9e 	bl	800aadc <xTaskGetSchedulerState>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d109      	bne.n	800adba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ada6:	4b11      	ldr	r3, [pc, #68]	; (800adec <xTimerGenericCommand+0x98>)
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	f107 0114 	add.w	r1, r7, #20
 800adae:	2300      	movs	r3, #0
 800adb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb2:	f7fe fb85 	bl	80094c0 <xQueueGenericSend>
 800adb6:	6278      	str	r0, [r7, #36]	; 0x24
 800adb8:	e012      	b.n	800ade0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <xTimerGenericCommand+0x98>)
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	f107 0114 	add.w	r1, r7, #20
 800adc2:	2300      	movs	r3, #0
 800adc4:	2200      	movs	r2, #0
 800adc6:	f7fe fb7b 	bl	80094c0 <xQueueGenericSend>
 800adca:	6278      	str	r0, [r7, #36]	; 0x24
 800adcc:	e008      	b.n	800ade0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adce:	4b07      	ldr	r3, [pc, #28]	; (800adec <xTimerGenericCommand+0x98>)
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	f107 0114 	add.w	r1, r7, #20
 800add6:	2300      	movs	r3, #0
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	f7fe fc6f 	bl	80096bc <xQueueGenericSendFromISR>
 800adde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3728      	adds	r7, #40	; 0x28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000870 	.word	0x20000870

0800adf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfa:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <prvProcessExpiredTimer+0x94>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	3304      	adds	r3, #4
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fa67 	bl	80092dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d022      	beq.n	800ae62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	699a      	ldr	r2, [r3, #24]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	18d1      	adds	r1, r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	6978      	ldr	r0, [r7, #20]
 800ae2a:	f000 f8d1 	bl	800afd0 <prvInsertTimerInActiveList>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d01f      	beq.n	800ae74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae34:	2300      	movs	r3, #0
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6978      	ldr	r0, [r7, #20]
 800ae40:	f7ff ff88 	bl	800ad54 <xTimerGenericCommand>
 800ae44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d113      	bne.n	800ae74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60fb      	str	r3, [r7, #12]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae68:	f023 0301 	bic.w	r3, r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	6978      	ldr	r0, [r7, #20]
 800ae7a:	4798      	blx	r3
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20000868 	.word	0x20000868

0800ae88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 f857 	bl	800af48 <prvGetNextExpireTime>
 800ae9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 f803 	bl	800aeac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aea6:	f000 f8d5 	bl	800b054 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeaa:	e7f1      	b.n	800ae90 <prvTimerTask+0x8>

0800aeac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aeb6:	f7ff fa57 	bl	800a368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f866 	bl	800af90 <prvSampleTimeNow>
 800aec4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d130      	bne.n	800af2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <prvProcessTimerOrBlockTask+0x3c>
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d806      	bhi.n	800aee8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aeda:	f7ff fa53 	bl	800a384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff ff85 	bl	800adf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aee6:	e024      	b.n	800af32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d008      	beq.n	800af00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aeee:	4b13      	ldr	r3, [pc, #76]	; (800af3c <prvProcessTimerOrBlockTask+0x90>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <prvProcessTimerOrBlockTask+0x50>
 800aef8:	2301      	movs	r3, #1
 800aefa:	e000      	b.n	800aefe <prvProcessTimerOrBlockTask+0x52>
 800aefc:	2300      	movs	r3, #0
 800aefe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <prvProcessTimerOrBlockTask+0x94>)
 800af02:	6818      	ldr	r0, [r3, #0]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	4619      	mov	r1, r3
 800af0e:	f7fe ff15 	bl	8009d3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af12:	f7ff fa37 	bl	800a384 <xTaskResumeAll>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10a      	bne.n	800af32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af1c:	4b09      	ldr	r3, [pc, #36]	; (800af44 <prvProcessTimerOrBlockTask+0x98>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
}
 800af2c:	e001      	b.n	800af32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af2e:	f7ff fa29 	bl	800a384 <xTaskResumeAll>
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	2000086c 	.word	0x2000086c
 800af40:	20000870 	.word	0x20000870
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <prvGetNextExpireTime+0x44>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <prvGetNextExpireTime+0x16>
 800af5a:	2201      	movs	r2, #1
 800af5c:	e000      	b.n	800af60 <prvGetNextExpireTime+0x18>
 800af5e:	2200      	movs	r2, #0
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d105      	bne.n	800af78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af6c:	4b07      	ldr	r3, [pc, #28]	; (800af8c <prvGetNextExpireTime+0x44>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	e001      	b.n	800af7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af7c:	68fb      	ldr	r3, [r7, #12]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20000868 	.word	0x20000868

0800af90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af98:	f7ff fa90 	bl	800a4bc <xTaskGetTickCount>
 800af9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <prvSampleTimeNow+0x3c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d205      	bcs.n	800afb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afa8:	f000 f91a 	bl	800b1e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	e002      	b.n	800afba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afba:	4a04      	ldr	r2, [pc, #16]	; (800afcc <prvSampleTimeNow+0x3c>)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afc0:	68fb      	ldr	r3, [r7, #12]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000878 	.word	0x20000878

0800afd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d812      	bhi.n	800b01c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	1ad2      	subs	r2, r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b004:	2301      	movs	r3, #1
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	e01b      	b.n	800b042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b00a:	4b10      	ldr	r3, [pc, #64]	; (800b04c <prvInsertTimerInActiveList+0x7c>)
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3304      	adds	r3, #4
 800b012:	4619      	mov	r1, r3
 800b014:	4610      	mov	r0, r2
 800b016:	f7fe f928 	bl	800926a <vListInsert>
 800b01a:	e012      	b.n	800b042 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d206      	bcs.n	800b032 <prvInsertTimerInActiveList+0x62>
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d302      	bcc.n	800b032 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	e007      	b.n	800b042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b032:	4b07      	ldr	r3, [pc, #28]	; (800b050 <prvInsertTimerInActiveList+0x80>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3304      	adds	r3, #4
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7fe f914 	bl	800926a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b042:	697b      	ldr	r3, [r7, #20]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	2000086c 	.word	0x2000086c
 800b050:	20000868 	.word	0x20000868

0800b054 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08c      	sub	sp, #48	; 0x30
 800b058:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b05a:	e0ae      	b.n	800b1ba <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f2c0 80aa 	blt.w	800b1b8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d004      	beq.n	800b07a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	3304      	adds	r3, #4
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe f931 	bl	80092dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b07a:	1d3b      	adds	r3, r7, #4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff ff87 	bl	800af90 <prvSampleTimeNow>
 800b082:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b09      	cmp	r3, #9
 800b088:	f200 8097 	bhi.w	800b1ba <prvProcessReceivedCommands+0x166>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <prvProcessReceivedCommands+0x40>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0bd 	.word	0x0800b0bd
 800b098:	0800b0bd 	.word	0x0800b0bd
 800b09c:	0800b0bd 	.word	0x0800b0bd
 800b0a0:	0800b131 	.word	0x0800b131
 800b0a4:	0800b145 	.word	0x0800b145
 800b0a8:	0800b18f 	.word	0x0800b18f
 800b0ac:	0800b0bd 	.word	0x0800b0bd
 800b0b0:	0800b0bd 	.word	0x0800b0bd
 800b0b4:	0800b131 	.word	0x0800b131
 800b0b8:	0800b145 	.word	0x0800b145
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	18d1      	adds	r1, r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a3a      	ldr	r2, [r7, #32]
 800b0da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0dc:	f7ff ff78 	bl	800afd0 <prvInsertTimerInActiveList>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d069      	beq.n	800b1ba <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0f4:	f003 0304 	and.w	r3, r3, #4
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d05e      	beq.n	800b1ba <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	441a      	add	r2, r3
 800b104:	2300      	movs	r3, #0
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	2300      	movs	r3, #0
 800b10a:	2100      	movs	r1, #0
 800b10c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b10e:	f7ff fe21 	bl	800ad54 <xTimerGenericCommand>
 800b112:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d14f      	bne.n	800b1ba <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	61bb      	str	r3, [r7, #24]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b136:	f023 0301 	bic.w	r3, r3, #1
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b142:	e03a      	b.n	800b1ba <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14a:	f043 0301 	orr.w	r3, r3, #1
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	617b      	str	r3, [r7, #20]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	699a      	ldr	r2, [r3, #24]
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	18d1      	adds	r1, r2, r3
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	6a3a      	ldr	r2, [r7, #32]
 800b186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b188:	f7ff ff22 	bl	800afd0 <prvInsertTimerInActiveList>
					break;
 800b18c:	e015      	b.n	800b1ba <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d103      	bne.n	800b1a4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b19c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b19e:	f000 fbcf 	bl	800b940 <vPortFree>
 800b1a2:	e00a      	b.n	800b1ba <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1aa:	f023 0301 	bic.w	r3, r3, #1
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1b6:	e000      	b.n	800b1ba <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b1b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1ba:	4b08      	ldr	r3, [pc, #32]	; (800b1dc <prvProcessReceivedCommands+0x188>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f107 0108 	add.w	r1, r7, #8
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fb9f 	bl	8009908 <xQueueReceive>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f47f af45 	bne.w	800b05c <prvProcessReceivedCommands+0x8>
	}
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	3728      	adds	r7, #40	; 0x28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	20000870 	.word	0x20000870

0800b1e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1e6:	e048      	b.n	800b27a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1e8:	4b2d      	ldr	r3, [pc, #180]	; (800b2a0 <prvSwitchTimerLists+0xc0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f2:	4b2b      	ldr	r3, [pc, #172]	; (800b2a0 <prvSwitchTimerLists+0xc0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe f86b 	bl	80092dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d02e      	beq.n	800b27a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	4413      	add	r3, r2
 800b224:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d90e      	bls.n	800b24c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b23a:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <prvSwitchTimerLists+0xc0>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3304      	adds	r3, #4
 800b242:	4619      	mov	r1, r3
 800b244:	4610      	mov	r0, r2
 800b246:	f7fe f810 	bl	800926a <vListInsert>
 800b24a:	e016      	b.n	800b27a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b24c:	2300      	movs	r3, #0
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	2300      	movs	r3, #0
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff fd7c 	bl	800ad54 <xTimerGenericCommand>
 800b25c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	603b      	str	r3, [r7, #0]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <prvSwitchTimerLists+0xc0>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1b1      	bne.n	800b1e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b284:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <prvSwitchTimerLists+0xc0>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <prvSwitchTimerLists+0xc4>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a04      	ldr	r2, [pc, #16]	; (800b2a0 <prvSwitchTimerLists+0xc0>)
 800b290:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b292:	4a04      	ldr	r2, [pc, #16]	; (800b2a4 <prvSwitchTimerLists+0xc4>)
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	6013      	str	r3, [r2, #0]
}
 800b298:	bf00      	nop
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20000868 	.word	0x20000868
 800b2a4:	2000086c 	.word	0x2000086c

0800b2a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2ac:	f000 f962 	bl	800b574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2b0:	4b12      	ldr	r3, [pc, #72]	; (800b2fc <prvCheckForValidListAndQueue+0x54>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d11d      	bne.n	800b2f4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2b8:	4811      	ldr	r0, [pc, #68]	; (800b300 <prvCheckForValidListAndQueue+0x58>)
 800b2ba:	f7fd ff85 	bl	80091c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2be:	4811      	ldr	r0, [pc, #68]	; (800b304 <prvCheckForValidListAndQueue+0x5c>)
 800b2c0:	f7fd ff82 	bl	80091c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2c4:	4b10      	ldr	r3, [pc, #64]	; (800b308 <prvCheckForValidListAndQueue+0x60>)
 800b2c6:	4a0e      	ldr	r2, [pc, #56]	; (800b300 <prvCheckForValidListAndQueue+0x58>)
 800b2c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2ca:	4b10      	ldr	r3, [pc, #64]	; (800b30c <prvCheckForValidListAndQueue+0x64>)
 800b2cc:	4a0d      	ldr	r2, [pc, #52]	; (800b304 <prvCheckForValidListAndQueue+0x5c>)
 800b2ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	210c      	movs	r1, #12
 800b2d4:	200a      	movs	r0, #10
 800b2d6:	f7fe f893 	bl	8009400 <xQueueGenericCreate>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	4a07      	ldr	r2, [pc, #28]	; (800b2fc <prvCheckForValidListAndQueue+0x54>)
 800b2de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2e0:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <prvCheckForValidListAndQueue+0x54>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <prvCheckForValidListAndQueue+0x54>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4908      	ldr	r1, [pc, #32]	; (800b310 <prvCheckForValidListAndQueue+0x68>)
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fcfa 	bl	8009ce8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2f4:	f000 f96e 	bl	800b5d4 <vPortExitCritical>
}
 800b2f8:	bf00      	nop
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20000870 	.word	0x20000870
 800b300:	20000840 	.word	0x20000840
 800b304:	20000854 	.word	0x20000854
 800b308:	20000868 	.word	0x20000868
 800b30c:	2000086c 	.word	0x2000086c
 800b310:	080107b0 	.word	0x080107b0

0800b314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3b04      	subs	r3, #4
 800b324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3b04      	subs	r3, #4
 800b332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f023 0201 	bic.w	r2, r3, #1
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3b04      	subs	r3, #4
 800b342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b344:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <pxPortInitialiseStack+0x64>)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3b14      	subs	r3, #20
 800b34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3b04      	subs	r3, #4
 800b35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f06f 0202 	mvn.w	r2, #2
 800b362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3b20      	subs	r3, #32
 800b368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b36a:	68fb      	ldr	r3, [r7, #12]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	0800b37d 	.word	0x0800b37d

0800b37c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b386:	4b12      	ldr	r3, [pc, #72]	; (800b3d0 <prvTaskExitError+0x54>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38e:	d00a      	beq.n	800b3a6 <prvTaskExitError+0x2a>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	60fb      	str	r3, [r7, #12]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <prvTaskExitError+0x28>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	60bb      	str	r3, [r7, #8]
}
 800b3b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3ba:	bf00      	nop
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0fc      	beq.n	800b3bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	20000040 	.word	0x20000040
	...

0800b3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3e0:	4b07      	ldr	r3, [pc, #28]	; (800b400 <pxCurrentTCBConst2>)
 800b3e2:	6819      	ldr	r1, [r3, #0]
 800b3e4:	6808      	ldr	r0, [r1, #0]
 800b3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	f380 8809 	msr	PSP, r0
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f04f 0000 	mov.w	r0, #0
 800b3f6:	f380 8811 	msr	BASEPRI, r0
 800b3fa:	4770      	bx	lr
 800b3fc:	f3af 8000 	nop.w

0800b400 <pxCurrentTCBConst2>:
 800b400:	20000674 	.word	0x20000674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop

0800b408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b408:	4808      	ldr	r0, [pc, #32]	; (800b42c <prvPortStartFirstTask+0x24>)
 800b40a:	6800      	ldr	r0, [r0, #0]
 800b40c:	6800      	ldr	r0, [r0, #0]
 800b40e:	f380 8808 	msr	MSP, r0
 800b412:	f04f 0000 	mov.w	r0, #0
 800b416:	f380 8814 	msr	CONTROL, r0
 800b41a:	b662      	cpsie	i
 800b41c:	b661      	cpsie	f
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	df00      	svc	0
 800b428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b42a:	bf00      	nop
 800b42c:	e000ed08 	.word	0xe000ed08

0800b430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b436:	4b46      	ldr	r3, [pc, #280]	; (800b550 <xPortStartScheduler+0x120>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a46      	ldr	r2, [pc, #280]	; (800b554 <xPortStartScheduler+0x124>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d10a      	bne.n	800b456 <xPortStartScheduler+0x26>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	613b      	str	r3, [r7, #16]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b456:	4b3e      	ldr	r3, [pc, #248]	; (800b550 <xPortStartScheduler+0x120>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a3f      	ldr	r2, [pc, #252]	; (800b558 <xPortStartScheduler+0x128>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d10a      	bne.n	800b476 <xPortStartScheduler+0x46>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	60fb      	str	r3, [r7, #12]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b476:	4b39      	ldr	r3, [pc, #228]	; (800b55c <xPortStartScheduler+0x12c>)
 800b478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	22ff      	movs	r2, #255	; 0xff
 800b486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	4b31      	ldr	r3, [pc, #196]	; (800b560 <xPortStartScheduler+0x130>)
 800b49c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b49e:	4b31      	ldr	r3, [pc, #196]	; (800b564 <xPortStartScheduler+0x134>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4a4:	e009      	b.n	800b4ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b4a6:	4b2f      	ldr	r3, [pc, #188]	; (800b564 <xPortStartScheduler+0x134>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4a2d      	ldr	r2, [pc, #180]	; (800b564 <xPortStartScheduler+0x134>)
 800b4ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4ba:	78fb      	ldrb	r3, [r7, #3]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c2:	2b80      	cmp	r3, #128	; 0x80
 800b4c4:	d0ef      	beq.n	800b4a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4c6:	4b27      	ldr	r3, [pc, #156]	; (800b564 <xPortStartScheduler+0x134>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f1c3 0307 	rsb	r3, r3, #7
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d00a      	beq.n	800b4e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	60bb      	str	r3, [r7, #8]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4e8:	4b1e      	ldr	r3, [pc, #120]	; (800b564 <xPortStartScheduler+0x134>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	021b      	lsls	r3, r3, #8
 800b4ee:	4a1d      	ldr	r2, [pc, #116]	; (800b564 <xPortStartScheduler+0x134>)
 800b4f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4f2:	4b1c      	ldr	r3, [pc, #112]	; (800b564 <xPortStartScheduler+0x134>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4fa:	4a1a      	ldr	r2, [pc, #104]	; (800b564 <xPortStartScheduler+0x134>)
 800b4fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	b2da      	uxtb	r2, r3
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b506:	4b18      	ldr	r3, [pc, #96]	; (800b568 <xPortStartScheduler+0x138>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a17      	ldr	r2, [pc, #92]	; (800b568 <xPortStartScheduler+0x138>)
 800b50c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b512:	4b15      	ldr	r3, [pc, #84]	; (800b568 <xPortStartScheduler+0x138>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a14      	ldr	r2, [pc, #80]	; (800b568 <xPortStartScheduler+0x138>)
 800b518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b51c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b51e:	f000 f8dd 	bl	800b6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b522:	4b12      	ldr	r3, [pc, #72]	; (800b56c <xPortStartScheduler+0x13c>)
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b528:	f000 f8fc 	bl	800b724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b52c:	4b10      	ldr	r3, [pc, #64]	; (800b570 <xPortStartScheduler+0x140>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a0f      	ldr	r2, [pc, #60]	; (800b570 <xPortStartScheduler+0x140>)
 800b532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b538:	f7ff ff66 	bl	800b408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b53c:	f7ff f886 	bl	800a64c <vTaskSwitchContext>
	prvTaskExitError();
 800b540:	f7ff ff1c 	bl	800b37c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	e000ed00 	.word	0xe000ed00
 800b554:	410fc271 	.word	0x410fc271
 800b558:	410fc270 	.word	0x410fc270
 800b55c:	e000e400 	.word	0xe000e400
 800b560:	2000087c 	.word	0x2000087c
 800b564:	20000880 	.word	0x20000880
 800b568:	e000ed20 	.word	0xe000ed20
 800b56c:	20000040 	.word	0x20000040
 800b570:	e000ef34 	.word	0xe000ef34

0800b574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	607b      	str	r3, [r7, #4]
}
 800b58c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b58e:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <vPortEnterCritical+0x58>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3301      	adds	r3, #1
 800b594:	4a0d      	ldr	r2, [pc, #52]	; (800b5cc <vPortEnterCritical+0x58>)
 800b596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b598:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <vPortEnterCritical+0x58>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d10f      	bne.n	800b5c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <vPortEnterCritical+0x5c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	603b      	str	r3, [r7, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <vPortEnterCritical+0x4a>
	}
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	20000040 	.word	0x20000040
 800b5d0:	e000ed04 	.word	0xe000ed04

0800b5d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5da:	4b12      	ldr	r3, [pc, #72]	; (800b624 <vPortExitCritical+0x50>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <vPortExitCritical+0x24>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	607b      	str	r3, [r7, #4]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <vPortExitCritical+0x50>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	4a09      	ldr	r2, [pc, #36]	; (800b624 <vPortExitCritical+0x50>)
 800b600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b602:	4b08      	ldr	r3, [pc, #32]	; (800b624 <vPortExitCritical+0x50>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d105      	bne.n	800b616 <vPortExitCritical+0x42>
 800b60a:	2300      	movs	r3, #0
 800b60c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	f383 8811 	msr	BASEPRI, r3
}
 800b614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20000040 	.word	0x20000040
	...

0800b630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b630:	f3ef 8009 	mrs	r0, PSP
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	4b15      	ldr	r3, [pc, #84]	; (800b690 <pxCurrentTCBConst>)
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	f01e 0f10 	tst.w	lr, #16
 800b640:	bf08      	it	eq
 800b642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64a:	6010      	str	r0, [r2, #0]
 800b64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b650:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b654:	f380 8811 	msr	BASEPRI, r0
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f7fe fff4 	bl	800a64c <vTaskSwitchContext>
 800b664:	f04f 0000 	mov.w	r0, #0
 800b668:	f380 8811 	msr	BASEPRI, r0
 800b66c:	bc09      	pop	{r0, r3}
 800b66e:	6819      	ldr	r1, [r3, #0]
 800b670:	6808      	ldr	r0, [r1, #0]
 800b672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b676:	f01e 0f10 	tst.w	lr, #16
 800b67a:	bf08      	it	eq
 800b67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b680:	f380 8809 	msr	PSP, r0
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	f3af 8000 	nop.w

0800b690 <pxCurrentTCBConst>:
 800b690:	20000674 	.word	0x20000674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop

0800b698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	607b      	str	r3, [r7, #4]
}
 800b6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6b2:	f7fe ff13 	bl	800a4dc <xTaskIncrementTick>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6bc:	4b06      	ldr	r3, [pc, #24]	; (800b6d8 <SysTick_Handler+0x40>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f383 8811 	msr	BASEPRI, r3
}
 800b6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6e0:	4b0b      	ldr	r3, [pc, #44]	; (800b710 <vPortSetupTimerInterrupt+0x34>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <vPortSetupTimerInterrupt+0x38>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6ec:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <vPortSetupTimerInterrupt+0x3c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <vPortSetupTimerInterrupt+0x40>)
 800b6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f6:	099b      	lsrs	r3, r3, #6
 800b6f8:	4a09      	ldr	r2, [pc, #36]	; (800b720 <vPortSetupTimerInterrupt+0x44>)
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6fe:	4b04      	ldr	r3, [pc, #16]	; (800b710 <vPortSetupTimerInterrupt+0x34>)
 800b700:	2207      	movs	r2, #7
 800b702:	601a      	str	r2, [r3, #0]
}
 800b704:	bf00      	nop
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	e000e010 	.word	0xe000e010
 800b714:	e000e018 	.word	0xe000e018
 800b718:	20000034 	.word	0x20000034
 800b71c:	10624dd3 	.word	0x10624dd3
 800b720:	e000e014 	.word	0xe000e014

0800b724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b734 <vPortEnableVFP+0x10>
 800b728:	6801      	ldr	r1, [r0, #0]
 800b72a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b72e:	6001      	str	r1, [r0, #0]
 800b730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b732:	bf00      	nop
 800b734:	e000ed88 	.word	0xe000ed88

0800b738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b73e:	f3ef 8305 	mrs	r3, IPSR
 800b742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b0f      	cmp	r3, #15
 800b748:	d914      	bls.n	800b774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b74a:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <vPortValidateInterruptPriority+0x70>)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4413      	add	r3, r2
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b754:	4b15      	ldr	r3, [pc, #84]	; (800b7ac <vPortValidateInterruptPriority+0x74>)
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	7afa      	ldrb	r2, [r7, #11]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d20a      	bcs.n	800b774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	607b      	str	r3, [r7, #4]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b774:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <vPortValidateInterruptPriority+0x78>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b77c:	4b0d      	ldr	r3, [pc, #52]	; (800b7b4 <vPortValidateInterruptPriority+0x7c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	d90a      	bls.n	800b79a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	603b      	str	r3, [r7, #0]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <vPortValidateInterruptPriority+0x60>
	}
 800b79a:	bf00      	nop
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	e000e3f0 	.word	0xe000e3f0
 800b7ac:	2000087c 	.word	0x2000087c
 800b7b0:	e000ed0c 	.word	0xe000ed0c
 800b7b4:	20000880 	.word	0x20000880

0800b7b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08a      	sub	sp, #40	; 0x28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7c4:	f7fe fdd0 	bl	800a368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7c8:	4b58      	ldr	r3, [pc, #352]	; (800b92c <pvPortMalloc+0x174>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7d0:	f000 f910 	bl	800b9f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7d4:	4b56      	ldr	r3, [pc, #344]	; (800b930 <pvPortMalloc+0x178>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f040 808e 	bne.w	800b8fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01d      	beq.n	800b824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7e8:	2208      	movs	r2, #8
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f003 0307 	and.w	r3, r3, #7
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d014      	beq.n	800b824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f023 0307 	bic.w	r3, r3, #7
 800b800:	3308      	adds	r3, #8
 800b802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <pvPortMalloc+0x6c>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	617b      	str	r3, [r7, #20]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d069      	beq.n	800b8fe <pvPortMalloc+0x146>
 800b82a:	4b42      	ldr	r3, [pc, #264]	; (800b934 <pvPortMalloc+0x17c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	429a      	cmp	r2, r3
 800b832:	d864      	bhi.n	800b8fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b834:	4b40      	ldr	r3, [pc, #256]	; (800b938 <pvPortMalloc+0x180>)
 800b836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b838:	4b3f      	ldr	r3, [pc, #252]	; (800b938 <pvPortMalloc+0x180>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b83e:	e004      	b.n	800b84a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d903      	bls.n	800b85c <pvPortMalloc+0xa4>
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1f1      	bne.n	800b840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b85c:	4b33      	ldr	r3, [pc, #204]	; (800b92c <pvPortMalloc+0x174>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b862:	429a      	cmp	r2, r3
 800b864:	d04b      	beq.n	800b8fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2208      	movs	r2, #8
 800b86c:	4413      	add	r3, r2
 800b86e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	2308      	movs	r3, #8
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	429a      	cmp	r2, r3
 800b886:	d91f      	bls.n	800b8c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4413      	add	r3, r2
 800b88e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	613b      	str	r3, [r7, #16]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	1ad2      	subs	r2, r2, r3
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8c2:	69b8      	ldr	r0, [r7, #24]
 800b8c4:	f000 f8f8 	bl	800bab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8c8:	4b1a      	ldr	r3, [pc, #104]	; (800b934 <pvPortMalloc+0x17c>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	4a18      	ldr	r2, [pc, #96]	; (800b934 <pvPortMalloc+0x17c>)
 800b8d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8d6:	4b17      	ldr	r3, [pc, #92]	; (800b934 <pvPortMalloc+0x17c>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b18      	ldr	r3, [pc, #96]	; (800b93c <pvPortMalloc+0x184>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d203      	bcs.n	800b8ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8e2:	4b14      	ldr	r3, [pc, #80]	; (800b934 <pvPortMalloc+0x17c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a15      	ldr	r2, [pc, #84]	; (800b93c <pvPortMalloc+0x184>)
 800b8e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	4b10      	ldr	r3, [pc, #64]	; (800b930 <pvPortMalloc+0x178>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8fe:	f7fe fd41 	bl	800a384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	f003 0307 	and.w	r3, r3, #7
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00a      	beq.n	800b922 <pvPortMalloc+0x16a>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	60fb      	str	r3, [r7, #12]
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <pvPortMalloc+0x168>
	return pvReturn;
 800b922:	69fb      	ldr	r3, [r7, #28]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3728      	adds	r7, #40	; 0x28
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2001348c 	.word	0x2001348c
 800b930:	20013498 	.word	0x20013498
 800b934:	20013490 	.word	0x20013490
 800b938:	20013484 	.word	0x20013484
 800b93c:	20013494 	.word	0x20013494

0800b940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d048      	beq.n	800b9e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b952:	2308      	movs	r3, #8
 800b954:	425b      	negs	r3, r3
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4413      	add	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	4b21      	ldr	r3, [pc, #132]	; (800b9ec <vPortFree+0xac>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4013      	ands	r3, r2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <vPortFree+0x44>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	60fb      	str	r3, [r7, #12]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <vPortFree+0x62>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60bb      	str	r3, [r7, #8]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	4b11      	ldr	r3, [pc, #68]	; (800b9ec <vPortFree+0xac>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d019      	beq.n	800b9e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d115      	bne.n	800b9e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	; (800b9ec <vPortFree+0xac>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	43db      	mvns	r3, r3
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9c8:	f7fe fcce 	bl	800a368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <vPortFree+0xb0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4a06      	ldr	r2, [pc, #24]	; (800b9f0 <vPortFree+0xb0>)
 800b9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9da:	6938      	ldr	r0, [r7, #16]
 800b9dc:	f000 f86c 	bl	800bab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b9e0:	f7fe fcd0 	bl	800a384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9e4:	bf00      	nop
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20013498 	.word	0x20013498
 800b9f0:	20013490 	.word	0x20013490

0800b9f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9fa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800b9fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba00:	4b27      	ldr	r3, [pc, #156]	; (800baa0 <prvHeapInit+0xac>)
 800ba02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f003 0307 	and.w	r3, r3, #7
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00c      	beq.n	800ba28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3307      	adds	r3, #7
 800ba12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f023 0307 	bic.w	r3, r3, #7
 800ba1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	4a1f      	ldr	r2, [pc, #124]	; (800baa0 <prvHeapInit+0xac>)
 800ba24:	4413      	add	r3, r2
 800ba26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba2c:	4a1d      	ldr	r2, [pc, #116]	; (800baa4 <prvHeapInit+0xb0>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba32:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <prvHeapInit+0xb0>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba40:	2208      	movs	r2, #8
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	1a9b      	subs	r3, r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0307 	bic.w	r3, r3, #7
 800ba4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4a15      	ldr	r2, [pc, #84]	; (800baa8 <prvHeapInit+0xb4>)
 800ba54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba56:	4b14      	ldr	r3, [pc, #80]	; (800baa8 <prvHeapInit+0xb4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba5e:	4b12      	ldr	r3, [pc, #72]	; (800baa8 <prvHeapInit+0xb4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba74:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <prvHeapInit+0xb4>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	4a0a      	ldr	r2, [pc, #40]	; (800baac <prvHeapInit+0xb8>)
 800ba82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <prvHeapInit+0xbc>)
 800ba8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba8c:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <prvHeapInit+0xc0>)
 800ba8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba92:	601a      	str	r2, [r3, #0]
}
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	20000884 	.word	0x20000884
 800baa4:	20013484 	.word	0x20013484
 800baa8:	2001348c 	.word	0x2001348c
 800baac:	20013494 	.word	0x20013494
 800bab0:	20013490 	.word	0x20013490
 800bab4:	20013498 	.word	0x20013498

0800bab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bac0:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <prvInsertBlockIntoFreeList+0xac>)
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e002      	b.n	800bacc <prvInsertBlockIntoFreeList+0x14>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d8f7      	bhi.n	800bac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	4413      	add	r3, r2
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d108      	bne.n	800bafa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	441a      	add	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	441a      	add	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d118      	bne.n	800bb40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <prvInsertBlockIntoFreeList+0xb0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d00d      	beq.n	800bb36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	441a      	add	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	e008      	b.n	800bb48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb36:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <prvInsertBlockIntoFreeList+0xb0>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	e003      	b.n	800bb48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d002      	beq.n	800bb56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20013484 	.word	0x20013484
 800bb68:	2001348c 	.word	0x2001348c

0800bb6c <__errno>:
 800bb6c:	4b01      	ldr	r3, [pc, #4]	; (800bb74 <__errno+0x8>)
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	20000044 	.word	0x20000044

0800bb78 <__libc_init_array>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	4d0d      	ldr	r5, [pc, #52]	; (800bbb0 <__libc_init_array+0x38>)
 800bb7c:	4c0d      	ldr	r4, [pc, #52]	; (800bbb4 <__libc_init_array+0x3c>)
 800bb7e:	1b64      	subs	r4, r4, r5
 800bb80:	10a4      	asrs	r4, r4, #2
 800bb82:	2600      	movs	r6, #0
 800bb84:	42a6      	cmp	r6, r4
 800bb86:	d109      	bne.n	800bb9c <__libc_init_array+0x24>
 800bb88:	4d0b      	ldr	r5, [pc, #44]	; (800bbb8 <__libc_init_array+0x40>)
 800bb8a:	4c0c      	ldr	r4, [pc, #48]	; (800bbbc <__libc_init_array+0x44>)
 800bb8c:	f004 fd5a 	bl	8010644 <_init>
 800bb90:	1b64      	subs	r4, r4, r5
 800bb92:	10a4      	asrs	r4, r4, #2
 800bb94:	2600      	movs	r6, #0
 800bb96:	42a6      	cmp	r6, r4
 800bb98:	d105      	bne.n	800bba6 <__libc_init_array+0x2e>
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bba0:	4798      	blx	r3
 800bba2:	3601      	adds	r6, #1
 800bba4:	e7ee      	b.n	800bb84 <__libc_init_array+0xc>
 800bba6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbaa:	4798      	blx	r3
 800bbac:	3601      	adds	r6, #1
 800bbae:	e7f2      	b.n	800bb96 <__libc_init_array+0x1e>
 800bbb0:	08010c94 	.word	0x08010c94
 800bbb4:	08010c94 	.word	0x08010c94
 800bbb8:	08010c94 	.word	0x08010c94
 800bbbc:	08010c98 	.word	0x08010c98

0800bbc0 <malloc>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <malloc+0xc>)
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f000 b88d 	b.w	800bce4 <_malloc_r>
 800bbca:	bf00      	nop
 800bbcc:	20000044 	.word	0x20000044

0800bbd0 <free>:
 800bbd0:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <free+0xc>)
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	f000 b819 	b.w	800bc0c <_free_r>
 800bbda:	bf00      	nop
 800bbdc:	20000044 	.word	0x20000044

0800bbe0 <memcpy>:
 800bbe0:	440a      	add	r2, r1
 800bbe2:	4291      	cmp	r1, r2
 800bbe4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbe8:	d100      	bne.n	800bbec <memcpy+0xc>
 800bbea:	4770      	bx	lr
 800bbec:	b510      	push	{r4, lr}
 800bbee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbf6:	4291      	cmp	r1, r2
 800bbf8:	d1f9      	bne.n	800bbee <memcpy+0xe>
 800bbfa:	bd10      	pop	{r4, pc}

0800bbfc <memset>:
 800bbfc:	4402      	add	r2, r0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d100      	bne.n	800bc06 <memset+0xa>
 800bc04:	4770      	bx	lr
 800bc06:	f803 1b01 	strb.w	r1, [r3], #1
 800bc0a:	e7f9      	b.n	800bc00 <memset+0x4>

0800bc0c <_free_r>:
 800bc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc0e:	2900      	cmp	r1, #0
 800bc10:	d044      	beq.n	800bc9c <_free_r+0x90>
 800bc12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc16:	9001      	str	r0, [sp, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc1e:	bfb8      	it	lt
 800bc20:	18e4      	addlt	r4, r4, r3
 800bc22:	f003 fbe7 	bl	800f3f4 <__malloc_lock>
 800bc26:	4a1e      	ldr	r2, [pc, #120]	; (800bca0 <_free_r+0x94>)
 800bc28:	9801      	ldr	r0, [sp, #4]
 800bc2a:	6813      	ldr	r3, [r2, #0]
 800bc2c:	b933      	cbnz	r3, 800bc3c <_free_r+0x30>
 800bc2e:	6063      	str	r3, [r4, #4]
 800bc30:	6014      	str	r4, [r2, #0]
 800bc32:	b003      	add	sp, #12
 800bc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc38:	f003 bbe2 	b.w	800f400 <__malloc_unlock>
 800bc3c:	42a3      	cmp	r3, r4
 800bc3e:	d908      	bls.n	800bc52 <_free_r+0x46>
 800bc40:	6825      	ldr	r5, [r4, #0]
 800bc42:	1961      	adds	r1, r4, r5
 800bc44:	428b      	cmp	r3, r1
 800bc46:	bf01      	itttt	eq
 800bc48:	6819      	ldreq	r1, [r3, #0]
 800bc4a:	685b      	ldreq	r3, [r3, #4]
 800bc4c:	1949      	addeq	r1, r1, r5
 800bc4e:	6021      	streq	r1, [r4, #0]
 800bc50:	e7ed      	b.n	800bc2e <_free_r+0x22>
 800bc52:	461a      	mov	r2, r3
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	b10b      	cbz	r3, 800bc5c <_free_r+0x50>
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	d9fa      	bls.n	800bc52 <_free_r+0x46>
 800bc5c:	6811      	ldr	r1, [r2, #0]
 800bc5e:	1855      	adds	r5, r2, r1
 800bc60:	42a5      	cmp	r5, r4
 800bc62:	d10b      	bne.n	800bc7c <_free_r+0x70>
 800bc64:	6824      	ldr	r4, [r4, #0]
 800bc66:	4421      	add	r1, r4
 800bc68:	1854      	adds	r4, r2, r1
 800bc6a:	42a3      	cmp	r3, r4
 800bc6c:	6011      	str	r1, [r2, #0]
 800bc6e:	d1e0      	bne.n	800bc32 <_free_r+0x26>
 800bc70:	681c      	ldr	r4, [r3, #0]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	6053      	str	r3, [r2, #4]
 800bc76:	4421      	add	r1, r4
 800bc78:	6011      	str	r1, [r2, #0]
 800bc7a:	e7da      	b.n	800bc32 <_free_r+0x26>
 800bc7c:	d902      	bls.n	800bc84 <_free_r+0x78>
 800bc7e:	230c      	movs	r3, #12
 800bc80:	6003      	str	r3, [r0, #0]
 800bc82:	e7d6      	b.n	800bc32 <_free_r+0x26>
 800bc84:	6825      	ldr	r5, [r4, #0]
 800bc86:	1961      	adds	r1, r4, r5
 800bc88:	428b      	cmp	r3, r1
 800bc8a:	bf04      	itt	eq
 800bc8c:	6819      	ldreq	r1, [r3, #0]
 800bc8e:	685b      	ldreq	r3, [r3, #4]
 800bc90:	6063      	str	r3, [r4, #4]
 800bc92:	bf04      	itt	eq
 800bc94:	1949      	addeq	r1, r1, r5
 800bc96:	6021      	streq	r1, [r4, #0]
 800bc98:	6054      	str	r4, [r2, #4]
 800bc9a:	e7ca      	b.n	800bc32 <_free_r+0x26>
 800bc9c:	b003      	add	sp, #12
 800bc9e:	bd30      	pop	{r4, r5, pc}
 800bca0:	2001349c 	.word	0x2001349c

0800bca4 <sbrk_aligned>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4e0e      	ldr	r6, [pc, #56]	; (800bce0 <sbrk_aligned+0x3c>)
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6831      	ldr	r1, [r6, #0]
 800bcac:	4605      	mov	r5, r0
 800bcae:	b911      	cbnz	r1, 800bcb6 <sbrk_aligned+0x12>
 800bcb0:	f000 ff94 	bl	800cbdc <_sbrk_r>
 800bcb4:	6030      	str	r0, [r6, #0]
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f000 ff8f 	bl	800cbdc <_sbrk_r>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d00a      	beq.n	800bcd8 <sbrk_aligned+0x34>
 800bcc2:	1cc4      	adds	r4, r0, #3
 800bcc4:	f024 0403 	bic.w	r4, r4, #3
 800bcc8:	42a0      	cmp	r0, r4
 800bcca:	d007      	beq.n	800bcdc <sbrk_aligned+0x38>
 800bccc:	1a21      	subs	r1, r4, r0
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f000 ff84 	bl	800cbdc <_sbrk_r>
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d101      	bne.n	800bcdc <sbrk_aligned+0x38>
 800bcd8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcdc:	4620      	mov	r0, r4
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	200134a0 	.word	0x200134a0

0800bce4 <_malloc_r>:
 800bce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce8:	1ccd      	adds	r5, r1, #3
 800bcea:	f025 0503 	bic.w	r5, r5, #3
 800bcee:	3508      	adds	r5, #8
 800bcf0:	2d0c      	cmp	r5, #12
 800bcf2:	bf38      	it	cc
 800bcf4:	250c      	movcc	r5, #12
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	db01      	blt.n	800bd00 <_malloc_r+0x1c>
 800bcfc:	42a9      	cmp	r1, r5
 800bcfe:	d905      	bls.n	800bd0c <_malloc_r+0x28>
 800bd00:	230c      	movs	r3, #12
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	2600      	movs	r6, #0
 800bd06:	4630      	mov	r0, r6
 800bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0c:	4e2e      	ldr	r6, [pc, #184]	; (800bdc8 <_malloc_r+0xe4>)
 800bd0e:	f003 fb71 	bl	800f3f4 <__malloc_lock>
 800bd12:	6833      	ldr	r3, [r6, #0]
 800bd14:	461c      	mov	r4, r3
 800bd16:	bb34      	cbnz	r4, 800bd66 <_malloc_r+0x82>
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	f7ff ffc2 	bl	800bca4 <sbrk_aligned>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	4604      	mov	r4, r0
 800bd24:	d14d      	bne.n	800bdc2 <_malloc_r+0xde>
 800bd26:	6834      	ldr	r4, [r6, #0]
 800bd28:	4626      	mov	r6, r4
 800bd2a:	2e00      	cmp	r6, #0
 800bd2c:	d140      	bne.n	800bdb0 <_malloc_r+0xcc>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	4631      	mov	r1, r6
 800bd32:	4638      	mov	r0, r7
 800bd34:	eb04 0803 	add.w	r8, r4, r3
 800bd38:	f000 ff50 	bl	800cbdc <_sbrk_r>
 800bd3c:	4580      	cmp	r8, r0
 800bd3e:	d13a      	bne.n	800bdb6 <_malloc_r+0xd2>
 800bd40:	6821      	ldr	r1, [r4, #0]
 800bd42:	3503      	adds	r5, #3
 800bd44:	1a6d      	subs	r5, r5, r1
 800bd46:	f025 0503 	bic.w	r5, r5, #3
 800bd4a:	3508      	adds	r5, #8
 800bd4c:	2d0c      	cmp	r5, #12
 800bd4e:	bf38      	it	cc
 800bd50:	250c      	movcc	r5, #12
 800bd52:	4629      	mov	r1, r5
 800bd54:	4638      	mov	r0, r7
 800bd56:	f7ff ffa5 	bl	800bca4 <sbrk_aligned>
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d02b      	beq.n	800bdb6 <_malloc_r+0xd2>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	442b      	add	r3, r5
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	e00e      	b.n	800bd84 <_malloc_r+0xa0>
 800bd66:	6822      	ldr	r2, [r4, #0]
 800bd68:	1b52      	subs	r2, r2, r5
 800bd6a:	d41e      	bmi.n	800bdaa <_malloc_r+0xc6>
 800bd6c:	2a0b      	cmp	r2, #11
 800bd6e:	d916      	bls.n	800bd9e <_malloc_r+0xba>
 800bd70:	1961      	adds	r1, r4, r5
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	6025      	str	r5, [r4, #0]
 800bd76:	bf18      	it	ne
 800bd78:	6059      	strne	r1, [r3, #4]
 800bd7a:	6863      	ldr	r3, [r4, #4]
 800bd7c:	bf08      	it	eq
 800bd7e:	6031      	streq	r1, [r6, #0]
 800bd80:	5162      	str	r2, [r4, r5]
 800bd82:	604b      	str	r3, [r1, #4]
 800bd84:	4638      	mov	r0, r7
 800bd86:	f104 060b 	add.w	r6, r4, #11
 800bd8a:	f003 fb39 	bl	800f400 <__malloc_unlock>
 800bd8e:	f026 0607 	bic.w	r6, r6, #7
 800bd92:	1d23      	adds	r3, r4, #4
 800bd94:	1af2      	subs	r2, r6, r3
 800bd96:	d0b6      	beq.n	800bd06 <_malloc_r+0x22>
 800bd98:	1b9b      	subs	r3, r3, r6
 800bd9a:	50a3      	str	r3, [r4, r2]
 800bd9c:	e7b3      	b.n	800bd06 <_malloc_r+0x22>
 800bd9e:	6862      	ldr	r2, [r4, #4]
 800bda0:	42a3      	cmp	r3, r4
 800bda2:	bf0c      	ite	eq
 800bda4:	6032      	streq	r2, [r6, #0]
 800bda6:	605a      	strne	r2, [r3, #4]
 800bda8:	e7ec      	b.n	800bd84 <_malloc_r+0xa0>
 800bdaa:	4623      	mov	r3, r4
 800bdac:	6864      	ldr	r4, [r4, #4]
 800bdae:	e7b2      	b.n	800bd16 <_malloc_r+0x32>
 800bdb0:	4634      	mov	r4, r6
 800bdb2:	6876      	ldr	r6, [r6, #4]
 800bdb4:	e7b9      	b.n	800bd2a <_malloc_r+0x46>
 800bdb6:	230c      	movs	r3, #12
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	4638      	mov	r0, r7
 800bdbc:	f003 fb20 	bl	800f400 <__malloc_unlock>
 800bdc0:	e7a1      	b.n	800bd06 <_malloc_r+0x22>
 800bdc2:	6025      	str	r5, [r4, #0]
 800bdc4:	e7de      	b.n	800bd84 <_malloc_r+0xa0>
 800bdc6:	bf00      	nop
 800bdc8:	2001349c 	.word	0x2001349c

0800bdcc <__cvt>:
 800bdcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd0:	ec55 4b10 	vmov	r4, r5, d0
 800bdd4:	2d00      	cmp	r5, #0
 800bdd6:	460e      	mov	r6, r1
 800bdd8:	4619      	mov	r1, r3
 800bdda:	462b      	mov	r3, r5
 800bddc:	bfbb      	ittet	lt
 800bdde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bde2:	461d      	movlt	r5, r3
 800bde4:	2300      	movge	r3, #0
 800bde6:	232d      	movlt	r3, #45	; 0x2d
 800bde8:	700b      	strb	r3, [r1, #0]
 800bdea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bdf0:	4691      	mov	r9, r2
 800bdf2:	f023 0820 	bic.w	r8, r3, #32
 800bdf6:	bfbc      	itt	lt
 800bdf8:	4622      	movlt	r2, r4
 800bdfa:	4614      	movlt	r4, r2
 800bdfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be00:	d005      	beq.n	800be0e <__cvt+0x42>
 800be02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800be06:	d100      	bne.n	800be0a <__cvt+0x3e>
 800be08:	3601      	adds	r6, #1
 800be0a:	2102      	movs	r1, #2
 800be0c:	e000      	b.n	800be10 <__cvt+0x44>
 800be0e:	2103      	movs	r1, #3
 800be10:	ab03      	add	r3, sp, #12
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	ab02      	add	r3, sp, #8
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	ec45 4b10 	vmov	d0, r4, r5
 800be1c:	4653      	mov	r3, sl
 800be1e:	4632      	mov	r2, r6
 800be20:	f001 ff56 	bl	800dcd0 <_dtoa_r>
 800be24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be28:	4607      	mov	r7, r0
 800be2a:	d102      	bne.n	800be32 <__cvt+0x66>
 800be2c:	f019 0f01 	tst.w	r9, #1
 800be30:	d022      	beq.n	800be78 <__cvt+0xac>
 800be32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be36:	eb07 0906 	add.w	r9, r7, r6
 800be3a:	d110      	bne.n	800be5e <__cvt+0x92>
 800be3c:	783b      	ldrb	r3, [r7, #0]
 800be3e:	2b30      	cmp	r3, #48	; 0x30
 800be40:	d10a      	bne.n	800be58 <__cvt+0x8c>
 800be42:	2200      	movs	r2, #0
 800be44:	2300      	movs	r3, #0
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be4e:	b918      	cbnz	r0, 800be58 <__cvt+0x8c>
 800be50:	f1c6 0601 	rsb	r6, r6, #1
 800be54:	f8ca 6000 	str.w	r6, [sl]
 800be58:	f8da 3000 	ldr.w	r3, [sl]
 800be5c:	4499      	add	r9, r3
 800be5e:	2200      	movs	r2, #0
 800be60:	2300      	movs	r3, #0
 800be62:	4620      	mov	r0, r4
 800be64:	4629      	mov	r1, r5
 800be66:	f7f4 fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800be6a:	b108      	cbz	r0, 800be70 <__cvt+0xa4>
 800be6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800be70:	2230      	movs	r2, #48	; 0x30
 800be72:	9b03      	ldr	r3, [sp, #12]
 800be74:	454b      	cmp	r3, r9
 800be76:	d307      	bcc.n	800be88 <__cvt+0xbc>
 800be78:	9b03      	ldr	r3, [sp, #12]
 800be7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be7c:	1bdb      	subs	r3, r3, r7
 800be7e:	4638      	mov	r0, r7
 800be80:	6013      	str	r3, [r2, #0]
 800be82:	b004      	add	sp, #16
 800be84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be88:	1c59      	adds	r1, r3, #1
 800be8a:	9103      	str	r1, [sp, #12]
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	e7f0      	b.n	800be72 <__cvt+0xa6>

0800be90 <__exponent>:
 800be90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be92:	4603      	mov	r3, r0
 800be94:	2900      	cmp	r1, #0
 800be96:	bfb8      	it	lt
 800be98:	4249      	neglt	r1, r1
 800be9a:	f803 2b02 	strb.w	r2, [r3], #2
 800be9e:	bfb4      	ite	lt
 800bea0:	222d      	movlt	r2, #45	; 0x2d
 800bea2:	222b      	movge	r2, #43	; 0x2b
 800bea4:	2909      	cmp	r1, #9
 800bea6:	7042      	strb	r2, [r0, #1]
 800bea8:	dd2a      	ble.n	800bf00 <__exponent+0x70>
 800beaa:	f10d 0407 	add.w	r4, sp, #7
 800beae:	46a4      	mov	ip, r4
 800beb0:	270a      	movs	r7, #10
 800beb2:	46a6      	mov	lr, r4
 800beb4:	460a      	mov	r2, r1
 800beb6:	fb91 f6f7 	sdiv	r6, r1, r7
 800beba:	fb07 1516 	mls	r5, r7, r6, r1
 800bebe:	3530      	adds	r5, #48	; 0x30
 800bec0:	2a63      	cmp	r2, #99	; 0x63
 800bec2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bec6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800beca:	4631      	mov	r1, r6
 800becc:	dcf1      	bgt.n	800beb2 <__exponent+0x22>
 800bece:	3130      	adds	r1, #48	; 0x30
 800bed0:	f1ae 0502 	sub.w	r5, lr, #2
 800bed4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bed8:	1c44      	adds	r4, r0, #1
 800beda:	4629      	mov	r1, r5
 800bedc:	4561      	cmp	r1, ip
 800bede:	d30a      	bcc.n	800bef6 <__exponent+0x66>
 800bee0:	f10d 0209 	add.w	r2, sp, #9
 800bee4:	eba2 020e 	sub.w	r2, r2, lr
 800bee8:	4565      	cmp	r5, ip
 800beea:	bf88      	it	hi
 800beec:	2200      	movhi	r2, #0
 800beee:	4413      	add	r3, r2
 800bef0:	1a18      	subs	r0, r3, r0
 800bef2:	b003      	add	sp, #12
 800bef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800befa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800befe:	e7ed      	b.n	800bedc <__exponent+0x4c>
 800bf00:	2330      	movs	r3, #48	; 0x30
 800bf02:	3130      	adds	r1, #48	; 0x30
 800bf04:	7083      	strb	r3, [r0, #2]
 800bf06:	70c1      	strb	r1, [r0, #3]
 800bf08:	1d03      	adds	r3, r0, #4
 800bf0a:	e7f1      	b.n	800bef0 <__exponent+0x60>

0800bf0c <_printf_float>:
 800bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	ed2d 8b02 	vpush	{d8}
 800bf14:	b08d      	sub	sp, #52	; 0x34
 800bf16:	460c      	mov	r4, r1
 800bf18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf1c:	4616      	mov	r6, r2
 800bf1e:	461f      	mov	r7, r3
 800bf20:	4605      	mov	r5, r0
 800bf22:	f003 f9e9 	bl	800f2f8 <_localeconv_r>
 800bf26:	f8d0 a000 	ldr.w	sl, [r0]
 800bf2a:	4650      	mov	r0, sl
 800bf2c:	f7f4 f950 	bl	80001d0 <strlen>
 800bf30:	2300      	movs	r3, #0
 800bf32:	930a      	str	r3, [sp, #40]	; 0x28
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	9305      	str	r3, [sp, #20]
 800bf38:	f8d8 3000 	ldr.w	r3, [r8]
 800bf3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf40:	3307      	adds	r3, #7
 800bf42:	f023 0307 	bic.w	r3, r3, #7
 800bf46:	f103 0208 	add.w	r2, r3, #8
 800bf4a:	f8c8 2000 	str.w	r2, [r8]
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf5e:	9307      	str	r3, [sp, #28]
 800bf60:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf64:	ee08 0a10 	vmov	s16, r0
 800bf68:	4b9f      	ldr	r3, [pc, #636]	; (800c1e8 <_printf_float+0x2dc>)
 800bf6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf72:	f7f4 fddb 	bl	8000b2c <__aeabi_dcmpun>
 800bf76:	bb88      	cbnz	r0, 800bfdc <_printf_float+0xd0>
 800bf78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf7c:	4b9a      	ldr	r3, [pc, #616]	; (800c1e8 <_printf_float+0x2dc>)
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf82:	f7f4 fdb5 	bl	8000af0 <__aeabi_dcmple>
 800bf86:	bb48      	cbnz	r0, 800bfdc <_printf_float+0xd0>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4640      	mov	r0, r8
 800bf8e:	4649      	mov	r1, r9
 800bf90:	f7f4 fda4 	bl	8000adc <__aeabi_dcmplt>
 800bf94:	b110      	cbz	r0, 800bf9c <_printf_float+0x90>
 800bf96:	232d      	movs	r3, #45	; 0x2d
 800bf98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf9c:	4b93      	ldr	r3, [pc, #588]	; (800c1ec <_printf_float+0x2e0>)
 800bf9e:	4894      	ldr	r0, [pc, #592]	; (800c1f0 <_printf_float+0x2e4>)
 800bfa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bfa4:	bf94      	ite	ls
 800bfa6:	4698      	movls	r8, r3
 800bfa8:	4680      	movhi	r8, r0
 800bfaa:	2303      	movs	r3, #3
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	9b05      	ldr	r3, [sp, #20]
 800bfb0:	f023 0204 	bic.w	r2, r3, #4
 800bfb4:	6022      	str	r2, [r4, #0]
 800bfb6:	f04f 0900 	mov.w	r9, #0
 800bfba:	9700      	str	r7, [sp, #0]
 800bfbc:	4633      	mov	r3, r6
 800bfbe:	aa0b      	add	r2, sp, #44	; 0x2c
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f9d8 	bl	800c378 <_printf_common>
 800bfc8:	3001      	adds	r0, #1
 800bfca:	f040 8090 	bne.w	800c0ee <_printf_float+0x1e2>
 800bfce:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd2:	b00d      	add	sp, #52	; 0x34
 800bfd4:	ecbd 8b02 	vpop	{d8}
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	4642      	mov	r2, r8
 800bfde:	464b      	mov	r3, r9
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	f7f4 fda2 	bl	8000b2c <__aeabi_dcmpun>
 800bfe8:	b140      	cbz	r0, 800bffc <_printf_float+0xf0>
 800bfea:	464b      	mov	r3, r9
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bfbc      	itt	lt
 800bff0:	232d      	movlt	r3, #45	; 0x2d
 800bff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bff6:	487f      	ldr	r0, [pc, #508]	; (800c1f4 <_printf_float+0x2e8>)
 800bff8:	4b7f      	ldr	r3, [pc, #508]	; (800c1f8 <_printf_float+0x2ec>)
 800bffa:	e7d1      	b.n	800bfa0 <_printf_float+0x94>
 800bffc:	6863      	ldr	r3, [r4, #4]
 800bffe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c002:	9206      	str	r2, [sp, #24]
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	d13f      	bne.n	800c088 <_printf_float+0x17c>
 800c008:	2306      	movs	r3, #6
 800c00a:	6063      	str	r3, [r4, #4]
 800c00c:	9b05      	ldr	r3, [sp, #20]
 800c00e:	6861      	ldr	r1, [r4, #4]
 800c010:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c014:	2300      	movs	r3, #0
 800c016:	9303      	str	r3, [sp, #12]
 800c018:	ab0a      	add	r3, sp, #40	; 0x28
 800c01a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c01e:	ab09      	add	r3, sp, #36	; 0x24
 800c020:	ec49 8b10 	vmov	d0, r8, r9
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	6022      	str	r2, [r4, #0]
 800c028:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c02c:	4628      	mov	r0, r5
 800c02e:	f7ff fecd 	bl	800bdcc <__cvt>
 800c032:	9b06      	ldr	r3, [sp, #24]
 800c034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c036:	2b47      	cmp	r3, #71	; 0x47
 800c038:	4680      	mov	r8, r0
 800c03a:	d108      	bne.n	800c04e <_printf_float+0x142>
 800c03c:	1cc8      	adds	r0, r1, #3
 800c03e:	db02      	blt.n	800c046 <_printf_float+0x13a>
 800c040:	6863      	ldr	r3, [r4, #4]
 800c042:	4299      	cmp	r1, r3
 800c044:	dd41      	ble.n	800c0ca <_printf_float+0x1be>
 800c046:	f1ab 0b02 	sub.w	fp, fp, #2
 800c04a:	fa5f fb8b 	uxtb.w	fp, fp
 800c04e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c052:	d820      	bhi.n	800c096 <_printf_float+0x18a>
 800c054:	3901      	subs	r1, #1
 800c056:	465a      	mov	r2, fp
 800c058:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c05c:	9109      	str	r1, [sp, #36]	; 0x24
 800c05e:	f7ff ff17 	bl	800be90 <__exponent>
 800c062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c064:	1813      	adds	r3, r2, r0
 800c066:	2a01      	cmp	r2, #1
 800c068:	4681      	mov	r9, r0
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	dc02      	bgt.n	800c074 <_printf_float+0x168>
 800c06e:	6822      	ldr	r2, [r4, #0]
 800c070:	07d2      	lsls	r2, r2, #31
 800c072:	d501      	bpl.n	800c078 <_printf_float+0x16c>
 800c074:	3301      	adds	r3, #1
 800c076:	6123      	str	r3, [r4, #16]
 800c078:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d09c      	beq.n	800bfba <_printf_float+0xae>
 800c080:	232d      	movs	r3, #45	; 0x2d
 800c082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c086:	e798      	b.n	800bfba <_printf_float+0xae>
 800c088:	9a06      	ldr	r2, [sp, #24]
 800c08a:	2a47      	cmp	r2, #71	; 0x47
 800c08c:	d1be      	bne.n	800c00c <_printf_float+0x100>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1bc      	bne.n	800c00c <_printf_float+0x100>
 800c092:	2301      	movs	r3, #1
 800c094:	e7b9      	b.n	800c00a <_printf_float+0xfe>
 800c096:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c09a:	d118      	bne.n	800c0ce <_printf_float+0x1c2>
 800c09c:	2900      	cmp	r1, #0
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	dd0b      	ble.n	800c0ba <_printf_float+0x1ae>
 800c0a2:	6121      	str	r1, [r4, #16]
 800c0a4:	b913      	cbnz	r3, 800c0ac <_printf_float+0x1a0>
 800c0a6:	6822      	ldr	r2, [r4, #0]
 800c0a8:	07d0      	lsls	r0, r2, #31
 800c0aa:	d502      	bpl.n	800c0b2 <_printf_float+0x1a6>
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	440b      	add	r3, r1
 800c0b0:	6123      	str	r3, [r4, #16]
 800c0b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c0b4:	f04f 0900 	mov.w	r9, #0
 800c0b8:	e7de      	b.n	800c078 <_printf_float+0x16c>
 800c0ba:	b913      	cbnz	r3, 800c0c2 <_printf_float+0x1b6>
 800c0bc:	6822      	ldr	r2, [r4, #0]
 800c0be:	07d2      	lsls	r2, r2, #31
 800c0c0:	d501      	bpl.n	800c0c6 <_printf_float+0x1ba>
 800c0c2:	3302      	adds	r3, #2
 800c0c4:	e7f4      	b.n	800c0b0 <_printf_float+0x1a4>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e7f2      	b.n	800c0b0 <_printf_float+0x1a4>
 800c0ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	db05      	blt.n	800c0e0 <_printf_float+0x1d4>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	6121      	str	r1, [r4, #16]
 800c0d8:	07d8      	lsls	r0, r3, #31
 800c0da:	d5ea      	bpl.n	800c0b2 <_printf_float+0x1a6>
 800c0dc:	1c4b      	adds	r3, r1, #1
 800c0de:	e7e7      	b.n	800c0b0 <_printf_float+0x1a4>
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	bfd4      	ite	le
 800c0e4:	f1c1 0202 	rsble	r2, r1, #2
 800c0e8:	2201      	movgt	r2, #1
 800c0ea:	4413      	add	r3, r2
 800c0ec:	e7e0      	b.n	800c0b0 <_printf_float+0x1a4>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	055a      	lsls	r2, r3, #21
 800c0f2:	d407      	bmi.n	800c104 <_printf_float+0x1f8>
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	4642      	mov	r2, r8
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	47b8      	blx	r7
 800c0fe:	3001      	adds	r0, #1
 800c100:	d12c      	bne.n	800c15c <_printf_float+0x250>
 800c102:	e764      	b.n	800bfce <_printf_float+0xc2>
 800c104:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c108:	f240 80e0 	bls.w	800c2cc <_printf_float+0x3c0>
 800c10c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c110:	2200      	movs	r2, #0
 800c112:	2300      	movs	r3, #0
 800c114:	f7f4 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d034      	beq.n	800c186 <_printf_float+0x27a>
 800c11c:	4a37      	ldr	r2, [pc, #220]	; (800c1fc <_printf_float+0x2f0>)
 800c11e:	2301      	movs	r3, #1
 800c120:	4631      	mov	r1, r6
 800c122:	4628      	mov	r0, r5
 800c124:	47b8      	blx	r7
 800c126:	3001      	adds	r0, #1
 800c128:	f43f af51 	beq.w	800bfce <_printf_float+0xc2>
 800c12c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c130:	429a      	cmp	r2, r3
 800c132:	db02      	blt.n	800c13a <_printf_float+0x22e>
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	07d8      	lsls	r0, r3, #31
 800c138:	d510      	bpl.n	800c15c <_printf_float+0x250>
 800c13a:	ee18 3a10 	vmov	r3, s16
 800c13e:	4652      	mov	r2, sl
 800c140:	4631      	mov	r1, r6
 800c142:	4628      	mov	r0, r5
 800c144:	47b8      	blx	r7
 800c146:	3001      	adds	r0, #1
 800c148:	f43f af41 	beq.w	800bfce <_printf_float+0xc2>
 800c14c:	f04f 0800 	mov.w	r8, #0
 800c150:	f104 091a 	add.w	r9, r4, #26
 800c154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c156:	3b01      	subs	r3, #1
 800c158:	4543      	cmp	r3, r8
 800c15a:	dc09      	bgt.n	800c170 <_printf_float+0x264>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	079b      	lsls	r3, r3, #30
 800c160:	f100 8105 	bmi.w	800c36e <_printf_float+0x462>
 800c164:	68e0      	ldr	r0, [r4, #12]
 800c166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c168:	4298      	cmp	r0, r3
 800c16a:	bfb8      	it	lt
 800c16c:	4618      	movlt	r0, r3
 800c16e:	e730      	b.n	800bfd2 <_printf_float+0xc6>
 800c170:	2301      	movs	r3, #1
 800c172:	464a      	mov	r2, r9
 800c174:	4631      	mov	r1, r6
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	f43f af27 	beq.w	800bfce <_printf_float+0xc2>
 800c180:	f108 0801 	add.w	r8, r8, #1
 800c184:	e7e6      	b.n	800c154 <_printf_float+0x248>
 800c186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dc39      	bgt.n	800c200 <_printf_float+0x2f4>
 800c18c:	4a1b      	ldr	r2, [pc, #108]	; (800c1fc <_printf_float+0x2f0>)
 800c18e:	2301      	movs	r3, #1
 800c190:	4631      	mov	r1, r6
 800c192:	4628      	mov	r0, r5
 800c194:	47b8      	blx	r7
 800c196:	3001      	adds	r0, #1
 800c198:	f43f af19 	beq.w	800bfce <_printf_float+0xc2>
 800c19c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	d102      	bne.n	800c1aa <_printf_float+0x29e>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	07d9      	lsls	r1, r3, #31
 800c1a8:	d5d8      	bpl.n	800c15c <_printf_float+0x250>
 800c1aa:	ee18 3a10 	vmov	r3, s16
 800c1ae:	4652      	mov	r2, sl
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f43f af09 	beq.w	800bfce <_printf_float+0xc2>
 800c1bc:	f04f 0900 	mov.w	r9, #0
 800c1c0:	f104 0a1a 	add.w	sl, r4, #26
 800c1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c6:	425b      	negs	r3, r3
 800c1c8:	454b      	cmp	r3, r9
 800c1ca:	dc01      	bgt.n	800c1d0 <_printf_float+0x2c4>
 800c1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ce:	e792      	b.n	800c0f6 <_printf_float+0x1ea>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	f43f aef7 	beq.w	800bfce <_printf_float+0xc2>
 800c1e0:	f109 0901 	add.w	r9, r9, #1
 800c1e4:	e7ee      	b.n	800c1c4 <_printf_float+0x2b8>
 800c1e6:	bf00      	nop
 800c1e8:	7fefffff 	.word	0x7fefffff
 800c1ec:	080107e0 	.word	0x080107e0
 800c1f0:	080107e4 	.word	0x080107e4
 800c1f4:	080107ec 	.word	0x080107ec
 800c1f8:	080107e8 	.word	0x080107e8
 800c1fc:	080107f0 	.word	0x080107f0
 800c200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c204:	429a      	cmp	r2, r3
 800c206:	bfa8      	it	ge
 800c208:	461a      	movge	r2, r3
 800c20a:	2a00      	cmp	r2, #0
 800c20c:	4691      	mov	r9, r2
 800c20e:	dc37      	bgt.n	800c280 <_printf_float+0x374>
 800c210:	f04f 0b00 	mov.w	fp, #0
 800c214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c218:	f104 021a 	add.w	r2, r4, #26
 800c21c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c21e:	9305      	str	r3, [sp, #20]
 800c220:	eba3 0309 	sub.w	r3, r3, r9
 800c224:	455b      	cmp	r3, fp
 800c226:	dc33      	bgt.n	800c290 <_printf_float+0x384>
 800c228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c22c:	429a      	cmp	r2, r3
 800c22e:	db3b      	blt.n	800c2a8 <_printf_float+0x39c>
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	07da      	lsls	r2, r3, #31
 800c234:	d438      	bmi.n	800c2a8 <_printf_float+0x39c>
 800c236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c238:	9a05      	ldr	r2, [sp, #20]
 800c23a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c23c:	1a9a      	subs	r2, r3, r2
 800c23e:	eba3 0901 	sub.w	r9, r3, r1
 800c242:	4591      	cmp	r9, r2
 800c244:	bfa8      	it	ge
 800c246:	4691      	movge	r9, r2
 800c248:	f1b9 0f00 	cmp.w	r9, #0
 800c24c:	dc35      	bgt.n	800c2ba <_printf_float+0x3ae>
 800c24e:	f04f 0800 	mov.w	r8, #0
 800c252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c256:	f104 0a1a 	add.w	sl, r4, #26
 800c25a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c25e:	1a9b      	subs	r3, r3, r2
 800c260:	eba3 0309 	sub.w	r3, r3, r9
 800c264:	4543      	cmp	r3, r8
 800c266:	f77f af79 	ble.w	800c15c <_printf_float+0x250>
 800c26a:	2301      	movs	r3, #1
 800c26c:	4652      	mov	r2, sl
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	f43f aeaa 	beq.w	800bfce <_printf_float+0xc2>
 800c27a:	f108 0801 	add.w	r8, r8, #1
 800c27e:	e7ec      	b.n	800c25a <_printf_float+0x34e>
 800c280:	4613      	mov	r3, r2
 800c282:	4631      	mov	r1, r6
 800c284:	4642      	mov	r2, r8
 800c286:	4628      	mov	r0, r5
 800c288:	47b8      	blx	r7
 800c28a:	3001      	adds	r0, #1
 800c28c:	d1c0      	bne.n	800c210 <_printf_float+0x304>
 800c28e:	e69e      	b.n	800bfce <_printf_float+0xc2>
 800c290:	2301      	movs	r3, #1
 800c292:	4631      	mov	r1, r6
 800c294:	4628      	mov	r0, r5
 800c296:	9205      	str	r2, [sp, #20]
 800c298:	47b8      	blx	r7
 800c29a:	3001      	adds	r0, #1
 800c29c:	f43f ae97 	beq.w	800bfce <_printf_float+0xc2>
 800c2a0:	9a05      	ldr	r2, [sp, #20]
 800c2a2:	f10b 0b01 	add.w	fp, fp, #1
 800c2a6:	e7b9      	b.n	800c21c <_printf_float+0x310>
 800c2a8:	ee18 3a10 	vmov	r3, s16
 800c2ac:	4652      	mov	r2, sl
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	47b8      	blx	r7
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	d1be      	bne.n	800c236 <_printf_float+0x32a>
 800c2b8:	e689      	b.n	800bfce <_printf_float+0xc2>
 800c2ba:	9a05      	ldr	r2, [sp, #20]
 800c2bc:	464b      	mov	r3, r9
 800c2be:	4442      	add	r2, r8
 800c2c0:	4631      	mov	r1, r6
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	47b8      	blx	r7
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d1c1      	bne.n	800c24e <_printf_float+0x342>
 800c2ca:	e680      	b.n	800bfce <_printf_float+0xc2>
 800c2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2ce:	2a01      	cmp	r2, #1
 800c2d0:	dc01      	bgt.n	800c2d6 <_printf_float+0x3ca>
 800c2d2:	07db      	lsls	r3, r3, #31
 800c2d4:	d538      	bpl.n	800c348 <_printf_float+0x43c>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	4642      	mov	r2, r8
 800c2da:	4631      	mov	r1, r6
 800c2dc:	4628      	mov	r0, r5
 800c2de:	47b8      	blx	r7
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	f43f ae74 	beq.w	800bfce <_printf_float+0xc2>
 800c2e6:	ee18 3a10 	vmov	r3, s16
 800c2ea:	4652      	mov	r2, sl
 800c2ec:	4631      	mov	r1, r6
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	47b8      	blx	r7
 800c2f2:	3001      	adds	r0, #1
 800c2f4:	f43f ae6b 	beq.w	800bfce <_printf_float+0xc2>
 800c2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2300      	movs	r3, #0
 800c300:	f7f4 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c304:	b9d8      	cbnz	r0, 800c33e <_printf_float+0x432>
 800c306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c308:	f108 0201 	add.w	r2, r8, #1
 800c30c:	3b01      	subs	r3, #1
 800c30e:	4631      	mov	r1, r6
 800c310:	4628      	mov	r0, r5
 800c312:	47b8      	blx	r7
 800c314:	3001      	adds	r0, #1
 800c316:	d10e      	bne.n	800c336 <_printf_float+0x42a>
 800c318:	e659      	b.n	800bfce <_printf_float+0xc2>
 800c31a:	2301      	movs	r3, #1
 800c31c:	4652      	mov	r2, sl
 800c31e:	4631      	mov	r1, r6
 800c320:	4628      	mov	r0, r5
 800c322:	47b8      	blx	r7
 800c324:	3001      	adds	r0, #1
 800c326:	f43f ae52 	beq.w	800bfce <_printf_float+0xc2>
 800c32a:	f108 0801 	add.w	r8, r8, #1
 800c32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c330:	3b01      	subs	r3, #1
 800c332:	4543      	cmp	r3, r8
 800c334:	dcf1      	bgt.n	800c31a <_printf_float+0x40e>
 800c336:	464b      	mov	r3, r9
 800c338:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c33c:	e6dc      	b.n	800c0f8 <_printf_float+0x1ec>
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	f104 0a1a 	add.w	sl, r4, #26
 800c346:	e7f2      	b.n	800c32e <_printf_float+0x422>
 800c348:	2301      	movs	r3, #1
 800c34a:	4642      	mov	r2, r8
 800c34c:	e7df      	b.n	800c30e <_printf_float+0x402>
 800c34e:	2301      	movs	r3, #1
 800c350:	464a      	mov	r2, r9
 800c352:	4631      	mov	r1, r6
 800c354:	4628      	mov	r0, r5
 800c356:	47b8      	blx	r7
 800c358:	3001      	adds	r0, #1
 800c35a:	f43f ae38 	beq.w	800bfce <_printf_float+0xc2>
 800c35e:	f108 0801 	add.w	r8, r8, #1
 800c362:	68e3      	ldr	r3, [r4, #12]
 800c364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c366:	1a5b      	subs	r3, r3, r1
 800c368:	4543      	cmp	r3, r8
 800c36a:	dcf0      	bgt.n	800c34e <_printf_float+0x442>
 800c36c:	e6fa      	b.n	800c164 <_printf_float+0x258>
 800c36e:	f04f 0800 	mov.w	r8, #0
 800c372:	f104 0919 	add.w	r9, r4, #25
 800c376:	e7f4      	b.n	800c362 <_printf_float+0x456>

0800c378 <_printf_common>:
 800c378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c37c:	4616      	mov	r6, r2
 800c37e:	4699      	mov	r9, r3
 800c380:	688a      	ldr	r2, [r1, #8]
 800c382:	690b      	ldr	r3, [r1, #16]
 800c384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c388:	4293      	cmp	r3, r2
 800c38a:	bfb8      	it	lt
 800c38c:	4613      	movlt	r3, r2
 800c38e:	6033      	str	r3, [r6, #0]
 800c390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c394:	4607      	mov	r7, r0
 800c396:	460c      	mov	r4, r1
 800c398:	b10a      	cbz	r2, 800c39e <_printf_common+0x26>
 800c39a:	3301      	adds	r3, #1
 800c39c:	6033      	str	r3, [r6, #0]
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	0699      	lsls	r1, r3, #26
 800c3a2:	bf42      	ittt	mi
 800c3a4:	6833      	ldrmi	r3, [r6, #0]
 800c3a6:	3302      	addmi	r3, #2
 800c3a8:	6033      	strmi	r3, [r6, #0]
 800c3aa:	6825      	ldr	r5, [r4, #0]
 800c3ac:	f015 0506 	ands.w	r5, r5, #6
 800c3b0:	d106      	bne.n	800c3c0 <_printf_common+0x48>
 800c3b2:	f104 0a19 	add.w	sl, r4, #25
 800c3b6:	68e3      	ldr	r3, [r4, #12]
 800c3b8:	6832      	ldr	r2, [r6, #0]
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	42ab      	cmp	r3, r5
 800c3be:	dc26      	bgt.n	800c40e <_printf_common+0x96>
 800c3c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3c4:	1e13      	subs	r3, r2, #0
 800c3c6:	6822      	ldr	r2, [r4, #0]
 800c3c8:	bf18      	it	ne
 800c3ca:	2301      	movne	r3, #1
 800c3cc:	0692      	lsls	r2, r2, #26
 800c3ce:	d42b      	bmi.n	800c428 <_printf_common+0xb0>
 800c3d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	47c0      	blx	r8
 800c3da:	3001      	adds	r0, #1
 800c3dc:	d01e      	beq.n	800c41c <_printf_common+0xa4>
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	68e5      	ldr	r5, [r4, #12]
 800c3e2:	6832      	ldr	r2, [r6, #0]
 800c3e4:	f003 0306 	and.w	r3, r3, #6
 800c3e8:	2b04      	cmp	r3, #4
 800c3ea:	bf08      	it	eq
 800c3ec:	1aad      	subeq	r5, r5, r2
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	bf0c      	ite	eq
 800c3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3f8:	2500      	movne	r5, #0
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	bfc4      	itt	gt
 800c3fe:	1a9b      	subgt	r3, r3, r2
 800c400:	18ed      	addgt	r5, r5, r3
 800c402:	2600      	movs	r6, #0
 800c404:	341a      	adds	r4, #26
 800c406:	42b5      	cmp	r5, r6
 800c408:	d11a      	bne.n	800c440 <_printf_common+0xc8>
 800c40a:	2000      	movs	r0, #0
 800c40c:	e008      	b.n	800c420 <_printf_common+0xa8>
 800c40e:	2301      	movs	r3, #1
 800c410:	4652      	mov	r2, sl
 800c412:	4649      	mov	r1, r9
 800c414:	4638      	mov	r0, r7
 800c416:	47c0      	blx	r8
 800c418:	3001      	adds	r0, #1
 800c41a:	d103      	bne.n	800c424 <_printf_common+0xac>
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c424:	3501      	adds	r5, #1
 800c426:	e7c6      	b.n	800c3b6 <_printf_common+0x3e>
 800c428:	18e1      	adds	r1, r4, r3
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	2030      	movs	r0, #48	; 0x30
 800c42e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c432:	4422      	add	r2, r4
 800c434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c43c:	3302      	adds	r3, #2
 800c43e:	e7c7      	b.n	800c3d0 <_printf_common+0x58>
 800c440:	2301      	movs	r3, #1
 800c442:	4622      	mov	r2, r4
 800c444:	4649      	mov	r1, r9
 800c446:	4638      	mov	r0, r7
 800c448:	47c0      	blx	r8
 800c44a:	3001      	adds	r0, #1
 800c44c:	d0e6      	beq.n	800c41c <_printf_common+0xa4>
 800c44e:	3601      	adds	r6, #1
 800c450:	e7d9      	b.n	800c406 <_printf_common+0x8e>
	...

0800c454 <_printf_i>:
 800c454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c458:	7e0f      	ldrb	r7, [r1, #24]
 800c45a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c45c:	2f78      	cmp	r7, #120	; 0x78
 800c45e:	4691      	mov	r9, r2
 800c460:	4680      	mov	r8, r0
 800c462:	460c      	mov	r4, r1
 800c464:	469a      	mov	sl, r3
 800c466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c46a:	d807      	bhi.n	800c47c <_printf_i+0x28>
 800c46c:	2f62      	cmp	r7, #98	; 0x62
 800c46e:	d80a      	bhi.n	800c486 <_printf_i+0x32>
 800c470:	2f00      	cmp	r7, #0
 800c472:	f000 80d8 	beq.w	800c626 <_printf_i+0x1d2>
 800c476:	2f58      	cmp	r7, #88	; 0x58
 800c478:	f000 80a3 	beq.w	800c5c2 <_printf_i+0x16e>
 800c47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c484:	e03a      	b.n	800c4fc <_printf_i+0xa8>
 800c486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c48a:	2b15      	cmp	r3, #21
 800c48c:	d8f6      	bhi.n	800c47c <_printf_i+0x28>
 800c48e:	a101      	add	r1, pc, #4	; (adr r1, 800c494 <_printf_i+0x40>)
 800c490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c494:	0800c4ed 	.word	0x0800c4ed
 800c498:	0800c501 	.word	0x0800c501
 800c49c:	0800c47d 	.word	0x0800c47d
 800c4a0:	0800c47d 	.word	0x0800c47d
 800c4a4:	0800c47d 	.word	0x0800c47d
 800c4a8:	0800c47d 	.word	0x0800c47d
 800c4ac:	0800c501 	.word	0x0800c501
 800c4b0:	0800c47d 	.word	0x0800c47d
 800c4b4:	0800c47d 	.word	0x0800c47d
 800c4b8:	0800c47d 	.word	0x0800c47d
 800c4bc:	0800c47d 	.word	0x0800c47d
 800c4c0:	0800c60d 	.word	0x0800c60d
 800c4c4:	0800c531 	.word	0x0800c531
 800c4c8:	0800c5ef 	.word	0x0800c5ef
 800c4cc:	0800c47d 	.word	0x0800c47d
 800c4d0:	0800c47d 	.word	0x0800c47d
 800c4d4:	0800c62f 	.word	0x0800c62f
 800c4d8:	0800c47d 	.word	0x0800c47d
 800c4dc:	0800c531 	.word	0x0800c531
 800c4e0:	0800c47d 	.word	0x0800c47d
 800c4e4:	0800c47d 	.word	0x0800c47d
 800c4e8:	0800c5f7 	.word	0x0800c5f7
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	1d1a      	adds	r2, r3, #4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	602a      	str	r2, [r5, #0]
 800c4f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e0a3      	b.n	800c648 <_printf_i+0x1f4>
 800c500:	6820      	ldr	r0, [r4, #0]
 800c502:	6829      	ldr	r1, [r5, #0]
 800c504:	0606      	lsls	r6, r0, #24
 800c506:	f101 0304 	add.w	r3, r1, #4
 800c50a:	d50a      	bpl.n	800c522 <_printf_i+0xce>
 800c50c:	680e      	ldr	r6, [r1, #0]
 800c50e:	602b      	str	r3, [r5, #0]
 800c510:	2e00      	cmp	r6, #0
 800c512:	da03      	bge.n	800c51c <_printf_i+0xc8>
 800c514:	232d      	movs	r3, #45	; 0x2d
 800c516:	4276      	negs	r6, r6
 800c518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c51c:	485e      	ldr	r0, [pc, #376]	; (800c698 <_printf_i+0x244>)
 800c51e:	230a      	movs	r3, #10
 800c520:	e019      	b.n	800c556 <_printf_i+0x102>
 800c522:	680e      	ldr	r6, [r1, #0]
 800c524:	602b      	str	r3, [r5, #0]
 800c526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c52a:	bf18      	it	ne
 800c52c:	b236      	sxthne	r6, r6
 800c52e:	e7ef      	b.n	800c510 <_printf_i+0xbc>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	6820      	ldr	r0, [r4, #0]
 800c534:	1d19      	adds	r1, r3, #4
 800c536:	6029      	str	r1, [r5, #0]
 800c538:	0601      	lsls	r1, r0, #24
 800c53a:	d501      	bpl.n	800c540 <_printf_i+0xec>
 800c53c:	681e      	ldr	r6, [r3, #0]
 800c53e:	e002      	b.n	800c546 <_printf_i+0xf2>
 800c540:	0646      	lsls	r6, r0, #25
 800c542:	d5fb      	bpl.n	800c53c <_printf_i+0xe8>
 800c544:	881e      	ldrh	r6, [r3, #0]
 800c546:	4854      	ldr	r0, [pc, #336]	; (800c698 <_printf_i+0x244>)
 800c548:	2f6f      	cmp	r7, #111	; 0x6f
 800c54a:	bf0c      	ite	eq
 800c54c:	2308      	moveq	r3, #8
 800c54e:	230a      	movne	r3, #10
 800c550:	2100      	movs	r1, #0
 800c552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c556:	6865      	ldr	r5, [r4, #4]
 800c558:	60a5      	str	r5, [r4, #8]
 800c55a:	2d00      	cmp	r5, #0
 800c55c:	bfa2      	ittt	ge
 800c55e:	6821      	ldrge	r1, [r4, #0]
 800c560:	f021 0104 	bicge.w	r1, r1, #4
 800c564:	6021      	strge	r1, [r4, #0]
 800c566:	b90e      	cbnz	r6, 800c56c <_printf_i+0x118>
 800c568:	2d00      	cmp	r5, #0
 800c56a:	d04d      	beq.n	800c608 <_printf_i+0x1b4>
 800c56c:	4615      	mov	r5, r2
 800c56e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c572:	fb03 6711 	mls	r7, r3, r1, r6
 800c576:	5dc7      	ldrb	r7, [r0, r7]
 800c578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c57c:	4637      	mov	r7, r6
 800c57e:	42bb      	cmp	r3, r7
 800c580:	460e      	mov	r6, r1
 800c582:	d9f4      	bls.n	800c56e <_printf_i+0x11a>
 800c584:	2b08      	cmp	r3, #8
 800c586:	d10b      	bne.n	800c5a0 <_printf_i+0x14c>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	07de      	lsls	r6, r3, #31
 800c58c:	d508      	bpl.n	800c5a0 <_printf_i+0x14c>
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	6861      	ldr	r1, [r4, #4]
 800c592:	4299      	cmp	r1, r3
 800c594:	bfde      	ittt	le
 800c596:	2330      	movle	r3, #48	; 0x30
 800c598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c59c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5a0:	1b52      	subs	r2, r2, r5
 800c5a2:	6122      	str	r2, [r4, #16]
 800c5a4:	f8cd a000 	str.w	sl, [sp]
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	aa03      	add	r2, sp, #12
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	f7ff fee2 	bl	800c378 <_printf_common>
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d14c      	bne.n	800c652 <_printf_i+0x1fe>
 800c5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5bc:	b004      	add	sp, #16
 800c5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c2:	4835      	ldr	r0, [pc, #212]	; (800c698 <_printf_i+0x244>)
 800c5c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5c8:	6829      	ldr	r1, [r5, #0]
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5d0:	6029      	str	r1, [r5, #0]
 800c5d2:	061d      	lsls	r5, r3, #24
 800c5d4:	d514      	bpl.n	800c600 <_printf_i+0x1ac>
 800c5d6:	07df      	lsls	r7, r3, #31
 800c5d8:	bf44      	itt	mi
 800c5da:	f043 0320 	orrmi.w	r3, r3, #32
 800c5de:	6023      	strmi	r3, [r4, #0]
 800c5e0:	b91e      	cbnz	r6, 800c5ea <_printf_i+0x196>
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	f023 0320 	bic.w	r3, r3, #32
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	2310      	movs	r3, #16
 800c5ec:	e7b0      	b.n	800c550 <_printf_i+0xfc>
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	f043 0320 	orr.w	r3, r3, #32
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	2378      	movs	r3, #120	; 0x78
 800c5f8:	4828      	ldr	r0, [pc, #160]	; (800c69c <_printf_i+0x248>)
 800c5fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5fe:	e7e3      	b.n	800c5c8 <_printf_i+0x174>
 800c600:	0659      	lsls	r1, r3, #25
 800c602:	bf48      	it	mi
 800c604:	b2b6      	uxthmi	r6, r6
 800c606:	e7e6      	b.n	800c5d6 <_printf_i+0x182>
 800c608:	4615      	mov	r5, r2
 800c60a:	e7bb      	b.n	800c584 <_printf_i+0x130>
 800c60c:	682b      	ldr	r3, [r5, #0]
 800c60e:	6826      	ldr	r6, [r4, #0]
 800c610:	6961      	ldr	r1, [r4, #20]
 800c612:	1d18      	adds	r0, r3, #4
 800c614:	6028      	str	r0, [r5, #0]
 800c616:	0635      	lsls	r5, r6, #24
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	d501      	bpl.n	800c620 <_printf_i+0x1cc>
 800c61c:	6019      	str	r1, [r3, #0]
 800c61e:	e002      	b.n	800c626 <_printf_i+0x1d2>
 800c620:	0670      	lsls	r0, r6, #25
 800c622:	d5fb      	bpl.n	800c61c <_printf_i+0x1c8>
 800c624:	8019      	strh	r1, [r3, #0]
 800c626:	2300      	movs	r3, #0
 800c628:	6123      	str	r3, [r4, #16]
 800c62a:	4615      	mov	r5, r2
 800c62c:	e7ba      	b.n	800c5a4 <_printf_i+0x150>
 800c62e:	682b      	ldr	r3, [r5, #0]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	602a      	str	r2, [r5, #0]
 800c634:	681d      	ldr	r5, [r3, #0]
 800c636:	6862      	ldr	r2, [r4, #4]
 800c638:	2100      	movs	r1, #0
 800c63a:	4628      	mov	r0, r5
 800c63c:	f7f3 fdd0 	bl	80001e0 <memchr>
 800c640:	b108      	cbz	r0, 800c646 <_printf_i+0x1f2>
 800c642:	1b40      	subs	r0, r0, r5
 800c644:	6060      	str	r0, [r4, #4]
 800c646:	6863      	ldr	r3, [r4, #4]
 800c648:	6123      	str	r3, [r4, #16]
 800c64a:	2300      	movs	r3, #0
 800c64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c650:	e7a8      	b.n	800c5a4 <_printf_i+0x150>
 800c652:	6923      	ldr	r3, [r4, #16]
 800c654:	462a      	mov	r2, r5
 800c656:	4649      	mov	r1, r9
 800c658:	4640      	mov	r0, r8
 800c65a:	47d0      	blx	sl
 800c65c:	3001      	adds	r0, #1
 800c65e:	d0ab      	beq.n	800c5b8 <_printf_i+0x164>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	079b      	lsls	r3, r3, #30
 800c664:	d413      	bmi.n	800c68e <_printf_i+0x23a>
 800c666:	68e0      	ldr	r0, [r4, #12]
 800c668:	9b03      	ldr	r3, [sp, #12]
 800c66a:	4298      	cmp	r0, r3
 800c66c:	bfb8      	it	lt
 800c66e:	4618      	movlt	r0, r3
 800c670:	e7a4      	b.n	800c5bc <_printf_i+0x168>
 800c672:	2301      	movs	r3, #1
 800c674:	4632      	mov	r2, r6
 800c676:	4649      	mov	r1, r9
 800c678:	4640      	mov	r0, r8
 800c67a:	47d0      	blx	sl
 800c67c:	3001      	adds	r0, #1
 800c67e:	d09b      	beq.n	800c5b8 <_printf_i+0x164>
 800c680:	3501      	adds	r5, #1
 800c682:	68e3      	ldr	r3, [r4, #12]
 800c684:	9903      	ldr	r1, [sp, #12]
 800c686:	1a5b      	subs	r3, r3, r1
 800c688:	42ab      	cmp	r3, r5
 800c68a:	dcf2      	bgt.n	800c672 <_printf_i+0x21e>
 800c68c:	e7eb      	b.n	800c666 <_printf_i+0x212>
 800c68e:	2500      	movs	r5, #0
 800c690:	f104 0619 	add.w	r6, r4, #25
 800c694:	e7f5      	b.n	800c682 <_printf_i+0x22e>
 800c696:	bf00      	nop
 800c698:	080107f2 	.word	0x080107f2
 800c69c:	08010803 	.word	0x08010803

0800c6a0 <_scanf_float>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	b087      	sub	sp, #28
 800c6a6:	4617      	mov	r7, r2
 800c6a8:	9303      	str	r3, [sp, #12]
 800c6aa:	688b      	ldr	r3, [r1, #8]
 800c6ac:	1e5a      	subs	r2, r3, #1
 800c6ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c6b2:	bf83      	ittte	hi
 800c6b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c6b8:	195b      	addhi	r3, r3, r5
 800c6ba:	9302      	strhi	r3, [sp, #8]
 800c6bc:	2300      	movls	r3, #0
 800c6be:	bf86      	itte	hi
 800c6c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6c4:	608b      	strhi	r3, [r1, #8]
 800c6c6:	9302      	strls	r3, [sp, #8]
 800c6c8:	680b      	ldr	r3, [r1, #0]
 800c6ca:	468b      	mov	fp, r1
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c6d2:	f84b 3b1c 	str.w	r3, [fp], #28
 800c6d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c6da:	4680      	mov	r8, r0
 800c6dc:	460c      	mov	r4, r1
 800c6de:	465e      	mov	r6, fp
 800c6e0:	46aa      	mov	sl, r5
 800c6e2:	46a9      	mov	r9, r5
 800c6e4:	9501      	str	r5, [sp, #4]
 800c6e6:	68a2      	ldr	r2, [r4, #8]
 800c6e8:	b152      	cbz	r2, 800c700 <_scanf_float+0x60>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b4e      	cmp	r3, #78	; 0x4e
 800c6f0:	d864      	bhi.n	800c7bc <_scanf_float+0x11c>
 800c6f2:	2b40      	cmp	r3, #64	; 0x40
 800c6f4:	d83c      	bhi.n	800c770 <_scanf_float+0xd0>
 800c6f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c6fa:	b2c8      	uxtb	r0, r1
 800c6fc:	280e      	cmp	r0, #14
 800c6fe:	d93a      	bls.n	800c776 <_scanf_float+0xd6>
 800c700:	f1b9 0f00 	cmp.w	r9, #0
 800c704:	d003      	beq.n	800c70e <_scanf_float+0x6e>
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c712:	f1ba 0f01 	cmp.w	sl, #1
 800c716:	f200 8113 	bhi.w	800c940 <_scanf_float+0x2a0>
 800c71a:	455e      	cmp	r6, fp
 800c71c:	f200 8105 	bhi.w	800c92a <_scanf_float+0x28a>
 800c720:	2501      	movs	r5, #1
 800c722:	4628      	mov	r0, r5
 800c724:	b007      	add	sp, #28
 800c726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c72e:	2a0d      	cmp	r2, #13
 800c730:	d8e6      	bhi.n	800c700 <_scanf_float+0x60>
 800c732:	a101      	add	r1, pc, #4	; (adr r1, 800c738 <_scanf_float+0x98>)
 800c734:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c738:	0800c877 	.word	0x0800c877
 800c73c:	0800c701 	.word	0x0800c701
 800c740:	0800c701 	.word	0x0800c701
 800c744:	0800c701 	.word	0x0800c701
 800c748:	0800c8d7 	.word	0x0800c8d7
 800c74c:	0800c8af 	.word	0x0800c8af
 800c750:	0800c701 	.word	0x0800c701
 800c754:	0800c701 	.word	0x0800c701
 800c758:	0800c885 	.word	0x0800c885
 800c75c:	0800c701 	.word	0x0800c701
 800c760:	0800c701 	.word	0x0800c701
 800c764:	0800c701 	.word	0x0800c701
 800c768:	0800c701 	.word	0x0800c701
 800c76c:	0800c83d 	.word	0x0800c83d
 800c770:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c774:	e7db      	b.n	800c72e <_scanf_float+0x8e>
 800c776:	290e      	cmp	r1, #14
 800c778:	d8c2      	bhi.n	800c700 <_scanf_float+0x60>
 800c77a:	a001      	add	r0, pc, #4	; (adr r0, 800c780 <_scanf_float+0xe0>)
 800c77c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c780:	0800c82f 	.word	0x0800c82f
 800c784:	0800c701 	.word	0x0800c701
 800c788:	0800c82f 	.word	0x0800c82f
 800c78c:	0800c8c3 	.word	0x0800c8c3
 800c790:	0800c701 	.word	0x0800c701
 800c794:	0800c7dd 	.word	0x0800c7dd
 800c798:	0800c819 	.word	0x0800c819
 800c79c:	0800c819 	.word	0x0800c819
 800c7a0:	0800c819 	.word	0x0800c819
 800c7a4:	0800c819 	.word	0x0800c819
 800c7a8:	0800c819 	.word	0x0800c819
 800c7ac:	0800c819 	.word	0x0800c819
 800c7b0:	0800c819 	.word	0x0800c819
 800c7b4:	0800c819 	.word	0x0800c819
 800c7b8:	0800c819 	.word	0x0800c819
 800c7bc:	2b6e      	cmp	r3, #110	; 0x6e
 800c7be:	d809      	bhi.n	800c7d4 <_scanf_float+0x134>
 800c7c0:	2b60      	cmp	r3, #96	; 0x60
 800c7c2:	d8b2      	bhi.n	800c72a <_scanf_float+0x8a>
 800c7c4:	2b54      	cmp	r3, #84	; 0x54
 800c7c6:	d077      	beq.n	800c8b8 <_scanf_float+0x218>
 800c7c8:	2b59      	cmp	r3, #89	; 0x59
 800c7ca:	d199      	bne.n	800c700 <_scanf_float+0x60>
 800c7cc:	2d07      	cmp	r5, #7
 800c7ce:	d197      	bne.n	800c700 <_scanf_float+0x60>
 800c7d0:	2508      	movs	r5, #8
 800c7d2:	e029      	b.n	800c828 <_scanf_float+0x188>
 800c7d4:	2b74      	cmp	r3, #116	; 0x74
 800c7d6:	d06f      	beq.n	800c8b8 <_scanf_float+0x218>
 800c7d8:	2b79      	cmp	r3, #121	; 0x79
 800c7da:	e7f6      	b.n	800c7ca <_scanf_float+0x12a>
 800c7dc:	6821      	ldr	r1, [r4, #0]
 800c7de:	05c8      	lsls	r0, r1, #23
 800c7e0:	d51a      	bpl.n	800c818 <_scanf_float+0x178>
 800c7e2:	9b02      	ldr	r3, [sp, #8]
 800c7e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c7e8:	6021      	str	r1, [r4, #0]
 800c7ea:	f109 0901 	add.w	r9, r9, #1
 800c7ee:	b11b      	cbz	r3, 800c7f8 <_scanf_float+0x158>
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	3201      	adds	r2, #1
 800c7f4:	9302      	str	r3, [sp, #8]
 800c7f6:	60a2      	str	r2, [r4, #8]
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	60a3      	str	r3, [r4, #8]
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	3301      	adds	r3, #1
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3b01      	subs	r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	607b      	str	r3, [r7, #4]
 800c80c:	f340 8084 	ble.w	800c918 <_scanf_float+0x278>
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	603b      	str	r3, [r7, #0]
 800c816:	e766      	b.n	800c6e6 <_scanf_float+0x46>
 800c818:	eb1a 0f05 	cmn.w	sl, r5
 800c81c:	f47f af70 	bne.w	800c700 <_scanf_float+0x60>
 800c820:	6822      	ldr	r2, [r4, #0]
 800c822:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c826:	6022      	str	r2, [r4, #0]
 800c828:	f806 3b01 	strb.w	r3, [r6], #1
 800c82c:	e7e4      	b.n	800c7f8 <_scanf_float+0x158>
 800c82e:	6822      	ldr	r2, [r4, #0]
 800c830:	0610      	lsls	r0, r2, #24
 800c832:	f57f af65 	bpl.w	800c700 <_scanf_float+0x60>
 800c836:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c83a:	e7f4      	b.n	800c826 <_scanf_float+0x186>
 800c83c:	f1ba 0f00 	cmp.w	sl, #0
 800c840:	d10e      	bne.n	800c860 <_scanf_float+0x1c0>
 800c842:	f1b9 0f00 	cmp.w	r9, #0
 800c846:	d10e      	bne.n	800c866 <_scanf_float+0x1c6>
 800c848:	6822      	ldr	r2, [r4, #0]
 800c84a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c84e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c852:	d108      	bne.n	800c866 <_scanf_float+0x1c6>
 800c854:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c858:	6022      	str	r2, [r4, #0]
 800c85a:	f04f 0a01 	mov.w	sl, #1
 800c85e:	e7e3      	b.n	800c828 <_scanf_float+0x188>
 800c860:	f1ba 0f02 	cmp.w	sl, #2
 800c864:	d055      	beq.n	800c912 <_scanf_float+0x272>
 800c866:	2d01      	cmp	r5, #1
 800c868:	d002      	beq.n	800c870 <_scanf_float+0x1d0>
 800c86a:	2d04      	cmp	r5, #4
 800c86c:	f47f af48 	bne.w	800c700 <_scanf_float+0x60>
 800c870:	3501      	adds	r5, #1
 800c872:	b2ed      	uxtb	r5, r5
 800c874:	e7d8      	b.n	800c828 <_scanf_float+0x188>
 800c876:	f1ba 0f01 	cmp.w	sl, #1
 800c87a:	f47f af41 	bne.w	800c700 <_scanf_float+0x60>
 800c87e:	f04f 0a02 	mov.w	sl, #2
 800c882:	e7d1      	b.n	800c828 <_scanf_float+0x188>
 800c884:	b97d      	cbnz	r5, 800c8a6 <_scanf_float+0x206>
 800c886:	f1b9 0f00 	cmp.w	r9, #0
 800c88a:	f47f af3c 	bne.w	800c706 <_scanf_float+0x66>
 800c88e:	6822      	ldr	r2, [r4, #0]
 800c890:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c894:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c898:	f47f af39 	bne.w	800c70e <_scanf_float+0x6e>
 800c89c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8a0:	6022      	str	r2, [r4, #0]
 800c8a2:	2501      	movs	r5, #1
 800c8a4:	e7c0      	b.n	800c828 <_scanf_float+0x188>
 800c8a6:	2d03      	cmp	r5, #3
 800c8a8:	d0e2      	beq.n	800c870 <_scanf_float+0x1d0>
 800c8aa:	2d05      	cmp	r5, #5
 800c8ac:	e7de      	b.n	800c86c <_scanf_float+0x1cc>
 800c8ae:	2d02      	cmp	r5, #2
 800c8b0:	f47f af26 	bne.w	800c700 <_scanf_float+0x60>
 800c8b4:	2503      	movs	r5, #3
 800c8b6:	e7b7      	b.n	800c828 <_scanf_float+0x188>
 800c8b8:	2d06      	cmp	r5, #6
 800c8ba:	f47f af21 	bne.w	800c700 <_scanf_float+0x60>
 800c8be:	2507      	movs	r5, #7
 800c8c0:	e7b2      	b.n	800c828 <_scanf_float+0x188>
 800c8c2:	6822      	ldr	r2, [r4, #0]
 800c8c4:	0591      	lsls	r1, r2, #22
 800c8c6:	f57f af1b 	bpl.w	800c700 <_scanf_float+0x60>
 800c8ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c8ce:	6022      	str	r2, [r4, #0]
 800c8d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8d4:	e7a8      	b.n	800c828 <_scanf_float+0x188>
 800c8d6:	6822      	ldr	r2, [r4, #0]
 800c8d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c8dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c8e0:	d006      	beq.n	800c8f0 <_scanf_float+0x250>
 800c8e2:	0550      	lsls	r0, r2, #21
 800c8e4:	f57f af0c 	bpl.w	800c700 <_scanf_float+0x60>
 800c8e8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ec:	f43f af0f 	beq.w	800c70e <_scanf_float+0x6e>
 800c8f0:	0591      	lsls	r1, r2, #22
 800c8f2:	bf58      	it	pl
 800c8f4:	9901      	ldrpl	r1, [sp, #4]
 800c8f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8fa:	bf58      	it	pl
 800c8fc:	eba9 0101 	subpl.w	r1, r9, r1
 800c900:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c904:	bf58      	it	pl
 800c906:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c90a:	6022      	str	r2, [r4, #0]
 800c90c:	f04f 0900 	mov.w	r9, #0
 800c910:	e78a      	b.n	800c828 <_scanf_float+0x188>
 800c912:	f04f 0a03 	mov.w	sl, #3
 800c916:	e787      	b.n	800c828 <_scanf_float+0x188>
 800c918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c91c:	4639      	mov	r1, r7
 800c91e:	4640      	mov	r0, r8
 800c920:	4798      	blx	r3
 800c922:	2800      	cmp	r0, #0
 800c924:	f43f aedf 	beq.w	800c6e6 <_scanf_float+0x46>
 800c928:	e6ea      	b.n	800c700 <_scanf_float+0x60>
 800c92a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c92e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c932:	463a      	mov	r2, r7
 800c934:	4640      	mov	r0, r8
 800c936:	4798      	blx	r3
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	3b01      	subs	r3, #1
 800c93c:	6123      	str	r3, [r4, #16]
 800c93e:	e6ec      	b.n	800c71a <_scanf_float+0x7a>
 800c940:	1e6b      	subs	r3, r5, #1
 800c942:	2b06      	cmp	r3, #6
 800c944:	d825      	bhi.n	800c992 <_scanf_float+0x2f2>
 800c946:	2d02      	cmp	r5, #2
 800c948:	d836      	bhi.n	800c9b8 <_scanf_float+0x318>
 800c94a:	455e      	cmp	r6, fp
 800c94c:	f67f aee8 	bls.w	800c720 <_scanf_float+0x80>
 800c950:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c954:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c958:	463a      	mov	r2, r7
 800c95a:	4640      	mov	r0, r8
 800c95c:	4798      	blx	r3
 800c95e:	6923      	ldr	r3, [r4, #16]
 800c960:	3b01      	subs	r3, #1
 800c962:	6123      	str	r3, [r4, #16]
 800c964:	e7f1      	b.n	800c94a <_scanf_float+0x2aa>
 800c966:	9802      	ldr	r0, [sp, #8]
 800c968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c96c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c970:	9002      	str	r0, [sp, #8]
 800c972:	463a      	mov	r2, r7
 800c974:	4640      	mov	r0, r8
 800c976:	4798      	blx	r3
 800c978:	6923      	ldr	r3, [r4, #16]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	6123      	str	r3, [r4, #16]
 800c97e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c982:	fa5f fa8a 	uxtb.w	sl, sl
 800c986:	f1ba 0f02 	cmp.w	sl, #2
 800c98a:	d1ec      	bne.n	800c966 <_scanf_float+0x2c6>
 800c98c:	3d03      	subs	r5, #3
 800c98e:	b2ed      	uxtb	r5, r5
 800c990:	1b76      	subs	r6, r6, r5
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	05da      	lsls	r2, r3, #23
 800c996:	d52f      	bpl.n	800c9f8 <_scanf_float+0x358>
 800c998:	055b      	lsls	r3, r3, #21
 800c99a:	d510      	bpl.n	800c9be <_scanf_float+0x31e>
 800c99c:	455e      	cmp	r6, fp
 800c99e:	f67f aebf 	bls.w	800c720 <_scanf_float+0x80>
 800c9a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	4798      	blx	r3
 800c9b0:	6923      	ldr	r3, [r4, #16]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	6123      	str	r3, [r4, #16]
 800c9b6:	e7f1      	b.n	800c99c <_scanf_float+0x2fc>
 800c9b8:	46aa      	mov	sl, r5
 800c9ba:	9602      	str	r6, [sp, #8]
 800c9bc:	e7df      	b.n	800c97e <_scanf_float+0x2de>
 800c9be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c9c2:	6923      	ldr	r3, [r4, #16]
 800c9c4:	2965      	cmp	r1, #101	; 0x65
 800c9c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800c9ce:	6123      	str	r3, [r4, #16]
 800c9d0:	d00c      	beq.n	800c9ec <_scanf_float+0x34c>
 800c9d2:	2945      	cmp	r1, #69	; 0x45
 800c9d4:	d00a      	beq.n	800c9ec <_scanf_float+0x34c>
 800c9d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9da:	463a      	mov	r2, r7
 800c9dc:	4640      	mov	r0, r8
 800c9de:	4798      	blx	r3
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	1eb5      	subs	r5, r6, #2
 800c9ea:	6123      	str	r3, [r4, #16]
 800c9ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9f0:	463a      	mov	r2, r7
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4798      	blx	r3
 800c9f6:	462e      	mov	r6, r5
 800c9f8:	6825      	ldr	r5, [r4, #0]
 800c9fa:	f015 0510 	ands.w	r5, r5, #16
 800c9fe:	d159      	bne.n	800cab4 <_scanf_float+0x414>
 800ca00:	7035      	strb	r5, [r6, #0]
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca0c:	d11b      	bne.n	800ca46 <_scanf_float+0x3a6>
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	454b      	cmp	r3, r9
 800ca12:	eba3 0209 	sub.w	r2, r3, r9
 800ca16:	d123      	bne.n	800ca60 <_scanf_float+0x3c0>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4659      	mov	r1, fp
 800ca1c:	4640      	mov	r0, r8
 800ca1e:	f000 ff81 	bl	800d924 <_strtod_r>
 800ca22:	6822      	ldr	r2, [r4, #0]
 800ca24:	9b03      	ldr	r3, [sp, #12]
 800ca26:	f012 0f02 	tst.w	r2, #2
 800ca2a:	ec57 6b10 	vmov	r6, r7, d0
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	d021      	beq.n	800ca76 <_scanf_float+0x3d6>
 800ca32:	9903      	ldr	r1, [sp, #12]
 800ca34:	1d1a      	adds	r2, r3, #4
 800ca36:	600a      	str	r2, [r1, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	e9c3 6700 	strd	r6, r7, [r3]
 800ca3e:	68e3      	ldr	r3, [r4, #12]
 800ca40:	3301      	adds	r3, #1
 800ca42:	60e3      	str	r3, [r4, #12]
 800ca44:	e66d      	b.n	800c722 <_scanf_float+0x82>
 800ca46:	9b04      	ldr	r3, [sp, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0e5      	beq.n	800ca18 <_scanf_float+0x378>
 800ca4c:	9905      	ldr	r1, [sp, #20]
 800ca4e:	230a      	movs	r3, #10
 800ca50:	462a      	mov	r2, r5
 800ca52:	3101      	adds	r1, #1
 800ca54:	4640      	mov	r0, r8
 800ca56:	f000 ffed 	bl	800da34 <_strtol_r>
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	9e05      	ldr	r6, [sp, #20]
 800ca5e:	1ac2      	subs	r2, r0, r3
 800ca60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ca64:	429e      	cmp	r6, r3
 800ca66:	bf28      	it	cs
 800ca68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca6c:	4912      	ldr	r1, [pc, #72]	; (800cab8 <_scanf_float+0x418>)
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f000 f8ca 	bl	800cc08 <siprintf>
 800ca74:	e7d0      	b.n	800ca18 <_scanf_float+0x378>
 800ca76:	9903      	ldr	r1, [sp, #12]
 800ca78:	f012 0f04 	tst.w	r2, #4
 800ca7c:	f103 0204 	add.w	r2, r3, #4
 800ca80:	600a      	str	r2, [r1, #0]
 800ca82:	d1d9      	bne.n	800ca38 <_scanf_float+0x398>
 800ca84:	f8d3 8000 	ldr.w	r8, [r3]
 800ca88:	ee10 2a10 	vmov	r2, s0
 800ca8c:	ee10 0a10 	vmov	r0, s0
 800ca90:	463b      	mov	r3, r7
 800ca92:	4639      	mov	r1, r7
 800ca94:	f7f4 f84a 	bl	8000b2c <__aeabi_dcmpun>
 800ca98:	b128      	cbz	r0, 800caa6 <_scanf_float+0x406>
 800ca9a:	4808      	ldr	r0, [pc, #32]	; (800cabc <_scanf_float+0x41c>)
 800ca9c:	f000 f8ae 	bl	800cbfc <nanf>
 800caa0:	ed88 0a00 	vstr	s0, [r8]
 800caa4:	e7cb      	b.n	800ca3e <_scanf_float+0x39e>
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	f7f4 f89d 	bl	8000be8 <__aeabi_d2f>
 800caae:	f8c8 0000 	str.w	r0, [r8]
 800cab2:	e7c4      	b.n	800ca3e <_scanf_float+0x39e>
 800cab4:	2500      	movs	r5, #0
 800cab6:	e634      	b.n	800c722 <_scanf_float+0x82>
 800cab8:	08010814 	.word	0x08010814
 800cabc:	08010c88 	.word	0x08010c88

0800cac0 <iprintf>:
 800cac0:	b40f      	push	{r0, r1, r2, r3}
 800cac2:	4b0a      	ldr	r3, [pc, #40]	; (800caec <iprintf+0x2c>)
 800cac4:	b513      	push	{r0, r1, r4, lr}
 800cac6:	681c      	ldr	r4, [r3, #0]
 800cac8:	b124      	cbz	r4, 800cad4 <iprintf+0x14>
 800caca:	69a3      	ldr	r3, [r4, #24]
 800cacc:	b913      	cbnz	r3, 800cad4 <iprintf+0x14>
 800cace:	4620      	mov	r0, r4
 800cad0:	f002 f806 	bl	800eae0 <__sinit>
 800cad4:	ab05      	add	r3, sp, #20
 800cad6:	9a04      	ldr	r2, [sp, #16]
 800cad8:	68a1      	ldr	r1, [r4, #8]
 800cada:	9301      	str	r3, [sp, #4]
 800cadc:	4620      	mov	r0, r4
 800cade:	f003 faf1 	bl	80100c4 <_vfiprintf_r>
 800cae2:	b002      	add	sp, #8
 800cae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cae8:	b004      	add	sp, #16
 800caea:	4770      	bx	lr
 800caec:	20000044 	.word	0x20000044

0800caf0 <_puts_r>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	460e      	mov	r6, r1
 800caf4:	4605      	mov	r5, r0
 800caf6:	b118      	cbz	r0, 800cb00 <_puts_r+0x10>
 800caf8:	6983      	ldr	r3, [r0, #24]
 800cafa:	b90b      	cbnz	r3, 800cb00 <_puts_r+0x10>
 800cafc:	f001 fff0 	bl	800eae0 <__sinit>
 800cb00:	69ab      	ldr	r3, [r5, #24]
 800cb02:	68ac      	ldr	r4, [r5, #8]
 800cb04:	b913      	cbnz	r3, 800cb0c <_puts_r+0x1c>
 800cb06:	4628      	mov	r0, r5
 800cb08:	f001 ffea 	bl	800eae0 <__sinit>
 800cb0c:	4b2c      	ldr	r3, [pc, #176]	; (800cbc0 <_puts_r+0xd0>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d120      	bne.n	800cb54 <_puts_r+0x64>
 800cb12:	686c      	ldr	r4, [r5, #4]
 800cb14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb16:	07db      	lsls	r3, r3, #31
 800cb18:	d405      	bmi.n	800cb26 <_puts_r+0x36>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	0598      	lsls	r0, r3, #22
 800cb1e:	d402      	bmi.n	800cb26 <_puts_r+0x36>
 800cb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb22:	f002 fbee 	bl	800f302 <__retarget_lock_acquire_recursive>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	0719      	lsls	r1, r3, #28
 800cb2a:	d51d      	bpl.n	800cb68 <_puts_r+0x78>
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	b1db      	cbz	r3, 800cb68 <_puts_r+0x78>
 800cb30:	3e01      	subs	r6, #1
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	bb39      	cbnz	r1, 800cb8e <_puts_r+0x9e>
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	da38      	bge.n	800cbb4 <_puts_r+0xc4>
 800cb42:	4622      	mov	r2, r4
 800cb44:	210a      	movs	r1, #10
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 ff76 	bl	800da38 <__swbuf_r>
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d011      	beq.n	800cb74 <_puts_r+0x84>
 800cb50:	250a      	movs	r5, #10
 800cb52:	e011      	b.n	800cb78 <_puts_r+0x88>
 800cb54:	4b1b      	ldr	r3, [pc, #108]	; (800cbc4 <_puts_r+0xd4>)
 800cb56:	429c      	cmp	r4, r3
 800cb58:	d101      	bne.n	800cb5e <_puts_r+0x6e>
 800cb5a:	68ac      	ldr	r4, [r5, #8]
 800cb5c:	e7da      	b.n	800cb14 <_puts_r+0x24>
 800cb5e:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <_puts_r+0xd8>)
 800cb60:	429c      	cmp	r4, r3
 800cb62:	bf08      	it	eq
 800cb64:	68ec      	ldreq	r4, [r5, #12]
 800cb66:	e7d5      	b.n	800cb14 <_puts_r+0x24>
 800cb68:	4621      	mov	r1, r4
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f000 ffb6 	bl	800dadc <__swsetup_r>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d0dd      	beq.n	800cb30 <_puts_r+0x40>
 800cb74:	f04f 35ff 	mov.w	r5, #4294967295
 800cb78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb7a:	07da      	lsls	r2, r3, #31
 800cb7c:	d405      	bmi.n	800cb8a <_puts_r+0x9a>
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	059b      	lsls	r3, r3, #22
 800cb82:	d402      	bmi.n	800cb8a <_puts_r+0x9a>
 800cb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb86:	f002 fbbd 	bl	800f304 <__retarget_lock_release_recursive>
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	da04      	bge.n	800cb9c <_puts_r+0xac>
 800cb92:	69a2      	ldr	r2, [r4, #24]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	dc06      	bgt.n	800cba6 <_puts_r+0xb6>
 800cb98:	290a      	cmp	r1, #10
 800cb9a:	d004      	beq.n	800cba6 <_puts_r+0xb6>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	6022      	str	r2, [r4, #0]
 800cba2:	7019      	strb	r1, [r3, #0]
 800cba4:	e7c5      	b.n	800cb32 <_puts_r+0x42>
 800cba6:	4622      	mov	r2, r4
 800cba8:	4628      	mov	r0, r5
 800cbaa:	f000 ff45 	bl	800da38 <__swbuf_r>
 800cbae:	3001      	adds	r0, #1
 800cbb0:	d1bf      	bne.n	800cb32 <_puts_r+0x42>
 800cbb2:	e7df      	b.n	800cb74 <_puts_r+0x84>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	250a      	movs	r5, #10
 800cbb8:	1c5a      	adds	r2, r3, #1
 800cbba:	6022      	str	r2, [r4, #0]
 800cbbc:	701d      	strb	r5, [r3, #0]
 800cbbe:	e7db      	b.n	800cb78 <_puts_r+0x88>
 800cbc0:	08010a24 	.word	0x08010a24
 800cbc4:	08010a44 	.word	0x08010a44
 800cbc8:	08010a04 	.word	0x08010a04

0800cbcc <puts>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <puts+0xc>)
 800cbce:	4601      	mov	r1, r0
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f7ff bf8d 	b.w	800caf0 <_puts_r>
 800cbd6:	bf00      	nop
 800cbd8:	20000044 	.word	0x20000044

0800cbdc <_sbrk_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d06      	ldr	r5, [pc, #24]	; (800cbf8 <_sbrk_r+0x1c>)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	602b      	str	r3, [r5, #0]
 800cbe8:	f7f6 fe16 	bl	8003818 <_sbrk>
 800cbec:	1c43      	adds	r3, r0, #1
 800cbee:	d102      	bne.n	800cbf6 <_sbrk_r+0x1a>
 800cbf0:	682b      	ldr	r3, [r5, #0]
 800cbf2:	b103      	cbz	r3, 800cbf6 <_sbrk_r+0x1a>
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	bd38      	pop	{r3, r4, r5, pc}
 800cbf8:	200134a8 	.word	0x200134a8

0800cbfc <nanf>:
 800cbfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc04 <nanf+0x8>
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	7fc00000 	.word	0x7fc00000

0800cc08 <siprintf>:
 800cc08:	b40e      	push	{r1, r2, r3}
 800cc0a:	b500      	push	{lr}
 800cc0c:	b09c      	sub	sp, #112	; 0x70
 800cc0e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc10:	9002      	str	r0, [sp, #8]
 800cc12:	9006      	str	r0, [sp, #24]
 800cc14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc18:	4809      	ldr	r0, [pc, #36]	; (800cc40 <siprintf+0x38>)
 800cc1a:	9107      	str	r1, [sp, #28]
 800cc1c:	9104      	str	r1, [sp, #16]
 800cc1e:	4909      	ldr	r1, [pc, #36]	; (800cc44 <siprintf+0x3c>)
 800cc20:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	6800      	ldr	r0, [r0, #0]
 800cc28:	9301      	str	r3, [sp, #4]
 800cc2a:	a902      	add	r1, sp, #8
 800cc2c:	f003 f920 	bl	800fe70 <_svfiprintf_r>
 800cc30:	9b02      	ldr	r3, [sp, #8]
 800cc32:	2200      	movs	r2, #0
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	b01c      	add	sp, #112	; 0x70
 800cc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc3c:	b003      	add	sp, #12
 800cc3e:	4770      	bx	lr
 800cc40:	20000044 	.word	0x20000044
 800cc44:	ffff0208 	.word	0xffff0208

0800cc48 <strcat>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	7814      	ldrb	r4, [r2, #0]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	3201      	adds	r2, #1
 800cc52:	2c00      	cmp	r4, #0
 800cc54:	d1fa      	bne.n	800cc4c <strcat+0x4>
 800cc56:	3b01      	subs	r3, #1
 800cc58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc60:	2a00      	cmp	r2, #0
 800cc62:	d1f9      	bne.n	800cc58 <strcat+0x10>
 800cc64:	bd10      	pop	{r4, pc}

0800cc66 <strncat>:
 800cc66:	b530      	push	{r4, r5, lr}
 800cc68:	4604      	mov	r4, r0
 800cc6a:	7825      	ldrb	r5, [r4, #0]
 800cc6c:	4623      	mov	r3, r4
 800cc6e:	3401      	adds	r4, #1
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	d1fa      	bne.n	800cc6a <strncat+0x4>
 800cc74:	3a01      	subs	r2, #1
 800cc76:	d304      	bcc.n	800cc82 <strncat+0x1c>
 800cc78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc7c:	f803 4b01 	strb.w	r4, [r3], #1
 800cc80:	b904      	cbnz	r4, 800cc84 <strncat+0x1e>
 800cc82:	bd30      	pop	{r4, r5, pc}
 800cc84:	2a00      	cmp	r2, #0
 800cc86:	d1f5      	bne.n	800cc74 <strncat+0xe>
 800cc88:	701a      	strb	r2, [r3, #0]
 800cc8a:	e7f3      	b.n	800cc74 <strncat+0xe>

0800cc8c <strncmp>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	b17a      	cbz	r2, 800ccb0 <strncmp+0x24>
 800cc90:	4603      	mov	r3, r0
 800cc92:	3901      	subs	r1, #1
 800cc94:	1884      	adds	r4, r0, r2
 800cc96:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc9e:	4290      	cmp	r0, r2
 800cca0:	d101      	bne.n	800cca6 <strncmp+0x1a>
 800cca2:	42a3      	cmp	r3, r4
 800cca4:	d101      	bne.n	800ccaa <strncmp+0x1e>
 800cca6:	1a80      	subs	r0, r0, r2
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d1f3      	bne.n	800cc96 <strncmp+0xa>
 800ccae:	e7fa      	b.n	800cca6 <strncmp+0x1a>
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	e7f9      	b.n	800cca8 <strncmp+0x1c>

0800ccb4 <strncpy>:
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	3901      	subs	r1, #1
 800ccb8:	4603      	mov	r3, r0
 800ccba:	b132      	cbz	r2, 800ccca <strncpy+0x16>
 800ccbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccc0:	f803 4b01 	strb.w	r4, [r3], #1
 800ccc4:	3a01      	subs	r2, #1
 800ccc6:	2c00      	cmp	r4, #0
 800ccc8:	d1f7      	bne.n	800ccba <strncpy+0x6>
 800ccca:	441a      	add	r2, r3
 800cccc:	2100      	movs	r1, #0
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d100      	bne.n	800ccd4 <strncpy+0x20>
 800ccd2:	bd10      	pop	{r4, pc}
 800ccd4:	f803 1b01 	strb.w	r1, [r3], #1
 800ccd8:	e7f9      	b.n	800ccce <strncpy+0x1a>

0800ccda <sulp>:
 800ccda:	b570      	push	{r4, r5, r6, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	460d      	mov	r5, r1
 800cce0:	ec45 4b10 	vmov	d0, r4, r5
 800cce4:	4616      	mov	r6, r2
 800cce6:	f002 ff03 	bl	800faf0 <__ulp>
 800ccea:	ec51 0b10 	vmov	r0, r1, d0
 800ccee:	b17e      	cbz	r6, 800cd10 <sulp+0x36>
 800ccf0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ccf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	dd09      	ble.n	800cd10 <sulp+0x36>
 800ccfc:	051b      	lsls	r3, r3, #20
 800ccfe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd02:	2400      	movs	r4, #0
 800cd04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd08:	4622      	mov	r2, r4
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	f7f3 fc74 	bl	80005f8 <__aeabi_dmul>
 800cd10:	bd70      	pop	{r4, r5, r6, pc}
 800cd12:	0000      	movs	r0, r0
 800cd14:	0000      	movs	r0, r0
	...

0800cd18 <_strtod_l>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	ed2d 8b02 	vpush	{d8}
 800cd20:	b09d      	sub	sp, #116	; 0x74
 800cd22:	461f      	mov	r7, r3
 800cd24:	2300      	movs	r3, #0
 800cd26:	9318      	str	r3, [sp, #96]	; 0x60
 800cd28:	4ba2      	ldr	r3, [pc, #648]	; (800cfb4 <_strtod_l+0x29c>)
 800cd2a:	9213      	str	r2, [sp, #76]	; 0x4c
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	9305      	str	r3, [sp, #20]
 800cd30:	4604      	mov	r4, r0
 800cd32:	4618      	mov	r0, r3
 800cd34:	4688      	mov	r8, r1
 800cd36:	f7f3 fa4b 	bl	80001d0 <strlen>
 800cd3a:	f04f 0a00 	mov.w	sl, #0
 800cd3e:	4605      	mov	r5, r0
 800cd40:	f04f 0b00 	mov.w	fp, #0
 800cd44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd4a:	781a      	ldrb	r2, [r3, #0]
 800cd4c:	2a2b      	cmp	r2, #43	; 0x2b
 800cd4e:	d04e      	beq.n	800cdee <_strtod_l+0xd6>
 800cd50:	d83b      	bhi.n	800cdca <_strtod_l+0xb2>
 800cd52:	2a0d      	cmp	r2, #13
 800cd54:	d834      	bhi.n	800cdc0 <_strtod_l+0xa8>
 800cd56:	2a08      	cmp	r2, #8
 800cd58:	d834      	bhi.n	800cdc4 <_strtod_l+0xac>
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	d03e      	beq.n	800cddc <_strtod_l+0xc4>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	930a      	str	r3, [sp, #40]	; 0x28
 800cd62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cd64:	7833      	ldrb	r3, [r6, #0]
 800cd66:	2b30      	cmp	r3, #48	; 0x30
 800cd68:	f040 80b0 	bne.w	800cecc <_strtod_l+0x1b4>
 800cd6c:	7873      	ldrb	r3, [r6, #1]
 800cd6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd72:	2b58      	cmp	r3, #88	; 0x58
 800cd74:	d168      	bne.n	800ce48 <_strtod_l+0x130>
 800cd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd78:	9301      	str	r3, [sp, #4]
 800cd7a:	ab18      	add	r3, sp, #96	; 0x60
 800cd7c:	9702      	str	r7, [sp, #8]
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	4a8d      	ldr	r2, [pc, #564]	; (800cfb8 <_strtod_l+0x2a0>)
 800cd82:	ab19      	add	r3, sp, #100	; 0x64
 800cd84:	a917      	add	r1, sp, #92	; 0x5c
 800cd86:	4620      	mov	r0, r4
 800cd88:	f001 ffae 	bl	800ece8 <__gethex>
 800cd8c:	f010 0707 	ands.w	r7, r0, #7
 800cd90:	4605      	mov	r5, r0
 800cd92:	d005      	beq.n	800cda0 <_strtod_l+0x88>
 800cd94:	2f06      	cmp	r7, #6
 800cd96:	d12c      	bne.n	800cdf2 <_strtod_l+0xda>
 800cd98:	3601      	adds	r6, #1
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd9e:	930a      	str	r3, [sp, #40]	; 0x28
 800cda0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f040 8590 	bne.w	800d8c8 <_strtod_l+0xbb0>
 800cda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdaa:	b1eb      	cbz	r3, 800cde8 <_strtod_l+0xd0>
 800cdac:	4652      	mov	r2, sl
 800cdae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cdb2:	ec43 2b10 	vmov	d0, r2, r3
 800cdb6:	b01d      	add	sp, #116	; 0x74
 800cdb8:	ecbd 8b02 	vpop	{d8}
 800cdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc0:	2a20      	cmp	r2, #32
 800cdc2:	d1cc      	bne.n	800cd5e <_strtod_l+0x46>
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdc8:	e7be      	b.n	800cd48 <_strtod_l+0x30>
 800cdca:	2a2d      	cmp	r2, #45	; 0x2d
 800cdcc:	d1c7      	bne.n	800cd5e <_strtod_l+0x46>
 800cdce:	2201      	movs	r2, #1
 800cdd0:	920a      	str	r2, [sp, #40]	; 0x28
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdd6:	785b      	ldrb	r3, [r3, #1]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1c2      	bne.n	800cd62 <_strtod_l+0x4a>
 800cddc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 856e 	bne.w	800d8c4 <_strtod_l+0xbac>
 800cde8:	4652      	mov	r2, sl
 800cdea:	465b      	mov	r3, fp
 800cdec:	e7e1      	b.n	800cdb2 <_strtod_l+0x9a>
 800cdee:	2200      	movs	r2, #0
 800cdf0:	e7ee      	b.n	800cdd0 <_strtod_l+0xb8>
 800cdf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cdf4:	b13a      	cbz	r2, 800ce06 <_strtod_l+0xee>
 800cdf6:	2135      	movs	r1, #53	; 0x35
 800cdf8:	a81a      	add	r0, sp, #104	; 0x68
 800cdfa:	f002 ff84 	bl	800fd06 <__copybits>
 800cdfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce00:	4620      	mov	r0, r4
 800ce02:	f002 fb43 	bl	800f48c <_Bfree>
 800ce06:	3f01      	subs	r7, #1
 800ce08:	2f04      	cmp	r7, #4
 800ce0a:	d806      	bhi.n	800ce1a <_strtod_l+0x102>
 800ce0c:	e8df f007 	tbb	[pc, r7]
 800ce10:	1714030a 	.word	0x1714030a
 800ce14:	0a          	.byte	0x0a
 800ce15:	00          	.byte	0x00
 800ce16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ce1a:	0728      	lsls	r0, r5, #28
 800ce1c:	d5c0      	bpl.n	800cda0 <_strtod_l+0x88>
 800ce1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ce22:	e7bd      	b.n	800cda0 <_strtod_l+0x88>
 800ce24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ce28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ce2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce36:	e7f0      	b.n	800ce1a <_strtod_l+0x102>
 800ce38:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cfbc <_strtod_l+0x2a4>
 800ce3c:	e7ed      	b.n	800ce1a <_strtod_l+0x102>
 800ce3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ce42:	f04f 3aff 	mov.w	sl, #4294967295
 800ce46:	e7e8      	b.n	800ce1a <_strtod_l+0x102>
 800ce48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce4e:	785b      	ldrb	r3, [r3, #1]
 800ce50:	2b30      	cmp	r3, #48	; 0x30
 800ce52:	d0f9      	beq.n	800ce48 <_strtod_l+0x130>
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0a3      	beq.n	800cda0 <_strtod_l+0x88>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	f04f 0900 	mov.w	r9, #0
 800ce5e:	9304      	str	r3, [sp, #16]
 800ce60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce62:	9308      	str	r3, [sp, #32]
 800ce64:	f8cd 901c 	str.w	r9, [sp, #28]
 800ce68:	464f      	mov	r7, r9
 800ce6a:	220a      	movs	r2, #10
 800ce6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce6e:	7806      	ldrb	r6, [r0, #0]
 800ce70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce74:	b2d9      	uxtb	r1, r3
 800ce76:	2909      	cmp	r1, #9
 800ce78:	d92a      	bls.n	800ced0 <_strtod_l+0x1b8>
 800ce7a:	9905      	ldr	r1, [sp, #20]
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	f7ff ff05 	bl	800cc8c <strncmp>
 800ce82:	b398      	cbz	r0, 800ceec <_strtod_l+0x1d4>
 800ce84:	2000      	movs	r0, #0
 800ce86:	4632      	mov	r2, r6
 800ce88:	463d      	mov	r5, r7
 800ce8a:	9005      	str	r0, [sp, #20]
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2a65      	cmp	r2, #101	; 0x65
 800ce90:	d001      	beq.n	800ce96 <_strtod_l+0x17e>
 800ce92:	2a45      	cmp	r2, #69	; 0x45
 800ce94:	d118      	bne.n	800cec8 <_strtod_l+0x1b0>
 800ce96:	b91d      	cbnz	r5, 800cea0 <_strtod_l+0x188>
 800ce98:	9a04      	ldr	r2, [sp, #16]
 800ce9a:	4302      	orrs	r2, r0
 800ce9c:	d09e      	beq.n	800cddc <_strtod_l+0xc4>
 800ce9e:	2500      	movs	r5, #0
 800cea0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cea4:	f108 0201 	add.w	r2, r8, #1
 800cea8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ceaa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ceae:	2a2b      	cmp	r2, #43	; 0x2b
 800ceb0:	d075      	beq.n	800cf9e <_strtod_l+0x286>
 800ceb2:	2a2d      	cmp	r2, #45	; 0x2d
 800ceb4:	d07b      	beq.n	800cfae <_strtod_l+0x296>
 800ceb6:	f04f 0c00 	mov.w	ip, #0
 800ceba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cebe:	2909      	cmp	r1, #9
 800cec0:	f240 8082 	bls.w	800cfc8 <_strtod_l+0x2b0>
 800cec4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cec8:	2600      	movs	r6, #0
 800ceca:	e09d      	b.n	800d008 <_strtod_l+0x2f0>
 800cecc:	2300      	movs	r3, #0
 800cece:	e7c4      	b.n	800ce5a <_strtod_l+0x142>
 800ced0:	2f08      	cmp	r7, #8
 800ced2:	bfd8      	it	le
 800ced4:	9907      	ldrle	r1, [sp, #28]
 800ced6:	f100 0001 	add.w	r0, r0, #1
 800ceda:	bfda      	itte	le
 800cedc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cee0:	9307      	strle	r3, [sp, #28]
 800cee2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cee6:	3701      	adds	r7, #1
 800cee8:	9017      	str	r0, [sp, #92]	; 0x5c
 800ceea:	e7bf      	b.n	800ce6c <_strtod_l+0x154>
 800ceec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceee:	195a      	adds	r2, r3, r5
 800cef0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cef2:	5d5a      	ldrb	r2, [r3, r5]
 800cef4:	2f00      	cmp	r7, #0
 800cef6:	d037      	beq.n	800cf68 <_strtod_l+0x250>
 800cef8:	9005      	str	r0, [sp, #20]
 800cefa:	463d      	mov	r5, r7
 800cefc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cf00:	2b09      	cmp	r3, #9
 800cf02:	d912      	bls.n	800cf2a <_strtod_l+0x212>
 800cf04:	2301      	movs	r3, #1
 800cf06:	e7c2      	b.n	800ce8e <_strtod_l+0x176>
 800cf08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf0e:	785a      	ldrb	r2, [r3, #1]
 800cf10:	3001      	adds	r0, #1
 800cf12:	2a30      	cmp	r2, #48	; 0x30
 800cf14:	d0f8      	beq.n	800cf08 <_strtod_l+0x1f0>
 800cf16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cf1a:	2b08      	cmp	r3, #8
 800cf1c:	f200 84d9 	bhi.w	800d8d2 <_strtod_l+0xbba>
 800cf20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf22:	9005      	str	r0, [sp, #20]
 800cf24:	2000      	movs	r0, #0
 800cf26:	9308      	str	r3, [sp, #32]
 800cf28:	4605      	mov	r5, r0
 800cf2a:	3a30      	subs	r2, #48	; 0x30
 800cf2c:	f100 0301 	add.w	r3, r0, #1
 800cf30:	d014      	beq.n	800cf5c <_strtod_l+0x244>
 800cf32:	9905      	ldr	r1, [sp, #20]
 800cf34:	4419      	add	r1, r3
 800cf36:	9105      	str	r1, [sp, #20]
 800cf38:	462b      	mov	r3, r5
 800cf3a:	eb00 0e05 	add.w	lr, r0, r5
 800cf3e:	210a      	movs	r1, #10
 800cf40:	4573      	cmp	r3, lr
 800cf42:	d113      	bne.n	800cf6c <_strtod_l+0x254>
 800cf44:	182b      	adds	r3, r5, r0
 800cf46:	2b08      	cmp	r3, #8
 800cf48:	f105 0501 	add.w	r5, r5, #1
 800cf4c:	4405      	add	r5, r0
 800cf4e:	dc1c      	bgt.n	800cf8a <_strtod_l+0x272>
 800cf50:	9907      	ldr	r1, [sp, #28]
 800cf52:	230a      	movs	r3, #10
 800cf54:	fb03 2301 	mla	r3, r3, r1, r2
 800cf58:	9307      	str	r3, [sp, #28]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf5e:	1c51      	adds	r1, r2, #1
 800cf60:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf62:	7852      	ldrb	r2, [r2, #1]
 800cf64:	4618      	mov	r0, r3
 800cf66:	e7c9      	b.n	800cefc <_strtod_l+0x1e4>
 800cf68:	4638      	mov	r0, r7
 800cf6a:	e7d2      	b.n	800cf12 <_strtod_l+0x1fa>
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	dc04      	bgt.n	800cf7a <_strtod_l+0x262>
 800cf70:	9e07      	ldr	r6, [sp, #28]
 800cf72:	434e      	muls	r6, r1
 800cf74:	9607      	str	r6, [sp, #28]
 800cf76:	3301      	adds	r3, #1
 800cf78:	e7e2      	b.n	800cf40 <_strtod_l+0x228>
 800cf7a:	f103 0c01 	add.w	ip, r3, #1
 800cf7e:	f1bc 0f10 	cmp.w	ip, #16
 800cf82:	bfd8      	it	le
 800cf84:	fb01 f909 	mulle.w	r9, r1, r9
 800cf88:	e7f5      	b.n	800cf76 <_strtod_l+0x25e>
 800cf8a:	2d10      	cmp	r5, #16
 800cf8c:	bfdc      	itt	le
 800cf8e:	230a      	movle	r3, #10
 800cf90:	fb03 2909 	mlale	r9, r3, r9, r2
 800cf94:	e7e1      	b.n	800cf5a <_strtod_l+0x242>
 800cf96:	2300      	movs	r3, #0
 800cf98:	9305      	str	r3, [sp, #20]
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e77c      	b.n	800ce98 <_strtod_l+0x180>
 800cf9e:	f04f 0c00 	mov.w	ip, #0
 800cfa2:	f108 0202 	add.w	r2, r8, #2
 800cfa6:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfa8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cfac:	e785      	b.n	800ceba <_strtod_l+0x1a2>
 800cfae:	f04f 0c01 	mov.w	ip, #1
 800cfb2:	e7f6      	b.n	800cfa2 <_strtod_l+0x28a>
 800cfb4:	08010acc 	.word	0x08010acc
 800cfb8:	0801081c 	.word	0x0801081c
 800cfbc:	7ff00000 	.word	0x7ff00000
 800cfc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfc2:	1c51      	adds	r1, r2, #1
 800cfc4:	9117      	str	r1, [sp, #92]	; 0x5c
 800cfc6:	7852      	ldrb	r2, [r2, #1]
 800cfc8:	2a30      	cmp	r2, #48	; 0x30
 800cfca:	d0f9      	beq.n	800cfc0 <_strtod_l+0x2a8>
 800cfcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cfd0:	2908      	cmp	r1, #8
 800cfd2:	f63f af79 	bhi.w	800cec8 <_strtod_l+0x1b0>
 800cfd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cfda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfdc:	9206      	str	r2, [sp, #24]
 800cfde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfe0:	1c51      	adds	r1, r2, #1
 800cfe2:	9117      	str	r1, [sp, #92]	; 0x5c
 800cfe4:	7852      	ldrb	r2, [r2, #1]
 800cfe6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cfea:	2e09      	cmp	r6, #9
 800cfec:	d937      	bls.n	800d05e <_strtod_l+0x346>
 800cfee:	9e06      	ldr	r6, [sp, #24]
 800cff0:	1b89      	subs	r1, r1, r6
 800cff2:	2908      	cmp	r1, #8
 800cff4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cff8:	dc02      	bgt.n	800d000 <_strtod_l+0x2e8>
 800cffa:	4576      	cmp	r6, lr
 800cffc:	bfa8      	it	ge
 800cffe:	4676      	movge	r6, lr
 800d000:	f1bc 0f00 	cmp.w	ip, #0
 800d004:	d000      	beq.n	800d008 <_strtod_l+0x2f0>
 800d006:	4276      	negs	r6, r6
 800d008:	2d00      	cmp	r5, #0
 800d00a:	d14d      	bne.n	800d0a8 <_strtod_l+0x390>
 800d00c:	9904      	ldr	r1, [sp, #16]
 800d00e:	4301      	orrs	r1, r0
 800d010:	f47f aec6 	bne.w	800cda0 <_strtod_l+0x88>
 800d014:	2b00      	cmp	r3, #0
 800d016:	f47f aee1 	bne.w	800cddc <_strtod_l+0xc4>
 800d01a:	2a69      	cmp	r2, #105	; 0x69
 800d01c:	d027      	beq.n	800d06e <_strtod_l+0x356>
 800d01e:	dc24      	bgt.n	800d06a <_strtod_l+0x352>
 800d020:	2a49      	cmp	r2, #73	; 0x49
 800d022:	d024      	beq.n	800d06e <_strtod_l+0x356>
 800d024:	2a4e      	cmp	r2, #78	; 0x4e
 800d026:	f47f aed9 	bne.w	800cddc <_strtod_l+0xc4>
 800d02a:	499f      	ldr	r1, [pc, #636]	; (800d2a8 <_strtod_l+0x590>)
 800d02c:	a817      	add	r0, sp, #92	; 0x5c
 800d02e:	f002 f8b3 	bl	800f198 <__match>
 800d032:	2800      	cmp	r0, #0
 800d034:	f43f aed2 	beq.w	800cddc <_strtod_l+0xc4>
 800d038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	2b28      	cmp	r3, #40	; 0x28
 800d03e:	d12d      	bne.n	800d09c <_strtod_l+0x384>
 800d040:	499a      	ldr	r1, [pc, #616]	; (800d2ac <_strtod_l+0x594>)
 800d042:	aa1a      	add	r2, sp, #104	; 0x68
 800d044:	a817      	add	r0, sp, #92	; 0x5c
 800d046:	f002 f8bb 	bl	800f1c0 <__hexnan>
 800d04a:	2805      	cmp	r0, #5
 800d04c:	d126      	bne.n	800d09c <_strtod_l+0x384>
 800d04e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d050:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d054:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d058:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d05c:	e6a0      	b.n	800cda0 <_strtod_l+0x88>
 800d05e:	210a      	movs	r1, #10
 800d060:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d064:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d068:	e7b9      	b.n	800cfde <_strtod_l+0x2c6>
 800d06a:	2a6e      	cmp	r2, #110	; 0x6e
 800d06c:	e7db      	b.n	800d026 <_strtod_l+0x30e>
 800d06e:	4990      	ldr	r1, [pc, #576]	; (800d2b0 <_strtod_l+0x598>)
 800d070:	a817      	add	r0, sp, #92	; 0x5c
 800d072:	f002 f891 	bl	800f198 <__match>
 800d076:	2800      	cmp	r0, #0
 800d078:	f43f aeb0 	beq.w	800cddc <_strtod_l+0xc4>
 800d07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d07e:	498d      	ldr	r1, [pc, #564]	; (800d2b4 <_strtod_l+0x59c>)
 800d080:	3b01      	subs	r3, #1
 800d082:	a817      	add	r0, sp, #92	; 0x5c
 800d084:	9317      	str	r3, [sp, #92]	; 0x5c
 800d086:	f002 f887 	bl	800f198 <__match>
 800d08a:	b910      	cbnz	r0, 800d092 <_strtod_l+0x37a>
 800d08c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d08e:	3301      	adds	r3, #1
 800d090:	9317      	str	r3, [sp, #92]	; 0x5c
 800d092:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d2c4 <_strtod_l+0x5ac>
 800d096:	f04f 0a00 	mov.w	sl, #0
 800d09a:	e681      	b.n	800cda0 <_strtod_l+0x88>
 800d09c:	4886      	ldr	r0, [pc, #536]	; (800d2b8 <_strtod_l+0x5a0>)
 800d09e:	f003 f943 	bl	8010328 <nan>
 800d0a2:	ec5b ab10 	vmov	sl, fp, d0
 800d0a6:	e67b      	b.n	800cda0 <_strtod_l+0x88>
 800d0a8:	9b05      	ldr	r3, [sp, #20]
 800d0aa:	9807      	ldr	r0, [sp, #28]
 800d0ac:	1af3      	subs	r3, r6, r3
 800d0ae:	2f00      	cmp	r7, #0
 800d0b0:	bf08      	it	eq
 800d0b2:	462f      	moveq	r7, r5
 800d0b4:	2d10      	cmp	r5, #16
 800d0b6:	9306      	str	r3, [sp, #24]
 800d0b8:	46a8      	mov	r8, r5
 800d0ba:	bfa8      	it	ge
 800d0bc:	f04f 0810 	movge.w	r8, #16
 800d0c0:	f7f3 fa20 	bl	8000504 <__aeabi_ui2d>
 800d0c4:	2d09      	cmp	r5, #9
 800d0c6:	4682      	mov	sl, r0
 800d0c8:	468b      	mov	fp, r1
 800d0ca:	dd13      	ble.n	800d0f4 <_strtod_l+0x3dc>
 800d0cc:	4b7b      	ldr	r3, [pc, #492]	; (800d2bc <_strtod_l+0x5a4>)
 800d0ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d0d6:	f7f3 fa8f 	bl	80005f8 <__aeabi_dmul>
 800d0da:	4682      	mov	sl, r0
 800d0dc:	4648      	mov	r0, r9
 800d0de:	468b      	mov	fp, r1
 800d0e0:	f7f3 fa10 	bl	8000504 <__aeabi_ui2d>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4650      	mov	r0, sl
 800d0ea:	4659      	mov	r1, fp
 800d0ec:	f7f3 f8ce 	bl	800028c <__adddf3>
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	468b      	mov	fp, r1
 800d0f4:	2d0f      	cmp	r5, #15
 800d0f6:	dc38      	bgt.n	800d16a <_strtod_l+0x452>
 800d0f8:	9b06      	ldr	r3, [sp, #24]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f43f ae50 	beq.w	800cda0 <_strtod_l+0x88>
 800d100:	dd24      	ble.n	800d14c <_strtod_l+0x434>
 800d102:	2b16      	cmp	r3, #22
 800d104:	dc0b      	bgt.n	800d11e <_strtod_l+0x406>
 800d106:	496d      	ldr	r1, [pc, #436]	; (800d2bc <_strtod_l+0x5a4>)
 800d108:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d10c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d110:	4652      	mov	r2, sl
 800d112:	465b      	mov	r3, fp
 800d114:	f7f3 fa70 	bl	80005f8 <__aeabi_dmul>
 800d118:	4682      	mov	sl, r0
 800d11a:	468b      	mov	fp, r1
 800d11c:	e640      	b.n	800cda0 <_strtod_l+0x88>
 800d11e:	9a06      	ldr	r2, [sp, #24]
 800d120:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d124:	4293      	cmp	r3, r2
 800d126:	db20      	blt.n	800d16a <_strtod_l+0x452>
 800d128:	4c64      	ldr	r4, [pc, #400]	; (800d2bc <_strtod_l+0x5a4>)
 800d12a:	f1c5 050f 	rsb	r5, r5, #15
 800d12e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d132:	4652      	mov	r2, sl
 800d134:	465b      	mov	r3, fp
 800d136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d13a:	f7f3 fa5d 	bl	80005f8 <__aeabi_dmul>
 800d13e:	9b06      	ldr	r3, [sp, #24]
 800d140:	1b5d      	subs	r5, r3, r5
 800d142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d14a:	e7e3      	b.n	800d114 <_strtod_l+0x3fc>
 800d14c:	9b06      	ldr	r3, [sp, #24]
 800d14e:	3316      	adds	r3, #22
 800d150:	db0b      	blt.n	800d16a <_strtod_l+0x452>
 800d152:	9b05      	ldr	r3, [sp, #20]
 800d154:	1b9e      	subs	r6, r3, r6
 800d156:	4b59      	ldr	r3, [pc, #356]	; (800d2bc <_strtod_l+0x5a4>)
 800d158:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d15c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d160:	4650      	mov	r0, sl
 800d162:	4659      	mov	r1, fp
 800d164:	f7f3 fb72 	bl	800084c <__aeabi_ddiv>
 800d168:	e7d6      	b.n	800d118 <_strtod_l+0x400>
 800d16a:	9b06      	ldr	r3, [sp, #24]
 800d16c:	eba5 0808 	sub.w	r8, r5, r8
 800d170:	4498      	add	r8, r3
 800d172:	f1b8 0f00 	cmp.w	r8, #0
 800d176:	dd74      	ble.n	800d262 <_strtod_l+0x54a>
 800d178:	f018 030f 	ands.w	r3, r8, #15
 800d17c:	d00a      	beq.n	800d194 <_strtod_l+0x47c>
 800d17e:	494f      	ldr	r1, [pc, #316]	; (800d2bc <_strtod_l+0x5a4>)
 800d180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d184:	4652      	mov	r2, sl
 800d186:	465b      	mov	r3, fp
 800d188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d18c:	f7f3 fa34 	bl	80005f8 <__aeabi_dmul>
 800d190:	4682      	mov	sl, r0
 800d192:	468b      	mov	fp, r1
 800d194:	f038 080f 	bics.w	r8, r8, #15
 800d198:	d04f      	beq.n	800d23a <_strtod_l+0x522>
 800d19a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d19e:	dd22      	ble.n	800d1e6 <_strtod_l+0x4ce>
 800d1a0:	2500      	movs	r5, #0
 800d1a2:	462e      	mov	r6, r5
 800d1a4:	9507      	str	r5, [sp, #28]
 800d1a6:	9505      	str	r5, [sp, #20]
 800d1a8:	2322      	movs	r3, #34	; 0x22
 800d1aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d2c4 <_strtod_l+0x5ac>
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	f04f 0a00 	mov.w	sl, #0
 800d1b4:	9b07      	ldr	r3, [sp, #28]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f43f adf2 	beq.w	800cda0 <_strtod_l+0x88>
 800d1bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f002 f964 	bl	800f48c <_Bfree>
 800d1c4:	9905      	ldr	r1, [sp, #20]
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f002 f960 	bl	800f48c <_Bfree>
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f002 f95c 	bl	800f48c <_Bfree>
 800d1d4:	9907      	ldr	r1, [sp, #28]
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f002 f958 	bl	800f48c <_Bfree>
 800d1dc:	4629      	mov	r1, r5
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f002 f954 	bl	800f48c <_Bfree>
 800d1e4:	e5dc      	b.n	800cda0 <_strtod_l+0x88>
 800d1e6:	4b36      	ldr	r3, [pc, #216]	; (800d2c0 <_strtod_l+0x5a8>)
 800d1e8:	9304      	str	r3, [sp, #16]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	4659      	mov	r1, fp
 800d1f4:	4699      	mov	r9, r3
 800d1f6:	f1b8 0f01 	cmp.w	r8, #1
 800d1fa:	dc21      	bgt.n	800d240 <_strtod_l+0x528>
 800d1fc:	b10b      	cbz	r3, 800d202 <_strtod_l+0x4ea>
 800d1fe:	4682      	mov	sl, r0
 800d200:	468b      	mov	fp, r1
 800d202:	4b2f      	ldr	r3, [pc, #188]	; (800d2c0 <_strtod_l+0x5a8>)
 800d204:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d208:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d20c:	4652      	mov	r2, sl
 800d20e:	465b      	mov	r3, fp
 800d210:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d214:	f7f3 f9f0 	bl	80005f8 <__aeabi_dmul>
 800d218:	4b2a      	ldr	r3, [pc, #168]	; (800d2c4 <_strtod_l+0x5ac>)
 800d21a:	460a      	mov	r2, r1
 800d21c:	400b      	ands	r3, r1
 800d21e:	492a      	ldr	r1, [pc, #168]	; (800d2c8 <_strtod_l+0x5b0>)
 800d220:	428b      	cmp	r3, r1
 800d222:	4682      	mov	sl, r0
 800d224:	d8bc      	bhi.n	800d1a0 <_strtod_l+0x488>
 800d226:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d22a:	428b      	cmp	r3, r1
 800d22c:	bf86      	itte	hi
 800d22e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d2cc <_strtod_l+0x5b4>
 800d232:	f04f 3aff 	movhi.w	sl, #4294967295
 800d236:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d23a:	2300      	movs	r3, #0
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	e084      	b.n	800d34a <_strtod_l+0x632>
 800d240:	f018 0f01 	tst.w	r8, #1
 800d244:	d005      	beq.n	800d252 <_strtod_l+0x53a>
 800d246:	9b04      	ldr	r3, [sp, #16]
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	f7f3 f9d4 	bl	80005f8 <__aeabi_dmul>
 800d250:	2301      	movs	r3, #1
 800d252:	9a04      	ldr	r2, [sp, #16]
 800d254:	3208      	adds	r2, #8
 800d256:	f109 0901 	add.w	r9, r9, #1
 800d25a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d25e:	9204      	str	r2, [sp, #16]
 800d260:	e7c9      	b.n	800d1f6 <_strtod_l+0x4de>
 800d262:	d0ea      	beq.n	800d23a <_strtod_l+0x522>
 800d264:	f1c8 0800 	rsb	r8, r8, #0
 800d268:	f018 020f 	ands.w	r2, r8, #15
 800d26c:	d00a      	beq.n	800d284 <_strtod_l+0x56c>
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <_strtod_l+0x5a4>)
 800d270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d274:	4650      	mov	r0, sl
 800d276:	4659      	mov	r1, fp
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	f7f3 fae6 	bl	800084c <__aeabi_ddiv>
 800d280:	4682      	mov	sl, r0
 800d282:	468b      	mov	fp, r1
 800d284:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d288:	d0d7      	beq.n	800d23a <_strtod_l+0x522>
 800d28a:	f1b8 0f1f 	cmp.w	r8, #31
 800d28e:	dd1f      	ble.n	800d2d0 <_strtod_l+0x5b8>
 800d290:	2500      	movs	r5, #0
 800d292:	462e      	mov	r6, r5
 800d294:	9507      	str	r5, [sp, #28]
 800d296:	9505      	str	r5, [sp, #20]
 800d298:	2322      	movs	r3, #34	; 0x22
 800d29a:	f04f 0a00 	mov.w	sl, #0
 800d29e:	f04f 0b00 	mov.w	fp, #0
 800d2a2:	6023      	str	r3, [r4, #0]
 800d2a4:	e786      	b.n	800d1b4 <_strtod_l+0x49c>
 800d2a6:	bf00      	nop
 800d2a8:	080107ed 	.word	0x080107ed
 800d2ac:	08010830 	.word	0x08010830
 800d2b0:	080107e5 	.word	0x080107e5
 800d2b4:	08010974 	.word	0x08010974
 800d2b8:	08010c88 	.word	0x08010c88
 800d2bc:	08010b68 	.word	0x08010b68
 800d2c0:	08010b40 	.word	0x08010b40
 800d2c4:	7ff00000 	.word	0x7ff00000
 800d2c8:	7ca00000 	.word	0x7ca00000
 800d2cc:	7fefffff 	.word	0x7fefffff
 800d2d0:	f018 0310 	ands.w	r3, r8, #16
 800d2d4:	bf18      	it	ne
 800d2d6:	236a      	movne	r3, #106	; 0x6a
 800d2d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d688 <_strtod_l+0x970>
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	4650      	mov	r0, sl
 800d2e0:	4659      	mov	r1, fp
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f018 0f01 	tst.w	r8, #1
 800d2e8:	d004      	beq.n	800d2f4 <_strtod_l+0x5dc>
 800d2ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d2ee:	f7f3 f983 	bl	80005f8 <__aeabi_dmul>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d2f8:	f109 0908 	add.w	r9, r9, #8
 800d2fc:	d1f2      	bne.n	800d2e4 <_strtod_l+0x5cc>
 800d2fe:	b10b      	cbz	r3, 800d304 <_strtod_l+0x5ec>
 800d300:	4682      	mov	sl, r0
 800d302:	468b      	mov	fp, r1
 800d304:	9b04      	ldr	r3, [sp, #16]
 800d306:	b1c3      	cbz	r3, 800d33a <_strtod_l+0x622>
 800d308:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d30c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d310:	2b00      	cmp	r3, #0
 800d312:	4659      	mov	r1, fp
 800d314:	dd11      	ble.n	800d33a <_strtod_l+0x622>
 800d316:	2b1f      	cmp	r3, #31
 800d318:	f340 8124 	ble.w	800d564 <_strtod_l+0x84c>
 800d31c:	2b34      	cmp	r3, #52	; 0x34
 800d31e:	bfde      	ittt	le
 800d320:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d324:	f04f 33ff 	movle.w	r3, #4294967295
 800d328:	fa03 f202 	lslle.w	r2, r3, r2
 800d32c:	f04f 0a00 	mov.w	sl, #0
 800d330:	bfcc      	ite	gt
 800d332:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d336:	ea02 0b01 	andle.w	fp, r2, r1
 800d33a:	2200      	movs	r2, #0
 800d33c:	2300      	movs	r3, #0
 800d33e:	4650      	mov	r0, sl
 800d340:	4659      	mov	r1, fp
 800d342:	f7f3 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d346:	2800      	cmp	r0, #0
 800d348:	d1a2      	bne.n	800d290 <_strtod_l+0x578>
 800d34a:	9b07      	ldr	r3, [sp, #28]
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	9908      	ldr	r1, [sp, #32]
 800d350:	462b      	mov	r3, r5
 800d352:	463a      	mov	r2, r7
 800d354:	4620      	mov	r0, r4
 800d356:	f002 f901 	bl	800f55c <__s2b>
 800d35a:	9007      	str	r0, [sp, #28]
 800d35c:	2800      	cmp	r0, #0
 800d35e:	f43f af1f 	beq.w	800d1a0 <_strtod_l+0x488>
 800d362:	9b05      	ldr	r3, [sp, #20]
 800d364:	1b9e      	subs	r6, r3, r6
 800d366:	9b06      	ldr	r3, [sp, #24]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	bfb4      	ite	lt
 800d36c:	4633      	movlt	r3, r6
 800d36e:	2300      	movge	r3, #0
 800d370:	930c      	str	r3, [sp, #48]	; 0x30
 800d372:	9b06      	ldr	r3, [sp, #24]
 800d374:	2500      	movs	r5, #0
 800d376:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d37a:	9312      	str	r3, [sp, #72]	; 0x48
 800d37c:	462e      	mov	r6, r5
 800d37e:	9b07      	ldr	r3, [sp, #28]
 800d380:	4620      	mov	r0, r4
 800d382:	6859      	ldr	r1, [r3, #4]
 800d384:	f002 f842 	bl	800f40c <_Balloc>
 800d388:	9005      	str	r0, [sp, #20]
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f43f af0c 	beq.w	800d1a8 <_strtod_l+0x490>
 800d390:	9b07      	ldr	r3, [sp, #28]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	3202      	adds	r2, #2
 800d396:	f103 010c 	add.w	r1, r3, #12
 800d39a:	0092      	lsls	r2, r2, #2
 800d39c:	300c      	adds	r0, #12
 800d39e:	f7fe fc1f 	bl	800bbe0 <memcpy>
 800d3a2:	ec4b ab10 	vmov	d0, sl, fp
 800d3a6:	aa1a      	add	r2, sp, #104	; 0x68
 800d3a8:	a919      	add	r1, sp, #100	; 0x64
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f002 fc1c 	bl	800fbe8 <__d2b>
 800d3b0:	ec4b ab18 	vmov	d8, sl, fp
 800d3b4:	9018      	str	r0, [sp, #96]	; 0x60
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	f43f aef6 	beq.w	800d1a8 <_strtod_l+0x490>
 800d3bc:	2101      	movs	r1, #1
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f002 f966 	bl	800f690 <__i2b>
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f43f aeee 	beq.w	800d1a8 <_strtod_l+0x490>
 800d3cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3ce:	9904      	ldr	r1, [sp, #16]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	bfab      	itete	ge
 800d3d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d3d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d3d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d3da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d3de:	bfac      	ite	ge
 800d3e0:	eb03 0902 	addge.w	r9, r3, r2
 800d3e4:	1ad7      	sublt	r7, r2, r3
 800d3e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3e8:	eba3 0801 	sub.w	r8, r3, r1
 800d3ec:	4490      	add	r8, r2
 800d3ee:	4ba1      	ldr	r3, [pc, #644]	; (800d674 <_strtod_l+0x95c>)
 800d3f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3f4:	4598      	cmp	r8, r3
 800d3f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d3fa:	f280 80c7 	bge.w	800d58c <_strtod_l+0x874>
 800d3fe:	eba3 0308 	sub.w	r3, r3, r8
 800d402:	2b1f      	cmp	r3, #31
 800d404:	eba2 0203 	sub.w	r2, r2, r3
 800d408:	f04f 0101 	mov.w	r1, #1
 800d40c:	f300 80b1 	bgt.w	800d572 <_strtod_l+0x85a>
 800d410:	fa01 f303 	lsl.w	r3, r1, r3
 800d414:	930d      	str	r3, [sp, #52]	; 0x34
 800d416:	2300      	movs	r3, #0
 800d418:	9308      	str	r3, [sp, #32]
 800d41a:	eb09 0802 	add.w	r8, r9, r2
 800d41e:	9b04      	ldr	r3, [sp, #16]
 800d420:	45c1      	cmp	r9, r8
 800d422:	4417      	add	r7, r2
 800d424:	441f      	add	r7, r3
 800d426:	464b      	mov	r3, r9
 800d428:	bfa8      	it	ge
 800d42a:	4643      	movge	r3, r8
 800d42c:	42bb      	cmp	r3, r7
 800d42e:	bfa8      	it	ge
 800d430:	463b      	movge	r3, r7
 800d432:	2b00      	cmp	r3, #0
 800d434:	bfc2      	ittt	gt
 800d436:	eba8 0803 	subgt.w	r8, r8, r3
 800d43a:	1aff      	subgt	r7, r7, r3
 800d43c:	eba9 0903 	subgt.w	r9, r9, r3
 800d440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d442:	2b00      	cmp	r3, #0
 800d444:	dd17      	ble.n	800d476 <_strtod_l+0x75e>
 800d446:	4631      	mov	r1, r6
 800d448:	461a      	mov	r2, r3
 800d44a:	4620      	mov	r0, r4
 800d44c:	f002 f9e0 	bl	800f810 <__pow5mult>
 800d450:	4606      	mov	r6, r0
 800d452:	2800      	cmp	r0, #0
 800d454:	f43f aea8 	beq.w	800d1a8 <_strtod_l+0x490>
 800d458:	4601      	mov	r1, r0
 800d45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d45c:	4620      	mov	r0, r4
 800d45e:	f002 f92d 	bl	800f6bc <__multiply>
 800d462:	900b      	str	r0, [sp, #44]	; 0x2c
 800d464:	2800      	cmp	r0, #0
 800d466:	f43f ae9f 	beq.w	800d1a8 <_strtod_l+0x490>
 800d46a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d46c:	4620      	mov	r0, r4
 800d46e:	f002 f80d 	bl	800f48c <_Bfree>
 800d472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d474:	9318      	str	r3, [sp, #96]	; 0x60
 800d476:	f1b8 0f00 	cmp.w	r8, #0
 800d47a:	f300 808c 	bgt.w	800d596 <_strtod_l+0x87e>
 800d47e:	9b06      	ldr	r3, [sp, #24]
 800d480:	2b00      	cmp	r3, #0
 800d482:	dd08      	ble.n	800d496 <_strtod_l+0x77e>
 800d484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d486:	9905      	ldr	r1, [sp, #20]
 800d488:	4620      	mov	r0, r4
 800d48a:	f002 f9c1 	bl	800f810 <__pow5mult>
 800d48e:	9005      	str	r0, [sp, #20]
 800d490:	2800      	cmp	r0, #0
 800d492:	f43f ae89 	beq.w	800d1a8 <_strtod_l+0x490>
 800d496:	2f00      	cmp	r7, #0
 800d498:	dd08      	ble.n	800d4ac <_strtod_l+0x794>
 800d49a:	9905      	ldr	r1, [sp, #20]
 800d49c:	463a      	mov	r2, r7
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f002 fa10 	bl	800f8c4 <__lshift>
 800d4a4:	9005      	str	r0, [sp, #20]
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f43f ae7e 	beq.w	800d1a8 <_strtod_l+0x490>
 800d4ac:	f1b9 0f00 	cmp.w	r9, #0
 800d4b0:	dd08      	ble.n	800d4c4 <_strtod_l+0x7ac>
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	464a      	mov	r2, r9
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f002 fa04 	bl	800f8c4 <__lshift>
 800d4bc:	4606      	mov	r6, r0
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	f43f ae72 	beq.w	800d1a8 <_strtod_l+0x490>
 800d4c4:	9a05      	ldr	r2, [sp, #20]
 800d4c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f002 fa87 	bl	800f9dc <__mdiff>
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	f43f ae69 	beq.w	800d1a8 <_strtod_l+0x490>
 800d4d6:	68c3      	ldr	r3, [r0, #12]
 800d4d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60c3      	str	r3, [r0, #12]
 800d4de:	4631      	mov	r1, r6
 800d4e0:	f002 fa60 	bl	800f9a4 <__mcmp>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	da60      	bge.n	800d5aa <_strtod_l+0x892>
 800d4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ea:	ea53 030a 	orrs.w	r3, r3, sl
 800d4ee:	f040 8082 	bne.w	800d5f6 <_strtod_l+0x8de>
 800d4f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d17d      	bne.n	800d5f6 <_strtod_l+0x8de>
 800d4fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4fe:	0d1b      	lsrs	r3, r3, #20
 800d500:	051b      	lsls	r3, r3, #20
 800d502:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d506:	d976      	bls.n	800d5f6 <_strtod_l+0x8de>
 800d508:	696b      	ldr	r3, [r5, #20]
 800d50a:	b913      	cbnz	r3, 800d512 <_strtod_l+0x7fa>
 800d50c:	692b      	ldr	r3, [r5, #16]
 800d50e:	2b01      	cmp	r3, #1
 800d510:	dd71      	ble.n	800d5f6 <_strtod_l+0x8de>
 800d512:	4629      	mov	r1, r5
 800d514:	2201      	movs	r2, #1
 800d516:	4620      	mov	r0, r4
 800d518:	f002 f9d4 	bl	800f8c4 <__lshift>
 800d51c:	4631      	mov	r1, r6
 800d51e:	4605      	mov	r5, r0
 800d520:	f002 fa40 	bl	800f9a4 <__mcmp>
 800d524:	2800      	cmp	r0, #0
 800d526:	dd66      	ble.n	800d5f6 <_strtod_l+0x8de>
 800d528:	9904      	ldr	r1, [sp, #16]
 800d52a:	4a53      	ldr	r2, [pc, #332]	; (800d678 <_strtod_l+0x960>)
 800d52c:	465b      	mov	r3, fp
 800d52e:	2900      	cmp	r1, #0
 800d530:	f000 8081 	beq.w	800d636 <_strtod_l+0x91e>
 800d534:	ea02 010b 	and.w	r1, r2, fp
 800d538:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d53c:	dc7b      	bgt.n	800d636 <_strtod_l+0x91e>
 800d53e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d542:	f77f aea9 	ble.w	800d298 <_strtod_l+0x580>
 800d546:	4b4d      	ldr	r3, [pc, #308]	; (800d67c <_strtod_l+0x964>)
 800d548:	4650      	mov	r0, sl
 800d54a:	4659      	mov	r1, fp
 800d54c:	2200      	movs	r2, #0
 800d54e:	f7f3 f853 	bl	80005f8 <__aeabi_dmul>
 800d552:	460b      	mov	r3, r1
 800d554:	4303      	orrs	r3, r0
 800d556:	bf08      	it	eq
 800d558:	2322      	moveq	r3, #34	; 0x22
 800d55a:	4682      	mov	sl, r0
 800d55c:	468b      	mov	fp, r1
 800d55e:	bf08      	it	eq
 800d560:	6023      	streq	r3, [r4, #0]
 800d562:	e62b      	b.n	800d1bc <_strtod_l+0x4a4>
 800d564:	f04f 32ff 	mov.w	r2, #4294967295
 800d568:	fa02 f303 	lsl.w	r3, r2, r3
 800d56c:	ea03 0a0a 	and.w	sl, r3, sl
 800d570:	e6e3      	b.n	800d33a <_strtod_l+0x622>
 800d572:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d576:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d57a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d57e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d582:	fa01 f308 	lsl.w	r3, r1, r8
 800d586:	9308      	str	r3, [sp, #32]
 800d588:	910d      	str	r1, [sp, #52]	; 0x34
 800d58a:	e746      	b.n	800d41a <_strtod_l+0x702>
 800d58c:	2300      	movs	r3, #0
 800d58e:	9308      	str	r3, [sp, #32]
 800d590:	2301      	movs	r3, #1
 800d592:	930d      	str	r3, [sp, #52]	; 0x34
 800d594:	e741      	b.n	800d41a <_strtod_l+0x702>
 800d596:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d598:	4642      	mov	r2, r8
 800d59a:	4620      	mov	r0, r4
 800d59c:	f002 f992 	bl	800f8c4 <__lshift>
 800d5a0:	9018      	str	r0, [sp, #96]	; 0x60
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	f47f af6b 	bne.w	800d47e <_strtod_l+0x766>
 800d5a8:	e5fe      	b.n	800d1a8 <_strtod_l+0x490>
 800d5aa:	465f      	mov	r7, fp
 800d5ac:	d16e      	bne.n	800d68c <_strtod_l+0x974>
 800d5ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5b4:	b342      	cbz	r2, 800d608 <_strtod_l+0x8f0>
 800d5b6:	4a32      	ldr	r2, [pc, #200]	; (800d680 <_strtod_l+0x968>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d128      	bne.n	800d60e <_strtod_l+0x8f6>
 800d5bc:	9b04      	ldr	r3, [sp, #16]
 800d5be:	4651      	mov	r1, sl
 800d5c0:	b1eb      	cbz	r3, 800d5fe <_strtod_l+0x8e6>
 800d5c2:	4b2d      	ldr	r3, [pc, #180]	; (800d678 <_strtod_l+0x960>)
 800d5c4:	403b      	ands	r3, r7
 800d5c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ce:	d819      	bhi.n	800d604 <_strtod_l+0x8ec>
 800d5d0:	0d1b      	lsrs	r3, r3, #20
 800d5d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5da:	4299      	cmp	r1, r3
 800d5dc:	d117      	bne.n	800d60e <_strtod_l+0x8f6>
 800d5de:	4b29      	ldr	r3, [pc, #164]	; (800d684 <_strtod_l+0x96c>)
 800d5e0:	429f      	cmp	r7, r3
 800d5e2:	d102      	bne.n	800d5ea <_strtod_l+0x8d2>
 800d5e4:	3101      	adds	r1, #1
 800d5e6:	f43f addf 	beq.w	800d1a8 <_strtod_l+0x490>
 800d5ea:	4b23      	ldr	r3, [pc, #140]	; (800d678 <_strtod_l+0x960>)
 800d5ec:	403b      	ands	r3, r7
 800d5ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d5f2:	f04f 0a00 	mov.w	sl, #0
 800d5f6:	9b04      	ldr	r3, [sp, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1a4      	bne.n	800d546 <_strtod_l+0x82e>
 800d5fc:	e5de      	b.n	800d1bc <_strtod_l+0x4a4>
 800d5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d602:	e7ea      	b.n	800d5da <_strtod_l+0x8c2>
 800d604:	4613      	mov	r3, r2
 800d606:	e7e8      	b.n	800d5da <_strtod_l+0x8c2>
 800d608:	ea53 030a 	orrs.w	r3, r3, sl
 800d60c:	d08c      	beq.n	800d528 <_strtod_l+0x810>
 800d60e:	9b08      	ldr	r3, [sp, #32]
 800d610:	b1db      	cbz	r3, 800d64a <_strtod_l+0x932>
 800d612:	423b      	tst	r3, r7
 800d614:	d0ef      	beq.n	800d5f6 <_strtod_l+0x8de>
 800d616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d618:	9a04      	ldr	r2, [sp, #16]
 800d61a:	4650      	mov	r0, sl
 800d61c:	4659      	mov	r1, fp
 800d61e:	b1c3      	cbz	r3, 800d652 <_strtod_l+0x93a>
 800d620:	f7ff fb5b 	bl	800ccda <sulp>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	ec51 0b18 	vmov	r0, r1, d8
 800d62c:	f7f2 fe2e 	bl	800028c <__adddf3>
 800d630:	4682      	mov	sl, r0
 800d632:	468b      	mov	fp, r1
 800d634:	e7df      	b.n	800d5f6 <_strtod_l+0x8de>
 800d636:	4013      	ands	r3, r2
 800d638:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d63c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d640:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d644:	f04f 3aff 	mov.w	sl, #4294967295
 800d648:	e7d5      	b.n	800d5f6 <_strtod_l+0x8de>
 800d64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64c:	ea13 0f0a 	tst.w	r3, sl
 800d650:	e7e0      	b.n	800d614 <_strtod_l+0x8fc>
 800d652:	f7ff fb42 	bl	800ccda <sulp>
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	ec51 0b18 	vmov	r0, r1, d8
 800d65e:	f7f2 fe13 	bl	8000288 <__aeabi_dsub>
 800d662:	2200      	movs	r2, #0
 800d664:	2300      	movs	r3, #0
 800d666:	4682      	mov	sl, r0
 800d668:	468b      	mov	fp, r1
 800d66a:	f7f3 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d0c1      	beq.n	800d5f6 <_strtod_l+0x8de>
 800d672:	e611      	b.n	800d298 <_strtod_l+0x580>
 800d674:	fffffc02 	.word	0xfffffc02
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	39500000 	.word	0x39500000
 800d680:	000fffff 	.word	0x000fffff
 800d684:	7fefffff 	.word	0x7fefffff
 800d688:	08010848 	.word	0x08010848
 800d68c:	4631      	mov	r1, r6
 800d68e:	4628      	mov	r0, r5
 800d690:	f002 fb06 	bl	800fca0 <__ratio>
 800d694:	ec59 8b10 	vmov	r8, r9, d0
 800d698:	ee10 0a10 	vmov	r0, s0
 800d69c:	2200      	movs	r2, #0
 800d69e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	f7f3 fa24 	bl	8000af0 <__aeabi_dcmple>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d07a      	beq.n	800d7a2 <_strtod_l+0xa8a>
 800d6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d04a      	beq.n	800d748 <_strtod_l+0xa30>
 800d6b2:	4b95      	ldr	r3, [pc, #596]	; (800d908 <_strtod_l+0xbf0>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d908 <_strtod_l+0xbf0>
 800d6be:	f04f 0800 	mov.w	r8, #0
 800d6c2:	4b92      	ldr	r3, [pc, #584]	; (800d90c <_strtod_l+0xbf4>)
 800d6c4:	403b      	ands	r3, r7
 800d6c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6ca:	4b91      	ldr	r3, [pc, #580]	; (800d910 <_strtod_l+0xbf8>)
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	f040 80b0 	bne.w	800d832 <_strtod_l+0xb1a>
 800d6d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d6da:	ec4b ab10 	vmov	d0, sl, fp
 800d6de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6e2:	f002 fa05 	bl	800faf0 <__ulp>
 800d6e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6ea:	ec53 2b10 	vmov	r2, r3, d0
 800d6ee:	f7f2 ff83 	bl	80005f8 <__aeabi_dmul>
 800d6f2:	4652      	mov	r2, sl
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	f7f2 fdc9 	bl	800028c <__adddf3>
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4983      	ldr	r1, [pc, #524]	; (800d90c <_strtod_l+0xbf4>)
 800d6fe:	4a85      	ldr	r2, [pc, #532]	; (800d914 <_strtod_l+0xbfc>)
 800d700:	4019      	ands	r1, r3
 800d702:	4291      	cmp	r1, r2
 800d704:	4682      	mov	sl, r0
 800d706:	d960      	bls.n	800d7ca <_strtod_l+0xab2>
 800d708:	ee18 3a90 	vmov	r3, s17
 800d70c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d710:	4293      	cmp	r3, r2
 800d712:	d104      	bne.n	800d71e <_strtod_l+0xa06>
 800d714:	ee18 3a10 	vmov	r3, s16
 800d718:	3301      	adds	r3, #1
 800d71a:	f43f ad45 	beq.w	800d1a8 <_strtod_l+0x490>
 800d71e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d920 <_strtod_l+0xc08>
 800d722:	f04f 3aff 	mov.w	sl, #4294967295
 800d726:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d728:	4620      	mov	r0, r4
 800d72a:	f001 feaf 	bl	800f48c <_Bfree>
 800d72e:	9905      	ldr	r1, [sp, #20]
 800d730:	4620      	mov	r0, r4
 800d732:	f001 feab 	bl	800f48c <_Bfree>
 800d736:	4631      	mov	r1, r6
 800d738:	4620      	mov	r0, r4
 800d73a:	f001 fea7 	bl	800f48c <_Bfree>
 800d73e:	4629      	mov	r1, r5
 800d740:	4620      	mov	r0, r4
 800d742:	f001 fea3 	bl	800f48c <_Bfree>
 800d746:	e61a      	b.n	800d37e <_strtod_l+0x666>
 800d748:	f1ba 0f00 	cmp.w	sl, #0
 800d74c:	d11b      	bne.n	800d786 <_strtod_l+0xa6e>
 800d74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d752:	b9f3      	cbnz	r3, 800d792 <_strtod_l+0xa7a>
 800d754:	4b6c      	ldr	r3, [pc, #432]	; (800d908 <_strtod_l+0xbf0>)
 800d756:	2200      	movs	r2, #0
 800d758:	4640      	mov	r0, r8
 800d75a:	4649      	mov	r1, r9
 800d75c:	f7f3 f9be 	bl	8000adc <__aeabi_dcmplt>
 800d760:	b9d0      	cbnz	r0, 800d798 <_strtod_l+0xa80>
 800d762:	4640      	mov	r0, r8
 800d764:	4649      	mov	r1, r9
 800d766:	4b6c      	ldr	r3, [pc, #432]	; (800d918 <_strtod_l+0xc00>)
 800d768:	2200      	movs	r2, #0
 800d76a:	f7f2 ff45 	bl	80005f8 <__aeabi_dmul>
 800d76e:	4680      	mov	r8, r0
 800d770:	4689      	mov	r9, r1
 800d772:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d776:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d77a:	9315      	str	r3, [sp, #84]	; 0x54
 800d77c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d780:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d784:	e79d      	b.n	800d6c2 <_strtod_l+0x9aa>
 800d786:	f1ba 0f01 	cmp.w	sl, #1
 800d78a:	d102      	bne.n	800d792 <_strtod_l+0xa7a>
 800d78c:	2f00      	cmp	r7, #0
 800d78e:	f43f ad83 	beq.w	800d298 <_strtod_l+0x580>
 800d792:	4b62      	ldr	r3, [pc, #392]	; (800d91c <_strtod_l+0xc04>)
 800d794:	2200      	movs	r2, #0
 800d796:	e78e      	b.n	800d6b6 <_strtod_l+0x99e>
 800d798:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d918 <_strtod_l+0xc00>
 800d79c:	f04f 0800 	mov.w	r8, #0
 800d7a0:	e7e7      	b.n	800d772 <_strtod_l+0xa5a>
 800d7a2:	4b5d      	ldr	r3, [pc, #372]	; (800d918 <_strtod_l+0xc00>)
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	4649      	mov	r1, r9
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f7f2 ff25 	bl	80005f8 <__aeabi_dmul>
 800d7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7b0:	4680      	mov	r8, r0
 800d7b2:	4689      	mov	r9, r1
 800d7b4:	b933      	cbnz	r3, 800d7c4 <_strtod_l+0xaac>
 800d7b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7ba:	900e      	str	r0, [sp, #56]	; 0x38
 800d7bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d7c2:	e7dd      	b.n	800d780 <_strtod_l+0xa68>
 800d7c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d7c8:	e7f9      	b.n	800d7be <_strtod_l+0xaa6>
 800d7ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d7ce:	9b04      	ldr	r3, [sp, #16]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1a8      	bne.n	800d726 <_strtod_l+0xa0e>
 800d7d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7da:	0d1b      	lsrs	r3, r3, #20
 800d7dc:	051b      	lsls	r3, r3, #20
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d1a1      	bne.n	800d726 <_strtod_l+0xa0e>
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	f7f3 fa67 	bl	8000cb8 <__aeabi_d2lz>
 800d7ea:	f7f2 fed7 	bl	800059c <__aeabi_l2d>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	f7f2 fd47 	bl	8000288 <__aeabi_dsub>
 800d7fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d800:	ea43 030a 	orr.w	r3, r3, sl
 800d804:	4313      	orrs	r3, r2
 800d806:	4680      	mov	r8, r0
 800d808:	4689      	mov	r9, r1
 800d80a:	d055      	beq.n	800d8b8 <_strtod_l+0xba0>
 800d80c:	a336      	add	r3, pc, #216	; (adr r3, 800d8e8 <_strtod_l+0xbd0>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	f7f3 f963 	bl	8000adc <__aeabi_dcmplt>
 800d816:	2800      	cmp	r0, #0
 800d818:	f47f acd0 	bne.w	800d1bc <_strtod_l+0x4a4>
 800d81c:	a334      	add	r3, pc, #208	; (adr r3, 800d8f0 <_strtod_l+0xbd8>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	4640      	mov	r0, r8
 800d824:	4649      	mov	r1, r9
 800d826:	f7f3 f977 	bl	8000b18 <__aeabi_dcmpgt>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	f43f af7b 	beq.w	800d726 <_strtod_l+0xa0e>
 800d830:	e4c4      	b.n	800d1bc <_strtod_l+0x4a4>
 800d832:	9b04      	ldr	r3, [sp, #16]
 800d834:	b333      	cbz	r3, 800d884 <_strtod_l+0xb6c>
 800d836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d838:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d83c:	d822      	bhi.n	800d884 <_strtod_l+0xb6c>
 800d83e:	a32e      	add	r3, pc, #184	; (adr r3, 800d8f8 <_strtod_l+0xbe0>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	4640      	mov	r0, r8
 800d846:	4649      	mov	r1, r9
 800d848:	f7f3 f952 	bl	8000af0 <__aeabi_dcmple>
 800d84c:	b1a0      	cbz	r0, 800d878 <_strtod_l+0xb60>
 800d84e:	4649      	mov	r1, r9
 800d850:	4640      	mov	r0, r8
 800d852:	f7f3 f9a9 	bl	8000ba8 <__aeabi_d2uiz>
 800d856:	2801      	cmp	r0, #1
 800d858:	bf38      	it	cc
 800d85a:	2001      	movcc	r0, #1
 800d85c:	f7f2 fe52 	bl	8000504 <__aeabi_ui2d>
 800d860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d862:	4680      	mov	r8, r0
 800d864:	4689      	mov	r9, r1
 800d866:	bb23      	cbnz	r3, 800d8b2 <_strtod_l+0xb9a>
 800d868:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d86c:	9010      	str	r0, [sp, #64]	; 0x40
 800d86e:	9311      	str	r3, [sp, #68]	; 0x44
 800d870:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d874:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d87a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d87c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d880:	1a9b      	subs	r3, r3, r2
 800d882:	9309      	str	r3, [sp, #36]	; 0x24
 800d884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d888:	eeb0 0a48 	vmov.f32	s0, s16
 800d88c:	eef0 0a68 	vmov.f32	s1, s17
 800d890:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d894:	f002 f92c 	bl	800faf0 <__ulp>
 800d898:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d89c:	ec53 2b10 	vmov	r2, r3, d0
 800d8a0:	f7f2 feaa 	bl	80005f8 <__aeabi_dmul>
 800d8a4:	ec53 2b18 	vmov	r2, r3, d8
 800d8a8:	f7f2 fcf0 	bl	800028c <__adddf3>
 800d8ac:	4682      	mov	sl, r0
 800d8ae:	468b      	mov	fp, r1
 800d8b0:	e78d      	b.n	800d7ce <_strtod_l+0xab6>
 800d8b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d8b6:	e7db      	b.n	800d870 <_strtod_l+0xb58>
 800d8b8:	a311      	add	r3, pc, #68	; (adr r3, 800d900 <_strtod_l+0xbe8>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f3 f90d 	bl	8000adc <__aeabi_dcmplt>
 800d8c2:	e7b2      	b.n	800d82a <_strtod_l+0xb12>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d8ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	f7ff ba6b 	b.w	800cda8 <_strtod_l+0x90>
 800d8d2:	2a65      	cmp	r2, #101	; 0x65
 800d8d4:	f43f ab5f 	beq.w	800cf96 <_strtod_l+0x27e>
 800d8d8:	2a45      	cmp	r2, #69	; 0x45
 800d8da:	f43f ab5c 	beq.w	800cf96 <_strtod_l+0x27e>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	f7ff bb94 	b.w	800d00c <_strtod_l+0x2f4>
 800d8e4:	f3af 8000 	nop.w
 800d8e8:	94a03595 	.word	0x94a03595
 800d8ec:	3fdfffff 	.word	0x3fdfffff
 800d8f0:	35afe535 	.word	0x35afe535
 800d8f4:	3fe00000 	.word	0x3fe00000
 800d8f8:	ffc00000 	.word	0xffc00000
 800d8fc:	41dfffff 	.word	0x41dfffff
 800d900:	94a03595 	.word	0x94a03595
 800d904:	3fcfffff 	.word	0x3fcfffff
 800d908:	3ff00000 	.word	0x3ff00000
 800d90c:	7ff00000 	.word	0x7ff00000
 800d910:	7fe00000 	.word	0x7fe00000
 800d914:	7c9fffff 	.word	0x7c9fffff
 800d918:	3fe00000 	.word	0x3fe00000
 800d91c:	bff00000 	.word	0xbff00000
 800d920:	7fefffff 	.word	0x7fefffff

0800d924 <_strtod_r>:
 800d924:	4b01      	ldr	r3, [pc, #4]	; (800d92c <_strtod_r+0x8>)
 800d926:	f7ff b9f7 	b.w	800cd18 <_strtod_l>
 800d92a:	bf00      	nop
 800d92c:	200000ac 	.word	0x200000ac

0800d930 <_strtol_l.constprop.0>:
 800d930:	2b01      	cmp	r3, #1
 800d932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d936:	d001      	beq.n	800d93c <_strtol_l.constprop.0+0xc>
 800d938:	2b24      	cmp	r3, #36	; 0x24
 800d93a:	d906      	bls.n	800d94a <_strtol_l.constprop.0+0x1a>
 800d93c:	f7fe f916 	bl	800bb6c <__errno>
 800d940:	2316      	movs	r3, #22
 800d942:	6003      	str	r3, [r0, #0]
 800d944:	2000      	movs	r0, #0
 800d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800da30 <_strtol_l.constprop.0+0x100>
 800d94e:	460d      	mov	r5, r1
 800d950:	462e      	mov	r6, r5
 800d952:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d956:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d95a:	f017 0708 	ands.w	r7, r7, #8
 800d95e:	d1f7      	bne.n	800d950 <_strtol_l.constprop.0+0x20>
 800d960:	2c2d      	cmp	r4, #45	; 0x2d
 800d962:	d132      	bne.n	800d9ca <_strtol_l.constprop.0+0x9a>
 800d964:	782c      	ldrb	r4, [r5, #0]
 800d966:	2701      	movs	r7, #1
 800d968:	1cb5      	adds	r5, r6, #2
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d05b      	beq.n	800da26 <_strtol_l.constprop.0+0xf6>
 800d96e:	2b10      	cmp	r3, #16
 800d970:	d109      	bne.n	800d986 <_strtol_l.constprop.0+0x56>
 800d972:	2c30      	cmp	r4, #48	; 0x30
 800d974:	d107      	bne.n	800d986 <_strtol_l.constprop.0+0x56>
 800d976:	782c      	ldrb	r4, [r5, #0]
 800d978:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d97c:	2c58      	cmp	r4, #88	; 0x58
 800d97e:	d14d      	bne.n	800da1c <_strtol_l.constprop.0+0xec>
 800d980:	786c      	ldrb	r4, [r5, #1]
 800d982:	2310      	movs	r3, #16
 800d984:	3502      	adds	r5, #2
 800d986:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d98a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d98e:	f04f 0c00 	mov.w	ip, #0
 800d992:	fbb8 f9f3 	udiv	r9, r8, r3
 800d996:	4666      	mov	r6, ip
 800d998:	fb03 8a19 	mls	sl, r3, r9, r8
 800d99c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d9a0:	f1be 0f09 	cmp.w	lr, #9
 800d9a4:	d816      	bhi.n	800d9d4 <_strtol_l.constprop.0+0xa4>
 800d9a6:	4674      	mov	r4, lr
 800d9a8:	42a3      	cmp	r3, r4
 800d9aa:	dd24      	ble.n	800d9f6 <_strtol_l.constprop.0+0xc6>
 800d9ac:	f1bc 0f00 	cmp.w	ip, #0
 800d9b0:	db1e      	blt.n	800d9f0 <_strtol_l.constprop.0+0xc0>
 800d9b2:	45b1      	cmp	r9, r6
 800d9b4:	d31c      	bcc.n	800d9f0 <_strtol_l.constprop.0+0xc0>
 800d9b6:	d101      	bne.n	800d9bc <_strtol_l.constprop.0+0x8c>
 800d9b8:	45a2      	cmp	sl, r4
 800d9ba:	db19      	blt.n	800d9f0 <_strtol_l.constprop.0+0xc0>
 800d9bc:	fb06 4603 	mla	r6, r6, r3, r4
 800d9c0:	f04f 0c01 	mov.w	ip, #1
 800d9c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9c8:	e7e8      	b.n	800d99c <_strtol_l.constprop.0+0x6c>
 800d9ca:	2c2b      	cmp	r4, #43	; 0x2b
 800d9cc:	bf04      	itt	eq
 800d9ce:	782c      	ldrbeq	r4, [r5, #0]
 800d9d0:	1cb5      	addeq	r5, r6, #2
 800d9d2:	e7ca      	b.n	800d96a <_strtol_l.constprop.0+0x3a>
 800d9d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d9d8:	f1be 0f19 	cmp.w	lr, #25
 800d9dc:	d801      	bhi.n	800d9e2 <_strtol_l.constprop.0+0xb2>
 800d9de:	3c37      	subs	r4, #55	; 0x37
 800d9e0:	e7e2      	b.n	800d9a8 <_strtol_l.constprop.0+0x78>
 800d9e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d9e6:	f1be 0f19 	cmp.w	lr, #25
 800d9ea:	d804      	bhi.n	800d9f6 <_strtol_l.constprop.0+0xc6>
 800d9ec:	3c57      	subs	r4, #87	; 0x57
 800d9ee:	e7db      	b.n	800d9a8 <_strtol_l.constprop.0+0x78>
 800d9f0:	f04f 3cff 	mov.w	ip, #4294967295
 800d9f4:	e7e6      	b.n	800d9c4 <_strtol_l.constprop.0+0x94>
 800d9f6:	f1bc 0f00 	cmp.w	ip, #0
 800d9fa:	da05      	bge.n	800da08 <_strtol_l.constprop.0+0xd8>
 800d9fc:	2322      	movs	r3, #34	; 0x22
 800d9fe:	6003      	str	r3, [r0, #0]
 800da00:	4646      	mov	r6, r8
 800da02:	b942      	cbnz	r2, 800da16 <_strtol_l.constprop.0+0xe6>
 800da04:	4630      	mov	r0, r6
 800da06:	e79e      	b.n	800d946 <_strtol_l.constprop.0+0x16>
 800da08:	b107      	cbz	r7, 800da0c <_strtol_l.constprop.0+0xdc>
 800da0a:	4276      	negs	r6, r6
 800da0c:	2a00      	cmp	r2, #0
 800da0e:	d0f9      	beq.n	800da04 <_strtol_l.constprop.0+0xd4>
 800da10:	f1bc 0f00 	cmp.w	ip, #0
 800da14:	d000      	beq.n	800da18 <_strtol_l.constprop.0+0xe8>
 800da16:	1e69      	subs	r1, r5, #1
 800da18:	6011      	str	r1, [r2, #0]
 800da1a:	e7f3      	b.n	800da04 <_strtol_l.constprop.0+0xd4>
 800da1c:	2430      	movs	r4, #48	; 0x30
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1b1      	bne.n	800d986 <_strtol_l.constprop.0+0x56>
 800da22:	2308      	movs	r3, #8
 800da24:	e7af      	b.n	800d986 <_strtol_l.constprop.0+0x56>
 800da26:	2c30      	cmp	r4, #48	; 0x30
 800da28:	d0a5      	beq.n	800d976 <_strtol_l.constprop.0+0x46>
 800da2a:	230a      	movs	r3, #10
 800da2c:	e7ab      	b.n	800d986 <_strtol_l.constprop.0+0x56>
 800da2e:	bf00      	nop
 800da30:	08010871 	.word	0x08010871

0800da34 <_strtol_r>:
 800da34:	f7ff bf7c 	b.w	800d930 <_strtol_l.constprop.0>

0800da38 <__swbuf_r>:
 800da38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3a:	460e      	mov	r6, r1
 800da3c:	4614      	mov	r4, r2
 800da3e:	4605      	mov	r5, r0
 800da40:	b118      	cbz	r0, 800da4a <__swbuf_r+0x12>
 800da42:	6983      	ldr	r3, [r0, #24]
 800da44:	b90b      	cbnz	r3, 800da4a <__swbuf_r+0x12>
 800da46:	f001 f84b 	bl	800eae0 <__sinit>
 800da4a:	4b21      	ldr	r3, [pc, #132]	; (800dad0 <__swbuf_r+0x98>)
 800da4c:	429c      	cmp	r4, r3
 800da4e:	d12b      	bne.n	800daa8 <__swbuf_r+0x70>
 800da50:	686c      	ldr	r4, [r5, #4]
 800da52:	69a3      	ldr	r3, [r4, #24]
 800da54:	60a3      	str	r3, [r4, #8]
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	071a      	lsls	r2, r3, #28
 800da5a:	d52f      	bpl.n	800dabc <__swbuf_r+0x84>
 800da5c:	6923      	ldr	r3, [r4, #16]
 800da5e:	b36b      	cbz	r3, 800dabc <__swbuf_r+0x84>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	6820      	ldr	r0, [r4, #0]
 800da64:	1ac0      	subs	r0, r0, r3
 800da66:	6963      	ldr	r3, [r4, #20]
 800da68:	b2f6      	uxtb	r6, r6
 800da6a:	4283      	cmp	r3, r0
 800da6c:	4637      	mov	r7, r6
 800da6e:	dc04      	bgt.n	800da7a <__swbuf_r+0x42>
 800da70:	4621      	mov	r1, r4
 800da72:	4628      	mov	r0, r5
 800da74:	f000 ffa0 	bl	800e9b8 <_fflush_r>
 800da78:	bb30      	cbnz	r0, 800dac8 <__swbuf_r+0x90>
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	60a3      	str	r3, [r4, #8]
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	6022      	str	r2, [r4, #0]
 800da86:	701e      	strb	r6, [r3, #0]
 800da88:	6963      	ldr	r3, [r4, #20]
 800da8a:	3001      	adds	r0, #1
 800da8c:	4283      	cmp	r3, r0
 800da8e:	d004      	beq.n	800da9a <__swbuf_r+0x62>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	07db      	lsls	r3, r3, #31
 800da94:	d506      	bpl.n	800daa4 <__swbuf_r+0x6c>
 800da96:	2e0a      	cmp	r6, #10
 800da98:	d104      	bne.n	800daa4 <__swbuf_r+0x6c>
 800da9a:	4621      	mov	r1, r4
 800da9c:	4628      	mov	r0, r5
 800da9e:	f000 ff8b 	bl	800e9b8 <_fflush_r>
 800daa2:	b988      	cbnz	r0, 800dac8 <__swbuf_r+0x90>
 800daa4:	4638      	mov	r0, r7
 800daa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa8:	4b0a      	ldr	r3, [pc, #40]	; (800dad4 <__swbuf_r+0x9c>)
 800daaa:	429c      	cmp	r4, r3
 800daac:	d101      	bne.n	800dab2 <__swbuf_r+0x7a>
 800daae:	68ac      	ldr	r4, [r5, #8]
 800dab0:	e7cf      	b.n	800da52 <__swbuf_r+0x1a>
 800dab2:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <__swbuf_r+0xa0>)
 800dab4:	429c      	cmp	r4, r3
 800dab6:	bf08      	it	eq
 800dab8:	68ec      	ldreq	r4, [r5, #12]
 800daba:	e7ca      	b.n	800da52 <__swbuf_r+0x1a>
 800dabc:	4621      	mov	r1, r4
 800dabe:	4628      	mov	r0, r5
 800dac0:	f000 f80c 	bl	800dadc <__swsetup_r>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0cb      	beq.n	800da60 <__swbuf_r+0x28>
 800dac8:	f04f 37ff 	mov.w	r7, #4294967295
 800dacc:	e7ea      	b.n	800daa4 <__swbuf_r+0x6c>
 800dace:	bf00      	nop
 800dad0:	08010a24 	.word	0x08010a24
 800dad4:	08010a44 	.word	0x08010a44
 800dad8:	08010a04 	.word	0x08010a04

0800dadc <__swsetup_r>:
 800dadc:	4b32      	ldr	r3, [pc, #200]	; (800dba8 <__swsetup_r+0xcc>)
 800dade:	b570      	push	{r4, r5, r6, lr}
 800dae0:	681d      	ldr	r5, [r3, #0]
 800dae2:	4606      	mov	r6, r0
 800dae4:	460c      	mov	r4, r1
 800dae6:	b125      	cbz	r5, 800daf2 <__swsetup_r+0x16>
 800dae8:	69ab      	ldr	r3, [r5, #24]
 800daea:	b913      	cbnz	r3, 800daf2 <__swsetup_r+0x16>
 800daec:	4628      	mov	r0, r5
 800daee:	f000 fff7 	bl	800eae0 <__sinit>
 800daf2:	4b2e      	ldr	r3, [pc, #184]	; (800dbac <__swsetup_r+0xd0>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	d10f      	bne.n	800db18 <__swsetup_r+0x3c>
 800daf8:	686c      	ldr	r4, [r5, #4]
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db00:	0719      	lsls	r1, r3, #28
 800db02:	d42c      	bmi.n	800db5e <__swsetup_r+0x82>
 800db04:	06dd      	lsls	r5, r3, #27
 800db06:	d411      	bmi.n	800db2c <__swsetup_r+0x50>
 800db08:	2309      	movs	r3, #9
 800db0a:	6033      	str	r3, [r6, #0]
 800db0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db10:	81a3      	strh	r3, [r4, #12]
 800db12:	f04f 30ff 	mov.w	r0, #4294967295
 800db16:	e03e      	b.n	800db96 <__swsetup_r+0xba>
 800db18:	4b25      	ldr	r3, [pc, #148]	; (800dbb0 <__swsetup_r+0xd4>)
 800db1a:	429c      	cmp	r4, r3
 800db1c:	d101      	bne.n	800db22 <__swsetup_r+0x46>
 800db1e:	68ac      	ldr	r4, [r5, #8]
 800db20:	e7eb      	b.n	800dafa <__swsetup_r+0x1e>
 800db22:	4b24      	ldr	r3, [pc, #144]	; (800dbb4 <__swsetup_r+0xd8>)
 800db24:	429c      	cmp	r4, r3
 800db26:	bf08      	it	eq
 800db28:	68ec      	ldreq	r4, [r5, #12]
 800db2a:	e7e6      	b.n	800dafa <__swsetup_r+0x1e>
 800db2c:	0758      	lsls	r0, r3, #29
 800db2e:	d512      	bpl.n	800db56 <__swsetup_r+0x7a>
 800db30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db32:	b141      	cbz	r1, 800db46 <__swsetup_r+0x6a>
 800db34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db38:	4299      	cmp	r1, r3
 800db3a:	d002      	beq.n	800db42 <__swsetup_r+0x66>
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7fe f865 	bl	800bc0c <_free_r>
 800db42:	2300      	movs	r3, #0
 800db44:	6363      	str	r3, [r4, #52]	; 0x34
 800db46:	89a3      	ldrh	r3, [r4, #12]
 800db48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db4c:	81a3      	strh	r3, [r4, #12]
 800db4e:	2300      	movs	r3, #0
 800db50:	6063      	str	r3, [r4, #4]
 800db52:	6923      	ldr	r3, [r4, #16]
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	f043 0308 	orr.w	r3, r3, #8
 800db5c:	81a3      	strh	r3, [r4, #12]
 800db5e:	6923      	ldr	r3, [r4, #16]
 800db60:	b94b      	cbnz	r3, 800db76 <__swsetup_r+0x9a>
 800db62:	89a3      	ldrh	r3, [r4, #12]
 800db64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db6c:	d003      	beq.n	800db76 <__swsetup_r+0x9a>
 800db6e:	4621      	mov	r1, r4
 800db70:	4630      	mov	r0, r6
 800db72:	f001 fbed 	bl	800f350 <__smakebuf_r>
 800db76:	89a0      	ldrh	r0, [r4, #12]
 800db78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db7c:	f010 0301 	ands.w	r3, r0, #1
 800db80:	d00a      	beq.n	800db98 <__swsetup_r+0xbc>
 800db82:	2300      	movs	r3, #0
 800db84:	60a3      	str	r3, [r4, #8]
 800db86:	6963      	ldr	r3, [r4, #20]
 800db88:	425b      	negs	r3, r3
 800db8a:	61a3      	str	r3, [r4, #24]
 800db8c:	6923      	ldr	r3, [r4, #16]
 800db8e:	b943      	cbnz	r3, 800dba2 <__swsetup_r+0xc6>
 800db90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db94:	d1ba      	bne.n	800db0c <__swsetup_r+0x30>
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	0781      	lsls	r1, r0, #30
 800db9a:	bf58      	it	pl
 800db9c:	6963      	ldrpl	r3, [r4, #20]
 800db9e:	60a3      	str	r3, [r4, #8]
 800dba0:	e7f4      	b.n	800db8c <__swsetup_r+0xb0>
 800dba2:	2000      	movs	r0, #0
 800dba4:	e7f7      	b.n	800db96 <__swsetup_r+0xba>
 800dba6:	bf00      	nop
 800dba8:	20000044 	.word	0x20000044
 800dbac:	08010a24 	.word	0x08010a24
 800dbb0:	08010a44 	.word	0x08010a44
 800dbb4:	08010a04 	.word	0x08010a04

0800dbb8 <quorem>:
 800dbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	6903      	ldr	r3, [r0, #16]
 800dbbe:	690c      	ldr	r4, [r1, #16]
 800dbc0:	42a3      	cmp	r3, r4
 800dbc2:	4607      	mov	r7, r0
 800dbc4:	f2c0 8081 	blt.w	800dcca <quorem+0x112>
 800dbc8:	3c01      	subs	r4, #1
 800dbca:	f101 0814 	add.w	r8, r1, #20
 800dbce:	f100 0514 	add.w	r5, r0, #20
 800dbd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dbe8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbec:	fbb2 f6f3 	udiv	r6, r2, r3
 800dbf0:	d331      	bcc.n	800dc56 <quorem+0x9e>
 800dbf2:	f04f 0e00 	mov.w	lr, #0
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	46ac      	mov	ip, r5
 800dbfa:	46f2      	mov	sl, lr
 800dbfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc00:	b293      	uxth	r3, r2
 800dc02:	fb06 e303 	mla	r3, r6, r3, lr
 800dc06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	ebaa 0303 	sub.w	r3, sl, r3
 800dc10:	f8dc a000 	ldr.w	sl, [ip]
 800dc14:	0c12      	lsrs	r2, r2, #16
 800dc16:	fa13 f38a 	uxtah	r3, r3, sl
 800dc1a:	fb06 e202 	mla	r2, r6, r2, lr
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	9b00      	ldr	r3, [sp, #0]
 800dc22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc26:	b292      	uxth	r2, r2
 800dc28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc30:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc34:	4581      	cmp	r9, r0
 800dc36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc3a:	f84c 3b04 	str.w	r3, [ip], #4
 800dc3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc42:	d2db      	bcs.n	800dbfc <quorem+0x44>
 800dc44:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc48:	b92b      	cbnz	r3, 800dc56 <quorem+0x9e>
 800dc4a:	9b01      	ldr	r3, [sp, #4]
 800dc4c:	3b04      	subs	r3, #4
 800dc4e:	429d      	cmp	r5, r3
 800dc50:	461a      	mov	r2, r3
 800dc52:	d32e      	bcc.n	800dcb2 <quorem+0xfa>
 800dc54:	613c      	str	r4, [r7, #16]
 800dc56:	4638      	mov	r0, r7
 800dc58:	f001 fea4 	bl	800f9a4 <__mcmp>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	db24      	blt.n	800dcaa <quorem+0xf2>
 800dc60:	3601      	adds	r6, #1
 800dc62:	4628      	mov	r0, r5
 800dc64:	f04f 0c00 	mov.w	ip, #0
 800dc68:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc6c:	f8d0 e000 	ldr.w	lr, [r0]
 800dc70:	b293      	uxth	r3, r2
 800dc72:	ebac 0303 	sub.w	r3, ip, r3
 800dc76:	0c12      	lsrs	r2, r2, #16
 800dc78:	fa13 f38e 	uxtah	r3, r3, lr
 800dc7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dc80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc8a:	45c1      	cmp	r9, r8
 800dc8c:	f840 3b04 	str.w	r3, [r0], #4
 800dc90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dc94:	d2e8      	bcs.n	800dc68 <quorem+0xb0>
 800dc96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc9e:	b922      	cbnz	r2, 800dcaa <quorem+0xf2>
 800dca0:	3b04      	subs	r3, #4
 800dca2:	429d      	cmp	r5, r3
 800dca4:	461a      	mov	r2, r3
 800dca6:	d30a      	bcc.n	800dcbe <quorem+0x106>
 800dca8:	613c      	str	r4, [r7, #16]
 800dcaa:	4630      	mov	r0, r6
 800dcac:	b003      	add	sp, #12
 800dcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb2:	6812      	ldr	r2, [r2, #0]
 800dcb4:	3b04      	subs	r3, #4
 800dcb6:	2a00      	cmp	r2, #0
 800dcb8:	d1cc      	bne.n	800dc54 <quorem+0x9c>
 800dcba:	3c01      	subs	r4, #1
 800dcbc:	e7c7      	b.n	800dc4e <quorem+0x96>
 800dcbe:	6812      	ldr	r2, [r2, #0]
 800dcc0:	3b04      	subs	r3, #4
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	d1f0      	bne.n	800dca8 <quorem+0xf0>
 800dcc6:	3c01      	subs	r4, #1
 800dcc8:	e7eb      	b.n	800dca2 <quorem+0xea>
 800dcca:	2000      	movs	r0, #0
 800dccc:	e7ee      	b.n	800dcac <quorem+0xf4>
	...

0800dcd0 <_dtoa_r>:
 800dcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd4:	ed2d 8b04 	vpush	{d8-d9}
 800dcd8:	ec57 6b10 	vmov	r6, r7, d0
 800dcdc:	b093      	sub	sp, #76	; 0x4c
 800dcde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dce4:	9106      	str	r1, [sp, #24]
 800dce6:	ee10 aa10 	vmov	sl, s0
 800dcea:	4604      	mov	r4, r0
 800dcec:	9209      	str	r2, [sp, #36]	; 0x24
 800dcee:	930c      	str	r3, [sp, #48]	; 0x30
 800dcf0:	46bb      	mov	fp, r7
 800dcf2:	b975      	cbnz	r5, 800dd12 <_dtoa_r+0x42>
 800dcf4:	2010      	movs	r0, #16
 800dcf6:	f7fd ff63 	bl	800bbc0 <malloc>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	6260      	str	r0, [r4, #36]	; 0x24
 800dcfe:	b920      	cbnz	r0, 800dd0a <_dtoa_r+0x3a>
 800dd00:	4ba7      	ldr	r3, [pc, #668]	; (800dfa0 <_dtoa_r+0x2d0>)
 800dd02:	21ea      	movs	r1, #234	; 0xea
 800dd04:	48a7      	ldr	r0, [pc, #668]	; (800dfa4 <_dtoa_r+0x2d4>)
 800dd06:	f002 fb79 	bl	80103fc <__assert_func>
 800dd0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd0e:	6005      	str	r5, [r0, #0]
 800dd10:	60c5      	str	r5, [r0, #12]
 800dd12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd14:	6819      	ldr	r1, [r3, #0]
 800dd16:	b151      	cbz	r1, 800dd2e <_dtoa_r+0x5e>
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	604a      	str	r2, [r1, #4]
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	4093      	lsls	r3, r2
 800dd20:	608b      	str	r3, [r1, #8]
 800dd22:	4620      	mov	r0, r4
 800dd24:	f001 fbb2 	bl	800f48c <_Bfree>
 800dd28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	1e3b      	subs	r3, r7, #0
 800dd30:	bfaa      	itet	ge
 800dd32:	2300      	movge	r3, #0
 800dd34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dd38:	f8c8 3000 	strge.w	r3, [r8]
 800dd3c:	4b9a      	ldr	r3, [pc, #616]	; (800dfa8 <_dtoa_r+0x2d8>)
 800dd3e:	bfbc      	itt	lt
 800dd40:	2201      	movlt	r2, #1
 800dd42:	f8c8 2000 	strlt.w	r2, [r8]
 800dd46:	ea33 030b 	bics.w	r3, r3, fp
 800dd4a:	d11b      	bne.n	800dd84 <_dtoa_r+0xb4>
 800dd4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd52:	6013      	str	r3, [r2, #0]
 800dd54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd58:	4333      	orrs	r3, r6
 800dd5a:	f000 8592 	beq.w	800e882 <_dtoa_r+0xbb2>
 800dd5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd60:	b963      	cbnz	r3, 800dd7c <_dtoa_r+0xac>
 800dd62:	4b92      	ldr	r3, [pc, #584]	; (800dfac <_dtoa_r+0x2dc>)
 800dd64:	e022      	b.n	800ddac <_dtoa_r+0xdc>
 800dd66:	4b92      	ldr	r3, [pc, #584]	; (800dfb0 <_dtoa_r+0x2e0>)
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	9801      	ldr	r0, [sp, #4]
 800dd72:	b013      	add	sp, #76	; 0x4c
 800dd74:	ecbd 8b04 	vpop	{d8-d9}
 800dd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7c:	4b8b      	ldr	r3, [pc, #556]	; (800dfac <_dtoa_r+0x2dc>)
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	3303      	adds	r3, #3
 800dd82:	e7f3      	b.n	800dd6c <_dtoa_r+0x9c>
 800dd84:	2200      	movs	r2, #0
 800dd86:	2300      	movs	r3, #0
 800dd88:	4650      	mov	r0, sl
 800dd8a:	4659      	mov	r1, fp
 800dd8c:	f7f2 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd90:	ec4b ab19 	vmov	d9, sl, fp
 800dd94:	4680      	mov	r8, r0
 800dd96:	b158      	cbz	r0, 800ddb0 <_dtoa_r+0xe0>
 800dd98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 856b 	beq.w	800e87c <_dtoa_r+0xbac>
 800dda6:	4883      	ldr	r0, [pc, #524]	; (800dfb4 <_dtoa_r+0x2e4>)
 800dda8:	6018      	str	r0, [r3, #0]
 800ddaa:	1e43      	subs	r3, r0, #1
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	e7df      	b.n	800dd70 <_dtoa_r+0xa0>
 800ddb0:	ec4b ab10 	vmov	d0, sl, fp
 800ddb4:	aa10      	add	r2, sp, #64	; 0x40
 800ddb6:	a911      	add	r1, sp, #68	; 0x44
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f001 ff15 	bl	800fbe8 <__d2b>
 800ddbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ddc2:	ee08 0a10 	vmov	s16, r0
 800ddc6:	2d00      	cmp	r5, #0
 800ddc8:	f000 8084 	beq.w	800ded4 <_dtoa_r+0x204>
 800ddcc:	ee19 3a90 	vmov	r3, s19
 800ddd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ddd8:	4656      	mov	r6, sl
 800ddda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ddde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dde2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dde6:	4b74      	ldr	r3, [pc, #464]	; (800dfb8 <_dtoa_r+0x2e8>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	4630      	mov	r0, r6
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fa4b 	bl	8000288 <__aeabi_dsub>
 800ddf2:	a365      	add	r3, pc, #404	; (adr r3, 800df88 <_dtoa_r+0x2b8>)
 800ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf8:	f7f2 fbfe 	bl	80005f8 <__aeabi_dmul>
 800ddfc:	a364      	add	r3, pc, #400	; (adr r3, 800df90 <_dtoa_r+0x2c0>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f7f2 fa43 	bl	800028c <__adddf3>
 800de06:	4606      	mov	r6, r0
 800de08:	4628      	mov	r0, r5
 800de0a:	460f      	mov	r7, r1
 800de0c:	f7f2 fb8a 	bl	8000524 <__aeabi_i2d>
 800de10:	a361      	add	r3, pc, #388	; (adr r3, 800df98 <_dtoa_r+0x2c8>)
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	f7f2 fbef 	bl	80005f8 <__aeabi_dmul>
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	4630      	mov	r0, r6
 800de20:	4639      	mov	r1, r7
 800de22:	f7f2 fa33 	bl	800028c <__adddf3>
 800de26:	4606      	mov	r6, r0
 800de28:	460f      	mov	r7, r1
 800de2a:	f7f2 fe95 	bl	8000b58 <__aeabi_d2iz>
 800de2e:	2200      	movs	r2, #0
 800de30:	9000      	str	r0, [sp, #0]
 800de32:	2300      	movs	r3, #0
 800de34:	4630      	mov	r0, r6
 800de36:	4639      	mov	r1, r7
 800de38:	f7f2 fe50 	bl	8000adc <__aeabi_dcmplt>
 800de3c:	b150      	cbz	r0, 800de54 <_dtoa_r+0x184>
 800de3e:	9800      	ldr	r0, [sp, #0]
 800de40:	f7f2 fb70 	bl	8000524 <__aeabi_i2d>
 800de44:	4632      	mov	r2, r6
 800de46:	463b      	mov	r3, r7
 800de48:	f7f2 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800de4c:	b910      	cbnz	r0, 800de54 <_dtoa_r+0x184>
 800de4e:	9b00      	ldr	r3, [sp, #0]
 800de50:	3b01      	subs	r3, #1
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	9b00      	ldr	r3, [sp, #0]
 800de56:	2b16      	cmp	r3, #22
 800de58:	d85a      	bhi.n	800df10 <_dtoa_r+0x240>
 800de5a:	9a00      	ldr	r2, [sp, #0]
 800de5c:	4b57      	ldr	r3, [pc, #348]	; (800dfbc <_dtoa_r+0x2ec>)
 800de5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de66:	ec51 0b19 	vmov	r0, r1, d9
 800de6a:	f7f2 fe37 	bl	8000adc <__aeabi_dcmplt>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d050      	beq.n	800df14 <_dtoa_r+0x244>
 800de72:	9b00      	ldr	r3, [sp, #0]
 800de74:	3b01      	subs	r3, #1
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	2300      	movs	r3, #0
 800de7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800de7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de7e:	1b5d      	subs	r5, r3, r5
 800de80:	1e6b      	subs	r3, r5, #1
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	bf45      	ittet	mi
 800de86:	f1c5 0301 	rsbmi	r3, r5, #1
 800de8a:	9304      	strmi	r3, [sp, #16]
 800de8c:	2300      	movpl	r3, #0
 800de8e:	2300      	movmi	r3, #0
 800de90:	bf4c      	ite	mi
 800de92:	9305      	strmi	r3, [sp, #20]
 800de94:	9304      	strpl	r3, [sp, #16]
 800de96:	9b00      	ldr	r3, [sp, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	db3d      	blt.n	800df18 <_dtoa_r+0x248>
 800de9c:	9b05      	ldr	r3, [sp, #20]
 800de9e:	9a00      	ldr	r2, [sp, #0]
 800dea0:	920a      	str	r2, [sp, #40]	; 0x28
 800dea2:	4413      	add	r3, r2
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	2300      	movs	r3, #0
 800dea8:	9307      	str	r3, [sp, #28]
 800deaa:	9b06      	ldr	r3, [sp, #24]
 800deac:	2b09      	cmp	r3, #9
 800deae:	f200 8089 	bhi.w	800dfc4 <_dtoa_r+0x2f4>
 800deb2:	2b05      	cmp	r3, #5
 800deb4:	bfc4      	itt	gt
 800deb6:	3b04      	subgt	r3, #4
 800deb8:	9306      	strgt	r3, [sp, #24]
 800deba:	9b06      	ldr	r3, [sp, #24]
 800debc:	f1a3 0302 	sub.w	r3, r3, #2
 800dec0:	bfcc      	ite	gt
 800dec2:	2500      	movgt	r5, #0
 800dec4:	2501      	movle	r5, #1
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	f200 8087 	bhi.w	800dfda <_dtoa_r+0x30a>
 800decc:	e8df f003 	tbb	[pc, r3]
 800ded0:	59383a2d 	.word	0x59383a2d
 800ded4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ded8:	441d      	add	r5, r3
 800deda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dede:	2b20      	cmp	r3, #32
 800dee0:	bfc1      	itttt	gt
 800dee2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dee6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800deea:	fa0b f303 	lslgt.w	r3, fp, r3
 800deee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800def2:	bfda      	itte	le
 800def4:	f1c3 0320 	rsble	r3, r3, #32
 800def8:	fa06 f003 	lslle.w	r0, r6, r3
 800defc:	4318      	orrgt	r0, r3
 800defe:	f7f2 fb01 	bl	8000504 <__aeabi_ui2d>
 800df02:	2301      	movs	r3, #1
 800df04:	4606      	mov	r6, r0
 800df06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800df0a:	3d01      	subs	r5, #1
 800df0c:	930e      	str	r3, [sp, #56]	; 0x38
 800df0e:	e76a      	b.n	800dde6 <_dtoa_r+0x116>
 800df10:	2301      	movs	r3, #1
 800df12:	e7b2      	b.n	800de7a <_dtoa_r+0x1aa>
 800df14:	900b      	str	r0, [sp, #44]	; 0x2c
 800df16:	e7b1      	b.n	800de7c <_dtoa_r+0x1ac>
 800df18:	9b04      	ldr	r3, [sp, #16]
 800df1a:	9a00      	ldr	r2, [sp, #0]
 800df1c:	1a9b      	subs	r3, r3, r2
 800df1e:	9304      	str	r3, [sp, #16]
 800df20:	4253      	negs	r3, r2
 800df22:	9307      	str	r3, [sp, #28]
 800df24:	2300      	movs	r3, #0
 800df26:	930a      	str	r3, [sp, #40]	; 0x28
 800df28:	e7bf      	b.n	800deaa <_dtoa_r+0x1da>
 800df2a:	2300      	movs	r3, #0
 800df2c:	9308      	str	r3, [sp, #32]
 800df2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df30:	2b00      	cmp	r3, #0
 800df32:	dc55      	bgt.n	800dfe0 <_dtoa_r+0x310>
 800df34:	2301      	movs	r3, #1
 800df36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800df3a:	461a      	mov	r2, r3
 800df3c:	9209      	str	r2, [sp, #36]	; 0x24
 800df3e:	e00c      	b.n	800df5a <_dtoa_r+0x28a>
 800df40:	2301      	movs	r3, #1
 800df42:	e7f3      	b.n	800df2c <_dtoa_r+0x25c>
 800df44:	2300      	movs	r3, #0
 800df46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df48:	9308      	str	r3, [sp, #32]
 800df4a:	9b00      	ldr	r3, [sp, #0]
 800df4c:	4413      	add	r3, r2
 800df4e:	9302      	str	r3, [sp, #8]
 800df50:	3301      	adds	r3, #1
 800df52:	2b01      	cmp	r3, #1
 800df54:	9303      	str	r3, [sp, #12]
 800df56:	bfb8      	it	lt
 800df58:	2301      	movlt	r3, #1
 800df5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800df5c:	2200      	movs	r2, #0
 800df5e:	6042      	str	r2, [r0, #4]
 800df60:	2204      	movs	r2, #4
 800df62:	f102 0614 	add.w	r6, r2, #20
 800df66:	429e      	cmp	r6, r3
 800df68:	6841      	ldr	r1, [r0, #4]
 800df6a:	d93d      	bls.n	800dfe8 <_dtoa_r+0x318>
 800df6c:	4620      	mov	r0, r4
 800df6e:	f001 fa4d 	bl	800f40c <_Balloc>
 800df72:	9001      	str	r0, [sp, #4]
 800df74:	2800      	cmp	r0, #0
 800df76:	d13b      	bne.n	800dff0 <_dtoa_r+0x320>
 800df78:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <_dtoa_r+0x2f0>)
 800df7a:	4602      	mov	r2, r0
 800df7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800df80:	e6c0      	b.n	800dd04 <_dtoa_r+0x34>
 800df82:	2301      	movs	r3, #1
 800df84:	e7df      	b.n	800df46 <_dtoa_r+0x276>
 800df86:	bf00      	nop
 800df88:	636f4361 	.word	0x636f4361
 800df8c:	3fd287a7 	.word	0x3fd287a7
 800df90:	8b60c8b3 	.word	0x8b60c8b3
 800df94:	3fc68a28 	.word	0x3fc68a28
 800df98:	509f79fb 	.word	0x509f79fb
 800df9c:	3fd34413 	.word	0x3fd34413
 800dfa0:	0801097e 	.word	0x0801097e
 800dfa4:	08010995 	.word	0x08010995
 800dfa8:	7ff00000 	.word	0x7ff00000
 800dfac:	0801097a 	.word	0x0801097a
 800dfb0:	08010971 	.word	0x08010971
 800dfb4:	080107f1 	.word	0x080107f1
 800dfb8:	3ff80000 	.word	0x3ff80000
 800dfbc:	08010b68 	.word	0x08010b68
 800dfc0:	080109f0 	.word	0x080109f0
 800dfc4:	2501      	movs	r5, #1
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	9306      	str	r3, [sp, #24]
 800dfca:	9508      	str	r5, [sp, #32]
 800dfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2312      	movs	r3, #18
 800dfd8:	e7b0      	b.n	800df3c <_dtoa_r+0x26c>
 800dfda:	2301      	movs	r3, #1
 800dfdc:	9308      	str	r3, [sp, #32]
 800dfde:	e7f5      	b.n	800dfcc <_dtoa_r+0x2fc>
 800dfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dfe6:	e7b8      	b.n	800df5a <_dtoa_r+0x28a>
 800dfe8:	3101      	adds	r1, #1
 800dfea:	6041      	str	r1, [r0, #4]
 800dfec:	0052      	lsls	r2, r2, #1
 800dfee:	e7b8      	b.n	800df62 <_dtoa_r+0x292>
 800dff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff2:	9a01      	ldr	r2, [sp, #4]
 800dff4:	601a      	str	r2, [r3, #0]
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	2b0e      	cmp	r3, #14
 800dffa:	f200 809d 	bhi.w	800e138 <_dtoa_r+0x468>
 800dffe:	2d00      	cmp	r5, #0
 800e000:	f000 809a 	beq.w	800e138 <_dtoa_r+0x468>
 800e004:	9b00      	ldr	r3, [sp, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	dd32      	ble.n	800e070 <_dtoa_r+0x3a0>
 800e00a:	4ab7      	ldr	r2, [pc, #732]	; (800e2e8 <_dtoa_r+0x618>)
 800e00c:	f003 030f 	and.w	r3, r3, #15
 800e010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e018:	9b00      	ldr	r3, [sp, #0]
 800e01a:	05d8      	lsls	r0, r3, #23
 800e01c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e020:	d516      	bpl.n	800e050 <_dtoa_r+0x380>
 800e022:	4bb2      	ldr	r3, [pc, #712]	; (800e2ec <_dtoa_r+0x61c>)
 800e024:	ec51 0b19 	vmov	r0, r1, d9
 800e028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e02c:	f7f2 fc0e 	bl	800084c <__aeabi_ddiv>
 800e030:	f007 070f 	and.w	r7, r7, #15
 800e034:	4682      	mov	sl, r0
 800e036:	468b      	mov	fp, r1
 800e038:	2503      	movs	r5, #3
 800e03a:	4eac      	ldr	r6, [pc, #688]	; (800e2ec <_dtoa_r+0x61c>)
 800e03c:	b957      	cbnz	r7, 800e054 <_dtoa_r+0x384>
 800e03e:	4642      	mov	r2, r8
 800e040:	464b      	mov	r3, r9
 800e042:	4650      	mov	r0, sl
 800e044:	4659      	mov	r1, fp
 800e046:	f7f2 fc01 	bl	800084c <__aeabi_ddiv>
 800e04a:	4682      	mov	sl, r0
 800e04c:	468b      	mov	fp, r1
 800e04e:	e028      	b.n	800e0a2 <_dtoa_r+0x3d2>
 800e050:	2502      	movs	r5, #2
 800e052:	e7f2      	b.n	800e03a <_dtoa_r+0x36a>
 800e054:	07f9      	lsls	r1, r7, #31
 800e056:	d508      	bpl.n	800e06a <_dtoa_r+0x39a>
 800e058:	4640      	mov	r0, r8
 800e05a:	4649      	mov	r1, r9
 800e05c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e060:	f7f2 faca 	bl	80005f8 <__aeabi_dmul>
 800e064:	3501      	adds	r5, #1
 800e066:	4680      	mov	r8, r0
 800e068:	4689      	mov	r9, r1
 800e06a:	107f      	asrs	r7, r7, #1
 800e06c:	3608      	adds	r6, #8
 800e06e:	e7e5      	b.n	800e03c <_dtoa_r+0x36c>
 800e070:	f000 809b 	beq.w	800e1aa <_dtoa_r+0x4da>
 800e074:	9b00      	ldr	r3, [sp, #0]
 800e076:	4f9d      	ldr	r7, [pc, #628]	; (800e2ec <_dtoa_r+0x61c>)
 800e078:	425e      	negs	r6, r3
 800e07a:	4b9b      	ldr	r3, [pc, #620]	; (800e2e8 <_dtoa_r+0x618>)
 800e07c:	f006 020f 	and.w	r2, r6, #15
 800e080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	ec51 0b19 	vmov	r0, r1, d9
 800e08c:	f7f2 fab4 	bl	80005f8 <__aeabi_dmul>
 800e090:	1136      	asrs	r6, r6, #4
 800e092:	4682      	mov	sl, r0
 800e094:	468b      	mov	fp, r1
 800e096:	2300      	movs	r3, #0
 800e098:	2502      	movs	r5, #2
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d17a      	bne.n	800e194 <_dtoa_r+0x4c4>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d1d3      	bne.n	800e04a <_dtoa_r+0x37a>
 800e0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 8082 	beq.w	800e1ae <_dtoa_r+0x4de>
 800e0aa:	4b91      	ldr	r3, [pc, #580]	; (800e2f0 <_dtoa_r+0x620>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4650      	mov	r0, sl
 800e0b0:	4659      	mov	r1, fp
 800e0b2:	f7f2 fd13 	bl	8000adc <__aeabi_dcmplt>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d079      	beq.n	800e1ae <_dtoa_r+0x4de>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d076      	beq.n	800e1ae <_dtoa_r+0x4de>
 800e0c0:	9b02      	ldr	r3, [sp, #8]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	dd36      	ble.n	800e134 <_dtoa_r+0x464>
 800e0c6:	9b00      	ldr	r3, [sp, #0]
 800e0c8:	4650      	mov	r0, sl
 800e0ca:	4659      	mov	r1, fp
 800e0cc:	1e5f      	subs	r7, r3, #1
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4b88      	ldr	r3, [pc, #544]	; (800e2f4 <_dtoa_r+0x624>)
 800e0d2:	f7f2 fa91 	bl	80005f8 <__aeabi_dmul>
 800e0d6:	9e02      	ldr	r6, [sp, #8]
 800e0d8:	4682      	mov	sl, r0
 800e0da:	468b      	mov	fp, r1
 800e0dc:	3501      	adds	r5, #1
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f7f2 fa20 	bl	8000524 <__aeabi_i2d>
 800e0e4:	4652      	mov	r2, sl
 800e0e6:	465b      	mov	r3, fp
 800e0e8:	f7f2 fa86 	bl	80005f8 <__aeabi_dmul>
 800e0ec:	4b82      	ldr	r3, [pc, #520]	; (800e2f8 <_dtoa_r+0x628>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f7f2 f8cc 	bl	800028c <__adddf3>
 800e0f4:	46d0      	mov	r8, sl
 800e0f6:	46d9      	mov	r9, fp
 800e0f8:	4682      	mov	sl, r0
 800e0fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e0fe:	2e00      	cmp	r6, #0
 800e100:	d158      	bne.n	800e1b4 <_dtoa_r+0x4e4>
 800e102:	4b7e      	ldr	r3, [pc, #504]	; (800e2fc <_dtoa_r+0x62c>)
 800e104:	2200      	movs	r2, #0
 800e106:	4640      	mov	r0, r8
 800e108:	4649      	mov	r1, r9
 800e10a:	f7f2 f8bd 	bl	8000288 <__aeabi_dsub>
 800e10e:	4652      	mov	r2, sl
 800e110:	465b      	mov	r3, fp
 800e112:	4680      	mov	r8, r0
 800e114:	4689      	mov	r9, r1
 800e116:	f7f2 fcff 	bl	8000b18 <__aeabi_dcmpgt>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	f040 8295 	bne.w	800e64a <_dtoa_r+0x97a>
 800e120:	4652      	mov	r2, sl
 800e122:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e126:	4640      	mov	r0, r8
 800e128:	4649      	mov	r1, r9
 800e12a:	f7f2 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800e12e:	2800      	cmp	r0, #0
 800e130:	f040 8289 	bne.w	800e646 <_dtoa_r+0x976>
 800e134:	ec5b ab19 	vmov	sl, fp, d9
 800e138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f2c0 8148 	blt.w	800e3d0 <_dtoa_r+0x700>
 800e140:	9a00      	ldr	r2, [sp, #0]
 800e142:	2a0e      	cmp	r2, #14
 800e144:	f300 8144 	bgt.w	800e3d0 <_dtoa_r+0x700>
 800e148:	4b67      	ldr	r3, [pc, #412]	; (800e2e8 <_dtoa_r+0x618>)
 800e14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e14e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e154:	2b00      	cmp	r3, #0
 800e156:	f280 80d5 	bge.w	800e304 <_dtoa_r+0x634>
 800e15a:	9b03      	ldr	r3, [sp, #12]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f300 80d1 	bgt.w	800e304 <_dtoa_r+0x634>
 800e162:	f040 826f 	bne.w	800e644 <_dtoa_r+0x974>
 800e166:	4b65      	ldr	r3, [pc, #404]	; (800e2fc <_dtoa_r+0x62c>)
 800e168:	2200      	movs	r2, #0
 800e16a:	4640      	mov	r0, r8
 800e16c:	4649      	mov	r1, r9
 800e16e:	f7f2 fa43 	bl	80005f8 <__aeabi_dmul>
 800e172:	4652      	mov	r2, sl
 800e174:	465b      	mov	r3, fp
 800e176:	f7f2 fcc5 	bl	8000b04 <__aeabi_dcmpge>
 800e17a:	9e03      	ldr	r6, [sp, #12]
 800e17c:	4637      	mov	r7, r6
 800e17e:	2800      	cmp	r0, #0
 800e180:	f040 8245 	bne.w	800e60e <_dtoa_r+0x93e>
 800e184:	9d01      	ldr	r5, [sp, #4]
 800e186:	2331      	movs	r3, #49	; 0x31
 800e188:	f805 3b01 	strb.w	r3, [r5], #1
 800e18c:	9b00      	ldr	r3, [sp, #0]
 800e18e:	3301      	adds	r3, #1
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	e240      	b.n	800e616 <_dtoa_r+0x946>
 800e194:	07f2      	lsls	r2, r6, #31
 800e196:	d505      	bpl.n	800e1a4 <_dtoa_r+0x4d4>
 800e198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e19c:	f7f2 fa2c 	bl	80005f8 <__aeabi_dmul>
 800e1a0:	3501      	adds	r5, #1
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	1076      	asrs	r6, r6, #1
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	e777      	b.n	800e09a <_dtoa_r+0x3ca>
 800e1aa:	2502      	movs	r5, #2
 800e1ac:	e779      	b.n	800e0a2 <_dtoa_r+0x3d2>
 800e1ae:	9f00      	ldr	r7, [sp, #0]
 800e1b0:	9e03      	ldr	r6, [sp, #12]
 800e1b2:	e794      	b.n	800e0de <_dtoa_r+0x40e>
 800e1b4:	9901      	ldr	r1, [sp, #4]
 800e1b6:	4b4c      	ldr	r3, [pc, #304]	; (800e2e8 <_dtoa_r+0x618>)
 800e1b8:	4431      	add	r1, r6
 800e1ba:	910d      	str	r1, [sp, #52]	; 0x34
 800e1bc:	9908      	ldr	r1, [sp, #32]
 800e1be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e1c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	d043      	beq.n	800e252 <_dtoa_r+0x582>
 800e1ca:	494d      	ldr	r1, [pc, #308]	; (800e300 <_dtoa_r+0x630>)
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	f7f2 fb3d 	bl	800084c <__aeabi_ddiv>
 800e1d2:	4652      	mov	r2, sl
 800e1d4:	465b      	mov	r3, fp
 800e1d6:	f7f2 f857 	bl	8000288 <__aeabi_dsub>
 800e1da:	9d01      	ldr	r5, [sp, #4]
 800e1dc:	4682      	mov	sl, r0
 800e1de:	468b      	mov	fp, r1
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	f7f2 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	f7f2 f99b 	bl	8000524 <__aeabi_i2d>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4640      	mov	r0, r8
 800e1f4:	4649      	mov	r1, r9
 800e1f6:	f7f2 f847 	bl	8000288 <__aeabi_dsub>
 800e1fa:	3630      	adds	r6, #48	; 0x30
 800e1fc:	f805 6b01 	strb.w	r6, [r5], #1
 800e200:	4652      	mov	r2, sl
 800e202:	465b      	mov	r3, fp
 800e204:	4680      	mov	r8, r0
 800e206:	4689      	mov	r9, r1
 800e208:	f7f2 fc68 	bl	8000adc <__aeabi_dcmplt>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d163      	bne.n	800e2d8 <_dtoa_r+0x608>
 800e210:	4642      	mov	r2, r8
 800e212:	464b      	mov	r3, r9
 800e214:	4936      	ldr	r1, [pc, #216]	; (800e2f0 <_dtoa_r+0x620>)
 800e216:	2000      	movs	r0, #0
 800e218:	f7f2 f836 	bl	8000288 <__aeabi_dsub>
 800e21c:	4652      	mov	r2, sl
 800e21e:	465b      	mov	r3, fp
 800e220:	f7f2 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800e224:	2800      	cmp	r0, #0
 800e226:	f040 80b5 	bne.w	800e394 <_dtoa_r+0x6c4>
 800e22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e22c:	429d      	cmp	r5, r3
 800e22e:	d081      	beq.n	800e134 <_dtoa_r+0x464>
 800e230:	4b30      	ldr	r3, [pc, #192]	; (800e2f4 <_dtoa_r+0x624>)
 800e232:	2200      	movs	r2, #0
 800e234:	4650      	mov	r0, sl
 800e236:	4659      	mov	r1, fp
 800e238:	f7f2 f9de 	bl	80005f8 <__aeabi_dmul>
 800e23c:	4b2d      	ldr	r3, [pc, #180]	; (800e2f4 <_dtoa_r+0x624>)
 800e23e:	4682      	mov	sl, r0
 800e240:	468b      	mov	fp, r1
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	2200      	movs	r2, #0
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	4680      	mov	r8, r0
 800e24e:	4689      	mov	r9, r1
 800e250:	e7c6      	b.n	800e1e0 <_dtoa_r+0x510>
 800e252:	4650      	mov	r0, sl
 800e254:	4659      	mov	r1, fp
 800e256:	f7f2 f9cf 	bl	80005f8 <__aeabi_dmul>
 800e25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e25c:	9d01      	ldr	r5, [sp, #4]
 800e25e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e260:	4682      	mov	sl, r0
 800e262:	468b      	mov	fp, r1
 800e264:	4649      	mov	r1, r9
 800e266:	4640      	mov	r0, r8
 800e268:	f7f2 fc76 	bl	8000b58 <__aeabi_d2iz>
 800e26c:	4606      	mov	r6, r0
 800e26e:	f7f2 f959 	bl	8000524 <__aeabi_i2d>
 800e272:	3630      	adds	r6, #48	; 0x30
 800e274:	4602      	mov	r2, r0
 800e276:	460b      	mov	r3, r1
 800e278:	4640      	mov	r0, r8
 800e27a:	4649      	mov	r1, r9
 800e27c:	f7f2 f804 	bl	8000288 <__aeabi_dsub>
 800e280:	f805 6b01 	strb.w	r6, [r5], #1
 800e284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e286:	429d      	cmp	r5, r3
 800e288:	4680      	mov	r8, r0
 800e28a:	4689      	mov	r9, r1
 800e28c:	f04f 0200 	mov.w	r2, #0
 800e290:	d124      	bne.n	800e2dc <_dtoa_r+0x60c>
 800e292:	4b1b      	ldr	r3, [pc, #108]	; (800e300 <_dtoa_r+0x630>)
 800e294:	4650      	mov	r0, sl
 800e296:	4659      	mov	r1, fp
 800e298:	f7f1 fff8 	bl	800028c <__adddf3>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	f7f2 fc38 	bl	8000b18 <__aeabi_dcmpgt>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d173      	bne.n	800e394 <_dtoa_r+0x6c4>
 800e2ac:	4652      	mov	r2, sl
 800e2ae:	465b      	mov	r3, fp
 800e2b0:	4913      	ldr	r1, [pc, #76]	; (800e300 <_dtoa_r+0x630>)
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	f7f1 ffe8 	bl	8000288 <__aeabi_dsub>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4640      	mov	r0, r8
 800e2be:	4649      	mov	r1, r9
 800e2c0:	f7f2 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	f43f af35 	beq.w	800e134 <_dtoa_r+0x464>
 800e2ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e2cc:	1e6b      	subs	r3, r5, #1
 800e2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2d4:	2b30      	cmp	r3, #48	; 0x30
 800e2d6:	d0f8      	beq.n	800e2ca <_dtoa_r+0x5fa>
 800e2d8:	9700      	str	r7, [sp, #0]
 800e2da:	e049      	b.n	800e370 <_dtoa_r+0x6a0>
 800e2dc:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <_dtoa_r+0x624>)
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	4680      	mov	r8, r0
 800e2e4:	4689      	mov	r9, r1
 800e2e6:	e7bd      	b.n	800e264 <_dtoa_r+0x594>
 800e2e8:	08010b68 	.word	0x08010b68
 800e2ec:	08010b40 	.word	0x08010b40
 800e2f0:	3ff00000 	.word	0x3ff00000
 800e2f4:	40240000 	.word	0x40240000
 800e2f8:	401c0000 	.word	0x401c0000
 800e2fc:	40140000 	.word	0x40140000
 800e300:	3fe00000 	.word	0x3fe00000
 800e304:	9d01      	ldr	r5, [sp, #4]
 800e306:	4656      	mov	r6, sl
 800e308:	465f      	mov	r7, fp
 800e30a:	4642      	mov	r2, r8
 800e30c:	464b      	mov	r3, r9
 800e30e:	4630      	mov	r0, r6
 800e310:	4639      	mov	r1, r7
 800e312:	f7f2 fa9b 	bl	800084c <__aeabi_ddiv>
 800e316:	f7f2 fc1f 	bl	8000b58 <__aeabi_d2iz>
 800e31a:	4682      	mov	sl, r0
 800e31c:	f7f2 f902 	bl	8000524 <__aeabi_i2d>
 800e320:	4642      	mov	r2, r8
 800e322:	464b      	mov	r3, r9
 800e324:	f7f2 f968 	bl	80005f8 <__aeabi_dmul>
 800e328:	4602      	mov	r2, r0
 800e32a:	460b      	mov	r3, r1
 800e32c:	4630      	mov	r0, r6
 800e32e:	4639      	mov	r1, r7
 800e330:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e334:	f7f1 ffa8 	bl	8000288 <__aeabi_dsub>
 800e338:	f805 6b01 	strb.w	r6, [r5], #1
 800e33c:	9e01      	ldr	r6, [sp, #4]
 800e33e:	9f03      	ldr	r7, [sp, #12]
 800e340:	1bae      	subs	r6, r5, r6
 800e342:	42b7      	cmp	r7, r6
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	d135      	bne.n	800e3b6 <_dtoa_r+0x6e6>
 800e34a:	f7f1 ff9f 	bl	800028c <__adddf3>
 800e34e:	4642      	mov	r2, r8
 800e350:	464b      	mov	r3, r9
 800e352:	4606      	mov	r6, r0
 800e354:	460f      	mov	r7, r1
 800e356:	f7f2 fbdf 	bl	8000b18 <__aeabi_dcmpgt>
 800e35a:	b9d0      	cbnz	r0, 800e392 <_dtoa_r+0x6c2>
 800e35c:	4642      	mov	r2, r8
 800e35e:	464b      	mov	r3, r9
 800e360:	4630      	mov	r0, r6
 800e362:	4639      	mov	r1, r7
 800e364:	f7f2 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e368:	b110      	cbz	r0, 800e370 <_dtoa_r+0x6a0>
 800e36a:	f01a 0f01 	tst.w	sl, #1
 800e36e:	d110      	bne.n	800e392 <_dtoa_r+0x6c2>
 800e370:	4620      	mov	r0, r4
 800e372:	ee18 1a10 	vmov	r1, s16
 800e376:	f001 f889 	bl	800f48c <_Bfree>
 800e37a:	2300      	movs	r3, #0
 800e37c:	9800      	ldr	r0, [sp, #0]
 800e37e:	702b      	strb	r3, [r5, #0]
 800e380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e382:	3001      	adds	r0, #1
 800e384:	6018      	str	r0, [r3, #0]
 800e386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f43f acf1 	beq.w	800dd70 <_dtoa_r+0xa0>
 800e38e:	601d      	str	r5, [r3, #0]
 800e390:	e4ee      	b.n	800dd70 <_dtoa_r+0xa0>
 800e392:	9f00      	ldr	r7, [sp, #0]
 800e394:	462b      	mov	r3, r5
 800e396:	461d      	mov	r5, r3
 800e398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e39c:	2a39      	cmp	r2, #57	; 0x39
 800e39e:	d106      	bne.n	800e3ae <_dtoa_r+0x6de>
 800e3a0:	9a01      	ldr	r2, [sp, #4]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d1f7      	bne.n	800e396 <_dtoa_r+0x6c6>
 800e3a6:	9901      	ldr	r1, [sp, #4]
 800e3a8:	2230      	movs	r2, #48	; 0x30
 800e3aa:	3701      	adds	r7, #1
 800e3ac:	700a      	strb	r2, [r1, #0]
 800e3ae:	781a      	ldrb	r2, [r3, #0]
 800e3b0:	3201      	adds	r2, #1
 800e3b2:	701a      	strb	r2, [r3, #0]
 800e3b4:	e790      	b.n	800e2d8 <_dtoa_r+0x608>
 800e3b6:	4ba6      	ldr	r3, [pc, #664]	; (800e650 <_dtoa_r+0x980>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f7f2 f91d 	bl	80005f8 <__aeabi_dmul>
 800e3be:	2200      	movs	r2, #0
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	460f      	mov	r7, r1
 800e3c6:	f7f2 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d09d      	beq.n	800e30a <_dtoa_r+0x63a>
 800e3ce:	e7cf      	b.n	800e370 <_dtoa_r+0x6a0>
 800e3d0:	9a08      	ldr	r2, [sp, #32]
 800e3d2:	2a00      	cmp	r2, #0
 800e3d4:	f000 80d7 	beq.w	800e586 <_dtoa_r+0x8b6>
 800e3d8:	9a06      	ldr	r2, [sp, #24]
 800e3da:	2a01      	cmp	r2, #1
 800e3dc:	f300 80ba 	bgt.w	800e554 <_dtoa_r+0x884>
 800e3e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3e2:	2a00      	cmp	r2, #0
 800e3e4:	f000 80b2 	beq.w	800e54c <_dtoa_r+0x87c>
 800e3e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e3ec:	9e07      	ldr	r6, [sp, #28]
 800e3ee:	9d04      	ldr	r5, [sp, #16]
 800e3f0:	9a04      	ldr	r2, [sp, #16]
 800e3f2:	441a      	add	r2, r3
 800e3f4:	9204      	str	r2, [sp, #16]
 800e3f6:	9a05      	ldr	r2, [sp, #20]
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	441a      	add	r2, r3
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	9205      	str	r2, [sp, #20]
 800e400:	f001 f946 	bl	800f690 <__i2b>
 800e404:	4607      	mov	r7, r0
 800e406:	2d00      	cmp	r5, #0
 800e408:	dd0c      	ble.n	800e424 <_dtoa_r+0x754>
 800e40a:	9b05      	ldr	r3, [sp, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd09      	ble.n	800e424 <_dtoa_r+0x754>
 800e410:	42ab      	cmp	r3, r5
 800e412:	9a04      	ldr	r2, [sp, #16]
 800e414:	bfa8      	it	ge
 800e416:	462b      	movge	r3, r5
 800e418:	1ad2      	subs	r2, r2, r3
 800e41a:	9204      	str	r2, [sp, #16]
 800e41c:	9a05      	ldr	r2, [sp, #20]
 800e41e:	1aed      	subs	r5, r5, r3
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	9305      	str	r3, [sp, #20]
 800e424:	9b07      	ldr	r3, [sp, #28]
 800e426:	b31b      	cbz	r3, 800e470 <_dtoa_r+0x7a0>
 800e428:	9b08      	ldr	r3, [sp, #32]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 80af 	beq.w	800e58e <_dtoa_r+0x8be>
 800e430:	2e00      	cmp	r6, #0
 800e432:	dd13      	ble.n	800e45c <_dtoa_r+0x78c>
 800e434:	4639      	mov	r1, r7
 800e436:	4632      	mov	r2, r6
 800e438:	4620      	mov	r0, r4
 800e43a:	f001 f9e9 	bl	800f810 <__pow5mult>
 800e43e:	ee18 2a10 	vmov	r2, s16
 800e442:	4601      	mov	r1, r0
 800e444:	4607      	mov	r7, r0
 800e446:	4620      	mov	r0, r4
 800e448:	f001 f938 	bl	800f6bc <__multiply>
 800e44c:	ee18 1a10 	vmov	r1, s16
 800e450:	4680      	mov	r8, r0
 800e452:	4620      	mov	r0, r4
 800e454:	f001 f81a 	bl	800f48c <_Bfree>
 800e458:	ee08 8a10 	vmov	s16, r8
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	1b9a      	subs	r2, r3, r6
 800e460:	d006      	beq.n	800e470 <_dtoa_r+0x7a0>
 800e462:	ee18 1a10 	vmov	r1, s16
 800e466:	4620      	mov	r0, r4
 800e468:	f001 f9d2 	bl	800f810 <__pow5mult>
 800e46c:	ee08 0a10 	vmov	s16, r0
 800e470:	2101      	movs	r1, #1
 800e472:	4620      	mov	r0, r4
 800e474:	f001 f90c 	bl	800f690 <__i2b>
 800e478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	4606      	mov	r6, r0
 800e47e:	f340 8088 	ble.w	800e592 <_dtoa_r+0x8c2>
 800e482:	461a      	mov	r2, r3
 800e484:	4601      	mov	r1, r0
 800e486:	4620      	mov	r0, r4
 800e488:	f001 f9c2 	bl	800f810 <__pow5mult>
 800e48c:	9b06      	ldr	r3, [sp, #24]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	4606      	mov	r6, r0
 800e492:	f340 8081 	ble.w	800e598 <_dtoa_r+0x8c8>
 800e496:	f04f 0800 	mov.w	r8, #0
 800e49a:	6933      	ldr	r3, [r6, #16]
 800e49c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e4a0:	6918      	ldr	r0, [r3, #16]
 800e4a2:	f001 f8a5 	bl	800f5f0 <__hi0bits>
 800e4a6:	f1c0 0020 	rsb	r0, r0, #32
 800e4aa:	9b05      	ldr	r3, [sp, #20]
 800e4ac:	4418      	add	r0, r3
 800e4ae:	f010 001f 	ands.w	r0, r0, #31
 800e4b2:	f000 8092 	beq.w	800e5da <_dtoa_r+0x90a>
 800e4b6:	f1c0 0320 	rsb	r3, r0, #32
 800e4ba:	2b04      	cmp	r3, #4
 800e4bc:	f340 808a 	ble.w	800e5d4 <_dtoa_r+0x904>
 800e4c0:	f1c0 001c 	rsb	r0, r0, #28
 800e4c4:	9b04      	ldr	r3, [sp, #16]
 800e4c6:	4403      	add	r3, r0
 800e4c8:	9304      	str	r3, [sp, #16]
 800e4ca:	9b05      	ldr	r3, [sp, #20]
 800e4cc:	4403      	add	r3, r0
 800e4ce:	4405      	add	r5, r0
 800e4d0:	9305      	str	r3, [sp, #20]
 800e4d2:	9b04      	ldr	r3, [sp, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	dd07      	ble.n	800e4e8 <_dtoa_r+0x818>
 800e4d8:	ee18 1a10 	vmov	r1, s16
 800e4dc:	461a      	mov	r2, r3
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f001 f9f0 	bl	800f8c4 <__lshift>
 800e4e4:	ee08 0a10 	vmov	s16, r0
 800e4e8:	9b05      	ldr	r3, [sp, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dd05      	ble.n	800e4fa <_dtoa_r+0x82a>
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f001 f9e6 	bl	800f8c4 <__lshift>
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d06e      	beq.n	800e5de <_dtoa_r+0x90e>
 800e500:	ee18 0a10 	vmov	r0, s16
 800e504:	4631      	mov	r1, r6
 800e506:	f001 fa4d 	bl	800f9a4 <__mcmp>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	da67      	bge.n	800e5de <_dtoa_r+0x90e>
 800e50e:	9b00      	ldr	r3, [sp, #0]
 800e510:	3b01      	subs	r3, #1
 800e512:	ee18 1a10 	vmov	r1, s16
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	220a      	movs	r2, #10
 800e51a:	2300      	movs	r3, #0
 800e51c:	4620      	mov	r0, r4
 800e51e:	f000 ffd7 	bl	800f4d0 <__multadd>
 800e522:	9b08      	ldr	r3, [sp, #32]
 800e524:	ee08 0a10 	vmov	s16, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 81b1 	beq.w	800e890 <_dtoa_r+0xbc0>
 800e52e:	2300      	movs	r3, #0
 800e530:	4639      	mov	r1, r7
 800e532:	220a      	movs	r2, #10
 800e534:	4620      	mov	r0, r4
 800e536:	f000 ffcb 	bl	800f4d0 <__multadd>
 800e53a:	9b02      	ldr	r3, [sp, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	4607      	mov	r7, r0
 800e540:	f300 808e 	bgt.w	800e660 <_dtoa_r+0x990>
 800e544:	9b06      	ldr	r3, [sp, #24]
 800e546:	2b02      	cmp	r3, #2
 800e548:	dc51      	bgt.n	800e5ee <_dtoa_r+0x91e>
 800e54a:	e089      	b.n	800e660 <_dtoa_r+0x990>
 800e54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e54e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e552:	e74b      	b.n	800e3ec <_dtoa_r+0x71c>
 800e554:	9b03      	ldr	r3, [sp, #12]
 800e556:	1e5e      	subs	r6, r3, #1
 800e558:	9b07      	ldr	r3, [sp, #28]
 800e55a:	42b3      	cmp	r3, r6
 800e55c:	bfbf      	itttt	lt
 800e55e:	9b07      	ldrlt	r3, [sp, #28]
 800e560:	9607      	strlt	r6, [sp, #28]
 800e562:	1af2      	sublt	r2, r6, r3
 800e564:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e566:	bfb6      	itet	lt
 800e568:	189b      	addlt	r3, r3, r2
 800e56a:	1b9e      	subge	r6, r3, r6
 800e56c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	bfb8      	it	lt
 800e572:	2600      	movlt	r6, #0
 800e574:	2b00      	cmp	r3, #0
 800e576:	bfb7      	itett	lt
 800e578:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e57c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e580:	1a9d      	sublt	r5, r3, r2
 800e582:	2300      	movlt	r3, #0
 800e584:	e734      	b.n	800e3f0 <_dtoa_r+0x720>
 800e586:	9e07      	ldr	r6, [sp, #28]
 800e588:	9d04      	ldr	r5, [sp, #16]
 800e58a:	9f08      	ldr	r7, [sp, #32]
 800e58c:	e73b      	b.n	800e406 <_dtoa_r+0x736>
 800e58e:	9a07      	ldr	r2, [sp, #28]
 800e590:	e767      	b.n	800e462 <_dtoa_r+0x792>
 800e592:	9b06      	ldr	r3, [sp, #24]
 800e594:	2b01      	cmp	r3, #1
 800e596:	dc18      	bgt.n	800e5ca <_dtoa_r+0x8fa>
 800e598:	f1ba 0f00 	cmp.w	sl, #0
 800e59c:	d115      	bne.n	800e5ca <_dtoa_r+0x8fa>
 800e59e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5a2:	b993      	cbnz	r3, 800e5ca <_dtoa_r+0x8fa>
 800e5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e5a8:	0d1b      	lsrs	r3, r3, #20
 800e5aa:	051b      	lsls	r3, r3, #20
 800e5ac:	b183      	cbz	r3, 800e5d0 <_dtoa_r+0x900>
 800e5ae:	9b04      	ldr	r3, [sp, #16]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	9304      	str	r3, [sp, #16]
 800e5b4:	9b05      	ldr	r3, [sp, #20]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	9305      	str	r3, [sp, #20]
 800e5ba:	f04f 0801 	mov.w	r8, #1
 800e5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f47f af6a 	bne.w	800e49a <_dtoa_r+0x7ca>
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	e76f      	b.n	800e4aa <_dtoa_r+0x7da>
 800e5ca:	f04f 0800 	mov.w	r8, #0
 800e5ce:	e7f6      	b.n	800e5be <_dtoa_r+0x8ee>
 800e5d0:	4698      	mov	r8, r3
 800e5d2:	e7f4      	b.n	800e5be <_dtoa_r+0x8ee>
 800e5d4:	f43f af7d 	beq.w	800e4d2 <_dtoa_r+0x802>
 800e5d8:	4618      	mov	r0, r3
 800e5da:	301c      	adds	r0, #28
 800e5dc:	e772      	b.n	800e4c4 <_dtoa_r+0x7f4>
 800e5de:	9b03      	ldr	r3, [sp, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	dc37      	bgt.n	800e654 <_dtoa_r+0x984>
 800e5e4:	9b06      	ldr	r3, [sp, #24]
 800e5e6:	2b02      	cmp	r3, #2
 800e5e8:	dd34      	ble.n	800e654 <_dtoa_r+0x984>
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	9302      	str	r3, [sp, #8]
 800e5ee:	9b02      	ldr	r3, [sp, #8]
 800e5f0:	b96b      	cbnz	r3, 800e60e <_dtoa_r+0x93e>
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	2205      	movs	r2, #5
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f000 ff6a 	bl	800f4d0 <__multadd>
 800e5fc:	4601      	mov	r1, r0
 800e5fe:	4606      	mov	r6, r0
 800e600:	ee18 0a10 	vmov	r0, s16
 800e604:	f001 f9ce 	bl	800f9a4 <__mcmp>
 800e608:	2800      	cmp	r0, #0
 800e60a:	f73f adbb 	bgt.w	800e184 <_dtoa_r+0x4b4>
 800e60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e610:	9d01      	ldr	r5, [sp, #4]
 800e612:	43db      	mvns	r3, r3
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	f04f 0800 	mov.w	r8, #0
 800e61a:	4631      	mov	r1, r6
 800e61c:	4620      	mov	r0, r4
 800e61e:	f000 ff35 	bl	800f48c <_Bfree>
 800e622:	2f00      	cmp	r7, #0
 800e624:	f43f aea4 	beq.w	800e370 <_dtoa_r+0x6a0>
 800e628:	f1b8 0f00 	cmp.w	r8, #0
 800e62c:	d005      	beq.n	800e63a <_dtoa_r+0x96a>
 800e62e:	45b8      	cmp	r8, r7
 800e630:	d003      	beq.n	800e63a <_dtoa_r+0x96a>
 800e632:	4641      	mov	r1, r8
 800e634:	4620      	mov	r0, r4
 800e636:	f000 ff29 	bl	800f48c <_Bfree>
 800e63a:	4639      	mov	r1, r7
 800e63c:	4620      	mov	r0, r4
 800e63e:	f000 ff25 	bl	800f48c <_Bfree>
 800e642:	e695      	b.n	800e370 <_dtoa_r+0x6a0>
 800e644:	2600      	movs	r6, #0
 800e646:	4637      	mov	r7, r6
 800e648:	e7e1      	b.n	800e60e <_dtoa_r+0x93e>
 800e64a:	9700      	str	r7, [sp, #0]
 800e64c:	4637      	mov	r7, r6
 800e64e:	e599      	b.n	800e184 <_dtoa_r+0x4b4>
 800e650:	40240000 	.word	0x40240000
 800e654:	9b08      	ldr	r3, [sp, #32]
 800e656:	2b00      	cmp	r3, #0
 800e658:	f000 80ca 	beq.w	800e7f0 <_dtoa_r+0xb20>
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	9302      	str	r3, [sp, #8]
 800e660:	2d00      	cmp	r5, #0
 800e662:	dd05      	ble.n	800e670 <_dtoa_r+0x9a0>
 800e664:	4639      	mov	r1, r7
 800e666:	462a      	mov	r2, r5
 800e668:	4620      	mov	r0, r4
 800e66a:	f001 f92b 	bl	800f8c4 <__lshift>
 800e66e:	4607      	mov	r7, r0
 800e670:	f1b8 0f00 	cmp.w	r8, #0
 800e674:	d05b      	beq.n	800e72e <_dtoa_r+0xa5e>
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	4620      	mov	r0, r4
 800e67a:	f000 fec7 	bl	800f40c <_Balloc>
 800e67e:	4605      	mov	r5, r0
 800e680:	b928      	cbnz	r0, 800e68e <_dtoa_r+0x9be>
 800e682:	4b87      	ldr	r3, [pc, #540]	; (800e8a0 <_dtoa_r+0xbd0>)
 800e684:	4602      	mov	r2, r0
 800e686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e68a:	f7ff bb3b 	b.w	800dd04 <_dtoa_r+0x34>
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	3202      	adds	r2, #2
 800e692:	0092      	lsls	r2, r2, #2
 800e694:	f107 010c 	add.w	r1, r7, #12
 800e698:	300c      	adds	r0, #12
 800e69a:	f7fd faa1 	bl	800bbe0 <memcpy>
 800e69e:	2201      	movs	r2, #1
 800e6a0:	4629      	mov	r1, r5
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f001 f90e 	bl	800f8c4 <__lshift>
 800e6a8:	9b01      	ldr	r3, [sp, #4]
 800e6aa:	f103 0901 	add.w	r9, r3, #1
 800e6ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	9305      	str	r3, [sp, #20]
 800e6b6:	f00a 0301 	and.w	r3, sl, #1
 800e6ba:	46b8      	mov	r8, r7
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	4607      	mov	r7, r0
 800e6c0:	4631      	mov	r1, r6
 800e6c2:	ee18 0a10 	vmov	r0, s16
 800e6c6:	f7ff fa77 	bl	800dbb8 <quorem>
 800e6ca:	4641      	mov	r1, r8
 800e6cc:	9002      	str	r0, [sp, #8]
 800e6ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e6d2:	ee18 0a10 	vmov	r0, s16
 800e6d6:	f001 f965 	bl	800f9a4 <__mcmp>
 800e6da:	463a      	mov	r2, r7
 800e6dc:	9003      	str	r0, [sp, #12]
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f001 f97b 	bl	800f9dc <__mdiff>
 800e6e6:	68c2      	ldr	r2, [r0, #12]
 800e6e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	bb02      	cbnz	r2, 800e732 <_dtoa_r+0xa62>
 800e6f0:	4601      	mov	r1, r0
 800e6f2:	ee18 0a10 	vmov	r0, s16
 800e6f6:	f001 f955 	bl	800f9a4 <__mcmp>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	4620      	mov	r0, r4
 800e700:	9207      	str	r2, [sp, #28]
 800e702:	f000 fec3 	bl	800f48c <_Bfree>
 800e706:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e70a:	ea43 0102 	orr.w	r1, r3, r2
 800e70e:	9b04      	ldr	r3, [sp, #16]
 800e710:	430b      	orrs	r3, r1
 800e712:	464d      	mov	r5, r9
 800e714:	d10f      	bne.n	800e736 <_dtoa_r+0xa66>
 800e716:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e71a:	d02a      	beq.n	800e772 <_dtoa_r+0xaa2>
 800e71c:	9b03      	ldr	r3, [sp, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	dd02      	ble.n	800e728 <_dtoa_r+0xa58>
 800e722:	9b02      	ldr	r3, [sp, #8]
 800e724:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e728:	f88b a000 	strb.w	sl, [fp]
 800e72c:	e775      	b.n	800e61a <_dtoa_r+0x94a>
 800e72e:	4638      	mov	r0, r7
 800e730:	e7ba      	b.n	800e6a8 <_dtoa_r+0x9d8>
 800e732:	2201      	movs	r2, #1
 800e734:	e7e2      	b.n	800e6fc <_dtoa_r+0xa2c>
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	db04      	blt.n	800e746 <_dtoa_r+0xa76>
 800e73c:	9906      	ldr	r1, [sp, #24]
 800e73e:	430b      	orrs	r3, r1
 800e740:	9904      	ldr	r1, [sp, #16]
 800e742:	430b      	orrs	r3, r1
 800e744:	d122      	bne.n	800e78c <_dtoa_r+0xabc>
 800e746:	2a00      	cmp	r2, #0
 800e748:	ddee      	ble.n	800e728 <_dtoa_r+0xa58>
 800e74a:	ee18 1a10 	vmov	r1, s16
 800e74e:	2201      	movs	r2, #1
 800e750:	4620      	mov	r0, r4
 800e752:	f001 f8b7 	bl	800f8c4 <__lshift>
 800e756:	4631      	mov	r1, r6
 800e758:	ee08 0a10 	vmov	s16, r0
 800e75c:	f001 f922 	bl	800f9a4 <__mcmp>
 800e760:	2800      	cmp	r0, #0
 800e762:	dc03      	bgt.n	800e76c <_dtoa_r+0xa9c>
 800e764:	d1e0      	bne.n	800e728 <_dtoa_r+0xa58>
 800e766:	f01a 0f01 	tst.w	sl, #1
 800e76a:	d0dd      	beq.n	800e728 <_dtoa_r+0xa58>
 800e76c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e770:	d1d7      	bne.n	800e722 <_dtoa_r+0xa52>
 800e772:	2339      	movs	r3, #57	; 0x39
 800e774:	f88b 3000 	strb.w	r3, [fp]
 800e778:	462b      	mov	r3, r5
 800e77a:	461d      	mov	r5, r3
 800e77c:	3b01      	subs	r3, #1
 800e77e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e782:	2a39      	cmp	r2, #57	; 0x39
 800e784:	d071      	beq.n	800e86a <_dtoa_r+0xb9a>
 800e786:	3201      	adds	r2, #1
 800e788:	701a      	strb	r2, [r3, #0]
 800e78a:	e746      	b.n	800e61a <_dtoa_r+0x94a>
 800e78c:	2a00      	cmp	r2, #0
 800e78e:	dd07      	ble.n	800e7a0 <_dtoa_r+0xad0>
 800e790:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e794:	d0ed      	beq.n	800e772 <_dtoa_r+0xaa2>
 800e796:	f10a 0301 	add.w	r3, sl, #1
 800e79a:	f88b 3000 	strb.w	r3, [fp]
 800e79e:	e73c      	b.n	800e61a <_dtoa_r+0x94a>
 800e7a0:	9b05      	ldr	r3, [sp, #20]
 800e7a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e7a6:	4599      	cmp	r9, r3
 800e7a8:	d047      	beq.n	800e83a <_dtoa_r+0xb6a>
 800e7aa:	ee18 1a10 	vmov	r1, s16
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	220a      	movs	r2, #10
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fe8c 	bl	800f4d0 <__multadd>
 800e7b8:	45b8      	cmp	r8, r7
 800e7ba:	ee08 0a10 	vmov	s16, r0
 800e7be:	f04f 0300 	mov.w	r3, #0
 800e7c2:	f04f 020a 	mov.w	r2, #10
 800e7c6:	4641      	mov	r1, r8
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	d106      	bne.n	800e7da <_dtoa_r+0xb0a>
 800e7cc:	f000 fe80 	bl	800f4d0 <__multadd>
 800e7d0:	4680      	mov	r8, r0
 800e7d2:	4607      	mov	r7, r0
 800e7d4:	f109 0901 	add.w	r9, r9, #1
 800e7d8:	e772      	b.n	800e6c0 <_dtoa_r+0x9f0>
 800e7da:	f000 fe79 	bl	800f4d0 <__multadd>
 800e7de:	4639      	mov	r1, r7
 800e7e0:	4680      	mov	r8, r0
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	220a      	movs	r2, #10
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f000 fe72 	bl	800f4d0 <__multadd>
 800e7ec:	4607      	mov	r7, r0
 800e7ee:	e7f1      	b.n	800e7d4 <_dtoa_r+0xb04>
 800e7f0:	9b03      	ldr	r3, [sp, #12]
 800e7f2:	9302      	str	r3, [sp, #8]
 800e7f4:	9d01      	ldr	r5, [sp, #4]
 800e7f6:	ee18 0a10 	vmov	r0, s16
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	f7ff f9dc 	bl	800dbb8 <quorem>
 800e800:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	f805 ab01 	strb.w	sl, [r5], #1
 800e80a:	1aea      	subs	r2, r5, r3
 800e80c:	9b02      	ldr	r3, [sp, #8]
 800e80e:	4293      	cmp	r3, r2
 800e810:	dd09      	ble.n	800e826 <_dtoa_r+0xb56>
 800e812:	ee18 1a10 	vmov	r1, s16
 800e816:	2300      	movs	r3, #0
 800e818:	220a      	movs	r2, #10
 800e81a:	4620      	mov	r0, r4
 800e81c:	f000 fe58 	bl	800f4d0 <__multadd>
 800e820:	ee08 0a10 	vmov	s16, r0
 800e824:	e7e7      	b.n	800e7f6 <_dtoa_r+0xb26>
 800e826:	9b02      	ldr	r3, [sp, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	bfc8      	it	gt
 800e82c:	461d      	movgt	r5, r3
 800e82e:	9b01      	ldr	r3, [sp, #4]
 800e830:	bfd8      	it	le
 800e832:	2501      	movle	r5, #1
 800e834:	441d      	add	r5, r3
 800e836:	f04f 0800 	mov.w	r8, #0
 800e83a:	ee18 1a10 	vmov	r1, s16
 800e83e:	2201      	movs	r2, #1
 800e840:	4620      	mov	r0, r4
 800e842:	f001 f83f 	bl	800f8c4 <__lshift>
 800e846:	4631      	mov	r1, r6
 800e848:	ee08 0a10 	vmov	s16, r0
 800e84c:	f001 f8aa 	bl	800f9a4 <__mcmp>
 800e850:	2800      	cmp	r0, #0
 800e852:	dc91      	bgt.n	800e778 <_dtoa_r+0xaa8>
 800e854:	d102      	bne.n	800e85c <_dtoa_r+0xb8c>
 800e856:	f01a 0f01 	tst.w	sl, #1
 800e85a:	d18d      	bne.n	800e778 <_dtoa_r+0xaa8>
 800e85c:	462b      	mov	r3, r5
 800e85e:	461d      	mov	r5, r3
 800e860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e864:	2a30      	cmp	r2, #48	; 0x30
 800e866:	d0fa      	beq.n	800e85e <_dtoa_r+0xb8e>
 800e868:	e6d7      	b.n	800e61a <_dtoa_r+0x94a>
 800e86a:	9a01      	ldr	r2, [sp, #4]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d184      	bne.n	800e77a <_dtoa_r+0xaaa>
 800e870:	9b00      	ldr	r3, [sp, #0]
 800e872:	3301      	adds	r3, #1
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	2331      	movs	r3, #49	; 0x31
 800e878:	7013      	strb	r3, [r2, #0]
 800e87a:	e6ce      	b.n	800e61a <_dtoa_r+0x94a>
 800e87c:	4b09      	ldr	r3, [pc, #36]	; (800e8a4 <_dtoa_r+0xbd4>)
 800e87e:	f7ff ba95 	b.w	800ddac <_dtoa_r+0xdc>
 800e882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e884:	2b00      	cmp	r3, #0
 800e886:	f47f aa6e 	bne.w	800dd66 <_dtoa_r+0x96>
 800e88a:	4b07      	ldr	r3, [pc, #28]	; (800e8a8 <_dtoa_r+0xbd8>)
 800e88c:	f7ff ba8e 	b.w	800ddac <_dtoa_r+0xdc>
 800e890:	9b02      	ldr	r3, [sp, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	dcae      	bgt.n	800e7f4 <_dtoa_r+0xb24>
 800e896:	9b06      	ldr	r3, [sp, #24]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	f73f aea8 	bgt.w	800e5ee <_dtoa_r+0x91e>
 800e89e:	e7a9      	b.n	800e7f4 <_dtoa_r+0xb24>
 800e8a0:	080109f0 	.word	0x080109f0
 800e8a4:	080107f0 	.word	0x080107f0
 800e8a8:	08010971 	.word	0x08010971

0800e8ac <__sflush_r>:
 800e8ac:	898a      	ldrh	r2, [r1, #12]
 800e8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	0710      	lsls	r0, r2, #28
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	d458      	bmi.n	800e96c <__sflush_r+0xc0>
 800e8ba:	684b      	ldr	r3, [r1, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	dc05      	bgt.n	800e8cc <__sflush_r+0x20>
 800e8c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	dc02      	bgt.n	800e8cc <__sflush_r+0x20>
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8ce:	2e00      	cmp	r6, #0
 800e8d0:	d0f9      	beq.n	800e8c6 <__sflush_r+0x1a>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e8d8:	682f      	ldr	r7, [r5, #0]
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	d032      	beq.n	800e944 <__sflush_r+0x98>
 800e8de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e8e0:	89a3      	ldrh	r3, [r4, #12]
 800e8e2:	075a      	lsls	r2, r3, #29
 800e8e4:	d505      	bpl.n	800e8f2 <__sflush_r+0x46>
 800e8e6:	6863      	ldr	r3, [r4, #4]
 800e8e8:	1ac0      	subs	r0, r0, r3
 800e8ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8ec:	b10b      	cbz	r3, 800e8f2 <__sflush_r+0x46>
 800e8ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8f0:	1ac0      	subs	r0, r0, r3
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8f8:	6a21      	ldr	r1, [r4, #32]
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	47b0      	blx	r6
 800e8fe:	1c43      	adds	r3, r0, #1
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	d106      	bne.n	800e912 <__sflush_r+0x66>
 800e904:	6829      	ldr	r1, [r5, #0]
 800e906:	291d      	cmp	r1, #29
 800e908:	d82c      	bhi.n	800e964 <__sflush_r+0xb8>
 800e90a:	4a2a      	ldr	r2, [pc, #168]	; (800e9b4 <__sflush_r+0x108>)
 800e90c:	40ca      	lsrs	r2, r1
 800e90e:	07d6      	lsls	r6, r2, #31
 800e910:	d528      	bpl.n	800e964 <__sflush_r+0xb8>
 800e912:	2200      	movs	r2, #0
 800e914:	6062      	str	r2, [r4, #4]
 800e916:	04d9      	lsls	r1, r3, #19
 800e918:	6922      	ldr	r2, [r4, #16]
 800e91a:	6022      	str	r2, [r4, #0]
 800e91c:	d504      	bpl.n	800e928 <__sflush_r+0x7c>
 800e91e:	1c42      	adds	r2, r0, #1
 800e920:	d101      	bne.n	800e926 <__sflush_r+0x7a>
 800e922:	682b      	ldr	r3, [r5, #0]
 800e924:	b903      	cbnz	r3, 800e928 <__sflush_r+0x7c>
 800e926:	6560      	str	r0, [r4, #84]	; 0x54
 800e928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e92a:	602f      	str	r7, [r5, #0]
 800e92c:	2900      	cmp	r1, #0
 800e92e:	d0ca      	beq.n	800e8c6 <__sflush_r+0x1a>
 800e930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e934:	4299      	cmp	r1, r3
 800e936:	d002      	beq.n	800e93e <__sflush_r+0x92>
 800e938:	4628      	mov	r0, r5
 800e93a:	f7fd f967 	bl	800bc0c <_free_r>
 800e93e:	2000      	movs	r0, #0
 800e940:	6360      	str	r0, [r4, #52]	; 0x34
 800e942:	e7c1      	b.n	800e8c8 <__sflush_r+0x1c>
 800e944:	6a21      	ldr	r1, [r4, #32]
 800e946:	2301      	movs	r3, #1
 800e948:	4628      	mov	r0, r5
 800e94a:	47b0      	blx	r6
 800e94c:	1c41      	adds	r1, r0, #1
 800e94e:	d1c7      	bne.n	800e8e0 <__sflush_r+0x34>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d0c4      	beq.n	800e8e0 <__sflush_r+0x34>
 800e956:	2b1d      	cmp	r3, #29
 800e958:	d001      	beq.n	800e95e <__sflush_r+0xb2>
 800e95a:	2b16      	cmp	r3, #22
 800e95c:	d101      	bne.n	800e962 <__sflush_r+0xb6>
 800e95e:	602f      	str	r7, [r5, #0]
 800e960:	e7b1      	b.n	800e8c6 <__sflush_r+0x1a>
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e968:	81a3      	strh	r3, [r4, #12]
 800e96a:	e7ad      	b.n	800e8c8 <__sflush_r+0x1c>
 800e96c:	690f      	ldr	r7, [r1, #16]
 800e96e:	2f00      	cmp	r7, #0
 800e970:	d0a9      	beq.n	800e8c6 <__sflush_r+0x1a>
 800e972:	0793      	lsls	r3, r2, #30
 800e974:	680e      	ldr	r6, [r1, #0]
 800e976:	bf08      	it	eq
 800e978:	694b      	ldreq	r3, [r1, #20]
 800e97a:	600f      	str	r7, [r1, #0]
 800e97c:	bf18      	it	ne
 800e97e:	2300      	movne	r3, #0
 800e980:	eba6 0807 	sub.w	r8, r6, r7
 800e984:	608b      	str	r3, [r1, #8]
 800e986:	f1b8 0f00 	cmp.w	r8, #0
 800e98a:	dd9c      	ble.n	800e8c6 <__sflush_r+0x1a>
 800e98c:	6a21      	ldr	r1, [r4, #32]
 800e98e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e990:	4643      	mov	r3, r8
 800e992:	463a      	mov	r2, r7
 800e994:	4628      	mov	r0, r5
 800e996:	47b0      	blx	r6
 800e998:	2800      	cmp	r0, #0
 800e99a:	dc06      	bgt.n	800e9aa <__sflush_r+0xfe>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9a2:	81a3      	strh	r3, [r4, #12]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	e78e      	b.n	800e8c8 <__sflush_r+0x1c>
 800e9aa:	4407      	add	r7, r0
 800e9ac:	eba8 0800 	sub.w	r8, r8, r0
 800e9b0:	e7e9      	b.n	800e986 <__sflush_r+0xda>
 800e9b2:	bf00      	nop
 800e9b4:	20400001 	.word	0x20400001

0800e9b8 <_fflush_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	690b      	ldr	r3, [r1, #16]
 800e9bc:	4605      	mov	r5, r0
 800e9be:	460c      	mov	r4, r1
 800e9c0:	b913      	cbnz	r3, 800e9c8 <_fflush_r+0x10>
 800e9c2:	2500      	movs	r5, #0
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	bd38      	pop	{r3, r4, r5, pc}
 800e9c8:	b118      	cbz	r0, 800e9d2 <_fflush_r+0x1a>
 800e9ca:	6983      	ldr	r3, [r0, #24]
 800e9cc:	b90b      	cbnz	r3, 800e9d2 <_fflush_r+0x1a>
 800e9ce:	f000 f887 	bl	800eae0 <__sinit>
 800e9d2:	4b14      	ldr	r3, [pc, #80]	; (800ea24 <_fflush_r+0x6c>)
 800e9d4:	429c      	cmp	r4, r3
 800e9d6:	d11b      	bne.n	800ea10 <_fflush_r+0x58>
 800e9d8:	686c      	ldr	r4, [r5, #4]
 800e9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0ef      	beq.n	800e9c2 <_fflush_r+0xa>
 800e9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9e4:	07d0      	lsls	r0, r2, #31
 800e9e6:	d404      	bmi.n	800e9f2 <_fflush_r+0x3a>
 800e9e8:	0599      	lsls	r1, r3, #22
 800e9ea:	d402      	bmi.n	800e9f2 <_fflush_r+0x3a>
 800e9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9ee:	f000 fc88 	bl	800f302 <__retarget_lock_acquire_recursive>
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	4621      	mov	r1, r4
 800e9f6:	f7ff ff59 	bl	800e8ac <__sflush_r>
 800e9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9fc:	07da      	lsls	r2, r3, #31
 800e9fe:	4605      	mov	r5, r0
 800ea00:	d4e0      	bmi.n	800e9c4 <_fflush_r+0xc>
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	059b      	lsls	r3, r3, #22
 800ea06:	d4dd      	bmi.n	800e9c4 <_fflush_r+0xc>
 800ea08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea0a:	f000 fc7b 	bl	800f304 <__retarget_lock_release_recursive>
 800ea0e:	e7d9      	b.n	800e9c4 <_fflush_r+0xc>
 800ea10:	4b05      	ldr	r3, [pc, #20]	; (800ea28 <_fflush_r+0x70>)
 800ea12:	429c      	cmp	r4, r3
 800ea14:	d101      	bne.n	800ea1a <_fflush_r+0x62>
 800ea16:	68ac      	ldr	r4, [r5, #8]
 800ea18:	e7df      	b.n	800e9da <_fflush_r+0x22>
 800ea1a:	4b04      	ldr	r3, [pc, #16]	; (800ea2c <_fflush_r+0x74>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	bf08      	it	eq
 800ea20:	68ec      	ldreq	r4, [r5, #12]
 800ea22:	e7da      	b.n	800e9da <_fflush_r+0x22>
 800ea24:	08010a24 	.word	0x08010a24
 800ea28:	08010a44 	.word	0x08010a44
 800ea2c:	08010a04 	.word	0x08010a04

0800ea30 <std>:
 800ea30:	2300      	movs	r3, #0
 800ea32:	b510      	push	{r4, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	e9c0 3300 	strd	r3, r3, [r0]
 800ea3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea3e:	6083      	str	r3, [r0, #8]
 800ea40:	8181      	strh	r1, [r0, #12]
 800ea42:	6643      	str	r3, [r0, #100]	; 0x64
 800ea44:	81c2      	strh	r2, [r0, #14]
 800ea46:	6183      	str	r3, [r0, #24]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	2208      	movs	r2, #8
 800ea4c:	305c      	adds	r0, #92	; 0x5c
 800ea4e:	f7fd f8d5 	bl	800bbfc <memset>
 800ea52:	4b05      	ldr	r3, [pc, #20]	; (800ea68 <std+0x38>)
 800ea54:	6263      	str	r3, [r4, #36]	; 0x24
 800ea56:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <std+0x3c>)
 800ea58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea5a:	4b05      	ldr	r3, [pc, #20]	; (800ea70 <std+0x40>)
 800ea5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea5e:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <std+0x44>)
 800ea60:	6224      	str	r4, [r4, #32]
 800ea62:	6323      	str	r3, [r4, #48]	; 0x30
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	bf00      	nop
 800ea68:	08010339 	.word	0x08010339
 800ea6c:	0801035b 	.word	0x0801035b
 800ea70:	08010393 	.word	0x08010393
 800ea74:	080103b7 	.word	0x080103b7

0800ea78 <_cleanup_r>:
 800ea78:	4901      	ldr	r1, [pc, #4]	; (800ea80 <_cleanup_r+0x8>)
 800ea7a:	f000 b8af 	b.w	800ebdc <_fwalk_reent>
 800ea7e:	bf00      	nop
 800ea80:	0800e9b9 	.word	0x0800e9b9

0800ea84 <__sfmoreglue>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	2268      	movs	r2, #104	; 0x68
 800ea88:	1e4d      	subs	r5, r1, #1
 800ea8a:	4355      	muls	r5, r2
 800ea8c:	460e      	mov	r6, r1
 800ea8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea92:	f7fd f927 	bl	800bce4 <_malloc_r>
 800ea96:	4604      	mov	r4, r0
 800ea98:	b140      	cbz	r0, 800eaac <__sfmoreglue+0x28>
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	e9c0 1600 	strd	r1, r6, [r0]
 800eaa0:	300c      	adds	r0, #12
 800eaa2:	60a0      	str	r0, [r4, #8]
 800eaa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eaa8:	f7fd f8a8 	bl	800bbfc <memset>
 800eaac:	4620      	mov	r0, r4
 800eaae:	bd70      	pop	{r4, r5, r6, pc}

0800eab0 <__sfp_lock_acquire>:
 800eab0:	4801      	ldr	r0, [pc, #4]	; (800eab8 <__sfp_lock_acquire+0x8>)
 800eab2:	f000 bc26 	b.w	800f302 <__retarget_lock_acquire_recursive>
 800eab6:	bf00      	nop
 800eab8:	200134a5 	.word	0x200134a5

0800eabc <__sfp_lock_release>:
 800eabc:	4801      	ldr	r0, [pc, #4]	; (800eac4 <__sfp_lock_release+0x8>)
 800eabe:	f000 bc21 	b.w	800f304 <__retarget_lock_release_recursive>
 800eac2:	bf00      	nop
 800eac4:	200134a5 	.word	0x200134a5

0800eac8 <__sinit_lock_acquire>:
 800eac8:	4801      	ldr	r0, [pc, #4]	; (800ead0 <__sinit_lock_acquire+0x8>)
 800eaca:	f000 bc1a 	b.w	800f302 <__retarget_lock_acquire_recursive>
 800eace:	bf00      	nop
 800ead0:	200134a6 	.word	0x200134a6

0800ead4 <__sinit_lock_release>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__sinit_lock_release+0x8>)
 800ead6:	f000 bc15 	b.w	800f304 <__retarget_lock_release_recursive>
 800eada:	bf00      	nop
 800eadc:	200134a6 	.word	0x200134a6

0800eae0 <__sinit>:
 800eae0:	b510      	push	{r4, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	f7ff fff0 	bl	800eac8 <__sinit_lock_acquire>
 800eae8:	69a3      	ldr	r3, [r4, #24]
 800eaea:	b11b      	cbz	r3, 800eaf4 <__sinit+0x14>
 800eaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaf0:	f7ff bff0 	b.w	800ead4 <__sinit_lock_release>
 800eaf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eaf8:	6523      	str	r3, [r4, #80]	; 0x50
 800eafa:	4b13      	ldr	r3, [pc, #76]	; (800eb48 <__sinit+0x68>)
 800eafc:	4a13      	ldr	r2, [pc, #76]	; (800eb4c <__sinit+0x6c>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb02:	42a3      	cmp	r3, r4
 800eb04:	bf04      	itt	eq
 800eb06:	2301      	moveq	r3, #1
 800eb08:	61a3      	streq	r3, [r4, #24]
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f000 f820 	bl	800eb50 <__sfp>
 800eb10:	6060      	str	r0, [r4, #4]
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 f81c 	bl	800eb50 <__sfp>
 800eb18:	60a0      	str	r0, [r4, #8]
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f000 f818 	bl	800eb50 <__sfp>
 800eb20:	2200      	movs	r2, #0
 800eb22:	60e0      	str	r0, [r4, #12]
 800eb24:	2104      	movs	r1, #4
 800eb26:	6860      	ldr	r0, [r4, #4]
 800eb28:	f7ff ff82 	bl	800ea30 <std>
 800eb2c:	68a0      	ldr	r0, [r4, #8]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	2109      	movs	r1, #9
 800eb32:	f7ff ff7d 	bl	800ea30 <std>
 800eb36:	68e0      	ldr	r0, [r4, #12]
 800eb38:	2202      	movs	r2, #2
 800eb3a:	2112      	movs	r1, #18
 800eb3c:	f7ff ff78 	bl	800ea30 <std>
 800eb40:	2301      	movs	r3, #1
 800eb42:	61a3      	str	r3, [r4, #24]
 800eb44:	e7d2      	b.n	800eaec <__sinit+0xc>
 800eb46:	bf00      	nop
 800eb48:	080107dc 	.word	0x080107dc
 800eb4c:	0800ea79 	.word	0x0800ea79

0800eb50 <__sfp>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	4607      	mov	r7, r0
 800eb54:	f7ff ffac 	bl	800eab0 <__sfp_lock_acquire>
 800eb58:	4b1e      	ldr	r3, [pc, #120]	; (800ebd4 <__sfp+0x84>)
 800eb5a:	681e      	ldr	r6, [r3, #0]
 800eb5c:	69b3      	ldr	r3, [r6, #24]
 800eb5e:	b913      	cbnz	r3, 800eb66 <__sfp+0x16>
 800eb60:	4630      	mov	r0, r6
 800eb62:	f7ff ffbd 	bl	800eae0 <__sinit>
 800eb66:	3648      	adds	r6, #72	; 0x48
 800eb68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	d503      	bpl.n	800eb78 <__sfp+0x28>
 800eb70:	6833      	ldr	r3, [r6, #0]
 800eb72:	b30b      	cbz	r3, 800ebb8 <__sfp+0x68>
 800eb74:	6836      	ldr	r6, [r6, #0]
 800eb76:	e7f7      	b.n	800eb68 <__sfp+0x18>
 800eb78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb7c:	b9d5      	cbnz	r5, 800ebb4 <__sfp+0x64>
 800eb7e:	4b16      	ldr	r3, [pc, #88]	; (800ebd8 <__sfp+0x88>)
 800eb80:	60e3      	str	r3, [r4, #12]
 800eb82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb86:	6665      	str	r5, [r4, #100]	; 0x64
 800eb88:	f000 fbba 	bl	800f300 <__retarget_lock_init_recursive>
 800eb8c:	f7ff ff96 	bl	800eabc <__sfp_lock_release>
 800eb90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb98:	6025      	str	r5, [r4, #0]
 800eb9a:	61a5      	str	r5, [r4, #24]
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	4629      	mov	r1, r5
 800eba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eba4:	f7fd f82a 	bl	800bbfc <memset>
 800eba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ebac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb4:	3468      	adds	r4, #104	; 0x68
 800ebb6:	e7d9      	b.n	800eb6c <__sfp+0x1c>
 800ebb8:	2104      	movs	r1, #4
 800ebba:	4638      	mov	r0, r7
 800ebbc:	f7ff ff62 	bl	800ea84 <__sfmoreglue>
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	6030      	str	r0, [r6, #0]
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d1d5      	bne.n	800eb74 <__sfp+0x24>
 800ebc8:	f7ff ff78 	bl	800eabc <__sfp_lock_release>
 800ebcc:	230c      	movs	r3, #12
 800ebce:	603b      	str	r3, [r7, #0]
 800ebd0:	e7ee      	b.n	800ebb0 <__sfp+0x60>
 800ebd2:	bf00      	nop
 800ebd4:	080107dc 	.word	0x080107dc
 800ebd8:	ffff0001 	.word	0xffff0001

0800ebdc <_fwalk_reent>:
 800ebdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	4688      	mov	r8, r1
 800ebe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ebe8:	2700      	movs	r7, #0
 800ebea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebee:	f1b9 0901 	subs.w	r9, r9, #1
 800ebf2:	d505      	bpl.n	800ec00 <_fwalk_reent+0x24>
 800ebf4:	6824      	ldr	r4, [r4, #0]
 800ebf6:	2c00      	cmp	r4, #0
 800ebf8:	d1f7      	bne.n	800ebea <_fwalk_reent+0xe>
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec00:	89ab      	ldrh	r3, [r5, #12]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d907      	bls.n	800ec16 <_fwalk_reent+0x3a>
 800ec06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	d003      	beq.n	800ec16 <_fwalk_reent+0x3a>
 800ec0e:	4629      	mov	r1, r5
 800ec10:	4630      	mov	r0, r6
 800ec12:	47c0      	blx	r8
 800ec14:	4307      	orrs	r7, r0
 800ec16:	3568      	adds	r5, #104	; 0x68
 800ec18:	e7e9      	b.n	800ebee <_fwalk_reent+0x12>

0800ec1a <rshift>:
 800ec1a:	6903      	ldr	r3, [r0, #16]
 800ec1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec24:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec28:	f100 0414 	add.w	r4, r0, #20
 800ec2c:	dd45      	ble.n	800ecba <rshift+0xa0>
 800ec2e:	f011 011f 	ands.w	r1, r1, #31
 800ec32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec3a:	d10c      	bne.n	800ec56 <rshift+0x3c>
 800ec3c:	f100 0710 	add.w	r7, r0, #16
 800ec40:	4629      	mov	r1, r5
 800ec42:	42b1      	cmp	r1, r6
 800ec44:	d334      	bcc.n	800ecb0 <rshift+0x96>
 800ec46:	1a9b      	subs	r3, r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	1eea      	subs	r2, r5, #3
 800ec4c:	4296      	cmp	r6, r2
 800ec4e:	bf38      	it	cc
 800ec50:	2300      	movcc	r3, #0
 800ec52:	4423      	add	r3, r4
 800ec54:	e015      	b.n	800ec82 <rshift+0x68>
 800ec56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec5a:	f1c1 0820 	rsb	r8, r1, #32
 800ec5e:	40cf      	lsrs	r7, r1
 800ec60:	f105 0e04 	add.w	lr, r5, #4
 800ec64:	46a1      	mov	r9, r4
 800ec66:	4576      	cmp	r6, lr
 800ec68:	46f4      	mov	ip, lr
 800ec6a:	d815      	bhi.n	800ec98 <rshift+0x7e>
 800ec6c:	1a9a      	subs	r2, r3, r2
 800ec6e:	0092      	lsls	r2, r2, #2
 800ec70:	3a04      	subs	r2, #4
 800ec72:	3501      	adds	r5, #1
 800ec74:	42ae      	cmp	r6, r5
 800ec76:	bf38      	it	cc
 800ec78:	2200      	movcc	r2, #0
 800ec7a:	18a3      	adds	r3, r4, r2
 800ec7c:	50a7      	str	r7, [r4, r2]
 800ec7e:	b107      	cbz	r7, 800ec82 <rshift+0x68>
 800ec80:	3304      	adds	r3, #4
 800ec82:	1b1a      	subs	r2, r3, r4
 800ec84:	42a3      	cmp	r3, r4
 800ec86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec8a:	bf08      	it	eq
 800ec8c:	2300      	moveq	r3, #0
 800ec8e:	6102      	str	r2, [r0, #16]
 800ec90:	bf08      	it	eq
 800ec92:	6143      	streq	r3, [r0, #20]
 800ec94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec98:	f8dc c000 	ldr.w	ip, [ip]
 800ec9c:	fa0c fc08 	lsl.w	ip, ip, r8
 800eca0:	ea4c 0707 	orr.w	r7, ip, r7
 800eca4:	f849 7b04 	str.w	r7, [r9], #4
 800eca8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ecac:	40cf      	lsrs	r7, r1
 800ecae:	e7da      	b.n	800ec66 <rshift+0x4c>
 800ecb0:	f851 cb04 	ldr.w	ip, [r1], #4
 800ecb4:	f847 cf04 	str.w	ip, [r7, #4]!
 800ecb8:	e7c3      	b.n	800ec42 <rshift+0x28>
 800ecba:	4623      	mov	r3, r4
 800ecbc:	e7e1      	b.n	800ec82 <rshift+0x68>

0800ecbe <__hexdig_fun>:
 800ecbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ecc2:	2b09      	cmp	r3, #9
 800ecc4:	d802      	bhi.n	800eccc <__hexdig_fun+0xe>
 800ecc6:	3820      	subs	r0, #32
 800ecc8:	b2c0      	uxtb	r0, r0
 800ecca:	4770      	bx	lr
 800eccc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ecd0:	2b05      	cmp	r3, #5
 800ecd2:	d801      	bhi.n	800ecd8 <__hexdig_fun+0x1a>
 800ecd4:	3847      	subs	r0, #71	; 0x47
 800ecd6:	e7f7      	b.n	800ecc8 <__hexdig_fun+0xa>
 800ecd8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ecdc:	2b05      	cmp	r3, #5
 800ecde:	d801      	bhi.n	800ece4 <__hexdig_fun+0x26>
 800ece0:	3827      	subs	r0, #39	; 0x27
 800ece2:	e7f1      	b.n	800ecc8 <__hexdig_fun+0xa>
 800ece4:	2000      	movs	r0, #0
 800ece6:	4770      	bx	lr

0800ece8 <__gethex>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	ed2d 8b02 	vpush	{d8}
 800ecf0:	b089      	sub	sp, #36	; 0x24
 800ecf2:	ee08 0a10 	vmov	s16, r0
 800ecf6:	9304      	str	r3, [sp, #16]
 800ecf8:	4bb4      	ldr	r3, [pc, #720]	; (800efcc <__gethex+0x2e4>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	9301      	str	r3, [sp, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	468b      	mov	fp, r1
 800ed02:	4690      	mov	r8, r2
 800ed04:	f7f1 fa64 	bl	80001d0 <strlen>
 800ed08:	9b01      	ldr	r3, [sp, #4]
 800ed0a:	f8db 2000 	ldr.w	r2, [fp]
 800ed0e:	4403      	add	r3, r0
 800ed10:	4682      	mov	sl, r0
 800ed12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ed16:	9305      	str	r3, [sp, #20]
 800ed18:	1c93      	adds	r3, r2, #2
 800ed1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ed1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ed22:	32fe      	adds	r2, #254	; 0xfe
 800ed24:	18d1      	adds	r1, r2, r3
 800ed26:	461f      	mov	r7, r3
 800ed28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ed2c:	9100      	str	r1, [sp, #0]
 800ed2e:	2830      	cmp	r0, #48	; 0x30
 800ed30:	d0f8      	beq.n	800ed24 <__gethex+0x3c>
 800ed32:	f7ff ffc4 	bl	800ecbe <__hexdig_fun>
 800ed36:	4604      	mov	r4, r0
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d13a      	bne.n	800edb2 <__gethex+0xca>
 800ed3c:	9901      	ldr	r1, [sp, #4]
 800ed3e:	4652      	mov	r2, sl
 800ed40:	4638      	mov	r0, r7
 800ed42:	f7fd ffa3 	bl	800cc8c <strncmp>
 800ed46:	4605      	mov	r5, r0
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d168      	bne.n	800ee1e <__gethex+0x136>
 800ed4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ed50:	eb07 060a 	add.w	r6, r7, sl
 800ed54:	f7ff ffb3 	bl	800ecbe <__hexdig_fun>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d062      	beq.n	800ee22 <__gethex+0x13a>
 800ed5c:	4633      	mov	r3, r6
 800ed5e:	7818      	ldrb	r0, [r3, #0]
 800ed60:	2830      	cmp	r0, #48	; 0x30
 800ed62:	461f      	mov	r7, r3
 800ed64:	f103 0301 	add.w	r3, r3, #1
 800ed68:	d0f9      	beq.n	800ed5e <__gethex+0x76>
 800ed6a:	f7ff ffa8 	bl	800ecbe <__hexdig_fun>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	fab0 f480 	clz	r4, r0
 800ed74:	0964      	lsrs	r4, r4, #5
 800ed76:	4635      	mov	r5, r6
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	463a      	mov	r2, r7
 800ed7c:	4616      	mov	r6, r2
 800ed7e:	3201      	adds	r2, #1
 800ed80:	7830      	ldrb	r0, [r6, #0]
 800ed82:	f7ff ff9c 	bl	800ecbe <__hexdig_fun>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d1f8      	bne.n	800ed7c <__gethex+0x94>
 800ed8a:	9901      	ldr	r1, [sp, #4]
 800ed8c:	4652      	mov	r2, sl
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7fd ff7c 	bl	800cc8c <strncmp>
 800ed94:	b980      	cbnz	r0, 800edb8 <__gethex+0xd0>
 800ed96:	b94d      	cbnz	r5, 800edac <__gethex+0xc4>
 800ed98:	eb06 050a 	add.w	r5, r6, sl
 800ed9c:	462a      	mov	r2, r5
 800ed9e:	4616      	mov	r6, r2
 800eda0:	3201      	adds	r2, #1
 800eda2:	7830      	ldrb	r0, [r6, #0]
 800eda4:	f7ff ff8b 	bl	800ecbe <__hexdig_fun>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d1f8      	bne.n	800ed9e <__gethex+0xb6>
 800edac:	1bad      	subs	r5, r5, r6
 800edae:	00ad      	lsls	r5, r5, #2
 800edb0:	e004      	b.n	800edbc <__gethex+0xd4>
 800edb2:	2400      	movs	r4, #0
 800edb4:	4625      	mov	r5, r4
 800edb6:	e7e0      	b.n	800ed7a <__gethex+0x92>
 800edb8:	2d00      	cmp	r5, #0
 800edba:	d1f7      	bne.n	800edac <__gethex+0xc4>
 800edbc:	7833      	ldrb	r3, [r6, #0]
 800edbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800edc2:	2b50      	cmp	r3, #80	; 0x50
 800edc4:	d13b      	bne.n	800ee3e <__gethex+0x156>
 800edc6:	7873      	ldrb	r3, [r6, #1]
 800edc8:	2b2b      	cmp	r3, #43	; 0x2b
 800edca:	d02c      	beq.n	800ee26 <__gethex+0x13e>
 800edcc:	2b2d      	cmp	r3, #45	; 0x2d
 800edce:	d02e      	beq.n	800ee2e <__gethex+0x146>
 800edd0:	1c71      	adds	r1, r6, #1
 800edd2:	f04f 0900 	mov.w	r9, #0
 800edd6:	7808      	ldrb	r0, [r1, #0]
 800edd8:	f7ff ff71 	bl	800ecbe <__hexdig_fun>
 800eddc:	1e43      	subs	r3, r0, #1
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	2b18      	cmp	r3, #24
 800ede2:	d82c      	bhi.n	800ee3e <__gethex+0x156>
 800ede4:	f1a0 0210 	sub.w	r2, r0, #16
 800ede8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800edec:	f7ff ff67 	bl	800ecbe <__hexdig_fun>
 800edf0:	1e43      	subs	r3, r0, #1
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	2b18      	cmp	r3, #24
 800edf6:	d91d      	bls.n	800ee34 <__gethex+0x14c>
 800edf8:	f1b9 0f00 	cmp.w	r9, #0
 800edfc:	d000      	beq.n	800ee00 <__gethex+0x118>
 800edfe:	4252      	negs	r2, r2
 800ee00:	4415      	add	r5, r2
 800ee02:	f8cb 1000 	str.w	r1, [fp]
 800ee06:	b1e4      	cbz	r4, 800ee42 <__gethex+0x15a>
 800ee08:	9b00      	ldr	r3, [sp, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	bf14      	ite	ne
 800ee0e:	2700      	movne	r7, #0
 800ee10:	2706      	moveq	r7, #6
 800ee12:	4638      	mov	r0, r7
 800ee14:	b009      	add	sp, #36	; 0x24
 800ee16:	ecbd 8b02 	vpop	{d8}
 800ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1e:	463e      	mov	r6, r7
 800ee20:	4625      	mov	r5, r4
 800ee22:	2401      	movs	r4, #1
 800ee24:	e7ca      	b.n	800edbc <__gethex+0xd4>
 800ee26:	f04f 0900 	mov.w	r9, #0
 800ee2a:	1cb1      	adds	r1, r6, #2
 800ee2c:	e7d3      	b.n	800edd6 <__gethex+0xee>
 800ee2e:	f04f 0901 	mov.w	r9, #1
 800ee32:	e7fa      	b.n	800ee2a <__gethex+0x142>
 800ee34:	230a      	movs	r3, #10
 800ee36:	fb03 0202 	mla	r2, r3, r2, r0
 800ee3a:	3a10      	subs	r2, #16
 800ee3c:	e7d4      	b.n	800ede8 <__gethex+0x100>
 800ee3e:	4631      	mov	r1, r6
 800ee40:	e7df      	b.n	800ee02 <__gethex+0x11a>
 800ee42:	1bf3      	subs	r3, r6, r7
 800ee44:	3b01      	subs	r3, #1
 800ee46:	4621      	mov	r1, r4
 800ee48:	2b07      	cmp	r3, #7
 800ee4a:	dc0b      	bgt.n	800ee64 <__gethex+0x17c>
 800ee4c:	ee18 0a10 	vmov	r0, s16
 800ee50:	f000 fadc 	bl	800f40c <_Balloc>
 800ee54:	4604      	mov	r4, r0
 800ee56:	b940      	cbnz	r0, 800ee6a <__gethex+0x182>
 800ee58:	4b5d      	ldr	r3, [pc, #372]	; (800efd0 <__gethex+0x2e8>)
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	21de      	movs	r1, #222	; 0xde
 800ee5e:	485d      	ldr	r0, [pc, #372]	; (800efd4 <__gethex+0x2ec>)
 800ee60:	f001 facc 	bl	80103fc <__assert_func>
 800ee64:	3101      	adds	r1, #1
 800ee66:	105b      	asrs	r3, r3, #1
 800ee68:	e7ee      	b.n	800ee48 <__gethex+0x160>
 800ee6a:	f100 0914 	add.w	r9, r0, #20
 800ee6e:	f04f 0b00 	mov.w	fp, #0
 800ee72:	f1ca 0301 	rsb	r3, sl, #1
 800ee76:	f8cd 9008 	str.w	r9, [sp, #8]
 800ee7a:	f8cd b000 	str.w	fp, [sp]
 800ee7e:	9306      	str	r3, [sp, #24]
 800ee80:	42b7      	cmp	r7, r6
 800ee82:	d340      	bcc.n	800ef06 <__gethex+0x21e>
 800ee84:	9802      	ldr	r0, [sp, #8]
 800ee86:	9b00      	ldr	r3, [sp, #0]
 800ee88:	f840 3b04 	str.w	r3, [r0], #4
 800ee8c:	eba0 0009 	sub.w	r0, r0, r9
 800ee90:	1080      	asrs	r0, r0, #2
 800ee92:	0146      	lsls	r6, r0, #5
 800ee94:	6120      	str	r0, [r4, #16]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 fbaa 	bl	800f5f0 <__hi0bits>
 800ee9c:	1a30      	subs	r0, r6, r0
 800ee9e:	f8d8 6000 	ldr.w	r6, [r8]
 800eea2:	42b0      	cmp	r0, r6
 800eea4:	dd63      	ble.n	800ef6e <__gethex+0x286>
 800eea6:	1b87      	subs	r7, r0, r6
 800eea8:	4639      	mov	r1, r7
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 ff4e 	bl	800fd4c <__any_on>
 800eeb0:	4682      	mov	sl, r0
 800eeb2:	b1a8      	cbz	r0, 800eee0 <__gethex+0x1f8>
 800eeb4:	1e7b      	subs	r3, r7, #1
 800eeb6:	1159      	asrs	r1, r3, #5
 800eeb8:	f003 021f 	and.w	r2, r3, #31
 800eebc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eec0:	f04f 0a01 	mov.w	sl, #1
 800eec4:	fa0a f202 	lsl.w	r2, sl, r2
 800eec8:	420a      	tst	r2, r1
 800eeca:	d009      	beq.n	800eee0 <__gethex+0x1f8>
 800eecc:	4553      	cmp	r3, sl
 800eece:	dd05      	ble.n	800eedc <__gethex+0x1f4>
 800eed0:	1eb9      	subs	r1, r7, #2
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 ff3a 	bl	800fd4c <__any_on>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d145      	bne.n	800ef68 <__gethex+0x280>
 800eedc:	f04f 0a02 	mov.w	sl, #2
 800eee0:	4639      	mov	r1, r7
 800eee2:	4620      	mov	r0, r4
 800eee4:	f7ff fe99 	bl	800ec1a <rshift>
 800eee8:	443d      	add	r5, r7
 800eeea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeee:	42ab      	cmp	r3, r5
 800eef0:	da4c      	bge.n	800ef8c <__gethex+0x2a4>
 800eef2:	ee18 0a10 	vmov	r0, s16
 800eef6:	4621      	mov	r1, r4
 800eef8:	f000 fac8 	bl	800f48c <_Bfree>
 800eefc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eefe:	2300      	movs	r3, #0
 800ef00:	6013      	str	r3, [r2, #0]
 800ef02:	27a3      	movs	r7, #163	; 0xa3
 800ef04:	e785      	b.n	800ee12 <__gethex+0x12a>
 800ef06:	1e73      	subs	r3, r6, #1
 800ef08:	9a05      	ldr	r2, [sp, #20]
 800ef0a:	9303      	str	r3, [sp, #12]
 800ef0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d019      	beq.n	800ef48 <__gethex+0x260>
 800ef14:	f1bb 0f20 	cmp.w	fp, #32
 800ef18:	d107      	bne.n	800ef2a <__gethex+0x242>
 800ef1a:	9b02      	ldr	r3, [sp, #8]
 800ef1c:	9a00      	ldr	r2, [sp, #0]
 800ef1e:	f843 2b04 	str.w	r2, [r3], #4
 800ef22:	9302      	str	r3, [sp, #8]
 800ef24:	2300      	movs	r3, #0
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	469b      	mov	fp, r3
 800ef2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ef2e:	f7ff fec6 	bl	800ecbe <__hexdig_fun>
 800ef32:	9b00      	ldr	r3, [sp, #0]
 800ef34:	f000 000f 	and.w	r0, r0, #15
 800ef38:	fa00 f00b 	lsl.w	r0, r0, fp
 800ef3c:	4303      	orrs	r3, r0
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	f10b 0b04 	add.w	fp, fp, #4
 800ef44:	9b03      	ldr	r3, [sp, #12]
 800ef46:	e00d      	b.n	800ef64 <__gethex+0x27c>
 800ef48:	9b03      	ldr	r3, [sp, #12]
 800ef4a:	9a06      	ldr	r2, [sp, #24]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	42bb      	cmp	r3, r7
 800ef50:	d3e0      	bcc.n	800ef14 <__gethex+0x22c>
 800ef52:	4618      	mov	r0, r3
 800ef54:	9901      	ldr	r1, [sp, #4]
 800ef56:	9307      	str	r3, [sp, #28]
 800ef58:	4652      	mov	r2, sl
 800ef5a:	f7fd fe97 	bl	800cc8c <strncmp>
 800ef5e:	9b07      	ldr	r3, [sp, #28]
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d1d7      	bne.n	800ef14 <__gethex+0x22c>
 800ef64:	461e      	mov	r6, r3
 800ef66:	e78b      	b.n	800ee80 <__gethex+0x198>
 800ef68:	f04f 0a03 	mov.w	sl, #3
 800ef6c:	e7b8      	b.n	800eee0 <__gethex+0x1f8>
 800ef6e:	da0a      	bge.n	800ef86 <__gethex+0x29e>
 800ef70:	1a37      	subs	r7, r6, r0
 800ef72:	4621      	mov	r1, r4
 800ef74:	ee18 0a10 	vmov	r0, s16
 800ef78:	463a      	mov	r2, r7
 800ef7a:	f000 fca3 	bl	800f8c4 <__lshift>
 800ef7e:	1bed      	subs	r5, r5, r7
 800ef80:	4604      	mov	r4, r0
 800ef82:	f100 0914 	add.w	r9, r0, #20
 800ef86:	f04f 0a00 	mov.w	sl, #0
 800ef8a:	e7ae      	b.n	800eeea <__gethex+0x202>
 800ef8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ef90:	42a8      	cmp	r0, r5
 800ef92:	dd72      	ble.n	800f07a <__gethex+0x392>
 800ef94:	1b45      	subs	r5, r0, r5
 800ef96:	42ae      	cmp	r6, r5
 800ef98:	dc36      	bgt.n	800f008 <__gethex+0x320>
 800ef9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef9e:	2b02      	cmp	r3, #2
 800efa0:	d02a      	beq.n	800eff8 <__gethex+0x310>
 800efa2:	2b03      	cmp	r3, #3
 800efa4:	d02c      	beq.n	800f000 <__gethex+0x318>
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d11c      	bne.n	800efe4 <__gethex+0x2fc>
 800efaa:	42ae      	cmp	r6, r5
 800efac:	d11a      	bne.n	800efe4 <__gethex+0x2fc>
 800efae:	2e01      	cmp	r6, #1
 800efb0:	d112      	bne.n	800efd8 <__gethex+0x2f0>
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efb8:	6013      	str	r3, [r2, #0]
 800efba:	2301      	movs	r3, #1
 800efbc:	6123      	str	r3, [r4, #16]
 800efbe:	f8c9 3000 	str.w	r3, [r9]
 800efc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efc4:	2762      	movs	r7, #98	; 0x62
 800efc6:	601c      	str	r4, [r3, #0]
 800efc8:	e723      	b.n	800ee12 <__gethex+0x12a>
 800efca:	bf00      	nop
 800efcc:	08010acc 	.word	0x08010acc
 800efd0:	080109f0 	.word	0x080109f0
 800efd4:	08010a64 	.word	0x08010a64
 800efd8:	1e71      	subs	r1, r6, #1
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 feb6 	bl	800fd4c <__any_on>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d1e6      	bne.n	800efb2 <__gethex+0x2ca>
 800efe4:	ee18 0a10 	vmov	r0, s16
 800efe8:	4621      	mov	r1, r4
 800efea:	f000 fa4f 	bl	800f48c <_Bfree>
 800efee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eff0:	2300      	movs	r3, #0
 800eff2:	6013      	str	r3, [r2, #0]
 800eff4:	2750      	movs	r7, #80	; 0x50
 800eff6:	e70c      	b.n	800ee12 <__gethex+0x12a>
 800eff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1f2      	bne.n	800efe4 <__gethex+0x2fc>
 800effe:	e7d8      	b.n	800efb2 <__gethex+0x2ca>
 800f000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1d5      	bne.n	800efb2 <__gethex+0x2ca>
 800f006:	e7ed      	b.n	800efe4 <__gethex+0x2fc>
 800f008:	1e6f      	subs	r7, r5, #1
 800f00a:	f1ba 0f00 	cmp.w	sl, #0
 800f00e:	d131      	bne.n	800f074 <__gethex+0x38c>
 800f010:	b127      	cbz	r7, 800f01c <__gethex+0x334>
 800f012:	4639      	mov	r1, r7
 800f014:	4620      	mov	r0, r4
 800f016:	f000 fe99 	bl	800fd4c <__any_on>
 800f01a:	4682      	mov	sl, r0
 800f01c:	117b      	asrs	r3, r7, #5
 800f01e:	2101      	movs	r1, #1
 800f020:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f024:	f007 071f 	and.w	r7, r7, #31
 800f028:	fa01 f707 	lsl.w	r7, r1, r7
 800f02c:	421f      	tst	r7, r3
 800f02e:	4629      	mov	r1, r5
 800f030:	4620      	mov	r0, r4
 800f032:	bf18      	it	ne
 800f034:	f04a 0a02 	orrne.w	sl, sl, #2
 800f038:	1b76      	subs	r6, r6, r5
 800f03a:	f7ff fdee 	bl	800ec1a <rshift>
 800f03e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f042:	2702      	movs	r7, #2
 800f044:	f1ba 0f00 	cmp.w	sl, #0
 800f048:	d048      	beq.n	800f0dc <__gethex+0x3f4>
 800f04a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d015      	beq.n	800f07e <__gethex+0x396>
 800f052:	2b03      	cmp	r3, #3
 800f054:	d017      	beq.n	800f086 <__gethex+0x39e>
 800f056:	2b01      	cmp	r3, #1
 800f058:	d109      	bne.n	800f06e <__gethex+0x386>
 800f05a:	f01a 0f02 	tst.w	sl, #2
 800f05e:	d006      	beq.n	800f06e <__gethex+0x386>
 800f060:	f8d9 0000 	ldr.w	r0, [r9]
 800f064:	ea4a 0a00 	orr.w	sl, sl, r0
 800f068:	f01a 0f01 	tst.w	sl, #1
 800f06c:	d10e      	bne.n	800f08c <__gethex+0x3a4>
 800f06e:	f047 0710 	orr.w	r7, r7, #16
 800f072:	e033      	b.n	800f0dc <__gethex+0x3f4>
 800f074:	f04f 0a01 	mov.w	sl, #1
 800f078:	e7d0      	b.n	800f01c <__gethex+0x334>
 800f07a:	2701      	movs	r7, #1
 800f07c:	e7e2      	b.n	800f044 <__gethex+0x35c>
 800f07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f080:	f1c3 0301 	rsb	r3, r3, #1
 800f084:	9315      	str	r3, [sp, #84]	; 0x54
 800f086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d0f0      	beq.n	800f06e <__gethex+0x386>
 800f08c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f090:	f104 0314 	add.w	r3, r4, #20
 800f094:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f098:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f09c:	f04f 0c00 	mov.w	ip, #0
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f0aa:	d01c      	beq.n	800f0e6 <__gethex+0x3fe>
 800f0ac:	3201      	adds	r2, #1
 800f0ae:	6002      	str	r2, [r0, #0]
 800f0b0:	2f02      	cmp	r7, #2
 800f0b2:	f104 0314 	add.w	r3, r4, #20
 800f0b6:	d13f      	bne.n	800f138 <__gethex+0x450>
 800f0b8:	f8d8 2000 	ldr.w	r2, [r8]
 800f0bc:	3a01      	subs	r2, #1
 800f0be:	42b2      	cmp	r2, r6
 800f0c0:	d10a      	bne.n	800f0d8 <__gethex+0x3f0>
 800f0c2:	1171      	asrs	r1, r6, #5
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0ca:	f006 061f 	and.w	r6, r6, #31
 800f0ce:	fa02 f606 	lsl.w	r6, r2, r6
 800f0d2:	421e      	tst	r6, r3
 800f0d4:	bf18      	it	ne
 800f0d6:	4617      	movne	r7, r2
 800f0d8:	f047 0720 	orr.w	r7, r7, #32
 800f0dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f0de:	601c      	str	r4, [r3, #0]
 800f0e0:	9b04      	ldr	r3, [sp, #16]
 800f0e2:	601d      	str	r5, [r3, #0]
 800f0e4:	e695      	b.n	800ee12 <__gethex+0x12a>
 800f0e6:	4299      	cmp	r1, r3
 800f0e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800f0ec:	d8d8      	bhi.n	800f0a0 <__gethex+0x3b8>
 800f0ee:	68a3      	ldr	r3, [r4, #8]
 800f0f0:	459b      	cmp	fp, r3
 800f0f2:	db19      	blt.n	800f128 <__gethex+0x440>
 800f0f4:	6861      	ldr	r1, [r4, #4]
 800f0f6:	ee18 0a10 	vmov	r0, s16
 800f0fa:	3101      	adds	r1, #1
 800f0fc:	f000 f986 	bl	800f40c <_Balloc>
 800f100:	4681      	mov	r9, r0
 800f102:	b918      	cbnz	r0, 800f10c <__gethex+0x424>
 800f104:	4b1a      	ldr	r3, [pc, #104]	; (800f170 <__gethex+0x488>)
 800f106:	4602      	mov	r2, r0
 800f108:	2184      	movs	r1, #132	; 0x84
 800f10a:	e6a8      	b.n	800ee5e <__gethex+0x176>
 800f10c:	6922      	ldr	r2, [r4, #16]
 800f10e:	3202      	adds	r2, #2
 800f110:	f104 010c 	add.w	r1, r4, #12
 800f114:	0092      	lsls	r2, r2, #2
 800f116:	300c      	adds	r0, #12
 800f118:	f7fc fd62 	bl	800bbe0 <memcpy>
 800f11c:	4621      	mov	r1, r4
 800f11e:	ee18 0a10 	vmov	r0, s16
 800f122:	f000 f9b3 	bl	800f48c <_Bfree>
 800f126:	464c      	mov	r4, r9
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	1c5a      	adds	r2, r3, #1
 800f12c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f130:	6122      	str	r2, [r4, #16]
 800f132:	2201      	movs	r2, #1
 800f134:	615a      	str	r2, [r3, #20]
 800f136:	e7bb      	b.n	800f0b0 <__gethex+0x3c8>
 800f138:	6922      	ldr	r2, [r4, #16]
 800f13a:	455a      	cmp	r2, fp
 800f13c:	dd0b      	ble.n	800f156 <__gethex+0x46e>
 800f13e:	2101      	movs	r1, #1
 800f140:	4620      	mov	r0, r4
 800f142:	f7ff fd6a 	bl	800ec1a <rshift>
 800f146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f14a:	3501      	adds	r5, #1
 800f14c:	42ab      	cmp	r3, r5
 800f14e:	f6ff aed0 	blt.w	800eef2 <__gethex+0x20a>
 800f152:	2701      	movs	r7, #1
 800f154:	e7c0      	b.n	800f0d8 <__gethex+0x3f0>
 800f156:	f016 061f 	ands.w	r6, r6, #31
 800f15a:	d0fa      	beq.n	800f152 <__gethex+0x46a>
 800f15c:	4453      	add	r3, sl
 800f15e:	f1c6 0620 	rsb	r6, r6, #32
 800f162:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f166:	f000 fa43 	bl	800f5f0 <__hi0bits>
 800f16a:	42b0      	cmp	r0, r6
 800f16c:	dbe7      	blt.n	800f13e <__gethex+0x456>
 800f16e:	e7f0      	b.n	800f152 <__gethex+0x46a>
 800f170:	080109f0 	.word	0x080109f0

0800f174 <L_shift>:
 800f174:	f1c2 0208 	rsb	r2, r2, #8
 800f178:	0092      	lsls	r2, r2, #2
 800f17a:	b570      	push	{r4, r5, r6, lr}
 800f17c:	f1c2 0620 	rsb	r6, r2, #32
 800f180:	6843      	ldr	r3, [r0, #4]
 800f182:	6804      	ldr	r4, [r0, #0]
 800f184:	fa03 f506 	lsl.w	r5, r3, r6
 800f188:	432c      	orrs	r4, r5
 800f18a:	40d3      	lsrs	r3, r2
 800f18c:	6004      	str	r4, [r0, #0]
 800f18e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f192:	4288      	cmp	r0, r1
 800f194:	d3f4      	bcc.n	800f180 <L_shift+0xc>
 800f196:	bd70      	pop	{r4, r5, r6, pc}

0800f198 <__match>:
 800f198:	b530      	push	{r4, r5, lr}
 800f19a:	6803      	ldr	r3, [r0, #0]
 800f19c:	3301      	adds	r3, #1
 800f19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1a2:	b914      	cbnz	r4, 800f1aa <__match+0x12>
 800f1a4:	6003      	str	r3, [r0, #0]
 800f1a6:	2001      	movs	r0, #1
 800f1a8:	bd30      	pop	{r4, r5, pc}
 800f1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f1b2:	2d19      	cmp	r5, #25
 800f1b4:	bf98      	it	ls
 800f1b6:	3220      	addls	r2, #32
 800f1b8:	42a2      	cmp	r2, r4
 800f1ba:	d0f0      	beq.n	800f19e <__match+0x6>
 800f1bc:	2000      	movs	r0, #0
 800f1be:	e7f3      	b.n	800f1a8 <__match+0x10>

0800f1c0 <__hexnan>:
 800f1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c4:	680b      	ldr	r3, [r1, #0]
 800f1c6:	115e      	asrs	r6, r3, #5
 800f1c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f1cc:	f013 031f 	ands.w	r3, r3, #31
 800f1d0:	b087      	sub	sp, #28
 800f1d2:	bf18      	it	ne
 800f1d4:	3604      	addne	r6, #4
 800f1d6:	2500      	movs	r5, #0
 800f1d8:	1f37      	subs	r7, r6, #4
 800f1da:	4690      	mov	r8, r2
 800f1dc:	6802      	ldr	r2, [r0, #0]
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	4682      	mov	sl, r0
 800f1e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f1e6:	46b9      	mov	r9, r7
 800f1e8:	463c      	mov	r4, r7
 800f1ea:	9502      	str	r5, [sp, #8]
 800f1ec:	46ab      	mov	fp, r5
 800f1ee:	7851      	ldrb	r1, [r2, #1]
 800f1f0:	1c53      	adds	r3, r2, #1
 800f1f2:	9303      	str	r3, [sp, #12]
 800f1f4:	b341      	cbz	r1, 800f248 <__hexnan+0x88>
 800f1f6:	4608      	mov	r0, r1
 800f1f8:	9205      	str	r2, [sp, #20]
 800f1fa:	9104      	str	r1, [sp, #16]
 800f1fc:	f7ff fd5f 	bl	800ecbe <__hexdig_fun>
 800f200:	2800      	cmp	r0, #0
 800f202:	d14f      	bne.n	800f2a4 <__hexnan+0xe4>
 800f204:	9904      	ldr	r1, [sp, #16]
 800f206:	9a05      	ldr	r2, [sp, #20]
 800f208:	2920      	cmp	r1, #32
 800f20a:	d818      	bhi.n	800f23e <__hexnan+0x7e>
 800f20c:	9b02      	ldr	r3, [sp, #8]
 800f20e:	459b      	cmp	fp, r3
 800f210:	dd13      	ble.n	800f23a <__hexnan+0x7a>
 800f212:	454c      	cmp	r4, r9
 800f214:	d206      	bcs.n	800f224 <__hexnan+0x64>
 800f216:	2d07      	cmp	r5, #7
 800f218:	dc04      	bgt.n	800f224 <__hexnan+0x64>
 800f21a:	462a      	mov	r2, r5
 800f21c:	4649      	mov	r1, r9
 800f21e:	4620      	mov	r0, r4
 800f220:	f7ff ffa8 	bl	800f174 <L_shift>
 800f224:	4544      	cmp	r4, r8
 800f226:	d950      	bls.n	800f2ca <__hexnan+0x10a>
 800f228:	2300      	movs	r3, #0
 800f22a:	f1a4 0904 	sub.w	r9, r4, #4
 800f22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f232:	f8cd b008 	str.w	fp, [sp, #8]
 800f236:	464c      	mov	r4, r9
 800f238:	461d      	mov	r5, r3
 800f23a:	9a03      	ldr	r2, [sp, #12]
 800f23c:	e7d7      	b.n	800f1ee <__hexnan+0x2e>
 800f23e:	2929      	cmp	r1, #41	; 0x29
 800f240:	d156      	bne.n	800f2f0 <__hexnan+0x130>
 800f242:	3202      	adds	r2, #2
 800f244:	f8ca 2000 	str.w	r2, [sl]
 800f248:	f1bb 0f00 	cmp.w	fp, #0
 800f24c:	d050      	beq.n	800f2f0 <__hexnan+0x130>
 800f24e:	454c      	cmp	r4, r9
 800f250:	d206      	bcs.n	800f260 <__hexnan+0xa0>
 800f252:	2d07      	cmp	r5, #7
 800f254:	dc04      	bgt.n	800f260 <__hexnan+0xa0>
 800f256:	462a      	mov	r2, r5
 800f258:	4649      	mov	r1, r9
 800f25a:	4620      	mov	r0, r4
 800f25c:	f7ff ff8a 	bl	800f174 <L_shift>
 800f260:	4544      	cmp	r4, r8
 800f262:	d934      	bls.n	800f2ce <__hexnan+0x10e>
 800f264:	f1a8 0204 	sub.w	r2, r8, #4
 800f268:	4623      	mov	r3, r4
 800f26a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f26e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f272:	429f      	cmp	r7, r3
 800f274:	d2f9      	bcs.n	800f26a <__hexnan+0xaa>
 800f276:	1b3b      	subs	r3, r7, r4
 800f278:	f023 0303 	bic.w	r3, r3, #3
 800f27c:	3304      	adds	r3, #4
 800f27e:	3401      	adds	r4, #1
 800f280:	3e03      	subs	r6, #3
 800f282:	42b4      	cmp	r4, r6
 800f284:	bf88      	it	hi
 800f286:	2304      	movhi	r3, #4
 800f288:	4443      	add	r3, r8
 800f28a:	2200      	movs	r2, #0
 800f28c:	f843 2b04 	str.w	r2, [r3], #4
 800f290:	429f      	cmp	r7, r3
 800f292:	d2fb      	bcs.n	800f28c <__hexnan+0xcc>
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	b91b      	cbnz	r3, 800f2a0 <__hexnan+0xe0>
 800f298:	4547      	cmp	r7, r8
 800f29a:	d127      	bne.n	800f2ec <__hexnan+0x12c>
 800f29c:	2301      	movs	r3, #1
 800f29e:	603b      	str	r3, [r7, #0]
 800f2a0:	2005      	movs	r0, #5
 800f2a2:	e026      	b.n	800f2f2 <__hexnan+0x132>
 800f2a4:	3501      	adds	r5, #1
 800f2a6:	2d08      	cmp	r5, #8
 800f2a8:	f10b 0b01 	add.w	fp, fp, #1
 800f2ac:	dd06      	ble.n	800f2bc <__hexnan+0xfc>
 800f2ae:	4544      	cmp	r4, r8
 800f2b0:	d9c3      	bls.n	800f23a <__hexnan+0x7a>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2b8:	2501      	movs	r5, #1
 800f2ba:	3c04      	subs	r4, #4
 800f2bc:	6822      	ldr	r2, [r4, #0]
 800f2be:	f000 000f 	and.w	r0, r0, #15
 800f2c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f2c6:	6022      	str	r2, [r4, #0]
 800f2c8:	e7b7      	b.n	800f23a <__hexnan+0x7a>
 800f2ca:	2508      	movs	r5, #8
 800f2cc:	e7b5      	b.n	800f23a <__hexnan+0x7a>
 800f2ce:	9b01      	ldr	r3, [sp, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d0df      	beq.n	800f294 <__hexnan+0xd4>
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d8:	f1c3 0320 	rsb	r3, r3, #32
 800f2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800f2e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f2e4:	401a      	ands	r2, r3
 800f2e6:	f846 2c04 	str.w	r2, [r6, #-4]
 800f2ea:	e7d3      	b.n	800f294 <__hexnan+0xd4>
 800f2ec:	3f04      	subs	r7, #4
 800f2ee:	e7d1      	b.n	800f294 <__hexnan+0xd4>
 800f2f0:	2004      	movs	r0, #4
 800f2f2:	b007      	add	sp, #28
 800f2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2f8 <_localeconv_r>:
 800f2f8:	4800      	ldr	r0, [pc, #0]	; (800f2fc <_localeconv_r+0x4>)
 800f2fa:	4770      	bx	lr
 800f2fc:	2000019c 	.word	0x2000019c

0800f300 <__retarget_lock_init_recursive>:
 800f300:	4770      	bx	lr

0800f302 <__retarget_lock_acquire_recursive>:
 800f302:	4770      	bx	lr

0800f304 <__retarget_lock_release_recursive>:
 800f304:	4770      	bx	lr

0800f306 <__swhatbuf_r>:
 800f306:	b570      	push	{r4, r5, r6, lr}
 800f308:	460e      	mov	r6, r1
 800f30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30e:	2900      	cmp	r1, #0
 800f310:	b096      	sub	sp, #88	; 0x58
 800f312:	4614      	mov	r4, r2
 800f314:	461d      	mov	r5, r3
 800f316:	da08      	bge.n	800f32a <__swhatbuf_r+0x24>
 800f318:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	602a      	str	r2, [r5, #0]
 800f320:	061a      	lsls	r2, r3, #24
 800f322:	d410      	bmi.n	800f346 <__swhatbuf_r+0x40>
 800f324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f328:	e00e      	b.n	800f348 <__swhatbuf_r+0x42>
 800f32a:	466a      	mov	r2, sp
 800f32c:	f001 f8a6 	bl	801047c <_fstat_r>
 800f330:	2800      	cmp	r0, #0
 800f332:	dbf1      	blt.n	800f318 <__swhatbuf_r+0x12>
 800f334:	9a01      	ldr	r2, [sp, #4]
 800f336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f33a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f33e:	425a      	negs	r2, r3
 800f340:	415a      	adcs	r2, r3
 800f342:	602a      	str	r2, [r5, #0]
 800f344:	e7ee      	b.n	800f324 <__swhatbuf_r+0x1e>
 800f346:	2340      	movs	r3, #64	; 0x40
 800f348:	2000      	movs	r0, #0
 800f34a:	6023      	str	r3, [r4, #0]
 800f34c:	b016      	add	sp, #88	; 0x58
 800f34e:	bd70      	pop	{r4, r5, r6, pc}

0800f350 <__smakebuf_r>:
 800f350:	898b      	ldrh	r3, [r1, #12]
 800f352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f354:	079d      	lsls	r5, r3, #30
 800f356:	4606      	mov	r6, r0
 800f358:	460c      	mov	r4, r1
 800f35a:	d507      	bpl.n	800f36c <__smakebuf_r+0x1c>
 800f35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	6123      	str	r3, [r4, #16]
 800f364:	2301      	movs	r3, #1
 800f366:	6163      	str	r3, [r4, #20]
 800f368:	b002      	add	sp, #8
 800f36a:	bd70      	pop	{r4, r5, r6, pc}
 800f36c:	ab01      	add	r3, sp, #4
 800f36e:	466a      	mov	r2, sp
 800f370:	f7ff ffc9 	bl	800f306 <__swhatbuf_r>
 800f374:	9900      	ldr	r1, [sp, #0]
 800f376:	4605      	mov	r5, r0
 800f378:	4630      	mov	r0, r6
 800f37a:	f7fc fcb3 	bl	800bce4 <_malloc_r>
 800f37e:	b948      	cbnz	r0, 800f394 <__smakebuf_r+0x44>
 800f380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f384:	059a      	lsls	r2, r3, #22
 800f386:	d4ef      	bmi.n	800f368 <__smakebuf_r+0x18>
 800f388:	f023 0303 	bic.w	r3, r3, #3
 800f38c:	f043 0302 	orr.w	r3, r3, #2
 800f390:	81a3      	strh	r3, [r4, #12]
 800f392:	e7e3      	b.n	800f35c <__smakebuf_r+0xc>
 800f394:	4b0d      	ldr	r3, [pc, #52]	; (800f3cc <__smakebuf_r+0x7c>)
 800f396:	62b3      	str	r3, [r6, #40]	; 0x28
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	6020      	str	r0, [r4, #0]
 800f39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3a0:	81a3      	strh	r3, [r4, #12]
 800f3a2:	9b00      	ldr	r3, [sp, #0]
 800f3a4:	6163      	str	r3, [r4, #20]
 800f3a6:	9b01      	ldr	r3, [sp, #4]
 800f3a8:	6120      	str	r0, [r4, #16]
 800f3aa:	b15b      	cbz	r3, 800f3c4 <__smakebuf_r+0x74>
 800f3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f001 f875 	bl	80104a0 <_isatty_r>
 800f3b6:	b128      	cbz	r0, 800f3c4 <__smakebuf_r+0x74>
 800f3b8:	89a3      	ldrh	r3, [r4, #12]
 800f3ba:	f023 0303 	bic.w	r3, r3, #3
 800f3be:	f043 0301 	orr.w	r3, r3, #1
 800f3c2:	81a3      	strh	r3, [r4, #12]
 800f3c4:	89a0      	ldrh	r0, [r4, #12]
 800f3c6:	4305      	orrs	r5, r0
 800f3c8:	81a5      	strh	r5, [r4, #12]
 800f3ca:	e7cd      	b.n	800f368 <__smakebuf_r+0x18>
 800f3cc:	0800ea79 	.word	0x0800ea79

0800f3d0 <__ascii_mbtowc>:
 800f3d0:	b082      	sub	sp, #8
 800f3d2:	b901      	cbnz	r1, 800f3d6 <__ascii_mbtowc+0x6>
 800f3d4:	a901      	add	r1, sp, #4
 800f3d6:	b142      	cbz	r2, 800f3ea <__ascii_mbtowc+0x1a>
 800f3d8:	b14b      	cbz	r3, 800f3ee <__ascii_mbtowc+0x1e>
 800f3da:	7813      	ldrb	r3, [r2, #0]
 800f3dc:	600b      	str	r3, [r1, #0]
 800f3de:	7812      	ldrb	r2, [r2, #0]
 800f3e0:	1e10      	subs	r0, r2, #0
 800f3e2:	bf18      	it	ne
 800f3e4:	2001      	movne	r0, #1
 800f3e6:	b002      	add	sp, #8
 800f3e8:	4770      	bx	lr
 800f3ea:	4610      	mov	r0, r2
 800f3ec:	e7fb      	b.n	800f3e6 <__ascii_mbtowc+0x16>
 800f3ee:	f06f 0001 	mvn.w	r0, #1
 800f3f2:	e7f8      	b.n	800f3e6 <__ascii_mbtowc+0x16>

0800f3f4 <__malloc_lock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_lock+0x8>)
 800f3f6:	f7ff bf84 	b.w	800f302 <__retarget_lock_acquire_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	200134a4 	.word	0x200134a4

0800f400 <__malloc_unlock>:
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__malloc_unlock+0x8>)
 800f402:	f7ff bf7f 	b.w	800f304 <__retarget_lock_release_recursive>
 800f406:	bf00      	nop
 800f408:	200134a4 	.word	0x200134a4

0800f40c <_Balloc>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f410:	4604      	mov	r4, r0
 800f412:	460d      	mov	r5, r1
 800f414:	b976      	cbnz	r6, 800f434 <_Balloc+0x28>
 800f416:	2010      	movs	r0, #16
 800f418:	f7fc fbd2 	bl	800bbc0 <malloc>
 800f41c:	4602      	mov	r2, r0
 800f41e:	6260      	str	r0, [r4, #36]	; 0x24
 800f420:	b920      	cbnz	r0, 800f42c <_Balloc+0x20>
 800f422:	4b18      	ldr	r3, [pc, #96]	; (800f484 <_Balloc+0x78>)
 800f424:	4818      	ldr	r0, [pc, #96]	; (800f488 <_Balloc+0x7c>)
 800f426:	2166      	movs	r1, #102	; 0x66
 800f428:	f000 ffe8 	bl	80103fc <__assert_func>
 800f42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f430:	6006      	str	r6, [r0, #0]
 800f432:	60c6      	str	r6, [r0, #12]
 800f434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f436:	68f3      	ldr	r3, [r6, #12]
 800f438:	b183      	cbz	r3, 800f45c <_Balloc+0x50>
 800f43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f442:	b9b8      	cbnz	r0, 800f474 <_Balloc+0x68>
 800f444:	2101      	movs	r1, #1
 800f446:	fa01 f605 	lsl.w	r6, r1, r5
 800f44a:	1d72      	adds	r2, r6, #5
 800f44c:	0092      	lsls	r2, r2, #2
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fc9d 	bl	800fd8e <_calloc_r>
 800f454:	b160      	cbz	r0, 800f470 <_Balloc+0x64>
 800f456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f45a:	e00e      	b.n	800f47a <_Balloc+0x6e>
 800f45c:	2221      	movs	r2, #33	; 0x21
 800f45e:	2104      	movs	r1, #4
 800f460:	4620      	mov	r0, r4
 800f462:	f000 fc94 	bl	800fd8e <_calloc_r>
 800f466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f468:	60f0      	str	r0, [r6, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1e4      	bne.n	800f43a <_Balloc+0x2e>
 800f470:	2000      	movs	r0, #0
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	6802      	ldr	r2, [r0, #0]
 800f476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f47a:	2300      	movs	r3, #0
 800f47c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f480:	e7f7      	b.n	800f472 <_Balloc+0x66>
 800f482:	bf00      	nop
 800f484:	0801097e 	.word	0x0801097e
 800f488:	08010ae0 	.word	0x08010ae0

0800f48c <_Bfree>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f490:	4605      	mov	r5, r0
 800f492:	460c      	mov	r4, r1
 800f494:	b976      	cbnz	r6, 800f4b4 <_Bfree+0x28>
 800f496:	2010      	movs	r0, #16
 800f498:	f7fc fb92 	bl	800bbc0 <malloc>
 800f49c:	4602      	mov	r2, r0
 800f49e:	6268      	str	r0, [r5, #36]	; 0x24
 800f4a0:	b920      	cbnz	r0, 800f4ac <_Bfree+0x20>
 800f4a2:	4b09      	ldr	r3, [pc, #36]	; (800f4c8 <_Bfree+0x3c>)
 800f4a4:	4809      	ldr	r0, [pc, #36]	; (800f4cc <_Bfree+0x40>)
 800f4a6:	218a      	movs	r1, #138	; 0x8a
 800f4a8:	f000 ffa8 	bl	80103fc <__assert_func>
 800f4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4b0:	6006      	str	r6, [r0, #0]
 800f4b2:	60c6      	str	r6, [r0, #12]
 800f4b4:	b13c      	cbz	r4, 800f4c6 <_Bfree+0x3a>
 800f4b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f4b8:	6862      	ldr	r2, [r4, #4]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4c0:	6021      	str	r1, [r4, #0]
 800f4c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4c6:	bd70      	pop	{r4, r5, r6, pc}
 800f4c8:	0801097e 	.word	0x0801097e
 800f4cc:	08010ae0 	.word	0x08010ae0

0800f4d0 <__multadd>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	690d      	ldr	r5, [r1, #16]
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	460c      	mov	r4, r1
 800f4da:	461e      	mov	r6, r3
 800f4dc:	f101 0c14 	add.w	ip, r1, #20
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4e6:	b299      	uxth	r1, r3
 800f4e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f4ec:	0c1e      	lsrs	r6, r3, #16
 800f4ee:	0c0b      	lsrs	r3, r1, #16
 800f4f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f4f4:	b289      	uxth	r1, r1
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4fc:	4285      	cmp	r5, r0
 800f4fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f506:	dcec      	bgt.n	800f4e2 <__multadd+0x12>
 800f508:	b30e      	cbz	r6, 800f54e <__multadd+0x7e>
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	42ab      	cmp	r3, r5
 800f50e:	dc19      	bgt.n	800f544 <__multadd+0x74>
 800f510:	6861      	ldr	r1, [r4, #4]
 800f512:	4638      	mov	r0, r7
 800f514:	3101      	adds	r1, #1
 800f516:	f7ff ff79 	bl	800f40c <_Balloc>
 800f51a:	4680      	mov	r8, r0
 800f51c:	b928      	cbnz	r0, 800f52a <__multadd+0x5a>
 800f51e:	4602      	mov	r2, r0
 800f520:	4b0c      	ldr	r3, [pc, #48]	; (800f554 <__multadd+0x84>)
 800f522:	480d      	ldr	r0, [pc, #52]	; (800f558 <__multadd+0x88>)
 800f524:	21b5      	movs	r1, #181	; 0xb5
 800f526:	f000 ff69 	bl	80103fc <__assert_func>
 800f52a:	6922      	ldr	r2, [r4, #16]
 800f52c:	3202      	adds	r2, #2
 800f52e:	f104 010c 	add.w	r1, r4, #12
 800f532:	0092      	lsls	r2, r2, #2
 800f534:	300c      	adds	r0, #12
 800f536:	f7fc fb53 	bl	800bbe0 <memcpy>
 800f53a:	4621      	mov	r1, r4
 800f53c:	4638      	mov	r0, r7
 800f53e:	f7ff ffa5 	bl	800f48c <_Bfree>
 800f542:	4644      	mov	r4, r8
 800f544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f548:	3501      	adds	r5, #1
 800f54a:	615e      	str	r6, [r3, #20]
 800f54c:	6125      	str	r5, [r4, #16]
 800f54e:	4620      	mov	r0, r4
 800f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f554:	080109f0 	.word	0x080109f0
 800f558:	08010ae0 	.word	0x08010ae0

0800f55c <__s2b>:
 800f55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f560:	460c      	mov	r4, r1
 800f562:	4615      	mov	r5, r2
 800f564:	461f      	mov	r7, r3
 800f566:	2209      	movs	r2, #9
 800f568:	3308      	adds	r3, #8
 800f56a:	4606      	mov	r6, r0
 800f56c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f570:	2100      	movs	r1, #0
 800f572:	2201      	movs	r2, #1
 800f574:	429a      	cmp	r2, r3
 800f576:	db09      	blt.n	800f58c <__s2b+0x30>
 800f578:	4630      	mov	r0, r6
 800f57a:	f7ff ff47 	bl	800f40c <_Balloc>
 800f57e:	b940      	cbnz	r0, 800f592 <__s2b+0x36>
 800f580:	4602      	mov	r2, r0
 800f582:	4b19      	ldr	r3, [pc, #100]	; (800f5e8 <__s2b+0x8c>)
 800f584:	4819      	ldr	r0, [pc, #100]	; (800f5ec <__s2b+0x90>)
 800f586:	21ce      	movs	r1, #206	; 0xce
 800f588:	f000 ff38 	bl	80103fc <__assert_func>
 800f58c:	0052      	lsls	r2, r2, #1
 800f58e:	3101      	adds	r1, #1
 800f590:	e7f0      	b.n	800f574 <__s2b+0x18>
 800f592:	9b08      	ldr	r3, [sp, #32]
 800f594:	6143      	str	r3, [r0, #20]
 800f596:	2d09      	cmp	r5, #9
 800f598:	f04f 0301 	mov.w	r3, #1
 800f59c:	6103      	str	r3, [r0, #16]
 800f59e:	dd16      	ble.n	800f5ce <__s2b+0x72>
 800f5a0:	f104 0909 	add.w	r9, r4, #9
 800f5a4:	46c8      	mov	r8, r9
 800f5a6:	442c      	add	r4, r5
 800f5a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5ac:	4601      	mov	r1, r0
 800f5ae:	3b30      	subs	r3, #48	; 0x30
 800f5b0:	220a      	movs	r2, #10
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f7ff ff8c 	bl	800f4d0 <__multadd>
 800f5b8:	45a0      	cmp	r8, r4
 800f5ba:	d1f5      	bne.n	800f5a8 <__s2b+0x4c>
 800f5bc:	f1a5 0408 	sub.w	r4, r5, #8
 800f5c0:	444c      	add	r4, r9
 800f5c2:	1b2d      	subs	r5, r5, r4
 800f5c4:	1963      	adds	r3, r4, r5
 800f5c6:	42bb      	cmp	r3, r7
 800f5c8:	db04      	blt.n	800f5d4 <__s2b+0x78>
 800f5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ce:	340a      	adds	r4, #10
 800f5d0:	2509      	movs	r5, #9
 800f5d2:	e7f6      	b.n	800f5c2 <__s2b+0x66>
 800f5d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5d8:	4601      	mov	r1, r0
 800f5da:	3b30      	subs	r3, #48	; 0x30
 800f5dc:	220a      	movs	r2, #10
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f7ff ff76 	bl	800f4d0 <__multadd>
 800f5e4:	e7ee      	b.n	800f5c4 <__s2b+0x68>
 800f5e6:	bf00      	nop
 800f5e8:	080109f0 	.word	0x080109f0
 800f5ec:	08010ae0 	.word	0x08010ae0

0800f5f0 <__hi0bits>:
 800f5f0:	0c03      	lsrs	r3, r0, #16
 800f5f2:	041b      	lsls	r3, r3, #16
 800f5f4:	b9d3      	cbnz	r3, 800f62c <__hi0bits+0x3c>
 800f5f6:	0400      	lsls	r0, r0, #16
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5fe:	bf04      	itt	eq
 800f600:	0200      	lsleq	r0, r0, #8
 800f602:	3308      	addeq	r3, #8
 800f604:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f608:	bf04      	itt	eq
 800f60a:	0100      	lsleq	r0, r0, #4
 800f60c:	3304      	addeq	r3, #4
 800f60e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f612:	bf04      	itt	eq
 800f614:	0080      	lsleq	r0, r0, #2
 800f616:	3302      	addeq	r3, #2
 800f618:	2800      	cmp	r0, #0
 800f61a:	db05      	blt.n	800f628 <__hi0bits+0x38>
 800f61c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f620:	f103 0301 	add.w	r3, r3, #1
 800f624:	bf08      	it	eq
 800f626:	2320      	moveq	r3, #32
 800f628:	4618      	mov	r0, r3
 800f62a:	4770      	bx	lr
 800f62c:	2300      	movs	r3, #0
 800f62e:	e7e4      	b.n	800f5fa <__hi0bits+0xa>

0800f630 <__lo0bits>:
 800f630:	6803      	ldr	r3, [r0, #0]
 800f632:	f013 0207 	ands.w	r2, r3, #7
 800f636:	4601      	mov	r1, r0
 800f638:	d00b      	beq.n	800f652 <__lo0bits+0x22>
 800f63a:	07da      	lsls	r2, r3, #31
 800f63c:	d423      	bmi.n	800f686 <__lo0bits+0x56>
 800f63e:	0798      	lsls	r0, r3, #30
 800f640:	bf49      	itett	mi
 800f642:	085b      	lsrmi	r3, r3, #1
 800f644:	089b      	lsrpl	r3, r3, #2
 800f646:	2001      	movmi	r0, #1
 800f648:	600b      	strmi	r3, [r1, #0]
 800f64a:	bf5c      	itt	pl
 800f64c:	600b      	strpl	r3, [r1, #0]
 800f64e:	2002      	movpl	r0, #2
 800f650:	4770      	bx	lr
 800f652:	b298      	uxth	r0, r3
 800f654:	b9a8      	cbnz	r0, 800f682 <__lo0bits+0x52>
 800f656:	0c1b      	lsrs	r3, r3, #16
 800f658:	2010      	movs	r0, #16
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	b90a      	cbnz	r2, 800f662 <__lo0bits+0x32>
 800f65e:	3008      	adds	r0, #8
 800f660:	0a1b      	lsrs	r3, r3, #8
 800f662:	071a      	lsls	r2, r3, #28
 800f664:	bf04      	itt	eq
 800f666:	091b      	lsreq	r3, r3, #4
 800f668:	3004      	addeq	r0, #4
 800f66a:	079a      	lsls	r2, r3, #30
 800f66c:	bf04      	itt	eq
 800f66e:	089b      	lsreq	r3, r3, #2
 800f670:	3002      	addeq	r0, #2
 800f672:	07da      	lsls	r2, r3, #31
 800f674:	d403      	bmi.n	800f67e <__lo0bits+0x4e>
 800f676:	085b      	lsrs	r3, r3, #1
 800f678:	f100 0001 	add.w	r0, r0, #1
 800f67c:	d005      	beq.n	800f68a <__lo0bits+0x5a>
 800f67e:	600b      	str	r3, [r1, #0]
 800f680:	4770      	bx	lr
 800f682:	4610      	mov	r0, r2
 800f684:	e7e9      	b.n	800f65a <__lo0bits+0x2a>
 800f686:	2000      	movs	r0, #0
 800f688:	4770      	bx	lr
 800f68a:	2020      	movs	r0, #32
 800f68c:	4770      	bx	lr
	...

0800f690 <__i2b>:
 800f690:	b510      	push	{r4, lr}
 800f692:	460c      	mov	r4, r1
 800f694:	2101      	movs	r1, #1
 800f696:	f7ff feb9 	bl	800f40c <_Balloc>
 800f69a:	4602      	mov	r2, r0
 800f69c:	b928      	cbnz	r0, 800f6aa <__i2b+0x1a>
 800f69e:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <__i2b+0x24>)
 800f6a0:	4805      	ldr	r0, [pc, #20]	; (800f6b8 <__i2b+0x28>)
 800f6a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f6a6:	f000 fea9 	bl	80103fc <__assert_func>
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	6144      	str	r4, [r0, #20]
 800f6ae:	6103      	str	r3, [r0, #16]
 800f6b0:	bd10      	pop	{r4, pc}
 800f6b2:	bf00      	nop
 800f6b4:	080109f0 	.word	0x080109f0
 800f6b8:	08010ae0 	.word	0x08010ae0

0800f6bc <__multiply>:
 800f6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	4691      	mov	r9, r2
 800f6c2:	690a      	ldr	r2, [r1, #16]
 800f6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	bfb8      	it	lt
 800f6cc:	460b      	movlt	r3, r1
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	bfbc      	itt	lt
 800f6d2:	464c      	movlt	r4, r9
 800f6d4:	4699      	movlt	r9, r3
 800f6d6:	6927      	ldr	r7, [r4, #16]
 800f6d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6dc:	68a3      	ldr	r3, [r4, #8]
 800f6de:	6861      	ldr	r1, [r4, #4]
 800f6e0:	eb07 060a 	add.w	r6, r7, sl
 800f6e4:	42b3      	cmp	r3, r6
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	bfb8      	it	lt
 800f6ea:	3101      	addlt	r1, #1
 800f6ec:	f7ff fe8e 	bl	800f40c <_Balloc>
 800f6f0:	b930      	cbnz	r0, 800f700 <__multiply+0x44>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	4b44      	ldr	r3, [pc, #272]	; (800f808 <__multiply+0x14c>)
 800f6f6:	4845      	ldr	r0, [pc, #276]	; (800f80c <__multiply+0x150>)
 800f6f8:	f240 115d 	movw	r1, #349	; 0x15d
 800f6fc:	f000 fe7e 	bl	80103fc <__assert_func>
 800f700:	f100 0514 	add.w	r5, r0, #20
 800f704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f708:	462b      	mov	r3, r5
 800f70a:	2200      	movs	r2, #0
 800f70c:	4543      	cmp	r3, r8
 800f70e:	d321      	bcc.n	800f754 <__multiply+0x98>
 800f710:	f104 0314 	add.w	r3, r4, #20
 800f714:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f718:	f109 0314 	add.w	r3, r9, #20
 800f71c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f720:	9202      	str	r2, [sp, #8]
 800f722:	1b3a      	subs	r2, r7, r4
 800f724:	3a15      	subs	r2, #21
 800f726:	f022 0203 	bic.w	r2, r2, #3
 800f72a:	3204      	adds	r2, #4
 800f72c:	f104 0115 	add.w	r1, r4, #21
 800f730:	428f      	cmp	r7, r1
 800f732:	bf38      	it	cc
 800f734:	2204      	movcc	r2, #4
 800f736:	9201      	str	r2, [sp, #4]
 800f738:	9a02      	ldr	r2, [sp, #8]
 800f73a:	9303      	str	r3, [sp, #12]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d80c      	bhi.n	800f75a <__multiply+0x9e>
 800f740:	2e00      	cmp	r6, #0
 800f742:	dd03      	ble.n	800f74c <__multiply+0x90>
 800f744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d05a      	beq.n	800f802 <__multiply+0x146>
 800f74c:	6106      	str	r6, [r0, #16]
 800f74e:	b005      	add	sp, #20
 800f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f754:	f843 2b04 	str.w	r2, [r3], #4
 800f758:	e7d8      	b.n	800f70c <__multiply+0x50>
 800f75a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f75e:	f1ba 0f00 	cmp.w	sl, #0
 800f762:	d024      	beq.n	800f7ae <__multiply+0xf2>
 800f764:	f104 0e14 	add.w	lr, r4, #20
 800f768:	46a9      	mov	r9, r5
 800f76a:	f04f 0c00 	mov.w	ip, #0
 800f76e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f772:	f8d9 1000 	ldr.w	r1, [r9]
 800f776:	fa1f fb82 	uxth.w	fp, r2
 800f77a:	b289      	uxth	r1, r1
 800f77c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f780:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f784:	f8d9 2000 	ldr.w	r2, [r9]
 800f788:	4461      	add	r1, ip
 800f78a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f78e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f796:	b289      	uxth	r1, r1
 800f798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f79c:	4577      	cmp	r7, lr
 800f79e:	f849 1b04 	str.w	r1, [r9], #4
 800f7a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7a6:	d8e2      	bhi.n	800f76e <__multiply+0xb2>
 800f7a8:	9a01      	ldr	r2, [sp, #4]
 800f7aa:	f845 c002 	str.w	ip, [r5, r2]
 800f7ae:	9a03      	ldr	r2, [sp, #12]
 800f7b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f7b4:	3304      	adds	r3, #4
 800f7b6:	f1b9 0f00 	cmp.w	r9, #0
 800f7ba:	d020      	beq.n	800f7fe <__multiply+0x142>
 800f7bc:	6829      	ldr	r1, [r5, #0]
 800f7be:	f104 0c14 	add.w	ip, r4, #20
 800f7c2:	46ae      	mov	lr, r5
 800f7c4:	f04f 0a00 	mov.w	sl, #0
 800f7c8:	f8bc b000 	ldrh.w	fp, [ip]
 800f7cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7d0:	fb09 220b 	mla	r2, r9, fp, r2
 800f7d4:	4492      	add	sl, r2
 800f7d6:	b289      	uxth	r1, r1
 800f7d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7dc:	f84e 1b04 	str.w	r1, [lr], #4
 800f7e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7e4:	f8be 1000 	ldrh.w	r1, [lr]
 800f7e8:	0c12      	lsrs	r2, r2, #16
 800f7ea:	fb09 1102 	mla	r1, r9, r2, r1
 800f7ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7f2:	4567      	cmp	r7, ip
 800f7f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7f8:	d8e6      	bhi.n	800f7c8 <__multiply+0x10c>
 800f7fa:	9a01      	ldr	r2, [sp, #4]
 800f7fc:	50a9      	str	r1, [r5, r2]
 800f7fe:	3504      	adds	r5, #4
 800f800:	e79a      	b.n	800f738 <__multiply+0x7c>
 800f802:	3e01      	subs	r6, #1
 800f804:	e79c      	b.n	800f740 <__multiply+0x84>
 800f806:	bf00      	nop
 800f808:	080109f0 	.word	0x080109f0
 800f80c:	08010ae0 	.word	0x08010ae0

0800f810 <__pow5mult>:
 800f810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f814:	4615      	mov	r5, r2
 800f816:	f012 0203 	ands.w	r2, r2, #3
 800f81a:	4606      	mov	r6, r0
 800f81c:	460f      	mov	r7, r1
 800f81e:	d007      	beq.n	800f830 <__pow5mult+0x20>
 800f820:	4c25      	ldr	r4, [pc, #148]	; (800f8b8 <__pow5mult+0xa8>)
 800f822:	3a01      	subs	r2, #1
 800f824:	2300      	movs	r3, #0
 800f826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f82a:	f7ff fe51 	bl	800f4d0 <__multadd>
 800f82e:	4607      	mov	r7, r0
 800f830:	10ad      	asrs	r5, r5, #2
 800f832:	d03d      	beq.n	800f8b0 <__pow5mult+0xa0>
 800f834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f836:	b97c      	cbnz	r4, 800f858 <__pow5mult+0x48>
 800f838:	2010      	movs	r0, #16
 800f83a:	f7fc f9c1 	bl	800bbc0 <malloc>
 800f83e:	4602      	mov	r2, r0
 800f840:	6270      	str	r0, [r6, #36]	; 0x24
 800f842:	b928      	cbnz	r0, 800f850 <__pow5mult+0x40>
 800f844:	4b1d      	ldr	r3, [pc, #116]	; (800f8bc <__pow5mult+0xac>)
 800f846:	481e      	ldr	r0, [pc, #120]	; (800f8c0 <__pow5mult+0xb0>)
 800f848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f84c:	f000 fdd6 	bl	80103fc <__assert_func>
 800f850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f854:	6004      	str	r4, [r0, #0]
 800f856:	60c4      	str	r4, [r0, #12]
 800f858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f860:	b94c      	cbnz	r4, 800f876 <__pow5mult+0x66>
 800f862:	f240 2171 	movw	r1, #625	; 0x271
 800f866:	4630      	mov	r0, r6
 800f868:	f7ff ff12 	bl	800f690 <__i2b>
 800f86c:	2300      	movs	r3, #0
 800f86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f872:	4604      	mov	r4, r0
 800f874:	6003      	str	r3, [r0, #0]
 800f876:	f04f 0900 	mov.w	r9, #0
 800f87a:	07eb      	lsls	r3, r5, #31
 800f87c:	d50a      	bpl.n	800f894 <__pow5mult+0x84>
 800f87e:	4639      	mov	r1, r7
 800f880:	4622      	mov	r2, r4
 800f882:	4630      	mov	r0, r6
 800f884:	f7ff ff1a 	bl	800f6bc <__multiply>
 800f888:	4639      	mov	r1, r7
 800f88a:	4680      	mov	r8, r0
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7ff fdfd 	bl	800f48c <_Bfree>
 800f892:	4647      	mov	r7, r8
 800f894:	106d      	asrs	r5, r5, #1
 800f896:	d00b      	beq.n	800f8b0 <__pow5mult+0xa0>
 800f898:	6820      	ldr	r0, [r4, #0]
 800f89a:	b938      	cbnz	r0, 800f8ac <__pow5mult+0x9c>
 800f89c:	4622      	mov	r2, r4
 800f89e:	4621      	mov	r1, r4
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	f7ff ff0b 	bl	800f6bc <__multiply>
 800f8a6:	6020      	str	r0, [r4, #0]
 800f8a8:	f8c0 9000 	str.w	r9, [r0]
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	e7e4      	b.n	800f87a <__pow5mult+0x6a>
 800f8b0:	4638      	mov	r0, r7
 800f8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08010c30 	.word	0x08010c30
 800f8bc:	0801097e 	.word	0x0801097e
 800f8c0:	08010ae0 	.word	0x08010ae0

0800f8c4 <__lshift>:
 800f8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c8:	460c      	mov	r4, r1
 800f8ca:	6849      	ldr	r1, [r1, #4]
 800f8cc:	6923      	ldr	r3, [r4, #16]
 800f8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8d2:	68a3      	ldr	r3, [r4, #8]
 800f8d4:	4607      	mov	r7, r0
 800f8d6:	4691      	mov	r9, r2
 800f8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8dc:	f108 0601 	add.w	r6, r8, #1
 800f8e0:	42b3      	cmp	r3, r6
 800f8e2:	db0b      	blt.n	800f8fc <__lshift+0x38>
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	f7ff fd91 	bl	800f40c <_Balloc>
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	b948      	cbnz	r0, 800f902 <__lshift+0x3e>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	4b2a      	ldr	r3, [pc, #168]	; (800f99c <__lshift+0xd8>)
 800f8f2:	482b      	ldr	r0, [pc, #172]	; (800f9a0 <__lshift+0xdc>)
 800f8f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8f8:	f000 fd80 	bl	80103fc <__assert_func>
 800f8fc:	3101      	adds	r1, #1
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	e7ee      	b.n	800f8e0 <__lshift+0x1c>
 800f902:	2300      	movs	r3, #0
 800f904:	f100 0114 	add.w	r1, r0, #20
 800f908:	f100 0210 	add.w	r2, r0, #16
 800f90c:	4618      	mov	r0, r3
 800f90e:	4553      	cmp	r3, sl
 800f910:	db37      	blt.n	800f982 <__lshift+0xbe>
 800f912:	6920      	ldr	r0, [r4, #16]
 800f914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f918:	f104 0314 	add.w	r3, r4, #20
 800f91c:	f019 091f 	ands.w	r9, r9, #31
 800f920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f924:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f928:	d02f      	beq.n	800f98a <__lshift+0xc6>
 800f92a:	f1c9 0e20 	rsb	lr, r9, #32
 800f92e:	468a      	mov	sl, r1
 800f930:	f04f 0c00 	mov.w	ip, #0
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	fa02 f209 	lsl.w	r2, r2, r9
 800f93a:	ea42 020c 	orr.w	r2, r2, ip
 800f93e:	f84a 2b04 	str.w	r2, [sl], #4
 800f942:	f853 2b04 	ldr.w	r2, [r3], #4
 800f946:	4298      	cmp	r0, r3
 800f948:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f94c:	d8f2      	bhi.n	800f934 <__lshift+0x70>
 800f94e:	1b03      	subs	r3, r0, r4
 800f950:	3b15      	subs	r3, #21
 800f952:	f023 0303 	bic.w	r3, r3, #3
 800f956:	3304      	adds	r3, #4
 800f958:	f104 0215 	add.w	r2, r4, #21
 800f95c:	4290      	cmp	r0, r2
 800f95e:	bf38      	it	cc
 800f960:	2304      	movcc	r3, #4
 800f962:	f841 c003 	str.w	ip, [r1, r3]
 800f966:	f1bc 0f00 	cmp.w	ip, #0
 800f96a:	d001      	beq.n	800f970 <__lshift+0xac>
 800f96c:	f108 0602 	add.w	r6, r8, #2
 800f970:	3e01      	subs	r6, #1
 800f972:	4638      	mov	r0, r7
 800f974:	612e      	str	r6, [r5, #16]
 800f976:	4621      	mov	r1, r4
 800f978:	f7ff fd88 	bl	800f48c <_Bfree>
 800f97c:	4628      	mov	r0, r5
 800f97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f982:	f842 0f04 	str.w	r0, [r2, #4]!
 800f986:	3301      	adds	r3, #1
 800f988:	e7c1      	b.n	800f90e <__lshift+0x4a>
 800f98a:	3904      	subs	r1, #4
 800f98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f990:	f841 2f04 	str.w	r2, [r1, #4]!
 800f994:	4298      	cmp	r0, r3
 800f996:	d8f9      	bhi.n	800f98c <__lshift+0xc8>
 800f998:	e7ea      	b.n	800f970 <__lshift+0xac>
 800f99a:	bf00      	nop
 800f99c:	080109f0 	.word	0x080109f0
 800f9a0:	08010ae0 	.word	0x08010ae0

0800f9a4 <__mcmp>:
 800f9a4:	b530      	push	{r4, r5, lr}
 800f9a6:	6902      	ldr	r2, [r0, #16]
 800f9a8:	690c      	ldr	r4, [r1, #16]
 800f9aa:	1b12      	subs	r2, r2, r4
 800f9ac:	d10e      	bne.n	800f9cc <__mcmp+0x28>
 800f9ae:	f100 0314 	add.w	r3, r0, #20
 800f9b2:	3114      	adds	r1, #20
 800f9b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f9b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f9bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f9c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f9c4:	42a5      	cmp	r5, r4
 800f9c6:	d003      	beq.n	800f9d0 <__mcmp+0x2c>
 800f9c8:	d305      	bcc.n	800f9d6 <__mcmp+0x32>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	bd30      	pop	{r4, r5, pc}
 800f9d0:	4283      	cmp	r3, r0
 800f9d2:	d3f3      	bcc.n	800f9bc <__mcmp+0x18>
 800f9d4:	e7fa      	b.n	800f9cc <__mcmp+0x28>
 800f9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9da:	e7f7      	b.n	800f9cc <__mcmp+0x28>

0800f9dc <__mdiff>:
 800f9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	4606      	mov	r6, r0
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	4690      	mov	r8, r2
 800f9ea:	f7ff ffdb 	bl	800f9a4 <__mcmp>
 800f9ee:	1e05      	subs	r5, r0, #0
 800f9f0:	d110      	bne.n	800fa14 <__mdiff+0x38>
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f7ff fd09 	bl	800f40c <_Balloc>
 800f9fa:	b930      	cbnz	r0, 800fa0a <__mdiff+0x2e>
 800f9fc:	4b3a      	ldr	r3, [pc, #232]	; (800fae8 <__mdiff+0x10c>)
 800f9fe:	4602      	mov	r2, r0
 800fa00:	f240 2132 	movw	r1, #562	; 0x232
 800fa04:	4839      	ldr	r0, [pc, #228]	; (800faec <__mdiff+0x110>)
 800fa06:	f000 fcf9 	bl	80103fc <__assert_func>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa14:	bfa4      	itt	ge
 800fa16:	4643      	movge	r3, r8
 800fa18:	46a0      	movge	r8, r4
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa20:	bfa6      	itte	ge
 800fa22:	461c      	movge	r4, r3
 800fa24:	2500      	movge	r5, #0
 800fa26:	2501      	movlt	r5, #1
 800fa28:	f7ff fcf0 	bl	800f40c <_Balloc>
 800fa2c:	b920      	cbnz	r0, 800fa38 <__mdiff+0x5c>
 800fa2e:	4b2e      	ldr	r3, [pc, #184]	; (800fae8 <__mdiff+0x10c>)
 800fa30:	4602      	mov	r2, r0
 800fa32:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa36:	e7e5      	b.n	800fa04 <__mdiff+0x28>
 800fa38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa3c:	6926      	ldr	r6, [r4, #16]
 800fa3e:	60c5      	str	r5, [r0, #12]
 800fa40:	f104 0914 	add.w	r9, r4, #20
 800fa44:	f108 0514 	add.w	r5, r8, #20
 800fa48:	f100 0e14 	add.w	lr, r0, #20
 800fa4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa54:	f108 0210 	add.w	r2, r8, #16
 800fa58:	46f2      	mov	sl, lr
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa64:	fa1f f883 	uxth.w	r8, r3
 800fa68:	fa11 f18b 	uxtah	r1, r1, fp
 800fa6c:	0c1b      	lsrs	r3, r3, #16
 800fa6e:	eba1 0808 	sub.w	r8, r1, r8
 800fa72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa7a:	fa1f f888 	uxth.w	r8, r8
 800fa7e:	1419      	asrs	r1, r3, #16
 800fa80:	454e      	cmp	r6, r9
 800fa82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa86:	f84a 3b04 	str.w	r3, [sl], #4
 800fa8a:	d8e7      	bhi.n	800fa5c <__mdiff+0x80>
 800fa8c:	1b33      	subs	r3, r6, r4
 800fa8e:	3b15      	subs	r3, #21
 800fa90:	f023 0303 	bic.w	r3, r3, #3
 800fa94:	3304      	adds	r3, #4
 800fa96:	3415      	adds	r4, #21
 800fa98:	42a6      	cmp	r6, r4
 800fa9a:	bf38      	it	cc
 800fa9c:	2304      	movcc	r3, #4
 800fa9e:	441d      	add	r5, r3
 800faa0:	4473      	add	r3, lr
 800faa2:	469e      	mov	lr, r3
 800faa4:	462e      	mov	r6, r5
 800faa6:	4566      	cmp	r6, ip
 800faa8:	d30e      	bcc.n	800fac8 <__mdiff+0xec>
 800faaa:	f10c 0203 	add.w	r2, ip, #3
 800faae:	1b52      	subs	r2, r2, r5
 800fab0:	f022 0203 	bic.w	r2, r2, #3
 800fab4:	3d03      	subs	r5, #3
 800fab6:	45ac      	cmp	ip, r5
 800fab8:	bf38      	it	cc
 800faba:	2200      	movcc	r2, #0
 800fabc:	441a      	add	r2, r3
 800fabe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fac2:	b17b      	cbz	r3, 800fae4 <__mdiff+0x108>
 800fac4:	6107      	str	r7, [r0, #16]
 800fac6:	e7a3      	b.n	800fa10 <__mdiff+0x34>
 800fac8:	f856 8b04 	ldr.w	r8, [r6], #4
 800facc:	fa11 f288 	uxtah	r2, r1, r8
 800fad0:	1414      	asrs	r4, r2, #16
 800fad2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fad6:	b292      	uxth	r2, r2
 800fad8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fadc:	f84e 2b04 	str.w	r2, [lr], #4
 800fae0:	1421      	asrs	r1, r4, #16
 800fae2:	e7e0      	b.n	800faa6 <__mdiff+0xca>
 800fae4:	3f01      	subs	r7, #1
 800fae6:	e7ea      	b.n	800fabe <__mdiff+0xe2>
 800fae8:	080109f0 	.word	0x080109f0
 800faec:	08010ae0 	.word	0x08010ae0

0800faf0 <__ulp>:
 800faf0:	b082      	sub	sp, #8
 800faf2:	ed8d 0b00 	vstr	d0, [sp]
 800faf6:	9b01      	ldr	r3, [sp, #4]
 800faf8:	4912      	ldr	r1, [pc, #72]	; (800fb44 <__ulp+0x54>)
 800fafa:	4019      	ands	r1, r3
 800fafc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fb00:	2900      	cmp	r1, #0
 800fb02:	dd05      	ble.n	800fb10 <__ulp+0x20>
 800fb04:	2200      	movs	r2, #0
 800fb06:	460b      	mov	r3, r1
 800fb08:	ec43 2b10 	vmov	d0, r2, r3
 800fb0c:	b002      	add	sp, #8
 800fb0e:	4770      	bx	lr
 800fb10:	4249      	negs	r1, r1
 800fb12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fb16:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fb1a:	f04f 0200 	mov.w	r2, #0
 800fb1e:	f04f 0300 	mov.w	r3, #0
 800fb22:	da04      	bge.n	800fb2e <__ulp+0x3e>
 800fb24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fb28:	fa41 f300 	asr.w	r3, r1, r0
 800fb2c:	e7ec      	b.n	800fb08 <__ulp+0x18>
 800fb2e:	f1a0 0114 	sub.w	r1, r0, #20
 800fb32:	291e      	cmp	r1, #30
 800fb34:	bfda      	itte	le
 800fb36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fb3a:	fa20 f101 	lsrle.w	r1, r0, r1
 800fb3e:	2101      	movgt	r1, #1
 800fb40:	460a      	mov	r2, r1
 800fb42:	e7e1      	b.n	800fb08 <__ulp+0x18>
 800fb44:	7ff00000 	.word	0x7ff00000

0800fb48 <__b2d>:
 800fb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4a:	6905      	ldr	r5, [r0, #16]
 800fb4c:	f100 0714 	add.w	r7, r0, #20
 800fb50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb54:	1f2e      	subs	r6, r5, #4
 800fb56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f7ff fd48 	bl	800f5f0 <__hi0bits>
 800fb60:	f1c0 0320 	rsb	r3, r0, #32
 800fb64:	280a      	cmp	r0, #10
 800fb66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fbe4 <__b2d+0x9c>
 800fb6a:	600b      	str	r3, [r1, #0]
 800fb6c:	dc14      	bgt.n	800fb98 <__b2d+0x50>
 800fb6e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fb72:	fa24 f10e 	lsr.w	r1, r4, lr
 800fb76:	42b7      	cmp	r7, r6
 800fb78:	ea41 030c 	orr.w	r3, r1, ip
 800fb7c:	bf34      	ite	cc
 800fb7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb82:	2100      	movcs	r1, #0
 800fb84:	3015      	adds	r0, #21
 800fb86:	fa04 f000 	lsl.w	r0, r4, r0
 800fb8a:	fa21 f10e 	lsr.w	r1, r1, lr
 800fb8e:	ea40 0201 	orr.w	r2, r0, r1
 800fb92:	ec43 2b10 	vmov	d0, r2, r3
 800fb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb98:	42b7      	cmp	r7, r6
 800fb9a:	bf3a      	itte	cc
 800fb9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fba0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fba4:	2100      	movcs	r1, #0
 800fba6:	380b      	subs	r0, #11
 800fba8:	d017      	beq.n	800fbda <__b2d+0x92>
 800fbaa:	f1c0 0c20 	rsb	ip, r0, #32
 800fbae:	fa04 f500 	lsl.w	r5, r4, r0
 800fbb2:	42be      	cmp	r6, r7
 800fbb4:	fa21 f40c 	lsr.w	r4, r1, ip
 800fbb8:	ea45 0504 	orr.w	r5, r5, r4
 800fbbc:	bf8c      	ite	hi
 800fbbe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fbc2:	2400      	movls	r4, #0
 800fbc4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fbc8:	fa01 f000 	lsl.w	r0, r1, r0
 800fbcc:	fa24 f40c 	lsr.w	r4, r4, ip
 800fbd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fbd4:	ea40 0204 	orr.w	r2, r0, r4
 800fbd8:	e7db      	b.n	800fb92 <__b2d+0x4a>
 800fbda:	ea44 030c 	orr.w	r3, r4, ip
 800fbde:	460a      	mov	r2, r1
 800fbe0:	e7d7      	b.n	800fb92 <__b2d+0x4a>
 800fbe2:	bf00      	nop
 800fbe4:	3ff00000 	.word	0x3ff00000

0800fbe8 <__d2b>:
 800fbe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbec:	4689      	mov	r9, r1
 800fbee:	2101      	movs	r1, #1
 800fbf0:	ec57 6b10 	vmov	r6, r7, d0
 800fbf4:	4690      	mov	r8, r2
 800fbf6:	f7ff fc09 	bl	800f40c <_Balloc>
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	b930      	cbnz	r0, 800fc0c <__d2b+0x24>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	4b25      	ldr	r3, [pc, #148]	; (800fc98 <__d2b+0xb0>)
 800fc02:	4826      	ldr	r0, [pc, #152]	; (800fc9c <__d2b+0xb4>)
 800fc04:	f240 310a 	movw	r1, #778	; 0x30a
 800fc08:	f000 fbf8 	bl	80103fc <__assert_func>
 800fc0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc14:	bb35      	cbnz	r5, 800fc64 <__d2b+0x7c>
 800fc16:	2e00      	cmp	r6, #0
 800fc18:	9301      	str	r3, [sp, #4]
 800fc1a:	d028      	beq.n	800fc6e <__d2b+0x86>
 800fc1c:	4668      	mov	r0, sp
 800fc1e:	9600      	str	r6, [sp, #0]
 800fc20:	f7ff fd06 	bl	800f630 <__lo0bits>
 800fc24:	9900      	ldr	r1, [sp, #0]
 800fc26:	b300      	cbz	r0, 800fc6a <__d2b+0x82>
 800fc28:	9a01      	ldr	r2, [sp, #4]
 800fc2a:	f1c0 0320 	rsb	r3, r0, #32
 800fc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc32:	430b      	orrs	r3, r1
 800fc34:	40c2      	lsrs	r2, r0
 800fc36:	6163      	str	r3, [r4, #20]
 800fc38:	9201      	str	r2, [sp, #4]
 800fc3a:	9b01      	ldr	r3, [sp, #4]
 800fc3c:	61a3      	str	r3, [r4, #24]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	bf14      	ite	ne
 800fc42:	2202      	movne	r2, #2
 800fc44:	2201      	moveq	r2, #1
 800fc46:	6122      	str	r2, [r4, #16]
 800fc48:	b1d5      	cbz	r5, 800fc80 <__d2b+0x98>
 800fc4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc4e:	4405      	add	r5, r0
 800fc50:	f8c9 5000 	str.w	r5, [r9]
 800fc54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc58:	f8c8 0000 	str.w	r0, [r8]
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	b003      	add	sp, #12
 800fc60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc68:	e7d5      	b.n	800fc16 <__d2b+0x2e>
 800fc6a:	6161      	str	r1, [r4, #20]
 800fc6c:	e7e5      	b.n	800fc3a <__d2b+0x52>
 800fc6e:	a801      	add	r0, sp, #4
 800fc70:	f7ff fcde 	bl	800f630 <__lo0bits>
 800fc74:	9b01      	ldr	r3, [sp, #4]
 800fc76:	6163      	str	r3, [r4, #20]
 800fc78:	2201      	movs	r2, #1
 800fc7a:	6122      	str	r2, [r4, #16]
 800fc7c:	3020      	adds	r0, #32
 800fc7e:	e7e3      	b.n	800fc48 <__d2b+0x60>
 800fc80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc88:	f8c9 0000 	str.w	r0, [r9]
 800fc8c:	6918      	ldr	r0, [r3, #16]
 800fc8e:	f7ff fcaf 	bl	800f5f0 <__hi0bits>
 800fc92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc96:	e7df      	b.n	800fc58 <__d2b+0x70>
 800fc98:	080109f0 	.word	0x080109f0
 800fc9c:	08010ae0 	.word	0x08010ae0

0800fca0 <__ratio>:
 800fca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	4688      	mov	r8, r1
 800fca6:	4669      	mov	r1, sp
 800fca8:	4681      	mov	r9, r0
 800fcaa:	f7ff ff4d 	bl	800fb48 <__b2d>
 800fcae:	a901      	add	r1, sp, #4
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	ec55 4b10 	vmov	r4, r5, d0
 800fcb6:	f7ff ff47 	bl	800fb48 <__b2d>
 800fcba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fcc2:	eba3 0c02 	sub.w	ip, r3, r2
 800fcc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcca:	1a9b      	subs	r3, r3, r2
 800fccc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fcd0:	ec51 0b10 	vmov	r0, r1, d0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	bfd6      	itet	le
 800fcd8:	460a      	movle	r2, r1
 800fcda:	462a      	movgt	r2, r5
 800fcdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fce0:	468b      	mov	fp, r1
 800fce2:	462f      	mov	r7, r5
 800fce4:	bfd4      	ite	le
 800fce6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fcea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fcee:	4620      	mov	r0, r4
 800fcf0:	ee10 2a10 	vmov	r2, s0
 800fcf4:	465b      	mov	r3, fp
 800fcf6:	4639      	mov	r1, r7
 800fcf8:	f7f0 fda8 	bl	800084c <__aeabi_ddiv>
 800fcfc:	ec41 0b10 	vmov	d0, r0, r1
 800fd00:	b003      	add	sp, #12
 800fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd06 <__copybits>:
 800fd06:	3901      	subs	r1, #1
 800fd08:	b570      	push	{r4, r5, r6, lr}
 800fd0a:	1149      	asrs	r1, r1, #5
 800fd0c:	6914      	ldr	r4, [r2, #16]
 800fd0e:	3101      	adds	r1, #1
 800fd10:	f102 0314 	add.w	r3, r2, #20
 800fd14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd1c:	1f05      	subs	r5, r0, #4
 800fd1e:	42a3      	cmp	r3, r4
 800fd20:	d30c      	bcc.n	800fd3c <__copybits+0x36>
 800fd22:	1aa3      	subs	r3, r4, r2
 800fd24:	3b11      	subs	r3, #17
 800fd26:	f023 0303 	bic.w	r3, r3, #3
 800fd2a:	3211      	adds	r2, #17
 800fd2c:	42a2      	cmp	r2, r4
 800fd2e:	bf88      	it	hi
 800fd30:	2300      	movhi	r3, #0
 800fd32:	4418      	add	r0, r3
 800fd34:	2300      	movs	r3, #0
 800fd36:	4288      	cmp	r0, r1
 800fd38:	d305      	bcc.n	800fd46 <__copybits+0x40>
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}
 800fd3c:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd40:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd44:	e7eb      	b.n	800fd1e <__copybits+0x18>
 800fd46:	f840 3b04 	str.w	r3, [r0], #4
 800fd4a:	e7f4      	b.n	800fd36 <__copybits+0x30>

0800fd4c <__any_on>:
 800fd4c:	f100 0214 	add.w	r2, r0, #20
 800fd50:	6900      	ldr	r0, [r0, #16]
 800fd52:	114b      	asrs	r3, r1, #5
 800fd54:	4298      	cmp	r0, r3
 800fd56:	b510      	push	{r4, lr}
 800fd58:	db11      	blt.n	800fd7e <__any_on+0x32>
 800fd5a:	dd0a      	ble.n	800fd72 <__any_on+0x26>
 800fd5c:	f011 011f 	ands.w	r1, r1, #31
 800fd60:	d007      	beq.n	800fd72 <__any_on+0x26>
 800fd62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd66:	fa24 f001 	lsr.w	r0, r4, r1
 800fd6a:	fa00 f101 	lsl.w	r1, r0, r1
 800fd6e:	428c      	cmp	r4, r1
 800fd70:	d10b      	bne.n	800fd8a <__any_on+0x3e>
 800fd72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d803      	bhi.n	800fd82 <__any_on+0x36>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	4603      	mov	r3, r0
 800fd80:	e7f7      	b.n	800fd72 <__any_on+0x26>
 800fd82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd86:	2900      	cmp	r1, #0
 800fd88:	d0f5      	beq.n	800fd76 <__any_on+0x2a>
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	e7f6      	b.n	800fd7c <__any_on+0x30>

0800fd8e <_calloc_r>:
 800fd8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd90:	fba1 2402 	umull	r2, r4, r1, r2
 800fd94:	b94c      	cbnz	r4, 800fdaa <_calloc_r+0x1c>
 800fd96:	4611      	mov	r1, r2
 800fd98:	9201      	str	r2, [sp, #4]
 800fd9a:	f7fb ffa3 	bl	800bce4 <_malloc_r>
 800fd9e:	9a01      	ldr	r2, [sp, #4]
 800fda0:	4605      	mov	r5, r0
 800fda2:	b930      	cbnz	r0, 800fdb2 <_calloc_r+0x24>
 800fda4:	4628      	mov	r0, r5
 800fda6:	b003      	add	sp, #12
 800fda8:	bd30      	pop	{r4, r5, pc}
 800fdaa:	220c      	movs	r2, #12
 800fdac:	6002      	str	r2, [r0, #0]
 800fdae:	2500      	movs	r5, #0
 800fdb0:	e7f8      	b.n	800fda4 <_calloc_r+0x16>
 800fdb2:	4621      	mov	r1, r4
 800fdb4:	f7fb ff22 	bl	800bbfc <memset>
 800fdb8:	e7f4      	b.n	800fda4 <_calloc_r+0x16>

0800fdba <__ssputs_r>:
 800fdba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdbe:	688e      	ldr	r6, [r1, #8]
 800fdc0:	429e      	cmp	r6, r3
 800fdc2:	4682      	mov	sl, r0
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	4690      	mov	r8, r2
 800fdc8:	461f      	mov	r7, r3
 800fdca:	d838      	bhi.n	800fe3e <__ssputs_r+0x84>
 800fdcc:	898a      	ldrh	r2, [r1, #12]
 800fdce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdd2:	d032      	beq.n	800fe3a <__ssputs_r+0x80>
 800fdd4:	6825      	ldr	r5, [r4, #0]
 800fdd6:	6909      	ldr	r1, [r1, #16]
 800fdd8:	eba5 0901 	sub.w	r9, r5, r1
 800fddc:	6965      	ldr	r5, [r4, #20]
 800fdde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fde2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fde6:	3301      	adds	r3, #1
 800fde8:	444b      	add	r3, r9
 800fdea:	106d      	asrs	r5, r5, #1
 800fdec:	429d      	cmp	r5, r3
 800fdee:	bf38      	it	cc
 800fdf0:	461d      	movcc	r5, r3
 800fdf2:	0553      	lsls	r3, r2, #21
 800fdf4:	d531      	bpl.n	800fe5a <__ssputs_r+0xa0>
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	f7fb ff74 	bl	800bce4 <_malloc_r>
 800fdfc:	4606      	mov	r6, r0
 800fdfe:	b950      	cbnz	r0, 800fe16 <__ssputs_r+0x5c>
 800fe00:	230c      	movs	r3, #12
 800fe02:	f8ca 3000 	str.w	r3, [sl]
 800fe06:	89a3      	ldrh	r3, [r4, #12]
 800fe08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe0c:	81a3      	strh	r3, [r4, #12]
 800fe0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe16:	6921      	ldr	r1, [r4, #16]
 800fe18:	464a      	mov	r2, r9
 800fe1a:	f7fb fee1 	bl	800bbe0 <memcpy>
 800fe1e:	89a3      	ldrh	r3, [r4, #12]
 800fe20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe28:	81a3      	strh	r3, [r4, #12]
 800fe2a:	6126      	str	r6, [r4, #16]
 800fe2c:	6165      	str	r5, [r4, #20]
 800fe2e:	444e      	add	r6, r9
 800fe30:	eba5 0509 	sub.w	r5, r5, r9
 800fe34:	6026      	str	r6, [r4, #0]
 800fe36:	60a5      	str	r5, [r4, #8]
 800fe38:	463e      	mov	r6, r7
 800fe3a:	42be      	cmp	r6, r7
 800fe3c:	d900      	bls.n	800fe40 <__ssputs_r+0x86>
 800fe3e:	463e      	mov	r6, r7
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	4632      	mov	r2, r6
 800fe44:	4641      	mov	r1, r8
 800fe46:	f000 fb4d 	bl	80104e4 <memmove>
 800fe4a:	68a3      	ldr	r3, [r4, #8]
 800fe4c:	1b9b      	subs	r3, r3, r6
 800fe4e:	60a3      	str	r3, [r4, #8]
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	4433      	add	r3, r6
 800fe54:	6023      	str	r3, [r4, #0]
 800fe56:	2000      	movs	r0, #0
 800fe58:	e7db      	b.n	800fe12 <__ssputs_r+0x58>
 800fe5a:	462a      	mov	r2, r5
 800fe5c:	f000 fb5c 	bl	8010518 <_realloc_r>
 800fe60:	4606      	mov	r6, r0
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d1e1      	bne.n	800fe2a <__ssputs_r+0x70>
 800fe66:	6921      	ldr	r1, [r4, #16]
 800fe68:	4650      	mov	r0, sl
 800fe6a:	f7fb fecf 	bl	800bc0c <_free_r>
 800fe6e:	e7c7      	b.n	800fe00 <__ssputs_r+0x46>

0800fe70 <_svfiprintf_r>:
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	4698      	mov	r8, r3
 800fe76:	898b      	ldrh	r3, [r1, #12]
 800fe78:	061b      	lsls	r3, r3, #24
 800fe7a:	b09d      	sub	sp, #116	; 0x74
 800fe7c:	4607      	mov	r7, r0
 800fe7e:	460d      	mov	r5, r1
 800fe80:	4614      	mov	r4, r2
 800fe82:	d50e      	bpl.n	800fea2 <_svfiprintf_r+0x32>
 800fe84:	690b      	ldr	r3, [r1, #16]
 800fe86:	b963      	cbnz	r3, 800fea2 <_svfiprintf_r+0x32>
 800fe88:	2140      	movs	r1, #64	; 0x40
 800fe8a:	f7fb ff2b 	bl	800bce4 <_malloc_r>
 800fe8e:	6028      	str	r0, [r5, #0]
 800fe90:	6128      	str	r0, [r5, #16]
 800fe92:	b920      	cbnz	r0, 800fe9e <_svfiprintf_r+0x2e>
 800fe94:	230c      	movs	r3, #12
 800fe96:	603b      	str	r3, [r7, #0]
 800fe98:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9c:	e0d1      	b.n	8010042 <_svfiprintf_r+0x1d2>
 800fe9e:	2340      	movs	r3, #64	; 0x40
 800fea0:	616b      	str	r3, [r5, #20]
 800fea2:	2300      	movs	r3, #0
 800fea4:	9309      	str	r3, [sp, #36]	; 0x24
 800fea6:	2320      	movs	r3, #32
 800fea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feac:	f8cd 800c 	str.w	r8, [sp, #12]
 800feb0:	2330      	movs	r3, #48	; 0x30
 800feb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801005c <_svfiprintf_r+0x1ec>
 800feb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feba:	f04f 0901 	mov.w	r9, #1
 800febe:	4623      	mov	r3, r4
 800fec0:	469a      	mov	sl, r3
 800fec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fec6:	b10a      	cbz	r2, 800fecc <_svfiprintf_r+0x5c>
 800fec8:	2a25      	cmp	r2, #37	; 0x25
 800feca:	d1f9      	bne.n	800fec0 <_svfiprintf_r+0x50>
 800fecc:	ebba 0b04 	subs.w	fp, sl, r4
 800fed0:	d00b      	beq.n	800feea <_svfiprintf_r+0x7a>
 800fed2:	465b      	mov	r3, fp
 800fed4:	4622      	mov	r2, r4
 800fed6:	4629      	mov	r1, r5
 800fed8:	4638      	mov	r0, r7
 800feda:	f7ff ff6e 	bl	800fdba <__ssputs_r>
 800fede:	3001      	adds	r0, #1
 800fee0:	f000 80aa 	beq.w	8010038 <_svfiprintf_r+0x1c8>
 800fee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fee6:	445a      	add	r2, fp
 800fee8:	9209      	str	r2, [sp, #36]	; 0x24
 800feea:	f89a 3000 	ldrb.w	r3, [sl]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 80a2 	beq.w	8010038 <_svfiprintf_r+0x1c8>
 800fef4:	2300      	movs	r3, #0
 800fef6:	f04f 32ff 	mov.w	r2, #4294967295
 800fefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fefe:	f10a 0a01 	add.w	sl, sl, #1
 800ff02:	9304      	str	r3, [sp, #16]
 800ff04:	9307      	str	r3, [sp, #28]
 800ff06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ff0c:	4654      	mov	r4, sl
 800ff0e:	2205      	movs	r2, #5
 800ff10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff14:	4851      	ldr	r0, [pc, #324]	; (801005c <_svfiprintf_r+0x1ec>)
 800ff16:	f7f0 f963 	bl	80001e0 <memchr>
 800ff1a:	9a04      	ldr	r2, [sp, #16]
 800ff1c:	b9d8      	cbnz	r0, 800ff56 <_svfiprintf_r+0xe6>
 800ff1e:	06d0      	lsls	r0, r2, #27
 800ff20:	bf44      	itt	mi
 800ff22:	2320      	movmi	r3, #32
 800ff24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff28:	0711      	lsls	r1, r2, #28
 800ff2a:	bf44      	itt	mi
 800ff2c:	232b      	movmi	r3, #43	; 0x2b
 800ff2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff32:	f89a 3000 	ldrb.w	r3, [sl]
 800ff36:	2b2a      	cmp	r3, #42	; 0x2a
 800ff38:	d015      	beq.n	800ff66 <_svfiprintf_r+0xf6>
 800ff3a:	9a07      	ldr	r2, [sp, #28]
 800ff3c:	4654      	mov	r4, sl
 800ff3e:	2000      	movs	r0, #0
 800ff40:	f04f 0c0a 	mov.w	ip, #10
 800ff44:	4621      	mov	r1, r4
 800ff46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff4a:	3b30      	subs	r3, #48	; 0x30
 800ff4c:	2b09      	cmp	r3, #9
 800ff4e:	d94e      	bls.n	800ffee <_svfiprintf_r+0x17e>
 800ff50:	b1b0      	cbz	r0, 800ff80 <_svfiprintf_r+0x110>
 800ff52:	9207      	str	r2, [sp, #28]
 800ff54:	e014      	b.n	800ff80 <_svfiprintf_r+0x110>
 800ff56:	eba0 0308 	sub.w	r3, r0, r8
 800ff5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	9304      	str	r3, [sp, #16]
 800ff62:	46a2      	mov	sl, r4
 800ff64:	e7d2      	b.n	800ff0c <_svfiprintf_r+0x9c>
 800ff66:	9b03      	ldr	r3, [sp, #12]
 800ff68:	1d19      	adds	r1, r3, #4
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	9103      	str	r1, [sp, #12]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	bfbb      	ittet	lt
 800ff72:	425b      	neglt	r3, r3
 800ff74:	f042 0202 	orrlt.w	r2, r2, #2
 800ff78:	9307      	strge	r3, [sp, #28]
 800ff7a:	9307      	strlt	r3, [sp, #28]
 800ff7c:	bfb8      	it	lt
 800ff7e:	9204      	strlt	r2, [sp, #16]
 800ff80:	7823      	ldrb	r3, [r4, #0]
 800ff82:	2b2e      	cmp	r3, #46	; 0x2e
 800ff84:	d10c      	bne.n	800ffa0 <_svfiprintf_r+0x130>
 800ff86:	7863      	ldrb	r3, [r4, #1]
 800ff88:	2b2a      	cmp	r3, #42	; 0x2a
 800ff8a:	d135      	bne.n	800fff8 <_svfiprintf_r+0x188>
 800ff8c:	9b03      	ldr	r3, [sp, #12]
 800ff8e:	1d1a      	adds	r2, r3, #4
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	9203      	str	r2, [sp, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	bfb8      	it	lt
 800ff98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff9c:	3402      	adds	r4, #2
 800ff9e:	9305      	str	r3, [sp, #20]
 800ffa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801006c <_svfiprintf_r+0x1fc>
 800ffa4:	7821      	ldrb	r1, [r4, #0]
 800ffa6:	2203      	movs	r2, #3
 800ffa8:	4650      	mov	r0, sl
 800ffaa:	f7f0 f919 	bl	80001e0 <memchr>
 800ffae:	b140      	cbz	r0, 800ffc2 <_svfiprintf_r+0x152>
 800ffb0:	2340      	movs	r3, #64	; 0x40
 800ffb2:	eba0 000a 	sub.w	r0, r0, sl
 800ffb6:	fa03 f000 	lsl.w	r0, r3, r0
 800ffba:	9b04      	ldr	r3, [sp, #16]
 800ffbc:	4303      	orrs	r3, r0
 800ffbe:	3401      	adds	r4, #1
 800ffc0:	9304      	str	r3, [sp, #16]
 800ffc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc6:	4826      	ldr	r0, [pc, #152]	; (8010060 <_svfiprintf_r+0x1f0>)
 800ffc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffcc:	2206      	movs	r2, #6
 800ffce:	f7f0 f907 	bl	80001e0 <memchr>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d038      	beq.n	8010048 <_svfiprintf_r+0x1d8>
 800ffd6:	4b23      	ldr	r3, [pc, #140]	; (8010064 <_svfiprintf_r+0x1f4>)
 800ffd8:	bb1b      	cbnz	r3, 8010022 <_svfiprintf_r+0x1b2>
 800ffda:	9b03      	ldr	r3, [sp, #12]
 800ffdc:	3307      	adds	r3, #7
 800ffde:	f023 0307 	bic.w	r3, r3, #7
 800ffe2:	3308      	adds	r3, #8
 800ffe4:	9303      	str	r3, [sp, #12]
 800ffe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe8:	4433      	add	r3, r6
 800ffea:	9309      	str	r3, [sp, #36]	; 0x24
 800ffec:	e767      	b.n	800febe <_svfiprintf_r+0x4e>
 800ffee:	fb0c 3202 	mla	r2, ip, r2, r3
 800fff2:	460c      	mov	r4, r1
 800fff4:	2001      	movs	r0, #1
 800fff6:	e7a5      	b.n	800ff44 <_svfiprintf_r+0xd4>
 800fff8:	2300      	movs	r3, #0
 800fffa:	3401      	adds	r4, #1
 800fffc:	9305      	str	r3, [sp, #20]
 800fffe:	4619      	mov	r1, r3
 8010000:	f04f 0c0a 	mov.w	ip, #10
 8010004:	4620      	mov	r0, r4
 8010006:	f810 2b01 	ldrb.w	r2, [r0], #1
 801000a:	3a30      	subs	r2, #48	; 0x30
 801000c:	2a09      	cmp	r2, #9
 801000e:	d903      	bls.n	8010018 <_svfiprintf_r+0x1a8>
 8010010:	2b00      	cmp	r3, #0
 8010012:	d0c5      	beq.n	800ffa0 <_svfiprintf_r+0x130>
 8010014:	9105      	str	r1, [sp, #20]
 8010016:	e7c3      	b.n	800ffa0 <_svfiprintf_r+0x130>
 8010018:	fb0c 2101 	mla	r1, ip, r1, r2
 801001c:	4604      	mov	r4, r0
 801001e:	2301      	movs	r3, #1
 8010020:	e7f0      	b.n	8010004 <_svfiprintf_r+0x194>
 8010022:	ab03      	add	r3, sp, #12
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	462a      	mov	r2, r5
 8010028:	4b0f      	ldr	r3, [pc, #60]	; (8010068 <_svfiprintf_r+0x1f8>)
 801002a:	a904      	add	r1, sp, #16
 801002c:	4638      	mov	r0, r7
 801002e:	f7fb ff6d 	bl	800bf0c <_printf_float>
 8010032:	1c42      	adds	r2, r0, #1
 8010034:	4606      	mov	r6, r0
 8010036:	d1d6      	bne.n	800ffe6 <_svfiprintf_r+0x176>
 8010038:	89ab      	ldrh	r3, [r5, #12]
 801003a:	065b      	lsls	r3, r3, #25
 801003c:	f53f af2c 	bmi.w	800fe98 <_svfiprintf_r+0x28>
 8010040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010042:	b01d      	add	sp, #116	; 0x74
 8010044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010048:	ab03      	add	r3, sp, #12
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	462a      	mov	r2, r5
 801004e:	4b06      	ldr	r3, [pc, #24]	; (8010068 <_svfiprintf_r+0x1f8>)
 8010050:	a904      	add	r1, sp, #16
 8010052:	4638      	mov	r0, r7
 8010054:	f7fc f9fe 	bl	800c454 <_printf_i>
 8010058:	e7eb      	b.n	8010032 <_svfiprintf_r+0x1c2>
 801005a:	bf00      	nop
 801005c:	08010c3c 	.word	0x08010c3c
 8010060:	08010c46 	.word	0x08010c46
 8010064:	0800bf0d 	.word	0x0800bf0d
 8010068:	0800fdbb 	.word	0x0800fdbb
 801006c:	08010c42 	.word	0x08010c42

08010070 <__sfputc_r>:
 8010070:	6893      	ldr	r3, [r2, #8]
 8010072:	3b01      	subs	r3, #1
 8010074:	2b00      	cmp	r3, #0
 8010076:	b410      	push	{r4}
 8010078:	6093      	str	r3, [r2, #8]
 801007a:	da08      	bge.n	801008e <__sfputc_r+0x1e>
 801007c:	6994      	ldr	r4, [r2, #24]
 801007e:	42a3      	cmp	r3, r4
 8010080:	db01      	blt.n	8010086 <__sfputc_r+0x16>
 8010082:	290a      	cmp	r1, #10
 8010084:	d103      	bne.n	801008e <__sfputc_r+0x1e>
 8010086:	f85d 4b04 	ldr.w	r4, [sp], #4
 801008a:	f7fd bcd5 	b.w	800da38 <__swbuf_r>
 801008e:	6813      	ldr	r3, [r2, #0]
 8010090:	1c58      	adds	r0, r3, #1
 8010092:	6010      	str	r0, [r2, #0]
 8010094:	7019      	strb	r1, [r3, #0]
 8010096:	4608      	mov	r0, r1
 8010098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801009c:	4770      	bx	lr

0801009e <__sfputs_r>:
 801009e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a0:	4606      	mov	r6, r0
 80100a2:	460f      	mov	r7, r1
 80100a4:	4614      	mov	r4, r2
 80100a6:	18d5      	adds	r5, r2, r3
 80100a8:	42ac      	cmp	r4, r5
 80100aa:	d101      	bne.n	80100b0 <__sfputs_r+0x12>
 80100ac:	2000      	movs	r0, #0
 80100ae:	e007      	b.n	80100c0 <__sfputs_r+0x22>
 80100b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b4:	463a      	mov	r2, r7
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7ff ffda 	bl	8010070 <__sfputc_r>
 80100bc:	1c43      	adds	r3, r0, #1
 80100be:	d1f3      	bne.n	80100a8 <__sfputs_r+0xa>
 80100c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100c4 <_vfiprintf_r>:
 80100c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c8:	460d      	mov	r5, r1
 80100ca:	b09d      	sub	sp, #116	; 0x74
 80100cc:	4614      	mov	r4, r2
 80100ce:	4698      	mov	r8, r3
 80100d0:	4606      	mov	r6, r0
 80100d2:	b118      	cbz	r0, 80100dc <_vfiprintf_r+0x18>
 80100d4:	6983      	ldr	r3, [r0, #24]
 80100d6:	b90b      	cbnz	r3, 80100dc <_vfiprintf_r+0x18>
 80100d8:	f7fe fd02 	bl	800eae0 <__sinit>
 80100dc:	4b89      	ldr	r3, [pc, #548]	; (8010304 <_vfiprintf_r+0x240>)
 80100de:	429d      	cmp	r5, r3
 80100e0:	d11b      	bne.n	801011a <_vfiprintf_r+0x56>
 80100e2:	6875      	ldr	r5, [r6, #4]
 80100e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100e6:	07d9      	lsls	r1, r3, #31
 80100e8:	d405      	bmi.n	80100f6 <_vfiprintf_r+0x32>
 80100ea:	89ab      	ldrh	r3, [r5, #12]
 80100ec:	059a      	lsls	r2, r3, #22
 80100ee:	d402      	bmi.n	80100f6 <_vfiprintf_r+0x32>
 80100f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100f2:	f7ff f906 	bl	800f302 <__retarget_lock_acquire_recursive>
 80100f6:	89ab      	ldrh	r3, [r5, #12]
 80100f8:	071b      	lsls	r3, r3, #28
 80100fa:	d501      	bpl.n	8010100 <_vfiprintf_r+0x3c>
 80100fc:	692b      	ldr	r3, [r5, #16]
 80100fe:	b9eb      	cbnz	r3, 801013c <_vfiprintf_r+0x78>
 8010100:	4629      	mov	r1, r5
 8010102:	4630      	mov	r0, r6
 8010104:	f7fd fcea 	bl	800dadc <__swsetup_r>
 8010108:	b1c0      	cbz	r0, 801013c <_vfiprintf_r+0x78>
 801010a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801010c:	07dc      	lsls	r4, r3, #31
 801010e:	d50e      	bpl.n	801012e <_vfiprintf_r+0x6a>
 8010110:	f04f 30ff 	mov.w	r0, #4294967295
 8010114:	b01d      	add	sp, #116	; 0x74
 8010116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011a:	4b7b      	ldr	r3, [pc, #492]	; (8010308 <_vfiprintf_r+0x244>)
 801011c:	429d      	cmp	r5, r3
 801011e:	d101      	bne.n	8010124 <_vfiprintf_r+0x60>
 8010120:	68b5      	ldr	r5, [r6, #8]
 8010122:	e7df      	b.n	80100e4 <_vfiprintf_r+0x20>
 8010124:	4b79      	ldr	r3, [pc, #484]	; (801030c <_vfiprintf_r+0x248>)
 8010126:	429d      	cmp	r5, r3
 8010128:	bf08      	it	eq
 801012a:	68f5      	ldreq	r5, [r6, #12]
 801012c:	e7da      	b.n	80100e4 <_vfiprintf_r+0x20>
 801012e:	89ab      	ldrh	r3, [r5, #12]
 8010130:	0598      	lsls	r0, r3, #22
 8010132:	d4ed      	bmi.n	8010110 <_vfiprintf_r+0x4c>
 8010134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010136:	f7ff f8e5 	bl	800f304 <__retarget_lock_release_recursive>
 801013a:	e7e9      	b.n	8010110 <_vfiprintf_r+0x4c>
 801013c:	2300      	movs	r3, #0
 801013e:	9309      	str	r3, [sp, #36]	; 0x24
 8010140:	2320      	movs	r3, #32
 8010142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010146:	f8cd 800c 	str.w	r8, [sp, #12]
 801014a:	2330      	movs	r3, #48	; 0x30
 801014c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010310 <_vfiprintf_r+0x24c>
 8010150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010154:	f04f 0901 	mov.w	r9, #1
 8010158:	4623      	mov	r3, r4
 801015a:	469a      	mov	sl, r3
 801015c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010160:	b10a      	cbz	r2, 8010166 <_vfiprintf_r+0xa2>
 8010162:	2a25      	cmp	r2, #37	; 0x25
 8010164:	d1f9      	bne.n	801015a <_vfiprintf_r+0x96>
 8010166:	ebba 0b04 	subs.w	fp, sl, r4
 801016a:	d00b      	beq.n	8010184 <_vfiprintf_r+0xc0>
 801016c:	465b      	mov	r3, fp
 801016e:	4622      	mov	r2, r4
 8010170:	4629      	mov	r1, r5
 8010172:	4630      	mov	r0, r6
 8010174:	f7ff ff93 	bl	801009e <__sfputs_r>
 8010178:	3001      	adds	r0, #1
 801017a:	f000 80aa 	beq.w	80102d2 <_vfiprintf_r+0x20e>
 801017e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010180:	445a      	add	r2, fp
 8010182:	9209      	str	r2, [sp, #36]	; 0x24
 8010184:	f89a 3000 	ldrb.w	r3, [sl]
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 80a2 	beq.w	80102d2 <_vfiprintf_r+0x20e>
 801018e:	2300      	movs	r3, #0
 8010190:	f04f 32ff 	mov.w	r2, #4294967295
 8010194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010198:	f10a 0a01 	add.w	sl, sl, #1
 801019c:	9304      	str	r3, [sp, #16]
 801019e:	9307      	str	r3, [sp, #28]
 80101a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101a4:	931a      	str	r3, [sp, #104]	; 0x68
 80101a6:	4654      	mov	r4, sl
 80101a8:	2205      	movs	r2, #5
 80101aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ae:	4858      	ldr	r0, [pc, #352]	; (8010310 <_vfiprintf_r+0x24c>)
 80101b0:	f7f0 f816 	bl	80001e0 <memchr>
 80101b4:	9a04      	ldr	r2, [sp, #16]
 80101b6:	b9d8      	cbnz	r0, 80101f0 <_vfiprintf_r+0x12c>
 80101b8:	06d1      	lsls	r1, r2, #27
 80101ba:	bf44      	itt	mi
 80101bc:	2320      	movmi	r3, #32
 80101be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101c2:	0713      	lsls	r3, r2, #28
 80101c4:	bf44      	itt	mi
 80101c6:	232b      	movmi	r3, #43	; 0x2b
 80101c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101cc:	f89a 3000 	ldrb.w	r3, [sl]
 80101d0:	2b2a      	cmp	r3, #42	; 0x2a
 80101d2:	d015      	beq.n	8010200 <_vfiprintf_r+0x13c>
 80101d4:	9a07      	ldr	r2, [sp, #28]
 80101d6:	4654      	mov	r4, sl
 80101d8:	2000      	movs	r0, #0
 80101da:	f04f 0c0a 	mov.w	ip, #10
 80101de:	4621      	mov	r1, r4
 80101e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e4:	3b30      	subs	r3, #48	; 0x30
 80101e6:	2b09      	cmp	r3, #9
 80101e8:	d94e      	bls.n	8010288 <_vfiprintf_r+0x1c4>
 80101ea:	b1b0      	cbz	r0, 801021a <_vfiprintf_r+0x156>
 80101ec:	9207      	str	r2, [sp, #28]
 80101ee:	e014      	b.n	801021a <_vfiprintf_r+0x156>
 80101f0:	eba0 0308 	sub.w	r3, r0, r8
 80101f4:	fa09 f303 	lsl.w	r3, r9, r3
 80101f8:	4313      	orrs	r3, r2
 80101fa:	9304      	str	r3, [sp, #16]
 80101fc:	46a2      	mov	sl, r4
 80101fe:	e7d2      	b.n	80101a6 <_vfiprintf_r+0xe2>
 8010200:	9b03      	ldr	r3, [sp, #12]
 8010202:	1d19      	adds	r1, r3, #4
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	9103      	str	r1, [sp, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	bfbb      	ittet	lt
 801020c:	425b      	neglt	r3, r3
 801020e:	f042 0202 	orrlt.w	r2, r2, #2
 8010212:	9307      	strge	r3, [sp, #28]
 8010214:	9307      	strlt	r3, [sp, #28]
 8010216:	bfb8      	it	lt
 8010218:	9204      	strlt	r2, [sp, #16]
 801021a:	7823      	ldrb	r3, [r4, #0]
 801021c:	2b2e      	cmp	r3, #46	; 0x2e
 801021e:	d10c      	bne.n	801023a <_vfiprintf_r+0x176>
 8010220:	7863      	ldrb	r3, [r4, #1]
 8010222:	2b2a      	cmp	r3, #42	; 0x2a
 8010224:	d135      	bne.n	8010292 <_vfiprintf_r+0x1ce>
 8010226:	9b03      	ldr	r3, [sp, #12]
 8010228:	1d1a      	adds	r2, r3, #4
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	9203      	str	r2, [sp, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	bfb8      	it	lt
 8010232:	f04f 33ff 	movlt.w	r3, #4294967295
 8010236:	3402      	adds	r4, #2
 8010238:	9305      	str	r3, [sp, #20]
 801023a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010320 <_vfiprintf_r+0x25c>
 801023e:	7821      	ldrb	r1, [r4, #0]
 8010240:	2203      	movs	r2, #3
 8010242:	4650      	mov	r0, sl
 8010244:	f7ef ffcc 	bl	80001e0 <memchr>
 8010248:	b140      	cbz	r0, 801025c <_vfiprintf_r+0x198>
 801024a:	2340      	movs	r3, #64	; 0x40
 801024c:	eba0 000a 	sub.w	r0, r0, sl
 8010250:	fa03 f000 	lsl.w	r0, r3, r0
 8010254:	9b04      	ldr	r3, [sp, #16]
 8010256:	4303      	orrs	r3, r0
 8010258:	3401      	adds	r4, #1
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010260:	482c      	ldr	r0, [pc, #176]	; (8010314 <_vfiprintf_r+0x250>)
 8010262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010266:	2206      	movs	r2, #6
 8010268:	f7ef ffba 	bl	80001e0 <memchr>
 801026c:	2800      	cmp	r0, #0
 801026e:	d03f      	beq.n	80102f0 <_vfiprintf_r+0x22c>
 8010270:	4b29      	ldr	r3, [pc, #164]	; (8010318 <_vfiprintf_r+0x254>)
 8010272:	bb1b      	cbnz	r3, 80102bc <_vfiprintf_r+0x1f8>
 8010274:	9b03      	ldr	r3, [sp, #12]
 8010276:	3307      	adds	r3, #7
 8010278:	f023 0307 	bic.w	r3, r3, #7
 801027c:	3308      	adds	r3, #8
 801027e:	9303      	str	r3, [sp, #12]
 8010280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010282:	443b      	add	r3, r7
 8010284:	9309      	str	r3, [sp, #36]	; 0x24
 8010286:	e767      	b.n	8010158 <_vfiprintf_r+0x94>
 8010288:	fb0c 3202 	mla	r2, ip, r2, r3
 801028c:	460c      	mov	r4, r1
 801028e:	2001      	movs	r0, #1
 8010290:	e7a5      	b.n	80101de <_vfiprintf_r+0x11a>
 8010292:	2300      	movs	r3, #0
 8010294:	3401      	adds	r4, #1
 8010296:	9305      	str	r3, [sp, #20]
 8010298:	4619      	mov	r1, r3
 801029a:	f04f 0c0a 	mov.w	ip, #10
 801029e:	4620      	mov	r0, r4
 80102a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102a4:	3a30      	subs	r2, #48	; 0x30
 80102a6:	2a09      	cmp	r2, #9
 80102a8:	d903      	bls.n	80102b2 <_vfiprintf_r+0x1ee>
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d0c5      	beq.n	801023a <_vfiprintf_r+0x176>
 80102ae:	9105      	str	r1, [sp, #20]
 80102b0:	e7c3      	b.n	801023a <_vfiprintf_r+0x176>
 80102b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80102b6:	4604      	mov	r4, r0
 80102b8:	2301      	movs	r3, #1
 80102ba:	e7f0      	b.n	801029e <_vfiprintf_r+0x1da>
 80102bc:	ab03      	add	r3, sp, #12
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	462a      	mov	r2, r5
 80102c2:	4b16      	ldr	r3, [pc, #88]	; (801031c <_vfiprintf_r+0x258>)
 80102c4:	a904      	add	r1, sp, #16
 80102c6:	4630      	mov	r0, r6
 80102c8:	f7fb fe20 	bl	800bf0c <_printf_float>
 80102cc:	4607      	mov	r7, r0
 80102ce:	1c78      	adds	r0, r7, #1
 80102d0:	d1d6      	bne.n	8010280 <_vfiprintf_r+0x1bc>
 80102d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102d4:	07d9      	lsls	r1, r3, #31
 80102d6:	d405      	bmi.n	80102e4 <_vfiprintf_r+0x220>
 80102d8:	89ab      	ldrh	r3, [r5, #12]
 80102da:	059a      	lsls	r2, r3, #22
 80102dc:	d402      	bmi.n	80102e4 <_vfiprintf_r+0x220>
 80102de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102e0:	f7ff f810 	bl	800f304 <__retarget_lock_release_recursive>
 80102e4:	89ab      	ldrh	r3, [r5, #12]
 80102e6:	065b      	lsls	r3, r3, #25
 80102e8:	f53f af12 	bmi.w	8010110 <_vfiprintf_r+0x4c>
 80102ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102ee:	e711      	b.n	8010114 <_vfiprintf_r+0x50>
 80102f0:	ab03      	add	r3, sp, #12
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	462a      	mov	r2, r5
 80102f6:	4b09      	ldr	r3, [pc, #36]	; (801031c <_vfiprintf_r+0x258>)
 80102f8:	a904      	add	r1, sp, #16
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7fc f8aa 	bl	800c454 <_printf_i>
 8010300:	e7e4      	b.n	80102cc <_vfiprintf_r+0x208>
 8010302:	bf00      	nop
 8010304:	08010a24 	.word	0x08010a24
 8010308:	08010a44 	.word	0x08010a44
 801030c:	08010a04 	.word	0x08010a04
 8010310:	08010c3c 	.word	0x08010c3c
 8010314:	08010c46 	.word	0x08010c46
 8010318:	0800bf0d 	.word	0x0800bf0d
 801031c:	0801009f 	.word	0x0801009f
 8010320:	08010c42 	.word	0x08010c42
 8010324:	00000000 	.word	0x00000000

08010328 <nan>:
 8010328:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010330 <nan+0x8>
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	00000000 	.word	0x00000000
 8010334:	7ff80000 	.word	0x7ff80000

08010338 <__sread>:
 8010338:	b510      	push	{r4, lr}
 801033a:	460c      	mov	r4, r1
 801033c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010340:	f000 f91a 	bl	8010578 <_read_r>
 8010344:	2800      	cmp	r0, #0
 8010346:	bfab      	itete	ge
 8010348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801034a:	89a3      	ldrhlt	r3, [r4, #12]
 801034c:	181b      	addge	r3, r3, r0
 801034e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010352:	bfac      	ite	ge
 8010354:	6563      	strge	r3, [r4, #84]	; 0x54
 8010356:	81a3      	strhlt	r3, [r4, #12]
 8010358:	bd10      	pop	{r4, pc}

0801035a <__swrite>:
 801035a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035e:	461f      	mov	r7, r3
 8010360:	898b      	ldrh	r3, [r1, #12]
 8010362:	05db      	lsls	r3, r3, #23
 8010364:	4605      	mov	r5, r0
 8010366:	460c      	mov	r4, r1
 8010368:	4616      	mov	r6, r2
 801036a:	d505      	bpl.n	8010378 <__swrite+0x1e>
 801036c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010370:	2302      	movs	r3, #2
 8010372:	2200      	movs	r2, #0
 8010374:	f000 f8a4 	bl	80104c0 <_lseek_r>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801037e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010382:	81a3      	strh	r3, [r4, #12]
 8010384:	4632      	mov	r2, r6
 8010386:	463b      	mov	r3, r7
 8010388:	4628      	mov	r0, r5
 801038a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801038e:	f000 b823 	b.w	80103d8 <_write_r>

08010392 <__sseek>:
 8010392:	b510      	push	{r4, lr}
 8010394:	460c      	mov	r4, r1
 8010396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039a:	f000 f891 	bl	80104c0 <_lseek_r>
 801039e:	1c43      	adds	r3, r0, #1
 80103a0:	89a3      	ldrh	r3, [r4, #12]
 80103a2:	bf15      	itete	ne
 80103a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80103a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103ae:	81a3      	strheq	r3, [r4, #12]
 80103b0:	bf18      	it	ne
 80103b2:	81a3      	strhne	r3, [r4, #12]
 80103b4:	bd10      	pop	{r4, pc}

080103b6 <__sclose>:
 80103b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ba:	f000 b83d 	b.w	8010438 <_close_r>

080103be <__ascii_wctomb>:
 80103be:	b149      	cbz	r1, 80103d4 <__ascii_wctomb+0x16>
 80103c0:	2aff      	cmp	r2, #255	; 0xff
 80103c2:	bf85      	ittet	hi
 80103c4:	238a      	movhi	r3, #138	; 0x8a
 80103c6:	6003      	strhi	r3, [r0, #0]
 80103c8:	700a      	strbls	r2, [r1, #0]
 80103ca:	f04f 30ff 	movhi.w	r0, #4294967295
 80103ce:	bf98      	it	ls
 80103d0:	2001      	movls	r0, #1
 80103d2:	4770      	bx	lr
 80103d4:	4608      	mov	r0, r1
 80103d6:	4770      	bx	lr

080103d8 <_write_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d07      	ldr	r5, [pc, #28]	; (80103f8 <_write_r+0x20>)
 80103dc:	4604      	mov	r4, r0
 80103de:	4608      	mov	r0, r1
 80103e0:	4611      	mov	r1, r2
 80103e2:	2200      	movs	r2, #0
 80103e4:	602a      	str	r2, [r5, #0]
 80103e6:	461a      	mov	r2, r3
 80103e8:	f7f3 f9c5 	bl	8003776 <_write>
 80103ec:	1c43      	adds	r3, r0, #1
 80103ee:	d102      	bne.n	80103f6 <_write_r+0x1e>
 80103f0:	682b      	ldr	r3, [r5, #0]
 80103f2:	b103      	cbz	r3, 80103f6 <_write_r+0x1e>
 80103f4:	6023      	str	r3, [r4, #0]
 80103f6:	bd38      	pop	{r3, r4, r5, pc}
 80103f8:	200134a8 	.word	0x200134a8

080103fc <__assert_func>:
 80103fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103fe:	4614      	mov	r4, r2
 8010400:	461a      	mov	r2, r3
 8010402:	4b09      	ldr	r3, [pc, #36]	; (8010428 <__assert_func+0x2c>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4605      	mov	r5, r0
 8010408:	68d8      	ldr	r0, [r3, #12]
 801040a:	b14c      	cbz	r4, 8010420 <__assert_func+0x24>
 801040c:	4b07      	ldr	r3, [pc, #28]	; (801042c <__assert_func+0x30>)
 801040e:	9100      	str	r1, [sp, #0]
 8010410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010414:	4906      	ldr	r1, [pc, #24]	; (8010430 <__assert_func+0x34>)
 8010416:	462b      	mov	r3, r5
 8010418:	f000 f81e 	bl	8010458 <fiprintf>
 801041c:	f000 f8be 	bl	801059c <abort>
 8010420:	4b04      	ldr	r3, [pc, #16]	; (8010434 <__assert_func+0x38>)
 8010422:	461c      	mov	r4, r3
 8010424:	e7f3      	b.n	801040e <__assert_func+0x12>
 8010426:	bf00      	nop
 8010428:	20000044 	.word	0x20000044
 801042c:	08010c4d 	.word	0x08010c4d
 8010430:	08010c5a 	.word	0x08010c5a
 8010434:	08010c88 	.word	0x08010c88

08010438 <_close_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4d06      	ldr	r5, [pc, #24]	; (8010454 <_close_r+0x1c>)
 801043c:	2300      	movs	r3, #0
 801043e:	4604      	mov	r4, r0
 8010440:	4608      	mov	r0, r1
 8010442:	602b      	str	r3, [r5, #0]
 8010444:	f7f3 f9b3 	bl	80037ae <_close>
 8010448:	1c43      	adds	r3, r0, #1
 801044a:	d102      	bne.n	8010452 <_close_r+0x1a>
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	b103      	cbz	r3, 8010452 <_close_r+0x1a>
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	bd38      	pop	{r3, r4, r5, pc}
 8010454:	200134a8 	.word	0x200134a8

08010458 <fiprintf>:
 8010458:	b40e      	push	{r1, r2, r3}
 801045a:	b503      	push	{r0, r1, lr}
 801045c:	4601      	mov	r1, r0
 801045e:	ab03      	add	r3, sp, #12
 8010460:	4805      	ldr	r0, [pc, #20]	; (8010478 <fiprintf+0x20>)
 8010462:	f853 2b04 	ldr.w	r2, [r3], #4
 8010466:	6800      	ldr	r0, [r0, #0]
 8010468:	9301      	str	r3, [sp, #4]
 801046a:	f7ff fe2b 	bl	80100c4 <_vfiprintf_r>
 801046e:	b002      	add	sp, #8
 8010470:	f85d eb04 	ldr.w	lr, [sp], #4
 8010474:	b003      	add	sp, #12
 8010476:	4770      	bx	lr
 8010478:	20000044 	.word	0x20000044

0801047c <_fstat_r>:
 801047c:	b538      	push	{r3, r4, r5, lr}
 801047e:	4d07      	ldr	r5, [pc, #28]	; (801049c <_fstat_r+0x20>)
 8010480:	2300      	movs	r3, #0
 8010482:	4604      	mov	r4, r0
 8010484:	4608      	mov	r0, r1
 8010486:	4611      	mov	r1, r2
 8010488:	602b      	str	r3, [r5, #0]
 801048a:	f7f3 f99c 	bl	80037c6 <_fstat>
 801048e:	1c43      	adds	r3, r0, #1
 8010490:	d102      	bne.n	8010498 <_fstat_r+0x1c>
 8010492:	682b      	ldr	r3, [r5, #0]
 8010494:	b103      	cbz	r3, 8010498 <_fstat_r+0x1c>
 8010496:	6023      	str	r3, [r4, #0]
 8010498:	bd38      	pop	{r3, r4, r5, pc}
 801049a:	bf00      	nop
 801049c:	200134a8 	.word	0x200134a8

080104a0 <_isatty_r>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	4d06      	ldr	r5, [pc, #24]	; (80104bc <_isatty_r+0x1c>)
 80104a4:	2300      	movs	r3, #0
 80104a6:	4604      	mov	r4, r0
 80104a8:	4608      	mov	r0, r1
 80104aa:	602b      	str	r3, [r5, #0]
 80104ac:	f7f3 f99b 	bl	80037e6 <_isatty>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_isatty_r+0x1a>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_isatty_r+0x1a>
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	200134a8 	.word	0x200134a8

080104c0 <_lseek_r>:
 80104c0:	b538      	push	{r3, r4, r5, lr}
 80104c2:	4d07      	ldr	r5, [pc, #28]	; (80104e0 <_lseek_r+0x20>)
 80104c4:	4604      	mov	r4, r0
 80104c6:	4608      	mov	r0, r1
 80104c8:	4611      	mov	r1, r2
 80104ca:	2200      	movs	r2, #0
 80104cc:	602a      	str	r2, [r5, #0]
 80104ce:	461a      	mov	r2, r3
 80104d0:	f7f3 f994 	bl	80037fc <_lseek>
 80104d4:	1c43      	adds	r3, r0, #1
 80104d6:	d102      	bne.n	80104de <_lseek_r+0x1e>
 80104d8:	682b      	ldr	r3, [r5, #0]
 80104da:	b103      	cbz	r3, 80104de <_lseek_r+0x1e>
 80104dc:	6023      	str	r3, [r4, #0]
 80104de:	bd38      	pop	{r3, r4, r5, pc}
 80104e0:	200134a8 	.word	0x200134a8

080104e4 <memmove>:
 80104e4:	4288      	cmp	r0, r1
 80104e6:	b510      	push	{r4, lr}
 80104e8:	eb01 0402 	add.w	r4, r1, r2
 80104ec:	d902      	bls.n	80104f4 <memmove+0x10>
 80104ee:	4284      	cmp	r4, r0
 80104f0:	4623      	mov	r3, r4
 80104f2:	d807      	bhi.n	8010504 <memmove+0x20>
 80104f4:	1e43      	subs	r3, r0, #1
 80104f6:	42a1      	cmp	r1, r4
 80104f8:	d008      	beq.n	801050c <memmove+0x28>
 80104fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010502:	e7f8      	b.n	80104f6 <memmove+0x12>
 8010504:	4402      	add	r2, r0
 8010506:	4601      	mov	r1, r0
 8010508:	428a      	cmp	r2, r1
 801050a:	d100      	bne.n	801050e <memmove+0x2a>
 801050c:	bd10      	pop	{r4, pc}
 801050e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010516:	e7f7      	b.n	8010508 <memmove+0x24>

08010518 <_realloc_r>:
 8010518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801051c:	4680      	mov	r8, r0
 801051e:	4614      	mov	r4, r2
 8010520:	460e      	mov	r6, r1
 8010522:	b921      	cbnz	r1, 801052e <_realloc_r+0x16>
 8010524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010528:	4611      	mov	r1, r2
 801052a:	f7fb bbdb 	b.w	800bce4 <_malloc_r>
 801052e:	b92a      	cbnz	r2, 801053c <_realloc_r+0x24>
 8010530:	f7fb fb6c 	bl	800bc0c <_free_r>
 8010534:	4625      	mov	r5, r4
 8010536:	4628      	mov	r0, r5
 8010538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801053c:	f000 f835 	bl	80105aa <_malloc_usable_size_r>
 8010540:	4284      	cmp	r4, r0
 8010542:	4607      	mov	r7, r0
 8010544:	d802      	bhi.n	801054c <_realloc_r+0x34>
 8010546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801054a:	d812      	bhi.n	8010572 <_realloc_r+0x5a>
 801054c:	4621      	mov	r1, r4
 801054e:	4640      	mov	r0, r8
 8010550:	f7fb fbc8 	bl	800bce4 <_malloc_r>
 8010554:	4605      	mov	r5, r0
 8010556:	2800      	cmp	r0, #0
 8010558:	d0ed      	beq.n	8010536 <_realloc_r+0x1e>
 801055a:	42bc      	cmp	r4, r7
 801055c:	4622      	mov	r2, r4
 801055e:	4631      	mov	r1, r6
 8010560:	bf28      	it	cs
 8010562:	463a      	movcs	r2, r7
 8010564:	f7fb fb3c 	bl	800bbe0 <memcpy>
 8010568:	4631      	mov	r1, r6
 801056a:	4640      	mov	r0, r8
 801056c:	f7fb fb4e 	bl	800bc0c <_free_r>
 8010570:	e7e1      	b.n	8010536 <_realloc_r+0x1e>
 8010572:	4635      	mov	r5, r6
 8010574:	e7df      	b.n	8010536 <_realloc_r+0x1e>
	...

08010578 <_read_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4d07      	ldr	r5, [pc, #28]	; (8010598 <_read_r+0x20>)
 801057c:	4604      	mov	r4, r0
 801057e:	4608      	mov	r0, r1
 8010580:	4611      	mov	r1, r2
 8010582:	2200      	movs	r2, #0
 8010584:	602a      	str	r2, [r5, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	f7f3 f8d8 	bl	800373c <_read>
 801058c:	1c43      	adds	r3, r0, #1
 801058e:	d102      	bne.n	8010596 <_read_r+0x1e>
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	b103      	cbz	r3, 8010596 <_read_r+0x1e>
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	200134a8 	.word	0x200134a8

0801059c <abort>:
 801059c:	b508      	push	{r3, lr}
 801059e:	2006      	movs	r0, #6
 80105a0:	f000 f834 	bl	801060c <raise>
 80105a4:	2001      	movs	r0, #1
 80105a6:	f7f3 f8bf 	bl	8003728 <_exit>

080105aa <_malloc_usable_size_r>:
 80105aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105ae:	1f18      	subs	r0, r3, #4
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	bfbc      	itt	lt
 80105b4:	580b      	ldrlt	r3, [r1, r0]
 80105b6:	18c0      	addlt	r0, r0, r3
 80105b8:	4770      	bx	lr

080105ba <_raise_r>:
 80105ba:	291f      	cmp	r1, #31
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	4604      	mov	r4, r0
 80105c0:	460d      	mov	r5, r1
 80105c2:	d904      	bls.n	80105ce <_raise_r+0x14>
 80105c4:	2316      	movs	r3, #22
 80105c6:	6003      	str	r3, [r0, #0]
 80105c8:	f04f 30ff 	mov.w	r0, #4294967295
 80105cc:	bd38      	pop	{r3, r4, r5, pc}
 80105ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105d0:	b112      	cbz	r2, 80105d8 <_raise_r+0x1e>
 80105d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105d6:	b94b      	cbnz	r3, 80105ec <_raise_r+0x32>
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 f831 	bl	8010640 <_getpid_r>
 80105de:	462a      	mov	r2, r5
 80105e0:	4601      	mov	r1, r0
 80105e2:	4620      	mov	r0, r4
 80105e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105e8:	f000 b818 	b.w	801061c <_kill_r>
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d00a      	beq.n	8010606 <_raise_r+0x4c>
 80105f0:	1c59      	adds	r1, r3, #1
 80105f2:	d103      	bne.n	80105fc <_raise_r+0x42>
 80105f4:	2316      	movs	r3, #22
 80105f6:	6003      	str	r3, [r0, #0]
 80105f8:	2001      	movs	r0, #1
 80105fa:	e7e7      	b.n	80105cc <_raise_r+0x12>
 80105fc:	2400      	movs	r4, #0
 80105fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010602:	4628      	mov	r0, r5
 8010604:	4798      	blx	r3
 8010606:	2000      	movs	r0, #0
 8010608:	e7e0      	b.n	80105cc <_raise_r+0x12>
	...

0801060c <raise>:
 801060c:	4b02      	ldr	r3, [pc, #8]	; (8010618 <raise+0xc>)
 801060e:	4601      	mov	r1, r0
 8010610:	6818      	ldr	r0, [r3, #0]
 8010612:	f7ff bfd2 	b.w	80105ba <_raise_r>
 8010616:	bf00      	nop
 8010618:	20000044 	.word	0x20000044

0801061c <_kill_r>:
 801061c:	b538      	push	{r3, r4, r5, lr}
 801061e:	4d07      	ldr	r5, [pc, #28]	; (801063c <_kill_r+0x20>)
 8010620:	2300      	movs	r3, #0
 8010622:	4604      	mov	r4, r0
 8010624:	4608      	mov	r0, r1
 8010626:	4611      	mov	r1, r2
 8010628:	602b      	str	r3, [r5, #0]
 801062a:	f7f3 f86d 	bl	8003708 <_kill>
 801062e:	1c43      	adds	r3, r0, #1
 8010630:	d102      	bne.n	8010638 <_kill_r+0x1c>
 8010632:	682b      	ldr	r3, [r5, #0]
 8010634:	b103      	cbz	r3, 8010638 <_kill_r+0x1c>
 8010636:	6023      	str	r3, [r4, #0]
 8010638:	bd38      	pop	{r3, r4, r5, pc}
 801063a:	bf00      	nop
 801063c:	200134a8 	.word	0x200134a8

08010640 <_getpid_r>:
 8010640:	f7f3 b85a 	b.w	80036f8 <_getpid>

08010644 <_init>:
 8010644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010646:	bf00      	nop
 8010648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801064a:	bc08      	pop	{r3}
 801064c:	469e      	mov	lr, r3
 801064e:	4770      	bx	lr

08010650 <_fini>:
 8010650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010652:	bf00      	nop
 8010654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010656:	bc08      	pop	{r3}
 8010658:	469e      	mov	lr, r3
 801065a:	4770      	bx	lr
